import convolution.testImage
import convolution.emboss

def lookup(m, n, image):
  def (m_max, n_max): dims(image)
  if m >= 1 |and| m <= m_max |and| n >= 1 |and| n <= n_max:
    image!(m, n)
  else: 0
#   image!((m - 1 |mod| m_max) + 1, (n - 1 |mod| n_max) + 1)

def matrixSum(matr):
  def (m, n): dims(matr)
  foldl((+), 0, [matr!(i, j) for (i, j) in range((1, 1), (m, n))])

def convolve(image, kernel):
  def (m, n): dims(image)
  def (i, j): dims(kernel)
  def (half_i, half_j): (i |quot| 2, j |quot| 2)
  def area: i * j

  def interMatrix(m_, n_):
   #  @doc(f"""average these values to compute element""")
    [| kernel!(i_, j_) *
       lookup(m_ + i_ - 1 - half_i, n_ + j_ - 1 - half_j, image)
       for (i_, j_) in (i, j) |]

  [| matrixSum(interMatrix(m_, n_)) |quot| area for (m_, n_) in (m, n) |]

convolve(inputImage, filter)
