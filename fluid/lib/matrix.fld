def zero(m, n, image):
  def (m_max, n_max): dims(image);

  if m >= 1 |and| m <= m_max |and| n >= 1 |and| n <= n_max: image ! (m, n)
  else: 0;

def wrap(m, n, image):
  def (m_max, n_max): dims(image);

  image ! (((m - 1) |mod| m_max) + 1, ((n - 1) |mod| n_max) + 1);

def extend(m, n, image):
  def (m_max, n_max): dims(image)
  def m':
    min(max(m, 1), m_max)
  def n':
    min(max(n, 1), n_max);

  image ! (m', n');

def matrixSum(matr):
  def (m, n): dims(matr);

  foldl((+), 0, [matr ! (i, j) for (i, j) in range((1, 1), (m, n))]);

def convolve(image, kernel, lookup):
  def ((m, n), (i, j)):
    (dims(image), dims(kernel))
  def (half_i, half_j):
    (i |quot| 2, j |quot| 2)
  def area: i * j;
  def interMatrix(m', n'):
    @doc("""Intermediate matrix for element ( ${m'} , ${n'} )""")
    [| @doc("""Multiply these two elements""") lookup(((m' + i') - 1) - half_i, ((n' + j') - 1) - half_j, image) * kernel ! (i', j') for (i', j') in (i, j) |];

  [| matrixSum(interMatrix(m', n')) |quot| area for (m', n') in (m, n) |];

def matMul(a, b):
  def ((m, n), (i, j)): (dims(a), dims(b));

  if not(n == i):
    error("Dimensions don't line up")
  else:
    @doc("""Intermediate matrix""") [| sum([a ! (i', k) * b ! (k, j') for k in enumFromTo(1, n)]) for (i', j') in (m, j) |];
