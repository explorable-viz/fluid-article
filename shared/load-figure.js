// output-es/runtime.js
function binding(init5) {
  let state = 0;
  let value;
  return () => {
    if (state === 2) {
      return value;
    }
    if (state === 1) {
      throw new Error("Binding demanded before initialized");
    }
    state = 1;
    value = init5();
    state = 2;
    return value;
  };
}
function fail() {
  throw new Error("Failed pattern match");
}
function intDiv(x2, y2) {
  if (y2 > 0) return Math.floor(x2 / y2);
  if (y2 < 0) return -Math.floor(x2 / -y2);
  return 0;
}

// node_modules/d3-array/src/ascending.js
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a, b) {
  return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x2) => ascending(f(d), x2);
    delta = (d, x2) => f(d) - x2;
  } else {
    compare1 = f === ascending || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left2(a, x2, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x2) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right2(a, x2, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x2) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center2(a, x2, lo = 0, hi = a.length) {
    const i = left2(a, x2, lo, hi - 1);
    return i > lo && delta(a[i - 1], x2) > -delta(a[i], x2) ? i - 1 : i;
  }
  return { left: left2, center: center2, right: right2 };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x2) {
  return x2 === null ? NaN : +x2;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/internmap/src/index.js
var InternMap = class extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
    if (entries != null) for (const [key2, value] of entries) this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
};
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start2, stop, count) {
  const step = (stop - start2) / Math.max(0, count), power = Math.floor(Math.log10(step)), error3 = step / Math.pow(10, power), factor = error3 >= e10 ? 10 : error3 >= e5 ? 5 : error3 >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start2) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start2) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start2, stop, count * 2);
  return [i1, i2, inc];
}
function ticks(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  if (!(count > 0)) return [];
  if (start2 === stop) return [start2];
  const reverse3 = stop < start2, [i1, i2, inc] = reverse3 ? tickSpec(stop, start2, count) : tickSpec(start2, stop, count);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse3) {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) / -inc;
    else for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) * inc;
  } else {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) / -inc;
    else for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) * inc;
  }
  return ticks2;
}
function tickIncrement(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  return tickSpec(start2, stop, count)[2];
}
function tickStep(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  const reverse3 = stop < start2, inc = reverse3 ? tickIncrement(stop, start2, count) : tickIncrement(start2, stop, count);
  return (reverse3 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-array/src/range.js
function range(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range3 = new Array(n);
  while (++i < n) {
    range3[i] = start2 + i * step;
  }
  return range3;
}

// node_modules/d3-axis/src/identity.js
function identity_default(x2) {
  return x2;
}

// node_modules/d3-axis/src/axis.js
var top = 1;
var right = 2;
var bottom = 3;
var left = 4;
var epsilon = 1e-6;
function translateX(x2) {
  return "translate(" + x2 + ",0)";
}
function translateY(y2) {
  return "translate(0," + y2 + ")";
}
function number2(scale) {
  return (d) => +scale(d);
}
function center(scale, offset) {
  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
  if (scale.round()) offset = Math.round(offset);
  return (d) => +scale(d) + offset;
}
function entering() {
  return !this.__axis;
}
function axis(orient, scale) {
  var tickArguments = [], tickValues = null, tickFormat2 = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k = orient === top || orient === left ? -1 : 1, x2 = orient === left || orient === right ? "x" : "y", transform2 = orient === top || orient === bottom ? translateX : translateY;
  function axis2(context2) {
    var values2 = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format3 = tickFormat2 == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity_default : tickFormat2, spacing = Math.max(tickSizeInner, 0) + tickPadding, range3 = scale.range(), range0 = +range3[0] + offset, range1 = +range3[range3.length - 1] + offset, position2 = (scale.bandwidth ? center : number2)(scale.copy(), offset), selection3 = context2.selection ? context2.selection() : context2, path2 = selection3.selectAll(".domain").data([null]), tick = selection3.selectAll(".tick").data(values2, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line2 = tick.select("line"), text = tick.select("text");
    path2 = path2.merge(path2.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line2 = line2.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x2 + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x2, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
    if (context2 !== selection3) {
      path2 = path2.transition(context2);
      tick = tick.transition(context2);
      line2 = line2.transition(context2);
      text = text.transition(context2);
      tickExit = tickExit.transition(context2).attr("opacity", epsilon).attr("transform", function(d) {
        return isFinite(d = position2(d)) ? transform2(d + offset) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
        var p = this.parentNode.__axis;
        return transform2((p && isFinite(p = p(d)) ? p : position2(d)) + offset);
      });
    }
    tickExit.remove();
    path2.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
    tick.attr("opacity", 1).attr("transform", function(d) {
      return transform2(position2(d) + offset);
    });
    line2.attr(x2 + "2", k * tickSizeInner);
    text.attr(x2, k * spacing).text(format3);
    selection3.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection3.each(function() {
      this.__axis = position2;
    });
  }
  axis2.scale = function(_) {
    return arguments.length ? (scale = _, axis2) : scale;
  };
  axis2.ticks = function() {
    return tickArguments = Array.from(arguments), axis2;
  };
  axis2.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis2) : tickArguments.slice();
  };
  axis2.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis2) : tickValues && tickValues.slice();
  };
  axis2.tickFormat = function(_) {
    return arguments.length ? (tickFormat2 = _, axis2) : tickFormat2;
  };
  axis2.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis2) : tickSizeInner;
  };
  axis2.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis2) : tickSizeInner;
  };
  axis2.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis2) : tickSizeOuter;
  };
  axis2.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis2) : tickPadding;
  };
  axis2.offset = function(_) {
    return arguments.length ? (offset = +_, axis2) : offset;
  };
  return axis2;
}
function axisBottom(scale) {
  return axis(bottom, scale);
}
function axisLeft(scale) {
  return axis(left, scale);
}

// node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t2; i < n; ++i) {
    if (!(t2 = arguments[i] + "") || t2 in _ || /[\s.]/.test(t2)) throw new Error("illegal type: " + t2);
    _[t2] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames(typenames, types2) {
  return typenames.trim().split(/^|\s+/).map(function(t2) {
    var name3 = "", i = t2.indexOf(".");
    if (i >= 0) name3 = t2.slice(i + 1), t2 = t2.slice(0, i);
    if (t2 && !types2.hasOwnProperty(t2)) throw new Error("unknown type: " + t2);
    return { type: t2, name: name3 };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames(typename + "", _), t2, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n) if ((t2 = (typename = T[i]).type) && (t2 = get(_[t2], typename.name))) return t2;
      return;
    }
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t2 = (typename = T[i]).type) _[t2] = set(_[t2], typename.name, callback);
      else if (callback == null) for (t2 in _) _[t2] = set(_[t2], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy2 = {}, _ = this._;
    for (var t2 in _) copy2[t2] = _[t2].slice();
    return new Dispatch(copy2);
  },
  call: function(type2, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t2; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type2)) throw new Error("unknown type: " + type2);
    for (t2 = this._[type2], i = 0, n = t2.length; i < n; ++i) t2[i].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2)) throw new Error("unknown type: " + type2);
    for (var t2 = this._[type2], i = 0, n = t2.length; i < n; ++i) t2[i].value.apply(that, args);
  }
};
function get(type2, name3) {
  for (var i = 0, n = type2.length, c; i < n; ++i) {
    if ((c = type2[i]).name === name3) {
      return c.value;
    }
  }
}
function set(type2, name3, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name3) {
      type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null) type2.push({ name: name3, value: callback });
  return type2;
}
var dispatch_default = dispatch;

// node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-selection/src/namespace.js
function namespace_default(name3) {
  var prefix = name3 += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name3.slice(0, i)) !== "xmlns") name3 = name3.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name3 } : name3;
}

// node_modules/d3-selection/src/creator.js
function creatorInherit(name3) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name3) : document2.createElementNS(uri, name3);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name3) {
  var fullname = namespace_default(name3);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector2) {
  return selector2 == null ? none : function() {
    return this.querySelector(selector2);
  };
}

// node_modules/d3-selection/src/selection/select.js
function select_default(select2) {
  if (typeof select2 !== "function") select2 = selector_default(select2);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group3[i]) && (subnode = select2.call(node, node.__data__, i, group3))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/array.js
function array(x2) {
  return x2 == null ? [] : Array.isArray(x2) ? x2 : Array.from(x2);
}

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector2) {
  return selector2 == null ? empty : function() {
    return this.querySelectorAll(selector2);
  };
}

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select2) {
  return function() {
    return array(select2.apply(this, arguments));
  };
}
function selectAll_default(select2) {
  if (typeof select2 === "function") select2 = arrayAll(select2);
  else select2 = selectorAll_default(select2);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, node, i = 0; i < n; ++i) {
      if (node = group3[i]) {
        subgroups.push(select2.call(node, node.__data__, i, group3));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector2) {
  return function() {
    return this.matches(selector2);
  };
}
function childMatcher(selector2) {
  return function(node) {
    return node.matches(selector2);
  };
}

// node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match3) {
  return function() {
    return find.call(this.children, match3);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match3) {
  return this.select(match3 == null ? childFirst : childFind(typeof match3 === "function" ? match3 : childMatcher(match3)));
}

// node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match3) {
  return function() {
    return filter.call(this.children, match3);
  };
}
function selectChildren_default(match3) {
  return this.selectAll(match3 == null ? children : childrenFilter(typeof match3 === "function" ? match3 : childMatcher(match3)));
}

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match3) {
  if (typeof match3 !== "function") match3 = matcher_default(match3);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group3[i]) && match3.call(node, node.__data__, i, group3)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update3) {
  return new Array(update3.length);
}

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum3) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum3;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector2) {
    return this._parent.querySelector(selector2);
  },
  querySelectorAll: function(selector2) {
    return this._parent.querySelectorAll(selector2);
  }
};

// node_modules/d3-selection/src/constant.js
function constant_default(x2) {
  return function() {
    return x2;
  };
}

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group3, enter, update3, exit, data) {
  var i = 0, node, groupLength = group3.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group3[i]) {
      node.__data__ = data[i];
      update3[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group3[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group3, enter, update3, exit, data, key) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group3.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group3[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group3) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update3[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group3[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length) return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function") value = constant_default(value);
  for (var m = groups.length, update3 = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j], group3 = groups[j], groupLength = group3.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update3[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group3, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength) ;
        previous._next = next || null;
      }
    }
  }
  update3 = new Selection(update3, parents);
  update3._enter = enter;
  update3._exit = exit;
  return update3;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update3 = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter) enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update3 = onupdate(update3);
    if (update3) update3 = update3.selection();
  }
  if (onexit == null) exit.remove();
  else onexit(exit);
  return enter && update3 ? enter.merge(update3).order() : update3;
}

// node_modules/d3-selection/src/selection/merge.js
function merge_default(context2) {
  var selection3 = context2.selection ? context2.selection() : context2;
  for (var groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
    for (var group3 = groups[j], i = group3.length - 1, next = group3[i], node; --i >= 0; ) {
      if (node = group3[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare2) {
  if (!compare2) compare2 = ascending2;
  function compareNode(a, b) {
    return a && b ? compare2(a.__data__, b.__data__) : !a - !b;
  }
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group3[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending2(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group3 = groups[j], i = 0, n = group3.length; i < n; ++i) {
      var node = group3[i];
      if (node) return node;
    }
  }
  return null;
}

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size3 = 0;
  for (const node of this) ++size3;
  return size3;
}

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group3 = groups[j], i = 0, n = group3.length, node; i < n; ++i) {
      if (node = group3[i]) callback.call(node, node.__data__, i, group3);
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name3) {
  return function() {
    this.removeAttribute(name3);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name3, value) {
  return function() {
    this.setAttribute(name3, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name3, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name3);
    else this.setAttribute(name3, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name3, value) {
  var fullname = namespace_default(name3);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name3) {
  return function() {
    this.style.removeProperty(name3);
  };
}
function styleConstant(name3, value, priority) {
  return function() {
    this.style.setProperty(name3, value, priority);
  };
}
function styleFunction(name3, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name3);
    else this.style.setProperty(name3, v, priority);
  };
}
function style_default(name3, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name3, value, priority == null ? "" : priority)) : styleValue(this.node(), name3);
}
function styleValue(node, name3) {
  return node.style.getPropertyValue(name3) || window_default(node).getComputedStyle(node, null).getPropertyValue(name3);
}

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name3) {
  return function() {
    delete this[name3];
  };
}
function propertyConstant(name3, value) {
  return function() {
    this[name3] = value;
  };
}
function propertyFunction(name3, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name3];
    else this[name3] = v;
  };
}
function property_default(name3, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name3, value)) : this.node()[name3];
}

// node_modules/d3-selection/src/selection/classed.js
function classArray(string4) {
  return string4.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name3) {
    var i = this._names.indexOf(name3);
    if (i < 0) {
      this._names.push(name3);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name3) {
    var i = this._names.indexOf(name3);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name3) {
    return this._names.indexOf(name3) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name3, value) {
  var names = classArray(name3 + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/d3-selection/src/selection/append.js
function append_default(name3) {
  var create2 = typeof name3 === "function" ? name3 : creator_default(name3);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name3, before) {
  var create2 = typeof name3 === "function" ? name3 : creator_default(name3), select2 = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select2.apply(this, arguments) || null);
  });
}

// node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t2) {
    var name3 = "", i = t2.indexOf(".");
    if (i >= 0) name3 = t2.slice(i + 1), t2 = t2.slice(0, i);
    return { type: t2, name: name3 };
  });
}
function onRemove(typename) {
  return function() {
    var on2 = this.__on;
    if (!on2) return;
    for (var j = 0, i = -1, m = on2.length, o; j < m; ++j) {
      if (o = on2[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on2[++i] = o;
      }
    }
    if (++i) on2.length = i;
    else delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on2 = this.__on, o, listener = contextListener(value);
    if (on2) for (var j = 0, m = on2.length; j < m; ++j) {
      if ((o = on2[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on2) this.__on = [o];
    else on2.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t2;
  if (arguments.length < 2) {
    var on2 = this.node().__on;
    if (on2) for (var j = 0, m = on2.length, o; j < m; ++j) {
      for (i = 0, o = on2[j]; i < n; ++i) {
        if ((t2 = typenames[i]).type === o.type && t2.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }
  on2 = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i) this.each(on2(typenames[i], value, options));
  return this;
}

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params) event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group3 = groups[j], i = 0, n = group3.length, node; i < n; ++i) {
      if (node = group3[i]) yield node;
    }
  }
}

// node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default2,
  [Symbol.iterator]: iterator_default
};
var selection_default = selection;

// node_modules/d3-selection/src/select.js
function select_default2(selector2) {
  return typeof selector2 === "string" ? new Selection([[document.querySelector(selector2)]], [document.documentElement]) : new Selection([[selector2]], root);
}

// node_modules/d3-color/src/define.js
function define_default(constructor2, factory, prototype) {
  constructor2.prototype = factory.prototype = prototype;
  prototype.constructor = constructor2;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m = reHex.exec(format3)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format3)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format3)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format3)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format3)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min3 = Math.min(r, g, b), max6 = Math.max(r, g, b), h = NaN, s = max6 - min3, l = (max6 + min3) / 2;
  if (s) {
    if (r === max6) h = (g - b) / s + (g < b) * 6;
    else if (g === max6) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max6 + min3 : 2 - max6 - min3;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-interpolate/src/basis.js
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values2) {
  var n = values2.length - 1;
  return function(t2) {
    var i = t2 <= 0 ? t2 = 0 : t2 >= 1 ? (t2 = 1, n - 1) : Math.floor(t2 * n), v1 = values2[i], v2 = values2[i + 1], v0 = i > 0 ? values2[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values2[i + 2] : 2 * v2 - v1;
    return basis((t2 - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values2) {
  var n = values2.length;
  return function(t2) {
    var i = Math.floor(((t2 %= 1) < 0 ? ++t2 : t2) * n), v0 = values2[(i + n - 1) % n], v1 = values2[i % n], v2 = values2[(i + 1) % n], v3 = values2[(i + 2) % n];
    return basis((t2 - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x2) => () => x2;

// node_modules/d3-interpolate/src/color.js
function linear(a, d) {
  return function(t2) {
    return a + t2 * d;
  };
}
function exponential(a, b, y2) {
  return a = Math.pow(a, y2), b = Math.pow(b, y2) - a, y2 = 1 / y2, function(t2) {
    return Math.pow(a + t2 * b, y2);
  };
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y2) : constant_default2(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant_default2(isNaN(a) ? b : a);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = (function rgbGamma(y2) {
  var color2 = gamma(y2);
  function rgb2(start2, end) {
    var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t2) {
      start2.r = r(t2);
      start2.g = g(t2);
      start2.b = b(t2);
      start2.opacity = opacity(t2);
      return start2 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
})(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t2) {
      color2.r = r(t2);
      color2.g = g(t2);
      color2.b = b(t2);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
  return function(t2) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t2) + b[i] * t2;
    return c;
  };
}
function isNumberArray(x2) {
  return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a, b) {
  var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x2 = new Array(na), c = new Array(nb), i;
  for (i = 0; i < na; ++i) x2[i] = value_default(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];
  return function(t2) {
    for (i = 0; i < na; ++i) c[i] = x2[i](t2);
    return c;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a, b) {
  var d = /* @__PURE__ */ new Date();
  return a = +a, b = +b, function(t2) {
    return d.setTime(a * (1 - t2) + b * t2), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a, b) {
  return a = +a, b = +b, function(t2) {
    return a * (1 - t2) + b * t2;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a, b) {
  var i = {}, c = {}, k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};
  for (k in b) {
    if (k in a) {
      i[k] = value_default(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }
  return function(t2) {
    for (k in i) c[k] = i[k](t2);
    return c;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t2) {
    return b(t2) + "";
  };
}
function string_default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs;
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i]) s[i] += bm;
      else s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs;
    else s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t2) {
    for (var i2 = 0, o; i2 < b; ++i2) s[(o = q[i2]).i] = o.x(t2);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a, b) {
  var t2 = typeof b, c;
  return b == null || t2 === "boolean" ? constant_default2(b) : (t2 === "number" ? number_default : t2 === "string" ? (c = color(b)) ? (b = c, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a, b) {
  return a = +a, b = +b, function(t2) {
    return Math.round(a * (1 - t2) + b * t2);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse2, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate2(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;
      else if (b - a > 180) a += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a, b) {
    var s = [], q = [];
    a = parse2(a), b = parse2(b);
    translate2(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function(t2) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t2);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time2) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time2;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time2) {
  var t2 = new Timer();
  t2.restart(callback, delay, time2);
  return t2;
}
function timerFlush() {
  now();
  ++frame;
  var t2 = taskHead, e;
  while (t2) {
    if ((e = clockNow - t2._time) >= 0) t2._call.call(void 0, e);
    t2 = t2._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now3 = clock.now(), delay = now3 - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now3;
}
function nap() {
  var t0, t1 = taskHead, t2, time2 = Infinity;
  while (t1) {
    if (t1._call) {
      if (time2 > t1._time) time2 = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time2);
}
function sleep(time2) {
  if (frame) return;
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity) timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time2) {
  var t2 = new Timer();
  delay = delay == null ? 0 : +delay;
  t2.restart((elapsed) => {
    t2.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t2;
}

// node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name3, id4, index2, group3, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id4 in schedules) return;
  create(node, id4, {
    name: name3,
    index: index2,
    // For context during callback.
    group: group3,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id4) {
  var schedule = get2(node, id4);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id4) {
  var schedule = get2(node, id4);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}
function get2(node, id4) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id4])) throw new Error("transition not found");
  return schedule;
}
function create(node, id4, self) {
  var schedules = node.__transition, tween;
  schedules[id4] = self;
  self.timer = timer(schedule, 0, self.time);
  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start2, self.delay, self.time);
    if (self.delay <= elapsed) start2(elapsed - self.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self.state !== SCHEDULED) return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;
      if (o.state === STARTED) return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id4) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return;
    self.state = STARTED;
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t2 = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t2);
    }
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }
  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id4];
    for (var i in schedules) return;
    delete node.__transition;
  }
}

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name3) {
  var schedules = node.__transition, schedule, active, empty3 = true, i;
  if (!schedules) return;
  name3 = name3 == null ? null : name3 + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name3) {
      empty3 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty3) delete node.__transition;
}

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name3) {
  return this.each(function() {
    interrupt_default(this, name3);
  });
}

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id4, name3) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id4), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name3) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id4, name3, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function() {
    var schedule = set2(this, id4), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t2 = { name: name3, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name3) {
          tween1[i] = t2;
          break;
        }
      }
      if (i === n) tween1.push(t2);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name3, value) {
  var id4 = this._id;
  name3 += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id4).tween;
    for (var i = 0, n = tween.length, t2; i < n; ++i) {
      if ((t2 = tween[i]).name === name3) {
        return t2.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id4, name3, value));
}
function tweenValue(transition2, name3, value) {
  var id4 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id4);
    (schedule.value || (schedule.value = {}))[name3] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id4).value[name3];
  };
}

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a, b) {
  var c;
  return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c = color(b)) ? (b = c, rgb_default) : string_default)(a, b);
}

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name3) {
  return function() {
    this.removeAttribute(name3);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name3, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name3);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name3, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttribute(name3);
    string0 = this.getAttribute(name3);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name3, value) {
  var fullname = namespace_default(name3), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name3, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name3, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
}

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name3, i) {
  return function(t2) {
    this.setAttribute(name3, i.call(this, t2));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t2) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t2));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name3, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name3, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name3, value) {
  var key = "attr." + name3;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = namespace_default(name3);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id4, value) {
  return function() {
    init(this, id4).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id4, value) {
  return value = +value, function() {
    init(this, id4).delay = value;
  };
}
function delay_default(value) {
  var id4 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id4, value)) : get2(this.node(), id4).delay;
}

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id4, value) {
  return function() {
    set2(this, id4).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id4, value) {
  return value = +value, function() {
    set2(this, id4).duration = value;
  };
}
function duration_default(value) {
  var id4 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id4, value)) : get2(this.node(), id4).duration;
}

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id4, value) {
  if (typeof value !== "function") throw new Error();
  return function() {
    set2(this, id4).ease = value;
  };
}
function ease_default(value) {
  var id4 = this._id;
  return arguments.length ? this.each(easeConstant(id4, value)) : get2(this.node(), id4).ease;
}

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id4, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function") throw new Error();
    set2(this, id4).ease = v;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function") throw new Error();
  return this.each(easeVarying(this._id, value));
}

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match3) {
  if (typeof match3 !== "function") match3 = matcher_default(match3);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group3[i]) && match3.call(node, node.__data__, i, group3)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id) throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/on.js
function start(name3) {
  return (name3 + "").trim().split(/^|\s+/).every(function(t2) {
    var i = t2.indexOf(".");
    if (i >= 0) t2 = t2.slice(0, i);
    return !t2 || t2 === "start";
  });
}
function onFunction(id4, name3, listener) {
  var on0, on1, sit = start(name3) ? init : set2;
  return function() {
    var schedule = sit(this, id4), on2 = schedule.on;
    if (on2 !== on0) (on1 = (on0 = on2).copy()).on(name3, listener);
    schedule.on = on1;
  };
}
function on_default2(name3, listener) {
  var id4 = this._id;
  return arguments.length < 2 ? get2(this.node(), id4).on.on(name3) : this.each(onFunction(id4, name3, listener));
}

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id4) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id4) return;
    if (parent) parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// node_modules/d3-transition/src/transition/select.js
function select_default3(select2) {
  var name3 = this._name, id4 = this._id;
  if (typeof select2 !== "function") select2 = selector_default(select2);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group3[i]) && (subnode = select2.call(node, node.__data__, i, group3))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name3, id4, i, subgroup, get2(node, id4));
      }
    }
  }
  return new Transition(subgroups, this._parents, name3, id4);
}

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select2) {
  var name3 = this._name, id4 = this._id;
  if (typeof select2 !== "function") select2 = selectorAll_default(select2);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, node, i = 0; i < n; ++i) {
      if (node = group3[i]) {
        for (var children2 = select2.call(node, node.__data__, i, group3), child, inherit2 = get2(node, id4), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule_default(child, name3, id4, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name3, id4);
}

// node_modules/d3-transition/src/transition/selection.js
var Selection2 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}

// node_modules/d3-transition/src/transition/style.js
function styleNull(name3, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name3), string1 = (this.style.removeProperty(name3), styleValue(this, name3));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name3) {
  return function() {
    this.style.removeProperty(name3);
  };
}
function styleConstant2(name3, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name3);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name3, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name3), value1 = value(this), string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name3), styleValue(this, name3));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id4, name3) {
  var on0, on1, listener0, key = "style." + name3, event = "end." + key, remove4;
  return function() {
    var schedule = set2(this, id4), on2 = schedule.on, listener = schedule.value[key] == null ? remove4 || (remove4 = styleRemove2(name3)) : void 0;
    if (on2 !== on0 || listener0 !== listener) (on1 = (on0 = on2).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name3, value, priority) {
  var i = (name3 += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name3, styleNull(name3, i)).on("end.style." + name3, styleRemove2(name3)) : typeof value === "function" ? this.styleTween(name3, styleFunction2(name3, i, tweenValue(this, "style." + name3, value))).each(styleMaybeRemove(this._id, name3)) : this.styleTween(name3, styleConstant2(name3, i, value), priority).on("end.style." + name3, null);
}

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name3, i, priority) {
  return function(t2) {
    this.style.setProperty(name3, i.call(this, t2), priority);
  };
}
function styleTween(name3, value, priority) {
  var t2, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t2 = (i0 = i) && styleInterpolate(name3, i, priority);
    return t2;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name3, value, priority) {
  var key = "style." + (name3 += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name3, value, priority == null ? "" : priority));
}

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t2) {
    this.textContent = i.call(this, t2);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name3 = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, node, i = 0; i < n; ++i) {
      if (node = group3[i]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name3, id1, i, group3, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name3, id1);
}

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id4 = that._id, size3 = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size3 === 0) resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id4), on2 = schedule.on;
      if (on2 !== on0) {
        on1 = (on0 = on2).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size3 === 0) resolve();
  });
}

// node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups, parents, name3, id4) {
  this._groups = groups;
  this._parents = parents;
  this._name = name3;
  this._id = id4;
}
function transition(name3) {
  return selection_default().transition(name3);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// node_modules/d3-ease/src/cubic.js
function cubicInOut(t2) {
  return ((t2 *= 2) <= 1 ? t2 * t2 * t2 : (t2 -= 2) * t2 * t2 + 2) / 2;
}

// node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id4) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id4])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id4} not found`);
    }
  }
  return timing;
}
function transition_default2(name3) {
  var id4, timing;
  if (name3 instanceof Transition) {
    id4 = name3._id, name3 = name3._name;
  } else {
    id4 = newId(), (timing = defaultTiming).time = now(), name3 = name3 == null ? null : name3 + "";
  }
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group3 = groups[j], n = group3.length, node, i = 0; i < n; ++i) {
      if (node = group3[i]) {
        schedule_default(node, name3, id4, i, group3, timing || inherit(node, id4));
      }
    }
  }
  return new Transition(groups, this._parents, name3, id4);
}

// node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// node_modules/d3-brush/src/brush.js
var { abs, max, min } = Math;
function number1(e) {
  return [+e[0], +e[1]];
}
function number22(e) {
  return [number1(e[0]), number1(e[1])];
}
var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x2, e) {
    return x2 == null ? null : [[+x2[0], e[0][1]], [+x2[1], e[1][1]]];
  },
  output: function(xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y2, e) {
    return y2 == null ? null : [[e[0][0], +y2[0]], [e[1][0], +y2[1]]];
  },
  output: function(xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) {
    return xy == null ? null : number22(xy);
  },
  output: function(xy) {
    return xy;
  }
};
function type(t2) {
  return { type: t2 };
}

// node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon2 = 1e-6;
var tauEpsilon = tau - epsilon2;
function append(strings2) {
  this._ += strings2[0];
  for (let i = 1, n = strings2.length; i < n; ++i) {
    this._ += arguments[i] + strings2[i];
  }
}
function appendRound(digits) {
  let d = Math.floor(digits);
  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
  if (d > 15) return append;
  const k = 10 ** d;
  return function(strings2) {
    this._ += strings2[0];
    for (let i = 1, n = strings2.length; i < n; ++i) {
      this._ += Math.round(arguments[i] * k) / k + strings2[i];
    }
  };
}
var Path = class {
  constructor(digits) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x2, y2) {
    this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x2, y2) {
    this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
  }
  quadraticCurveTo(x1, y1, x2, y2) {
    this._append`Q${+x1},${+y1},${this._x1 = +x2},${this._y1 = +y2}`;
  }
  bezierCurveTo(x1, y1, x2, y2, x3, y3) {
    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
  }
  arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    if (r < 0) throw new Error(`negative radius: ${r}`);
    let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (this._x1 === null) {
      this._append`M${this._x1 = x1},${this._y1 = y1}`;
    } else if (!(l01_2 > epsilon2)) ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon2) || !r) {
      this._append`L${this._x1 = x1},${this._y1 = y1}`;
    } else {
      let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon2) {
        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
      }
      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
    }
  }
  arc(x2, y2, r, a0, a1, ccw) {
    x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
    if (r < 0) throw new Error(`negative radius: ${r}`);
    let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (this._x1 === null) {
      this._append`M${x0},${y0}`;
    } else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2) {
      this._append`L${x0},${y0}`;
    }
    if (!r) return;
    if (da < 0) da = da % tau + tau;
    if (da > tauEpsilon) {
      this._append`A${r},${r},0,1,${cw},${x2 - dx},${y2 - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
    } else if (da > epsilon2) {
      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x2 + r * Math.cos(a1)},${this._y1 = y2 + r * Math.sin(a1)}`;
    }
  }
  rect(x2, y2, w, h) {
    this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w = +w}v${+h}h${-w}Z`;
  }
  toString() {
    return this._;
  }
};
function path() {
  return new Path();
}
path.prototype = Path.prototype;

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x2) {
  return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
}
function formatDecimalParts(x2, p) {
  if ((i = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
  var i, coefficient = x2.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x2.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x2) {
  return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width2) {
    var i = value.length, t2 = [], j = 0, g = grouping[0], length6 = 0;
    while (i > 0 && g > 0) {
      if (length6 + g + 1 > width2) g = Math.max(1, width2 - length6);
      t2.push(value.substring(i -= g, i + g));
      if ((length6 += g + 1) > width2) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t2.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match3 = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match3;
  return new FormatSpecifier({
    fill: match3[1],
    align: match3[2],
    sign: match3[3],
    symbol: match3[4],
    zero: match3[5],
    width: match3[6],
    comma: match3[7],
    precision: match3[8] && match3[8].slice(1),
    trim: match3[9],
    type: match3[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;
      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;
      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d) return x2 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x2, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d) return x2 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x2, p) => (x2 * 100).toFixed(p),
  "b": (x2) => Math.round(x2).toString(2),
  "c": (x2) => x2 + "",
  "d": formatDecimal_default,
  "e": (x2, p) => x2.toExponential(p),
  "f": (x2, p) => x2.toFixed(p),
  "g": (x2, p) => x2.toPrecision(p),
  "o": (x2) => Math.round(x2).toString(8),
  "p": (x2, p) => formatRounded_default(x2 * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
  "x": (x2) => Math.round(x2).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default2(x2) {
  return x2;
}

// node_modules/d3-format/src/locale.js
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale2) {
  var group3 = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity_default2 : formatGroup_default(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal2 = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity_default2 : formatNumerals_default(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan2 = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill2 = specifier.fill, align2 = specifier.align, sign3 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width2 = specifier.width, comma = specifier.comma, precision = specifier.precision, trim2 = specifier.trim, type2 = specifier.type;
    if (type2 === "n") comma = true, type2 = "g";
    else if (!formatTypes_default[type2]) precision === void 0 && (precision = 12), trim2 = true, type2 = "g";
    if (zero3 || fill2 === "0" && align2 === "=") zero3 = true, fill2 = "0", align2 = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan2 : formatType(Math.abs(value), precision);
        if (trim2) value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign3 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign3 === "(" ? sign3 : minus : sign3 === "-" || sign3 === "(" ? "" : sign3) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign3 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal2 + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3) value = group3(value, Infinity);
      var length6 = valuePrefix.length + value.length + valueSuffix.length, padding = length6 < width2 ? new Array(width2 - length6 + 1).join(fill2) : "";
      if (comma && zero3) value = group3(padding + value, padding.length ? width2 - valueSuffix.length : Infinity), padding = "";
      switch (align2) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length6 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length6);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max6) {
  step = Math.abs(step), max6 = Math.abs(max6) - step;
  return Math.max(0, exponent_default(max6) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range3) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range3).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index2 = new InternMap(), domain = [], range3 = [], unknown = implicit;
  function scale(d) {
    let i = index2.get(d);
    if (i === void 0) {
      if (unknown !== implicit) return unknown;
      index2.set(d, i = domain.push(d) - 1);
    }
    return range3[i % range3.length];
  }
  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index2 = new InternMap();
    for (const value of _) {
      if (index2.has(value)) continue;
      index2.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), scale) : range3.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range3).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth2, round2 = false, paddingInner = 0, paddingOuter = 0, align2 = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse3 = r1 < r0, start2 = reverse3 ? r1 : r0, stop = reverse3 ? r0 : r1;
    step = (stop - start2) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round2) step = Math.floor(step);
    start2 += (stop - start2 - step * (n - paddingInner)) * align2;
    bandwidth2 = step * (1 - paddingInner);
    if (round2) start2 = Math.round(start2), bandwidth2 = Math.round(bandwidth2);
    var values2 = range(n).map(function(i) {
      return start2 + step * i;
    });
    return ordinalRange(reverse3 ? values2.reverse() : values2);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round2 = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth2;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_) {
    return arguments.length ? (round2 = !!_, rescale()) : round2;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align2 = Math.max(0, Math.min(1, _)), rescale()) : align2;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round2).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align2);
  };
  return initRange.apply(rescale(), arguments);
}

// node_modules/d3-scale/src/constant.js
function constants(x2) {
  return function() {
    return x2;
  };
}

// node_modules/d3-scale/src/number.js
function number3(x2) {
  return +x2;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity2(x2) {
  return x2;
}
function normalize(a, b) {
  return (b -= a = +a) ? function(x2) {
    return (x2 - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
  var t2;
  if (a > b) t2 = a, a = b, b = t2;
  return function(x2) {
    return Math.max(a, Math.min(b, x2));
  };
}
function bimap(domain, range3, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range3[0], r1 = range3[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x2) {
    return r0(d0(x2));
  };
}
function polymap(domain, range3, interpolate) {
  var j = Math.min(domain.length, range3.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range3 = range3.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range3[i], range3[i + 1]);
  }
  return function(x2) {
    var i2 = bisect_default(domain, x2, 1, j) - 1;
    return r[i2](d[i2](x2));
  };
}
function copy(source2, target) {
  return target.domain(source2.domain()).range(source2.range()).interpolate(source2.interpolate()).clamp(source2.clamp()).unknown(source2.unknown());
}
function transformer() {
  var domain = unit, range3 = unit, interpolate = value_default, transform2, untransform, unknown, clamp3 = identity2, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range3.length);
    if (clamp3 !== identity2) clamp3 = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x2) {
    return x2 == null || isNaN(x2 = +x2) ? unknown : (output || (output = piecewise(domain.map(transform2), range3, interpolate)))(transform2(clamp3(x2)));
  }
  scale.invert = function(y2) {
    return clamp3(untransform((input || (input = piecewise(range3, domain.map(transform2), number_default)))(y2)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number3), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), rescale()) : range3.slice();
  };
  scale.rangeRound = function(_) {
    return range3 = Array.from(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp3 = _ ? true : identity2, rescale()) : clamp3 !== identity2;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t2, u) {
    transform2 = t2, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity2, identity2);
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count, specifier) {
  var step = tickStep(start2, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null) count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

// node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}

// node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// node_modules/d3-shape/src/constant.js
function constant_default4(x2) {
  return function constant() {
    return x2;
  };
}

// node_modules/d3-shape/src/path.js
function withPath(shape) {
  let digits = 3;
  shape.digits = function(_) {
    if (!arguments.length) return digits;
    if (_ == null) {
      digits = null;
    } else {
      const d = Math.floor(_);
      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
      digits = d;
    }
    return shape;
  };
  return () => new Path(digits);
}

// node_modules/d3-shape/src/array.js
var slice = Array.prototype.slice;
function array_default(x2) {
  return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context2) {
  this._context = context2;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
      // falls through
      default:
        this._context.lineTo(x2, y2);
        break;
    }
  }
};
function linear_default(context2) {
  return new Linear(context2);
}

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

// node_modules/d3-shape/src/line.js
function line_default(x2, y2) {
  var defined2 = constant_default4(true), context2 = null, curve = linear_default, output = null, path2 = withPath(line2);
  x2 = typeof x2 === "function" ? x2 : x2 === void 0 ? x : constant_default4(x2);
  y2 = typeof y2 === "function" ? y2 : y2 === void 0 ? y : constant_default4(y2);
  function line2(data) {
    var i, n = (data = array_default(data)).length, d, defined0 = false, buffer;
    if (context2 == null) output = curve(buffer = path2());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined2(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x2(d, i, data), +y2(d, i, data));
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  line2.x = function(_) {
    return arguments.length ? (x2 = typeof _ === "function" ? _ : constant_default4(+_), line2) : x2;
  };
  line2.y = function(_) {
    return arguments.length ? (y2 = typeof _ === "function" ? _ : constant_default4(+_), line2) : y2;
  };
  line2.defined = function(_) {
    return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant_default4(!!_), line2) : defined2;
  };
  line2.curve = function(_) {
    return arguments.length ? (curve = _, context2 != null && (output = curve(context2)), line2) : curve;
  };
  line2.context = function(_) {
    return arguments.length ? (_ == null ? context2 = output = null : output = curve(context2 = _), line2) : context2;
  };
  return line2;
}

// node_modules/d3-zoom/src/transform.js
function Transform(k, x2, y2) {
  this.k = k;
  this.x = x2;
  this.y = y2;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x2, y2) {
    return x2 === 0 & y2 === 0 ? this : new Transform(this.k, this.x + this.k * x2, this.y + this.k * y2);
  },
  apply: function(point2) {
    return [point2[0] * this.k + this.x, point2[1] * this.k + this.y];
  },
  applyX: function(x2) {
    return x2 * this.k + this.x;
  },
  applyY: function(y2) {
    return y2 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x2) {
    return (x2 - this.x) / this.k;
  },
  invertY: function(y2) {
    return (y2 - this.y) / this.k;
  },
  rescaleX: function(x2) {
    return x2.copy().domain(x2.range().map(this.invertX, this).map(x2.invert, x2));
  },
  rescaleY: function(y2) {
    return y2.copy().domain(y2.range().map(this.invertY, this).map(y2.invert, y2));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity3 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity3;
  return node.__zoom;
}

// node_modules/@marijn/find-cluster-break/src/index.js
var rangeFrom = [];
var rangeTo = [];
(() => {
  let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s) => s ? parseInt(s, 36) : 1);
  for (let i = 0, n = 0; i < numbers.length; i++)
    (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
})();
function isExtendingChar(code) {
  if (code < 768) return false;
  for (let from = 0, to = rangeFrom.length; ; ) {
    let mid = from + to >> 1;
    if (code < rangeFrom[mid]) to = mid;
    else if (code >= rangeTo[mid]) from = mid + 1;
    else return true;
    if (from == to) return false;
  }
}
function isRegionalIndicator(code) {
  return code >= 127462 && code <= 127487;
}
var ZWJ = 8205;
function findClusterBreak(str, pos, forward = true, includeExtending = true) {
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length) return pos;
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
  let prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    let next = codePointAt(str, pos);
    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      let countBefore = 0, i = pos - 2;
      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
        countBefore++;
        i -= 2;
      }
      if (countBefore % 2 == 0) break;
      else pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    let found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos) return found;
    pos--;
  }
  return 0;
}
function codePointAt(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1)) return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function surrogateLow(ch) {
  return ch >= 56320 && ch < 57344;
}
function surrogateHigh(ch) {
  return ch >= 55296 && ch < 56320;
}
function codePointSize(code) {
  return code < 65536 ? 1 : 2;
}

// node_modules/@codemirror/state/dist/index.js
var Text = class _Text {
  /**
  Get the line description around the given position.
  */
  lineAt(pos) {
    if (pos < 0 || pos > this.length)
      throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
    return this.lineInner(pos, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(n) {
    if (n < 1 || n > this.lines)
      throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
    return this.lineInner(n, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(from, to, text) {
    [from, to] = clip(this, from, to);
    let parts = [];
    this.decompose(
      0,
      from,
      parts,
      2
      /* Open.To */
    );
    if (text.length)
      text.decompose(
        0,
        text.length,
        parts,
        1 | 2
        /* Open.To */
      );
    this.decompose(
      to,
      this.length,
      parts,
      1
      /* Open.From */
    );
    return TextNode.from(parts, this.length - (to - from) + text.length);
  }
  /**
  Append another document to this one.
  */
  append(other) {
    return this.replace(this.length, this.length, other);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(from, to = this.length) {
    [from, to] = clip(this, from, to);
    let parts = [];
    this.decompose(from, to, parts, 0);
    return TextNode.from(parts, to - from);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(other) {
    if (other == this)
      return true;
    if (other.length != this.length || other.lines != this.lines)
      return false;
    let start2 = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
    let a = new RawTextCursor(this), b = new RawTextCursor(other);
    for (let skip = start2, pos = start2; ; ) {
      a.next(skip);
      b.next(skip);
      skip = 0;
      if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
        return false;
      pos += a.value.length;
      if (a.done || pos >= end)
        return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(dir = 1) {
    return new RawTextCursor(this, dir);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(from, to = this.length) {
    return new PartialTextCursor(this, from, to);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(from, to) {
    let inner;
    if (from == null) {
      inner = this.iter();
    } else {
      if (to == null)
        to = this.lines + 1;
      let start2 = this.line(from).from;
      inner = this.iterRange(start2, Math.max(start2, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
    }
    return new LineCursor(inner);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let lines = [];
    this.flatten(lines);
    return lines;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(text) {
    if (text.length == 0)
      throw new RangeError("A document must have at least one line");
    if (text.length == 1 && !text[0])
      return _Text.empty;
    return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
  }
};
var TextLeaf = class _TextLeaf extends Text {
  constructor(text, length6 = textLength(text)) {
    super();
    this.text = text;
    this.length = length6;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(target, isLine, line2, offset) {
    for (let i = 0; ; i++) {
      let string4 = this.text[i], end = offset + string4.length;
      if ((isLine ? line2 : end) >= target)
        return new Line(offset, end, line2, string4);
      offset = end + 1;
      line2++;
    }
  }
  decompose(from, to, target, open) {
    let text = from <= 0 && to >= this.length ? this : new _TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
    if (open & 1) {
      let prev = target.pop();
      let joined = appendText(text.text, prev.text.slice(), 0, text.length);
      if (joined.length <= 32) {
        target.push(new _TextLeaf(joined, prev.length + text.length));
      } else {
        let mid = joined.length >> 1;
        target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
      }
    } else {
      target.push(text);
    }
  }
  replace(from, to, text) {
    if (!(text instanceof _TextLeaf))
      return super.replace(from, to, text);
    [from, to] = clip(this, from, to);
    let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
    let newLen = this.length + text.length - (to - from);
    if (lines.length <= 32)
      return new _TextLeaf(lines, newLen);
    return TextNode.from(_TextLeaf.split(lines, []), newLen);
  }
  sliceString(from, to = this.length, lineSep = "\n") {
    [from, to] = clip(this, from, to);
    let result = "";
    for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
      let line2 = this.text[i], end = pos + line2.length;
      if (pos > from && i)
        result += lineSep;
      if (from < end && to > pos)
        result += line2.slice(Math.max(0, from - pos), to - pos);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let line2 of this.text)
      target.push(line2);
  }
  scanIdentical() {
    return 0;
  }
  static split(text, target) {
    let part = [], len = -1;
    for (let line2 of text) {
      part.push(line2);
      len += line2.length + 1;
      if (part.length == 32) {
        target.push(new _TextLeaf(part, len));
        part = [];
        len = -1;
      }
    }
    if (len > -1)
      target.push(new _TextLeaf(part, len));
    return target;
  }
};
var TextNode = class _TextNode extends Text {
  constructor(children2, length6) {
    super();
    this.children = children2;
    this.length = length6;
    this.lines = 0;
    for (let child of children2)
      this.lines += child.lines;
  }
  lineInner(target, isLine, line2, offset) {
    for (let i = 0; ; i++) {
      let child = this.children[i], end = offset + child.length, endLine = line2 + child.lines - 1;
      if ((isLine ? endLine : end) >= target)
        return child.lineInner(target, isLine, line2, offset);
      offset = end + 1;
      line2 = endLine + 1;
    }
  }
  decompose(from, to, target, open) {
    for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (from <= end && to >= pos) {
        let childOpen = open & ((pos <= from ? 1 : 0) | (end >= to ? 2 : 0));
        if (pos >= from && end <= to && !childOpen)
          target.push(child);
        else
          child.decompose(from - pos, to - pos, target, childOpen);
      }
      pos = end + 1;
    }
  }
  replace(from, to, text) {
    [from, to] = clip(this, from, to);
    if (text.lines < this.lines)
      for (let i = 0, pos = 0; i < this.children.length; i++) {
        let child = this.children[i], end = pos + child.length;
        if (from >= pos && to <= end) {
          let updated = child.replace(from - pos, to - pos, text);
          let totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
            let copy2 = this.children.slice();
            copy2[i] = updated;
            return new _TextNode(copy2, this.length - (to - from) + text.length);
          }
          return super.replace(pos, end, updated);
        }
        pos = end + 1;
      }
    return super.replace(from, to, text);
  }
  sliceString(from, to = this.length, lineSep = "\n") {
    [from, to] = clip(this, from, to);
    let result = "";
    for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
      let child = this.children[i], end = pos + child.length;
      if (pos > from && i)
        result += lineSep;
      if (from < end && to > pos)
        result += child.sliceString(from - pos, to - pos, lineSep);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let child of this.children)
      child.flatten(target);
  }
  scanIdentical(other, dir) {
    if (!(other instanceof _TextNode))
      return 0;
    let length6 = 0;
    let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
    for (; ; iA += dir, iB += dir) {
      if (iA == eA || iB == eB)
        return length6;
      let chA = this.children[iA], chB = other.children[iB];
      if (chA != chB)
        return length6 + chA.scanIdentical(chB, dir);
      length6 += chA.length + 1;
    }
  }
  static from(children2, length6 = children2.reduce((l, ch) => l + ch.length + 1, -1)) {
    let lines = 0;
    for (let ch of children2)
      lines += ch.lines;
    if (lines < 32) {
      let flat = [];
      for (let ch of children2)
        ch.flatten(flat);
      return new TextLeaf(flat, length6);
    }
    let chunk = Math.max(
      32,
      lines >> 5
      /* Tree.BranchShift */
    ), maxChunk = chunk << 1, minChunk = chunk >> 1;
    let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
    function add(child) {
      let last2;
      if (child.lines > maxChunk && child instanceof _TextNode) {
        for (let node of child.children)
          add(node);
      } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
        flush();
        chunked.push(child);
      } else if (child instanceof TextLeaf && currentLines && (last2 = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last2.lines <= 32) {
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk[currentChunk.length - 1] = new TextLeaf(last2.text.concat(child.text), last2.length + 1 + child.length);
      } else {
        if (currentLines + child.lines > chunk)
          flush();
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk.push(child);
      }
    }
    function flush() {
      if (currentLines == 0)
        return;
      chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
      currentLen = -1;
      currentLines = currentChunk.length = 0;
    }
    for (let child of children2)
      add(child);
    flush();
    return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length6);
  }
};
Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
function textLength(text) {
  let length6 = -1;
  for (let line2 of text)
    length6 += line2.length + 1;
  return length6;
}
function appendText(text, target, from = 0, to = 1e9) {
  for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
    let line2 = text[i], end = pos + line2.length;
    if (end >= from) {
      if (end > to)
        line2 = line2.slice(0, to - pos);
      if (pos < from)
        line2 = line2.slice(from - pos);
      if (first) {
        target[target.length - 1] += line2;
        first = false;
      } else
        target.push(line2);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from, to) {
  return appendText(text, [""], from, to);
}
var RawTextCursor = class {
  constructor(text, dir = 1) {
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  nextInner(skip, dir) {
    this.done = this.lineBreak = false;
    for (; ; ) {
      let last2 = this.nodes.length - 1;
      let top3 = this.nodes[last2], offsetValue = this.offsets[last2], offset = offsetValue >> 1;
      let size3 = top3 instanceof TextLeaf ? top3.text.length : top3.children.length;
      if (offset == (dir > 0 ? size3 : 0)) {
        if (last2 == 0) {
          this.done = true;
          this.value = "";
          return this;
        }
        if (dir > 0)
          this.offsets[last2 - 1]++;
        this.nodes.pop();
        this.offsets.pop();
      } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
        this.offsets[last2] += dir;
        if (skip == 0) {
          this.lineBreak = true;
          this.value = "\n";
          return this;
        }
        skip--;
      } else if (top3 instanceof TextLeaf) {
        let next = top3.text[offset + (dir < 0 ? -1 : 0)];
        this.offsets[last2] += dir;
        if (next.length > Math.max(0, skip)) {
          this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
          return this;
        }
        skip -= next.length;
      } else {
        let next = top3.children[offset + (dir < 0 ? -1 : 0)];
        if (skip > next.length) {
          skip -= next.length;
          this.offsets[last2] += dir;
        } else {
          if (dir < 0)
            this.offsets[last2]--;
          this.nodes.push(next);
          this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
        }
      }
    }
  }
  next(skip = 0) {
    if (skip < 0) {
      this.nextInner(-skip, -this.dir);
      skip = this.value.length;
    }
    return this.nextInner(skip, this.dir);
  }
};
var PartialTextCursor = class {
  constructor(text, start2, end) {
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start2 > end ? -1 : 1);
    this.pos = start2 > end ? text.length : 0;
    this.from = Math.min(start2, end);
    this.to = Math.max(start2, end);
  }
  nextInner(skip, dir) {
    if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
      this.value = "";
      this.done = true;
      return this;
    }
    skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
    let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
    if (skip > limit)
      skip = limit;
    limit -= skip;
    let { value } = this.cursor.next(skip);
    this.pos += (value.length + skip) * dir;
    this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
    this.done = !this.value;
    return this;
  }
  next(skip = 0) {
    if (skip < 0)
      skip = Math.max(skip, this.from - this.pos);
    else if (skip > 0)
      skip = Math.min(skip, this.to - this.pos);
    return this.nextInner(skip, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
};
var LineCursor = class {
  constructor(inner) {
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }
  next(skip = 0) {
    let { done, lineBreak, value } = this.inner.next(skip);
    if (done && this.afterBreak) {
      this.value = "";
      this.afterBreak = false;
    } else if (done) {
      this.done = true;
      this.value = "";
    } else if (lineBreak) {
      if (this.afterBreak) {
        this.value = "";
      } else {
        this.afterBreak = true;
        this.next();
      }
    } else {
      this.value = value;
      this.afterBreak = false;
    }
    return this;
  }
  get lineBreak() {
    return false;
  }
};
if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function() {
    return this.iter();
  };
  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
var Line = class {
  /**
  @internal
  */
  constructor(from, to, number7, text) {
    this.from = from;
    this.to = to;
    this.number = number7;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function clip(text, from, to) {
  from = Math.max(0, Math.min(text.length, from));
  return [from, Math.max(from, Math.min(text.length, to))];
}
function findClusterBreak2(str, pos, forward = true, includeExtending = true) {
  return findClusterBreak(str, pos, forward, includeExtending);
}
function surrogateLow2(ch) {
  return ch >= 56320 && ch < 57344;
}
function surrogateHigh2(ch) {
  return ch >= 55296 && ch < 56320;
}
function codePointAt2(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh2(code0) || pos + 1 == str.length)
    return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow2(code1))
    return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function codePointSize2(code) {
  return code < 65536 ? 1 : 2;
}
var DefaultSplit = /\r\n?|\n/;
var MapMode = /* @__PURE__ */ (function(MapMode2) {
  MapMode2[MapMode2["Simple"] = 0] = "Simple";
  MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
  MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
  MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
  return MapMode2;
})(MapMode || (MapMode = {}));
var ChangeDesc = class _ChangeDesc {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(sections) {
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let result = 0;
    for (let i = 0; i < this.sections.length; i += 2)
      result += this.sections[i];
    return result;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let result = 0;
    for (let i = 0; i < this.sections.length; i += 2) {
      let ins = this.sections[i + 1];
      result += ins < 0 ? this.sections[i] : ins;
    }
    return result;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(f) {
    for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      if (ins < 0) {
        f(posA, posB, len);
        posB += len;
      } else {
        posB += ins;
      }
      posA += len;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(f, individual = false) {
    iterChanges(this, f, individual);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let sections = [];
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      if (ins < 0)
        sections.push(len, ins);
      else
        sections.push(ins, len);
    }
    return new _ChangeDesc(sections);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `this` happened before the ones in `other`.
  */
  mapDesc(other, before = false) {
    return other.empty ? this : mapSet(this, other, before);
  }
  mapPos(pos, assoc = -1, mode = MapMode.Simple) {
    let posA = 0, posB = 0;
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
      if (ins < 0) {
        if (endA > pos)
          return posB + (pos - posA);
        posB += len;
      } else {
        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
          return null;
        if (endA > pos || endA == pos && assoc < 0 && !len)
          return pos == posA || assoc < 0 ? posB : posB + ins;
        posB += ins;
      }
      posA = endA;
    }
    if (pos > posA)
      throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
    return posB;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(from, to = from) {
    for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {
      let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
      if (ins >= 0 && pos <= to && end >= from)
        return pos < from && end > to ? "cover" : true;
      pos = end;
    }
    return false;
  }
  /**
  @internal
  */
  toString() {
    let result = "";
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
    }
    return result;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json) || json.length % 2 || json.some((a) => typeof a != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new _ChangeDesc(json);
  }
  /**
  @internal
  */
  static create(sections) {
    return new _ChangeDesc(sections);
  }
};
var ChangeSet = class _ChangeSet extends ChangeDesc {
  constructor(sections, inserted) {
    super(sections);
    this.inserted = inserted;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(doc2) {
    if (this.length != doc2.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
    return doc2;
  }
  mapDesc(other, before = false) {
    return mapSet(this, other, before, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(doc2) {
    let sections = this.sections.slice(), inserted = [];
    for (let i = 0, pos = 0; i < sections.length; i += 2) {
      let len = sections[i], ins = sections[i + 1];
      if (ins >= 0) {
        sections[i] = ins;
        sections[i + 1] = len;
        let index2 = i >> 1;
        while (inserted.length < index2)
          inserted.push(Text.empty);
        inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
      }
      pos += len;
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(other, before = false) {
    return other.empty ? this : mapSet(this, other, before, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(f, individual = false) {
    iterChanges(this, f, individual);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return ChangeDesc.create(this.sections);
  }
  /**
  @internal
  */
  filter(ranges) {
    let resultSections = [], resultInserted = [], filteredSections = [];
    let iter = new SectionIter(this);
    done: for (let i = 0, pos = 0; ; ) {
      let next = i == ranges.length ? 1e9 : ranges[i++];
      while (pos < next || pos == next && iter.len == 0) {
        if (iter.done)
          break done;
        let len = Math.min(iter.len, next - pos);
        addSection(filteredSections, len, -1);
        let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
        addSection(resultSections, len, ins);
        if (ins > 0)
          addInsert(resultInserted, resultSections, iter.text);
        iter.forward(len);
        pos += len;
      }
      let end = ranges[i++];
      while (pos < end) {
        if (iter.done)
          break done;
        let len = Math.min(iter.len, end - pos);
        addSection(resultSections, len, -1);
        addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
        iter.forward(len);
        pos += len;
      }
    }
    return {
      changes: new _ChangeSet(resultSections, resultInserted),
      filtered: ChangeDesc.create(filteredSections)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let parts = [];
    for (let i = 0; i < this.sections.length; i += 2) {
      let len = this.sections[i], ins = this.sections[i + 1];
      if (ins < 0)
        parts.push(len);
      else if (ins == 0)
        parts.push([len]);
      else
        parts.push([len].concat(this.inserted[i >> 1].toJSON()));
    }
    return parts;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(changes, length6, lineSep) {
    let sections = [], inserted = [], pos = 0;
    let total = null;
    function flush(force2 = false) {
      if (!force2 && !sections.length)
        return;
      if (pos < length6)
        addSection(sections, length6 - pos, -1);
      let set3 = new _ChangeSet(sections, inserted);
      total = total ? total.compose(set3.map(total)) : set3;
      sections = [];
      inserted = [];
      pos = 0;
    }
    function process2(spec) {
      if (Array.isArray(spec)) {
        for (let sub of spec)
          process2(sub);
      } else if (spec instanceof _ChangeSet) {
        if (spec.length != length6)
          throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length6})`);
        flush();
        total = total ? total.compose(spec.map(total)) : spec;
      } else {
        let { from, to = from, insert: insert5 } = spec;
        if (from > to || from < 0 || to > length6)
          throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length6})`);
        let insText = !insert5 ? Text.empty : typeof insert5 == "string" ? Text.of(insert5.split(lineSep || DefaultSplit)) : insert5;
        let insLen = insText.length;
        if (from == to && insLen == 0)
          return;
        if (from < pos)
          flush();
        if (from > pos)
          addSection(sections, from - pos, -1);
        addSection(sections, to - from, insLen);
        addInsert(inserted, sections, insText);
        pos = to;
      }
    }
    process2(changes);
    flush(!total);
    return total;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(length6) {
    return new _ChangeSet(length6 ? [length6, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let sections = [], inserted = [];
    for (let i = 0; i < json.length; i++) {
      let part = json[i];
      if (typeof part == "number") {
        sections.push(part, -1);
      } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i2) => i2 && typeof e != "string")) {
        throw new RangeError("Invalid JSON representation of ChangeSet");
      } else if (part.length == 1) {
        sections.push(part[0], 0);
      } else {
        while (inserted.length < i)
          inserted.push(Text.empty);
        inserted[i] = Text.of(part.slice(1));
        sections.push(part[0], inserted[i].length);
      }
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  @internal
  */
  static createSet(sections, inserted) {
    return new _ChangeSet(sections, inserted);
  }
};
function addSection(sections, len, ins, forceJoin = false) {
  if (len == 0 && ins <= 0)
    return;
  let last2 = sections.length - 2;
  if (last2 >= 0 && ins <= 0 && ins == sections[last2 + 1])
    sections[last2] += len;
  else if (last2 >= 0 && len == 0 && sections[last2] == 0)
    sections[last2 + 1] += ins;
  else if (forceJoin) {
    sections[last2] += len;
    sections[last2 + 1] += ins;
  } else
    sections.push(len, ins);
}
function addInsert(values2, sections, value) {
  if (value.length == 0)
    return;
  let index2 = sections.length - 2 >> 1;
  if (index2 < values2.length) {
    values2[values2.length - 1] = values2[values2.length - 1].append(value);
  } else {
    while (values2.length < index2)
      values2.push(Text.empty);
    values2.push(value);
  }
}
function iterChanges(desc, f, individual) {
  let inserted = desc.inserted;
  for (let posA = 0, posB = 0, i = 0; i < desc.sections.length; ) {
    let len = desc.sections[i++], ins = desc.sections[i++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      let endA = posA, endB = posB, text = Text.empty;
      for (; ; ) {
        endA += len;
        endB += ins;
        if (ins && inserted)
          text = text.append(inserted[i - 2 >> 1]);
        if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
          break;
        len = desc.sections[i++];
        ins = desc.sections[i++];
      }
      f(posA, endA, posB, endB, text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before, mkSet = false) {
  let sections = [], insert5 = mkSet ? [] : null;
  let a = new SectionIter(setA), b = new SectionIter(setB);
  for (let inserted = -1; ; ) {
    if (a.done && b.len || b.done && a.len) {
      throw new Error("Mismatched change set lengths");
    } else if (a.ins == -1 && b.ins == -1) {
      let len = Math.min(a.len, b.len);
      addSection(sections, len, -1);
      a.forward(len);
      b.forward(len);
    } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
      let len = b.len;
      addSection(sections, b.ins, -1);
      while (len) {
        let piece = Math.min(a.len, len);
        if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
          addSection(sections, 0, a.ins);
          if (insert5)
            addInsert(insert5, sections, a.text);
          inserted = a.i;
        }
        a.forward(piece);
        len -= piece;
      }
      b.next();
    } else if (a.ins >= 0) {
      let len = 0, left2 = a.len;
      while (left2) {
        if (b.ins == -1) {
          let piece = Math.min(left2, b.len);
          len += piece;
          left2 -= piece;
          b.forward(piece);
        } else if (b.ins == 0 && b.len < left2) {
          left2 -= b.len;
          b.next();
        } else {
          break;
        }
      }
      addSection(sections, len, inserted < a.i ? a.ins : 0);
      if (insert5 && inserted < a.i)
        addInsert(insert5, sections, a.text);
      inserted = a.i;
      a.forward(a.len - left2);
    } else if (a.done && b.done) {
      return insert5 ? ChangeSet.createSet(sections, insert5) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB, mkSet = false) {
  let sections = [];
  let insert5 = mkSet ? [] : null;
  let a = new SectionIter(setA), b = new SectionIter(setB);
  for (let open = false; ; ) {
    if (a.done && b.done) {
      return insert5 ? ChangeSet.createSet(sections, insert5) : ChangeDesc.create(sections);
    } else if (a.ins == 0) {
      addSection(sections, a.len, 0, open);
      a.next();
    } else if (b.len == 0 && !b.done) {
      addSection(sections, 0, b.ins, open);
      if (insert5)
        addInsert(insert5, sections, b.text);
      b.next();
    } else if (a.done || b.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      let len = Math.min(a.len2, b.len), sectionLen = sections.length;
      if (a.ins == -1) {
        let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
        addSection(sections, len, insB, open);
        if (insert5 && insB)
          addInsert(insert5, sections, b.text);
      } else if (b.ins == -1) {
        addSection(sections, a.off ? 0 : a.len, len, open);
        if (insert5)
          addInsert(insert5, sections, a.textBit(len));
      } else {
        addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
        if (insert5 && !b.off)
          addInsert(insert5, sections, b.text);
      }
      open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
      a.forward2(len);
      b.forward(len);
    }
  }
}
var SectionIter = class {
  constructor(set3) {
    this.set = set3;
    this.i = 0;
    this.next();
  }
  next() {
    let { sections } = this.set;
    if (this.i < sections.length) {
      this.len = sections[this.i++];
      this.ins = sections[this.i++];
    } else {
      this.len = 0;
      this.ins = -2;
    }
    this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted } = this.set, index2 = this.i - 2 >> 1;
    return index2 >= inserted.length ? Text.empty : inserted[index2];
  }
  textBit(len) {
    let { inserted } = this.set, index2 = this.i - 2 >> 1;
    return index2 >= inserted.length && !len ? Text.empty : inserted[index2].slice(this.off, len == null ? void 0 : this.off + len);
  }
  forward(len) {
    if (len == this.len)
      this.next();
    else {
      this.len -= len;
      this.off += len;
    }
  }
  forward2(len) {
    if (this.ins == -1)
      this.forward(len);
    else if (len == this.ins)
      this.next();
    else {
      this.ins -= len;
      this.off += len;
    }
  }
};
var SelectionRange = class _SelectionRange {
  constructor(from, to, flags) {
    this.from = from;
    this.to = to;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let level = this.flags & 7;
    return level == 7 ? null : level;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let value = this.flags >> 6;
    return value == 16777215 ? void 0 : value;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(change, assoc = -1) {
    let from, to;
    if (this.empty) {
      from = to = change.mapPos(this.from, assoc);
    } else {
      from = change.mapPos(this.from, 1);
      to = change.mapPos(this.to, -1);
    }
    return from == this.from && to == this.to ? this : new _SelectionRange(from, to, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(from, to = from) {
    if (from <= this.anchor && to >= this.anchor)
      return EditorSelection.range(from, to);
    let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
    return EditorSelection.range(this.anchor, head);
  }
  /**
  Compare this range to another range.
  */
  eq(other, includeAssoc = false) {
    return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(json) {
    if (!json || typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return EditorSelection.range(json.anchor, json.head);
  }
  /**
  @internal
  */
  static create(from, to, flags) {
    return new _SelectionRange(from, to, flags);
  }
};
var EditorSelection = class _EditorSelection {
  constructor(ranges, mainIndex) {
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(change, assoc = -1) {
    if (change.empty)
      return this;
    return _EditorSelection.create(this.ranges.map((r) => r.map(change, assoc)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(other, includeAssoc = false) {
    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
      return false;
    for (let i = 0; i < this.ranges.length; i++)
      if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
        return false;
    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(range3, main = true) {
    return _EditorSelection.create([range3].concat(this.ranges), main ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(range3, which = this.mainIndex) {
    let ranges = this.ranges.slice();
    ranges[which] = range3;
    return _EditorSelection.create(ranges, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((r) => r.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(json) {
    if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new _EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(anchor, head = anchor) {
    return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(ranges, mainIndex = 0) {
    if (ranges.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let pos = 0, i = 0; i < ranges.length; i++) {
      let range3 = ranges[i];
      if (range3.empty ? range3.from <= pos : range3.from < pos)
        return _EditorSelection.normalized(ranges.slice(), mainIndex);
      pos = range3.to;
    }
    return new _EditorSelection(ranges, mainIndex);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
    return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(anchor, head, goalColumn, bidiLevel) {
    let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
    return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
  }
  /**
  @internal
  */
  static normalized(ranges, mainIndex = 0) {
    let main = ranges[mainIndex];
    ranges.sort((a, b) => a.from - b.from);
    mainIndex = ranges.indexOf(main);
    for (let i = 1; i < ranges.length; i++) {
      let range3 = ranges[i], prev = ranges[i - 1];
      if (range3.empty ? range3.from <= prev.to : range3.from < prev.to) {
        let from = prev.from, to = Math.max(range3.to, prev.to);
        if (i <= mainIndex)
          mainIndex--;
        ranges.splice(--i, 2, range3.anchor > range3.head ? _EditorSelection.range(to, from) : _EditorSelection.range(from, to));
      }
    }
    return new _EditorSelection(ranges, mainIndex);
  }
};
function checkSelection(selection3, docLength) {
  for (let range3 of selection3.ranges)
    if (range3.to > docLength)
      throw new RangeError("Selection points outside of document");
}
var nextID = 0;
var Facet = class _Facet {
  constructor(combine, compareInput, compare2, isStatic, enables) {
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare2;
    this.isStatic = isStatic;
    this.id = nextID++;
    this.default = combine([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(config = {}) {
    return new _Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(value) {
    return new FacetProvider([], this, 0, value);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(deps, get3) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 1, get3);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(deps, get3) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 2, get3);
  }
  from(field, get3) {
    if (!get3)
      get3 = (x2) => x2;
    return this.compute([field], (state) => get3(state.field(field)));
  }
};
function sameArray(a, b) {
  return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
}
var FacetProvider = class {
  constructor(dependencies, facet, type2, value) {
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type2;
    this.value = value;
    this.id = nextID++;
  }
  dynamicSlot(addresses2) {
    var _a2;
    let getter = this.value;
    let compare2 = this.facet.compareInput;
    let id4 = this.id, idx = addresses2[id4] >> 1, multi = this.type == 2;
    let depDoc = false, depSel = false, depAddrs = [];
    for (let dep of this.dependencies) {
      if (dep == "doc")
        depDoc = true;
      else if (dep == "selection")
        depSel = true;
      else if ((((_a2 = addresses2[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
        depAddrs.push(addresses2[dep.id]);
    }
    return {
      create(state) {
        state.values[idx] = getter(state);
        return 1;
      },
      update(state, tr) {
        if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
          let newVal = getter(state);
          if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
            state.values[idx] = newVal;
            return 1;
          }
        }
        return 0;
      },
      reconfigure: (state, oldState) => {
        let newVal, oldAddr = oldState.config.address[id4];
        if (oldAddr != null) {
          let oldVal = getAddr(oldState, oldAddr);
          if (this.dependencies.every((dep) => {
            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
          }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
            state.values[idx] = oldVal;
            return 0;
          }
        } else {
          newVal = getter(state);
        }
        state.values[idx] = newVal;
        return 1;
      }
    };
  }
};
function compareArray(a, b, compare2) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (!compare2(a[i], b[i]))
      return false;
  return true;
}
function ensureAll(state, addrs) {
  let changed = false;
  for (let addr of addrs)
    if (ensureAddr(state, addr) & 1)
      changed = true;
  return changed;
}
function dynamicFacetSlot(addresses2, facet, providers) {
  let providerAddrs = providers.map((p) => addresses2[p.id]);
  let providerTypes = providers.map((p) => p.type);
  let dynamic = providerAddrs.filter((p) => !(p & 1));
  let idx = addresses2[facet.id] >> 1;
  function get3(state) {
    let values2 = [];
    for (let i = 0; i < providerAddrs.length; i++) {
      let value = getAddr(state, providerAddrs[i]);
      if (providerTypes[i] == 2)
        for (let val of value)
          values2.push(val);
      else
        values2.push(value);
    }
    return facet.combine(values2);
  }
  return {
    create(state) {
      for (let addr of providerAddrs)
        ensureAddr(state, addr);
      state.values[idx] = get3(state);
      return 1;
    },
    update(state, tr) {
      if (!ensureAll(state, dynamic))
        return 0;
      let value = get3(state);
      if (facet.compare(value, state.values[idx]))
        return 0;
      state.values[idx] = value;
      return 1;
    },
    reconfigure(state, oldState) {
      let depChanged = ensureAll(state, providerAddrs);
      let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      let value = get3(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1;
    }
  };
}
var initField = /* @__PURE__ */ Facet.define({ static: true });
var StateField = class _StateField {
  constructor(id4, createF, updateF, compareF, spec) {
    this.id = id4;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(config) {
    let field = new _StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
    if (config.provide)
      field.provides = config.provide(field);
    return field;
  }
  create(state) {
    let init5 = state.facet(initField).find((i) => i.field == this);
    return ((init5 === null || init5 === void 0 ? void 0 : init5.create) || this.createF)(state);
  }
  /**
  @internal
  */
  slot(addresses2) {
    let idx = addresses2[this.id] >> 1;
    return {
      create: (state) => {
        state.values[idx] = this.create(state);
        return 1;
      },
      update: (state, tr) => {
        let oldVal = state.values[idx];
        let value = this.updateF(oldVal, tr);
        if (this.compareF(oldVal, value))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure: (state, oldState) => {
        let init5 = state.facet(initField), oldInit = oldState.facet(initField), reInit;
        if ((reInit = init5.find((i) => i.field == this)) && reInit != oldInit.find((i) => i.field == this)) {
          state.values[idx] = reInit.create(state);
          return 1;
        }
        if (oldState.config.address[this.id] != null) {
          state.values[idx] = oldState.field(this);
          return 0;
        }
        state.values[idx] = this.create(state);
        return 1;
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(create2) {
    return [this, initField.of({ field: this, create: create2 })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
};
var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function prec(value) {
  return (ext) => new PrecExtension(ext, value);
}
var Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ prec(Prec_.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ prec(Prec_.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ prec(Prec_.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ prec(Prec_.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ prec(Prec_.lowest)
};
var PrecExtension = class {
  constructor(inner, prec2) {
    this.inner = inner;
    this.prec = prec2;
  }
};
var Compartment = class _Compartment {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(ext) {
    return new CompartmentInstance(this, ext);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(content2) {
    return _Compartment.reconfigure.of({ compartment: this, extension: content2 });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(state) {
    return state.config.compartments.get(this);
  }
};
var CompartmentInstance = class {
  constructor(compartment, inner) {
    this.compartment = compartment;
    this.inner = inner;
  }
};
var Configuration = class _Configuration {
  constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
    this.base = base2;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length)
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(facet) {
    let addr = this.address[facet.id];
    return addr == null ? facet.default : this.staticValues[addr >> 1];
  }
  static resolve(base2, compartments, oldState) {
    let fields2 = [];
    let facets = /* @__PURE__ */ Object.create(null);
    let newCompartments = /* @__PURE__ */ new Map();
    for (let ext of flatten(base2, compartments, newCompartments)) {
      if (ext instanceof StateField)
        fields2.push(ext);
      else
        (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
    }
    let address = /* @__PURE__ */ Object.create(null);
    let staticValues = [];
    let dynamicSlots = [];
    for (let field of fields2) {
      address[field.id] = dynamicSlots.length << 1;
      dynamicSlots.push((a) => field.slot(a));
    }
    let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
    for (let id4 in facets) {
      let providers = facets[id4], facet = providers[0].facet;
      let oldProviders = oldFacets && oldFacets[id4] || [];
      if (providers.every(
        (p) => p.type == 0
        /* Provider.Static */
      )) {
        address[facet.id] = staticValues.length << 1 | 1;
        if (sameArray(oldProviders, providers)) {
          staticValues.push(oldState.facet(facet));
        } else {
          let value = facet.combine(providers.map((p) => p.value));
          staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
        }
      } else {
        for (let p of providers) {
          if (p.type == 0) {
            address[p.id] = staticValues.length << 1 | 1;
            staticValues.push(p.value);
          } else {
            address[p.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a) => p.dynamicSlot(a));
          }
        }
        address[facet.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a) => dynamicFacetSlot(a, facet, providers));
      }
    }
    let dynamic = dynamicSlots.map((f) => f(address));
    return new _Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
  }
};
function flatten(extension, compartments, newCompartments) {
  let result = [[], [], [], [], []];
  let seen = /* @__PURE__ */ new Map();
  function inner(ext, prec2) {
    let known = seen.get(ext);
    if (known != null) {
      if (known <= prec2)
        return;
      let found = result[known].indexOf(ext);
      if (found > -1)
        result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance)
        newCompartments.delete(ext.compartment);
    }
    seen.set(ext, prec2);
    if (Array.isArray(ext)) {
      for (let e of ext)
        inner(e, prec2);
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment))
        throw new RangeError(`Duplicate use of compartment in extensions`);
      let content2 = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content2);
      inner(content2, prec2);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec2].push(ext);
      if (ext.provides)
        inner(ext.provides, prec2);
    } else if (ext instanceof FacetProvider) {
      result[prec2].push(ext);
      if (ext.facet.extensions)
        inner(ext.facet.extensions, Prec_.default);
    } else {
      let content2 = ext.extension;
      if (!content2)
        throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      inner(content2, prec2);
    }
  }
  inner(extension, Prec_.default);
  return result.reduce((a, b) => a.concat(b));
}
function ensureAddr(state, addr) {
  if (addr & 1)
    return 2;
  let idx = addr >> 1;
  let status = state.status[idx];
  if (status == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2)
    return status;
  state.status[idx] = 4;
  let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
var languageData = /* @__PURE__ */ Facet.define();
var allowMultipleSelections = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((v) => v),
  static: true
});
var lineSeparator = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : void 0,
  static: true
});
var changeFilter = /* @__PURE__ */ Facet.define();
var transactionFilter = /* @__PURE__ */ Facet.define();
var transactionExtender = /* @__PURE__ */ Facet.define();
var readOnly = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : false
});
var Annotation = class {
  /**
  @internal
  */
  constructor(type2, value) {
    this.type = type2;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new AnnotationType();
  }
};
var AnnotationType = class {
  /**
  Create an instance of this annotation.
  */
  of(value) {
    return new Annotation(this, value);
  }
};
var StateEffectType = class {
  /**
  @internal
  */
  constructor(map4) {
    this.map = map4;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(value) {
    return new StateEffect(this, value);
  }
};
var StateEffect = class _StateEffect {
  /**
  @internal
  */
  constructor(type2, value) {
    this.type = type2;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(mapping) {
    let mapped = this.type.map(this.value, mapping);
    return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(type2) {
    return this.type == type2;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(spec = {}) {
    return new StateEffectType(spec.map || ((v) => v));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(effects, mapping) {
    if (!effects.length)
      return effects;
    let result = [];
    for (let effect of effects) {
      let mapped = effect.map(mapping);
      if (mapped)
        result.push(mapped);
    }
    return result;
  }
};
StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
var Transaction = class _Transaction {
  constructor(startState2, changes, selection3, effects, annotations, scrollIntoView2) {
    this.startState = startState2;
    this.changes = changes;
    this.selection = selection3;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView2;
    this._doc = null;
    this._state = null;
    if (selection3)
      checkSelection(selection3, changes.newLength);
    if (!annotations.some((a) => a.type == _Transaction.time))
      this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */
  static create(startState2, changes, selection3, effects, annotations, scrollIntoView2) {
    return new _Transaction(startState2, changes, selection3, effects, annotations, scrollIntoView2);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    if (!this._state)
      this.startState.applyTransaction(this);
    return this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(type2) {
    for (let ann of this.annotations)
      if (ann.type == type2)
        return ann.value;
    return void 0;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(event) {
    let e = this.annotation(_Transaction.userEvent);
    return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
  }
};
Transaction.time = /* @__PURE__ */ Annotation.define();
Transaction.userEvent = /* @__PURE__ */ Annotation.define();
Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
Transaction.remote = /* @__PURE__ */ Annotation.define();
function joinRanges(a, b) {
  let result = [];
  for (let iA = 0, iB = 0; ; ) {
    let from, to;
    if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
      from = a[iA++];
      to = a[iA++];
    } else if (iB < b.length) {
      from = b[iB++];
      to = b[iB++];
    } else
      return result;
    if (!result.length || result[result.length - 1] < from)
      result.push(from, to);
    else if (result[result.length - 1] < to)
      result[result.length - 1] = to;
  }
}
function mergeTransaction(a, b, sequential) {
  var _a2;
  let mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b.changes;
    mapForB = ChangeSet.empty(b.changes.length);
    changes = a.changes.compose(b.changes);
  } else {
    mapForA = b.changes.map(a.changes);
    mapForB = a.changes.mapDesc(b.changes, true);
    changes = a.changes.compose(mapForA);
  }
  return {
    changes,
    selection: b.selection ? b.selection.map(mapForB) : (_a2 = a.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
    effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
    annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
    scrollIntoView: a.scrollIntoView || b.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  let sel = spec.selection, annotations = asArray(spec.annotations);
  if (spec.userEvent)
    annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter3) {
  let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false)
    filter3 = false;
  for (let i = 1; i < specs.length; i++) {
    if (specs[i].filter === false)
      filter3 = false;
    let seq = !!specs[i].sequential;
    s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
  }
  let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
  return extendTransaction(filter3 ? filterTransaction(tr) : tr);
}
function filterTransaction(tr) {
  let state = tr.startState;
  let result = true;
  for (let filter3 of state.facet(changeFilter)) {
    let value = filter3(tr);
    if (value === false) {
      result = false;
      break;
    }
    if (Array.isArray(value))
      result = result === true ? value : joinRanges(result, value);
  }
  if (result !== true) {
    let changes, back;
    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      let filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  }
  let filters = state.facet(transactionFilter);
  for (let i = filters.length - 1; i >= 0; i--) {
    let filtered = filters[i](tr);
    if (filtered instanceof Transaction)
      tr = filtered;
    else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
      tr = filtered[0];
    else
      tr = resolveTransaction(state, asArray(filtered), false);
  }
  return tr;
}
function extendTransaction(tr) {
  let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
  for (let i = extenders.length - 1; i >= 0; i--) {
    let extension = extenders[i](tr);
    if (extension && Object.keys(extension).length)
      spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }
  return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
var none2 = [];
function asArray(value) {
  return value == null ? none2 : Array.isArray(value) ? value : [value];
}
var CharCategory = /* @__PURE__ */ (function(CharCategory2) {
  CharCategory2[CharCategory2["Word"] = 0] = "Word";
  CharCategory2[CharCategory2["Space"] = 1] = "Space";
  CharCategory2[CharCategory2["Other"] = 2] = "Other";
  return CharCategory2;
})(CharCategory || (CharCategory = {}));
var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var wordChar;
try {
  wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_) {
}
function hasWordChar(str) {
  if (wordChar)
    return wordChar.test(str);
  for (let i = 0; i < str.length; i++) {
    let ch = str[i];
    if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
      return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return (char2) => {
    if (!/\S/.test(char2))
      return CharCategory.Space;
    if (hasWordChar(char2))
      return CharCategory.Word;
    for (let i = 0; i < wordChars.length; i++)
      if (char2.indexOf(wordChars[i]) > -1)
        return CharCategory.Word;
    return CharCategory.Other;
  };
}
var EditorState = class _EditorState {
  constructor(config, doc2, selection3, values2, computeSlot, tr) {
    this.config = config;
    this.doc = doc2;
    this.selection = selection3;
    this.values = values2;
    this.status = config.statusTemplate.slice();
    this.computeSlot = computeSlot;
    if (tr)
      tr._state = this;
    for (let i = 0; i < this.config.dynamicSlots.length; i++)
      ensureAddr(this, i << 1);
    this.computeSlot = null;
  }
  field(field, require2 = true) {
    let addr = this.config.address[field.id];
    if (addr == null) {
      if (require2)
        throw new RangeError("Field is not present in this state");
      return void 0;
    }
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...specs) {
    return resolveTransaction(this, specs, true);
  }
  /**
  @internal
  */
  applyTransaction(tr) {
    let conf = this.config, { base: base2, compartments } = conf;
    for (let effect of tr.effects) {
      if (effect.is(Compartment.reconfigure)) {
        if (conf) {
          compartments = /* @__PURE__ */ new Map();
          conf.compartments.forEach((val, key) => compartments.set(key, val));
          conf = null;
        }
        compartments.set(effect.value.compartment, effect.value.extension);
      } else if (effect.is(StateEffect.reconfigure)) {
        conf = null;
        base2 = effect.value;
      } else if (effect.is(StateEffect.appendConfig)) {
        conf = null;
        base2 = asArray(base2).concat(effect.value);
      }
    }
    let startValues;
    if (!conf) {
      conf = Configuration.resolve(base2, compartments, this);
      let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
      startValues = intermediateState.values;
    } else {
      startValues = tr.startState.values.slice();
    }
    let selection3 = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
    new _EditorState(conf, tr.newDoc, selection3, startValues, (state, slot) => slot.update(state, tr), tr);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(text) {
    if (typeof text == "string")
      text = this.toText(text);
    return this.changeByRange((range3) => ({
      changes: { from: range3.from, to: range3.to, insert: text },
      range: EditorSelection.cursor(range3.from + text.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(f) {
    let sel = this.selection;
    let result1 = f(sel.ranges[0]);
    let changes = this.changes(result1.changes), ranges = [result1.range];
    let effects = asArray(result1.effects);
    for (let i = 1; i < sel.ranges.length; i++) {
      let result = f(sel.ranges[i]);
      let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
      for (let j = 0; j < i; j++)
        ranges[j] = ranges[j].map(newMapped);
      let mapBy = changes.mapDesc(newChanges, true);
      ranges.push(result.range.map(mapBy));
      changes = changes.compose(newMapped);
      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
    }
    return {
      changes,
      selection: EditorSelection.create(ranges, sel.mainIndex),
      effects
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(spec = []) {
    if (spec instanceof ChangeSet)
      return spec;
    return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(string4) {
    return Text.of(string4.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(from = 0, to = this.doc.length) {
    return this.doc.sliceString(from, to, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(facet) {
    let addr = this.config.address[facet.id];
    if (addr == null)
      return facet.default;
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(fields2) {
    let result = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (fields2)
      for (let prop in fields2) {
        let value = fields2[prop];
        if (value instanceof StateField && this.config.address[value.id] != null)
          result[prop] = value.spec.toJSON(this.field(fields2[prop]), this);
      }
    return result;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(json, config = {}, fields2) {
    if (!json || typeof json.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let fieldInit = [];
    if (fields2)
      for (let prop in fields2) {
        if (Object.prototype.hasOwnProperty.call(json, prop)) {
          let field = fields2[prop], value = json[prop];
          fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
        }
      }
    return _EditorState.create({
      doc: json.doc,
      selection: EditorSelection.fromJSON(json.selection),
      extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(config = {}) {
    let configuration = Configuration.resolve(config.extensions || [], /* @__PURE__ */ new Map());
    let doc2 = config.doc instanceof Text ? config.doc : Text.of((config.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
    let selection3 = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
    checkSelection(selection3, doc2.length);
    if (!configuration.staticFacet(allowMultipleSelections))
      selection3 = selection3.asSingle();
    return new _EditorState(configuration, doc2, selection3, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(_EditorState.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(_EditorState.lineSeparator) || "\n";
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(readOnly);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(phrase, ...insert5) {
    for (let map4 of this.facet(_EditorState.phrases))
      if (Object.prototype.hasOwnProperty.call(map4, phrase)) {
        phrase = map4[phrase];
        break;
      }
    if (insert5.length)
      phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
        if (i == "$")
          return "$";
        let n = +(i || 1);
        return !n || n > insert5.length ? m : insert5[n - 1];
      });
    return phrase;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(name3, pos, side = -1) {
    let values2 = [];
    for (let provider of this.facet(languageData)) {
      for (let result of provider(this, pos, side)) {
        if (Object.prototype.hasOwnProperty.call(result, name3))
          values2.push(result[name3]);
      }
    }
    return values2;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(at) {
    return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(pos) {
    let { text, from, length: length6 } = this.doc.lineAt(pos);
    let cat = this.charCategorizer(pos);
    let start2 = pos - from, end = pos - from;
    while (start2 > 0) {
      let prev = findClusterBreak2(text, start2, false);
      if (cat(text.slice(prev, start2)) != CharCategory.Word)
        break;
      start2 = prev;
    }
    while (end < length6) {
      let next = findClusterBreak2(text, end);
      if (cat(text.slice(end, next)) != CharCategory.Word)
        break;
      end = next;
    }
    return start2 == end ? null : EditorSelection.range(start2 + from, end + from);
  }
};
EditorState.allowMultipleSelections = allowMultipleSelections;
EditorState.tabSize = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : 4
});
EditorState.lineSeparator = lineSeparator;
EditorState.readOnly = readOnly;
EditorState.phrases = /* @__PURE__ */ Facet.define({
  compare(a, b) {
    let kA = Object.keys(a), kB = Object.keys(b);
    return kA.length == kB.length && kA.every((k) => a[k] == b[k]);
  }
});
EditorState.languageData = languageData;
EditorState.changeFilter = changeFilter;
EditorState.transactionFilter = transactionFilter;
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
function combineConfig(configs, defaults, combine = {}) {
  let result = {};
  for (let config of configs)
    for (let key of Object.keys(config)) {
      let value = config[key], current = result[key];
      if (current === void 0)
        result[key] = value;
      else if (current === value || value === void 0) ;
      else if (Object.hasOwnProperty.call(combine, key))
        result[key] = combine[key](current, value);
      else
        throw new Error("Config merge conflict for field " + key);
    }
  for (let key in defaults)
    if (result[key] === void 0)
      result[key] = defaults[key];
  return result;
}
var RangeValue = class {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(other) {
    return this == other;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(from, to = from) {
    return Range.create(from, to, this);
  }
};
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
var Range = class _Range {
  constructor(from, to, value) {
    this.from = from;
    this.to = to;
    this.value = value;
  }
  /**
  @internal
  */
  static create(from, to, value) {
    return new _Range(from, to, value);
  }
};
function cmpRange(a, b) {
  return a.from - b.from || a.value.startSide - b.value.startSide;
}
var Chunk = class _Chunk {
  constructor(from, to, value, maxPoint) {
    this.from = from;
    this.to = to;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(pos, side, end, startAt = 0) {
    let arr = end ? this.to : this.from;
    for (let lo = startAt, hi = arr.length; ; ) {
      if (lo == hi)
        return lo;
      let mid = lo + hi >> 1;
      let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
      if (mid == lo)
        return diff >= 0 ? lo : hi;
      if (diff >= 0)
        hi = mid;
      else
        lo = mid + 1;
    }
  }
  between(offset, from, to, f) {
    for (let i = this.findIndex(from, -1e9, true), e = this.findIndex(to, 1e9, false, i); i < e; i++)
      if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
        return false;
  }
  map(offset, changes) {
    let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
    for (let i = 0; i < this.value.length; i++) {
      let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
      if (curFrom == curTo) {
        let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
        if (mapped == null)
          continue;
        newFrom = newTo = mapped;
        if (val.startSide != val.endSide) {
          newTo = changes.mapPos(curFrom, val.endSide);
          if (newTo < newFrom)
            continue;
        }
      } else {
        newFrom = changes.mapPos(curFrom, val.startSide);
        newTo = changes.mapPos(curTo, val.endSide);
        if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
          continue;
      }
      if ((newTo - newFrom || val.endSide - val.startSide) < 0)
        continue;
      if (newPos < 0)
        newPos = newFrom;
      if (val.point)
        maxPoint = Math.max(maxPoint, newTo - newFrom);
      value.push(val);
      from.push(newFrom - newPos);
      to.push(newTo - newPos);
    }
    return { mapped: value.length ? new _Chunk(from, to, value, maxPoint) : null, pos: newPos };
  }
};
var RangeSet = class _RangeSet {
  constructor(chunkPos, chunk, nextLayer, maxPoint) {
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  static create(chunkPos, chunk, nextLayer, maxPoint) {
    return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
  }
  /**
  @internal
  */
  get length() {
    let last2 = this.chunk.length - 1;
    return last2 < 0 ? 0 : Math.max(this.chunkEnd(last2), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let size3 = this.nextLayer.size;
    for (let chunk of this.chunk)
      size3 += chunk.value.length;
    return size3;
  }
  /**
  @internal
  */
  chunkEnd(index2) {
    return this.chunkPos[index2] + this.chunk[index2].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(updateSpec) {
    let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
    let filter3 = updateSpec.filter;
    if (add.length == 0 && !filter3)
      return this;
    if (sort)
      add = add.slice().sort(cmpRange);
    if (this.isEmpty)
      return add.length ? _RangeSet.of(add) : this;
    let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
    let builder = new RangeSetBuilder();
    while (cur.value || i < add.length) {
      if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
        let range3 = add[i++];
        if (!builder.addInner(range3.from, range3.to, range3.value))
          spill.push(range3);
      } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter3 || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
        cur.nextChunk();
      } else {
        if (!filter3 || filterFrom > cur.to || filterTo < cur.from || filter3(cur.from, cur.to, cur.value)) {
          if (!builder.addInner(cur.from, cur.to, cur.value))
            spill.push(Range.create(cur.from, cur.to, cur.value));
        }
        cur.next();
      }
    }
    return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter: filter3, filterFrom, filterTo }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(changes) {
    if (changes.empty || this.isEmpty)
      return this;
    let chunks = [], chunkPos = [], maxPoint = -1;
    for (let i = 0; i < this.chunk.length; i++) {
      let start2 = this.chunkPos[i], chunk = this.chunk[i];
      let touch = changes.touchesRange(start2, start2 + chunk.length);
      if (touch === false) {
        maxPoint = Math.max(maxPoint, chunk.maxPoint);
        chunks.push(chunk);
        chunkPos.push(changes.mapPos(start2));
      } else if (touch === true) {
        let { mapped, pos } = chunk.map(start2, changes);
        if (mapped) {
          maxPoint = Math.max(maxPoint, mapped.maxPoint);
          chunks.push(mapped);
          chunkPos.push(pos);
        }
      }
    }
    let next = this.nextLayer.map(changes);
    return chunks.length == 0 ? next : new _RangeSet(chunkPos, chunks, next || _RangeSet.empty, maxPoint);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(from, to, f) {
    if (this.isEmpty)
      return;
    for (let i = 0; i < this.chunk.length; i++) {
      let start2 = this.chunkPos[i], chunk = this.chunk[i];
      if (to >= start2 && from <= start2 + chunk.length && chunk.between(start2, from - start2, to - start2, f) === false)
        return;
    }
    this.nextLayer.between(from, to, f);
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(from = 0) {
    return HeapCursor.from([this]).goto(from);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(sets, from = 0) {
    return HeapCursor.from(sets).goto(from);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
    let a = oldSets.filter((set3) => set3.maxPoint > 0 || !set3.isEmpty && set3.maxPoint >= minPointSize);
    let b = newSets.filter((set3) => set3.maxPoint > 0 || !set3.isEmpty && set3.maxPoint >= minPointSize);
    let sharedChunks = findSharedChunks(a, b, textDiff);
    let sideA = new SpanCursor(a, sharedChunks, minPointSize);
    let sideB = new SpanCursor(b, sharedChunks, minPointSize);
    textDiff.iterGaps((fromA, fromB, length6) => compare(sideA, fromA, sideB, fromB, length6, comparator));
    if (textDiff.empty && textDiff.length == 0)
      compare(sideA, 0, sideB, 0, 0, comparator);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(oldSets, newSets, from = 0, to) {
    if (to == null)
      to = 1e9 - 1;
    let a = oldSets.filter((set3) => !set3.isEmpty && newSets.indexOf(set3) < 0);
    let b = newSets.filter((set3) => !set3.isEmpty && oldSets.indexOf(set3) < 0);
    if (a.length != b.length)
      return false;
    if (!a.length)
      return true;
    let sharedChunks = findSharedChunks(a, b);
    let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
    for (; ; ) {
      if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
        return false;
      if (sideA.to > to)
        return true;
      sideA.next();
      sideB.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(sets, from, to, iterator, minPointSize = -1) {
    let cursor2 = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
    let openRanges = cursor2.openStart;
    for (; ; ) {
      let curTo = Math.min(cursor2.to, to);
      if (cursor2.point) {
        let active = cursor2.activeForPoint(cursor2.to);
        let openCount = cursor2.pointFrom < from ? active.length + 1 : cursor2.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
        iterator.point(pos, curTo, cursor2.point, active, openCount, cursor2.pointRank);
        openRanges = Math.min(cursor2.openEnd(curTo), active.length);
      } else if (curTo > pos) {
        iterator.span(pos, curTo, cursor2.active, openRanges);
        openRanges = cursor2.openEnd(curTo);
      }
      if (cursor2.to > to)
        return openRanges + (cursor2.point && cursor2.to > to ? 1 : 0);
      pos = cursor2.to;
      cursor2.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(ranges, sort = false) {
    let build = new RangeSetBuilder();
    for (let range3 of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
      build.add(range3.from, range3.to, range3.value);
    return build.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(sets) {
    if (!sets.length)
      return _RangeSet.empty;
    let result = sets[sets.length - 1];
    for (let i = sets.length - 2; i >= 0; i--) {
      for (let layer = sets[i]; layer != _RangeSet.empty; layer = layer.nextLayer)
        result = new _RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
    }
    return result;
  }
};
RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1)
    for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
      let cur = ranges[i];
      if (cmpRange(prev, cur) > 0)
        return ranges.slice().sort(cmpRange);
      prev = cur;
    }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
var RangeSetBuilder = class _RangeSetBuilder {
  finishChunk(newArrays) {
    this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
    this.chunkPos.push(this.chunkStart);
    this.chunkStart = -1;
    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
    this.maxPoint = -1;
    if (newArrays) {
      this.from = [];
      this.to = [];
      this.value = [];
    }
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1e9;
    this.lastTo = -1e9;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(from, to, value) {
    if (!this.addInner(from, to, value))
      (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from, to, value);
  }
  /**
  @internal
  */
  addInner(from, to, value) {
    let diff = from - this.lastTo || value.startSide - this.last.endSide;
    if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    if (diff < 0)
      return false;
    if (this.from.length == 250)
      this.finishChunk(true);
    if (this.chunkStart < 0)
      this.chunkStart = from;
    this.from.push(from - this.chunkStart);
    this.to.push(to - this.chunkStart);
    this.last = value;
    this.lastFrom = from;
    this.lastTo = to;
    this.value.push(value);
    if (value.point)
      this.maxPoint = Math.max(this.maxPoint, to - from);
    return true;
  }
  /**
  @internal
  */
  addChunk(from, chunk) {
    if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
      return false;
    if (this.from.length)
      this.finishChunk(true);
    this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
    this.chunks.push(chunk);
    this.chunkPos.push(from);
    let last2 = chunk.value.length - 1;
    this.last = chunk.value[last2];
    this.lastFrom = chunk.from[last2] + from;
    this.lastTo = chunk.to[last2] + from;
    return true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(RangeSet.empty);
  }
  /**
  @internal
  */
  finishInner(next) {
    if (this.from.length)
      this.finishChunk(false);
    if (this.chunks.length == 0)
      return next;
    let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
    this.from = null;
    return result;
  }
};
function findSharedChunks(a, b, textDiff) {
  let inA = /* @__PURE__ */ new Map();
  for (let set3 of a)
    for (let i = 0; i < set3.chunk.length; i++)
      if (set3.chunk[i].maxPoint <= 0)
        inA.set(set3.chunk[i], set3.chunkPos[i]);
  let shared = /* @__PURE__ */ new Set();
  for (let set3 of b)
    for (let i = 0; i < set3.chunk.length; i++) {
      let known = inA.get(set3.chunk[i]);
      if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set3.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set3.chunk[i].length)))
        shared.add(set3.chunk[i]);
    }
  return shared;
}
var LayerCursor = class {
  constructor(layer, skip, minPoint, rank = 0) {
    this.layer = layer;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(pos, side = -1e9) {
    this.chunkIndex = this.rangeIndex = 0;
    this.gotoInner(pos, side, false);
    return this;
  }
  gotoInner(pos, side, forward) {
    while (this.chunkIndex < this.layer.chunk.length) {
      let next = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
        break;
      this.chunkIndex++;
      forward = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
      if (!forward || this.rangeIndex < rangeIndex)
        this.setRangeIndex(rangeIndex);
    }
    this.next();
  }
  forward(pos, side) {
    if ((this.to - pos || this.endSide - side) < 0)
      this.gotoInner(pos, side, true);
  }
  next() {
    for (; ; ) {
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9;
        this.value = null;
        break;
      } else {
        let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
        let from = chunkPos + chunk.from[this.rangeIndex];
        this.from = from;
        this.to = chunkPos + chunk.to[this.rangeIndex];
        this.value = chunk.value[this.rangeIndex];
        this.setRangeIndex(this.rangeIndex + 1);
        if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
    }
  }
  setRangeIndex(index2) {
    if (index2 == this.layer.chunk[this.chunkIndex].value.length) {
      this.chunkIndex++;
      if (this.skip) {
        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
          this.chunkIndex++;
      }
      this.rangeIndex = 0;
    } else {
      this.rangeIndex = index2;
    }
  }
  nextChunk() {
    this.chunkIndex++;
    this.rangeIndex = 0;
    this.next();
  }
  compare(other) {
    return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
  }
};
var HeapCursor = class _HeapCursor {
  constructor(heap) {
    this.heap = heap;
  }
  static from(sets, skip = null, minPoint = -1) {
    let heap = [];
    for (let i = 0; i < sets.length; i++) {
      for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
        if (cur.maxPoint >= minPoint)
          heap.push(new LayerCursor(cur, skip, minPoint, i));
      }
    }
    return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(pos, side = -1e9) {
    for (let cur of this.heap)
      cur.goto(pos, side);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      heapBubble(this.heap, i);
    this.next();
    return this;
  }
  forward(pos, side) {
    for (let cur of this.heap)
      cur.forward(pos, side);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      heapBubble(this.heap, i);
    if ((this.to - pos || this.value.endSide - side) < 0)
      this.next();
  }
  next() {
    if (this.heap.length == 0) {
      this.from = this.to = 1e9;
      this.value = null;
      this.rank = -1;
    } else {
      let top3 = this.heap[0];
      this.from = top3.from;
      this.to = top3.to;
      this.value = top3.value;
      this.rank = top3.rank;
      if (top3.value)
        top3.next();
      heapBubble(this.heap, 0);
    }
  }
};
function heapBubble(heap, index2) {
  for (let cur = heap[index2]; ; ) {
    let childIndex = (index2 << 1) + 1;
    if (childIndex >= heap.length)
      break;
    let child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur.compare(child) < 0)
      break;
    heap[childIndex] = cur;
    heap[index2] = child;
    index2 = childIndex;
  }
}
var SpanCursor = class {
  constructor(sets, skip, minPoint) {
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1e9;
    this.endSide = 0;
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  goto(pos, side = -1e9) {
    this.cursor.goto(pos, side);
    this.active.length = this.activeTo.length = this.activeRank.length = 0;
    this.minActive = -1;
    this.to = pos;
    this.endSide = side;
    this.openStart = -1;
    this.next();
    return this;
  }
  forward(pos, side) {
    while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
      this.removeActive(this.minActive);
    this.cursor.forward(pos, side);
  }
  removeActive(index2) {
    remove2(this.active, index2);
    remove2(this.activeTo, index2);
    remove2(this.activeRank, index2);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  addActive(trackOpen) {
    let i = 0, { value, to, rank } = this.cursor;
    while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
      i++;
    insert(this.active, i, value);
    insert(this.activeTo, i, to);
    insert(this.activeRank, i, rank);
    if (trackOpen)
      insert(trackOpen, i, this.cursor.from);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let from = this.to, wasPoint = this.point;
    this.point = null;
    let trackOpen = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let a = this.minActive;
      if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[a] > from) {
          this.to = this.activeTo[a];
          this.endSide = this.active[a].endSide;
          break;
        }
        this.removeActive(a);
        if (trackOpen)
          remove2(trackOpen, a);
      } else if (!this.cursor.value) {
        this.to = this.endSide = 1e9;
        break;
      } else if (this.cursor.from > from) {
        this.to = this.cursor.from;
        this.endSide = this.cursor.startSide;
        break;
      } else {
        let nextVal = this.cursor.value;
        if (!nextVal.point) {
          this.addActive(trackOpen);
          this.cursor.next();
        } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
          this.cursor.next();
        } else {
          this.point = nextVal;
          this.pointFrom = this.cursor.from;
          this.pointRank = this.cursor.rank;
          this.to = this.cursor.to;
          this.endSide = nextVal.endSide;
          this.cursor.next();
          this.forward(this.to, this.endSide);
          break;
        }
      }
    }
    if (trackOpen) {
      this.openStart = 0;
      for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
        this.openStart++;
    }
  }
  activeForPoint(to) {
    if (!this.active.length)
      return this.active;
    let active = [];
    for (let i = this.active.length - 1; i >= 0; i--) {
      if (this.activeRank[i] < this.pointRank)
        break;
      if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
        active.push(this.active[i]);
    }
    return active.reverse();
  }
  openEnd(to) {
    let open = 0;
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
      open++;
    return open;
  }
};
function compare(a, startA, b, startB, length6, comparator) {
  a.goto(startA);
  b.goto(startB);
  let endB = startB + length6;
  let pos = startB, dPos = startB - startA;
  for (; ; ) {
    let dEnd = a.to + dPos - b.to, diff = dEnd || a.endSide - b.endSide;
    let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
    if (a.point || b.point) {
      if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
        comparator.comparePoint(pos, clipEnd, a.point, b.point);
    } else {
      if (clipEnd > pos && !sameValues(a.active, b.active))
        comparator.compareRange(pos, clipEnd, a.active, b.active);
    }
    if (end > endB)
      break;
    if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange)
      comparator.boundChange(end);
    pos = end;
    if (diff <= 0)
      a.next();
    if (diff >= 0)
      b.next();
  }
}
function sameValues(a, b) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (a[i] != b[i] && !a[i].eq(b[i]))
      return false;
  return true;
}
function remove2(array2, index2) {
  for (let i = index2, e = array2.length - 1; i < e; i++)
    array2[i] = array2[i + 1];
  array2.pop();
}
function insert(array2, index2, value) {
  for (let i = array2.length - 1; i >= index2; i--)
    array2[i + 1] = array2[i];
  array2[index2] = value;
}
function findMinIndex(value, array2) {
  let found = -1, foundPos = 1e9;
  for (let i = 0; i < array2.length; i++)
    if ((array2[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
      found = i;
      foundPos = array2[i];
    }
  return found;
}
function countColumn(string4, tabSize, to = string4.length) {
  let n = 0;
  for (let i = 0; i < to && i < string4.length; ) {
    if (string4.charCodeAt(i) == 9) {
      n += tabSize - n % tabSize;
      i++;
    } else {
      n++;
      i = findClusterBreak2(string4, i);
    }
  }
  return n;
}
function findColumn(string4, col, tabSize, strict) {
  for (let i = 0, n = 0; ; ) {
    if (n >= col)
      return i;
    if (i == string4.length)
      break;
    n += string4.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
    i = findClusterBreak2(string4, i);
  }
  return strict === true ? -1 : string4.length;
}

// node_modules/style-mod/src/style-mod.js
var C = "\u037C";
var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var top2 = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
var StyleModule = class {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(spec, options) {
    this.rules = [];
    let { finish } = options || {};
    function splitSelector(selector2) {
      return /^@/.test(selector2) ? [selector2] : selector2.split(/,\s*/);
    }
    function render(selectors, spec2, target, isKeyframes) {
      let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
      if (isAt && spec2 == null) return target.push(selectors[0] + ";");
      for (let prop in spec2) {
        let value = spec2[prop];
        if (/&/.test(prop)) {
          render(
            prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
            value,
            target
          );
        } else if (value && typeof value == "object") {
          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l) => "-" + l.toLowerCase()) + ": " + value + ";");
        }
      }
      if (local.length || keyframes) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join("\n");
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let id4 = top2[COUNT] || 1;
    top2[COUNT] = id4 + 1;
    return C + id4.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(root2, modules, options) {
    let set3 = root2[SET], nonce = options && options.nonce;
    if (!set3) set3 = new StyleSet(root2, nonce);
    else if (nonce) set3.setNonce(nonce);
    set3.mount(Array.isArray(modules) ? modules : [modules], root2);
  }
};
var adoptedSet = /* @__PURE__ */ new Map();
var StyleSet = class {
  constructor(root2, nonce) {
    let doc2 = root2.ownerDocument || root2, win = doc2.defaultView;
    if (!root2.head && root2.adoptedStyleSheets && win.CSSStyleSheet) {
      let adopted = adoptedSet.get(doc2);
      if (adopted) return root2[SET] = adopted;
      this.sheet = new win.CSSStyleSheet();
      adoptedSet.set(doc2, this);
    } else {
      this.styleTag = doc2.createElement("style");
      if (nonce) this.styleTag.setAttribute("nonce", nonce);
    }
    this.modules = [];
    root2[SET] = this;
  }
  mount(modules, root2) {
    let sheet = this.sheet;
    let pos = 0, j = 0;
    for (let i = 0; i < modules.length; i++) {
      let mod = modules[i], index2 = this.modules.indexOf(mod);
      if (index2 < j && index2 > -1) {
        this.modules.splice(index2, 1);
        j--;
        index2 = -1;
      }
      if (index2 == -1) {
        this.modules.splice(j++, 0, mod);
        if (sheet) for (let k = 0; k < mod.rules.length; k++)
          sheet.insertRule(mod.rules[k], pos++);
      } else {
        while (j < index2) pos += this.modules[j++].rules.length;
        pos += mod.rules.length;
        j++;
      }
    }
    if (sheet) {
      if (root2.adoptedStyleSheets.indexOf(this.sheet) < 0)
        root2.adoptedStyleSheets = [this.sheet, ...root2.adoptedStyleSheets];
    } else {
      let text = "";
      for (let i = 0; i < this.modules.length; i++)
        text += this.modules[i].getRules() + "\n";
      this.styleTag.textContent = text;
      let target = root2.head || root2;
      if (this.styleTag.parentNode != target)
        target.insertBefore(this.styleTag, target.firstChild);
    }
  }
  setNonce(nonce) {
    if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
      this.styleTag.setAttribute("nonce", nonce);
  }
};

// node_modules/w3c-keyname/index.js
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);
var i;
for (i = 1; i <= 24; i++) base[i + 111] = "F" + i;
var i;
for (i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}
var i;
for (code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
var code;
function keyName(event) {
  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name3 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name3 == "Esc") name3 = "Escape";
  if (name3 == "Del") name3 = "Delete";
  if (name3 == "Left") name3 = "ArrowLeft";
  if (name3 == "Up") name3 = "ArrowUp";
  if (name3 == "Right") name3 = "ArrowRight";
  if (name3 == "Down") name3 = "ArrowDown";
  return name3;
}

// node_modules/@codemirror/view/dist/index.js
function getSelection(root2) {
  let target;
  if (root2.nodeType == 11) {
    target = root2.getSelection ? root2 : root2.ownerDocument;
  } else {
    target = root2;
  }
  return target.getSelection();
}
function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function hasSelection(dom, selection3) {
  if (!selection3.anchorNode)
    return false;
  try {
    return contains(dom, selection3.anchorNode);
  } catch (_) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3)
    return textRange(dom, 0, dom.nodeValue.length).getClientRects();
  else if (dom.nodeType == 1)
    return dom.getClientRects();
  else
    return [];
}
function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index2 = 0; ; index2++) {
    node = node.previousSibling;
    if (!node)
      return index2;
  }
}
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
function scanFor(node, off, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node == targetNode && off == targetOff)
      return true;
    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV")
        return false;
      let parent = node.parentNode;
      if (!parent || parent.nodeType != 1)
        return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false")
        return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function flattenRect(rect, left2) {
  let x2 = left2 ? rect.left : rect.right;
  return { left: x2, right: x2, top: rect.top, bottom: rect.bottom };
}
function windowRect(win) {
  let vp = win.visualViewport;
  if (vp)
    return {
      left: 0,
      right: vp.width,
      top: 0,
      bottom: vp.height
    };
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function getScale(elt, rect) {
  let scaleX = rect.width / elt.offsetWidth;
  let scaleY = rect.height / elt.offsetHeight;
  if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
    scaleX = 1;
  if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
    scaleY = 1;
  return { scaleX, scaleY };
}
function scrollRectIntoView(dom, rect, side, x2, y2, xMargin, yMargin, ltr) {
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  for (let cur = dom, stop = false; cur && !stop; ) {
    if (cur.nodeType == 1) {
      let bounding, top3 = cur == doc2.body;
      let scaleX = 1, scaleY = 1;
      if (top3) {
        bounding = windowRect(win);
      } else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
          stop = true;
        if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
          cur = cur.assignedSlot || cur.parentNode;
          continue;
        }
        let rect2 = cur.getBoundingClientRect();
        ({ scaleX, scaleY } = getScale(cur, rect2));
        bounding = {
          left: rect2.left,
          right: rect2.left + cur.clientWidth * scaleX,
          top: rect2.top,
          bottom: rect2.top + cur.clientHeight * scaleY
        };
      }
      let moveX = 0, moveY = 0;
      if (y2 == "nearest") {
        if (rect.top < bounding.top) {
          moveY = rect.top - (bounding.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY)
            moveY = rect.bottom - bounding.bottom + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top)
            moveY = rect.top - (bounding.top + yMargin);
        }
      } else {
        let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
        let targetTop = y2 == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y2 == "start" || y2 == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x2 == "nearest") {
        if (rect.left < bounding.left) {
          moveX = rect.left - (bounding.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX)
            moveX = rect.right - bounding.right + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX)
            moveX = rect.left - (bounding.left + xMargin);
        }
      } else {
        let targetLeft = x2 == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x2 == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top3) {
          win.scrollBy(moveX, moveY);
        } else {
          let movedX = 0, movedY = 0;
          if (moveY) {
            let start2 = cur.scrollTop;
            cur.scrollTop += moveY / scaleY;
            movedY = (cur.scrollTop - start2) * scaleY;
          }
          if (moveX) {
            let start2 = cur.scrollLeft;
            cur.scrollLeft += moveX / scaleX;
            movedX = (cur.scrollLeft - start2) * scaleX;
          }
          rect = {
            left: rect.left - movedX,
            top: rect.top - movedY,
            right: rect.right - movedX,
            bottom: rect.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1)
            x2 = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1)
            y2 = "nearest";
        }
      }
      if (top3)
        break;
      if (rect.top < bounding.top || rect.bottom > bounding.bottom || rect.left < bounding.left || rect.right > bounding.right)
        rect = {
          left: Math.max(rect.left, bounding.left),
          right: Math.min(rect.right, bounding.right),
          top: Math.max(rect.top, bounding.top),
          bottom: Math.min(rect.bottom, bounding.bottom)
        };
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      cur = cur.host;
    } else {
      break;
    }
  }
}
function scrollableParents(dom) {
  let doc2 = dom.ownerDocument, x2, y2;
  for (let cur = dom.parentNode; cur; ) {
    if (cur == doc2.body || x2 && y2) {
      break;
    } else if (cur.nodeType == 1) {
      if (!y2 && cur.scrollHeight > cur.clientHeight)
        y2 = cur;
      if (!x2 && cur.scrollWidth > cur.clientWidth)
        x2 = cur;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      cur = cur.host;
    } else {
      break;
    }
  }
  return { x: x2, y: y2 };
}
var DOMSelectionState = class {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  eq(domSel) {
    return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
  }
  setRange(range3) {
    let { anchorNode, focusNode } = range3;
    this.set(anchorNode, Math.min(range3.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range3.focusOffset, focusNode ? maxOffset(focusNode) : 0));
  }
  set(anchorNode, anchorOffset, focusNode, focusOffset) {
    this.anchorNode = anchorNode;
    this.anchorOffset = anchorOffset;
    this.focusNode = focusNode;
    this.focusOffset = focusOffset;
  }
};
var preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stack = [];
  for (let cur = dom; cur; cur = cur.parentNode) {
    stack.push(cur, cur.scrollTop, cur.scrollLeft);
    if (cur == cur.ownerDocument)
      break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (let i = 0; i < stack.length; ) {
      let elt = stack[i++], top3 = stack[i++], left2 = stack[i++];
      if (elt.scrollTop != top3)
        elt.scrollTop = top3;
      if (elt.scrollLeft != left2)
        elt.scrollLeft = left2;
    }
  }
}
var scratchRange;
function textRange(node, from, to = from) {
  let range3 = scratchRange || (scratchRange = document.createRange());
  range3.setEnd(node, to);
  range3.setStart(node, from);
  return range3;
}
function dispatchKey(elt, name3, code, mods) {
  let options = { key: name3, code: name3, keyCode: code, which: code, cancelable: true };
  if (mods)
    ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
  let down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  let up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
      return node;
    node = node.assignedSlot || node.parentNode;
  }
  return null;
}
function clearAttributes(node) {
  while (node.attributes.length)
    node.removeAttributeNode(node.attributes[0]);
}
function atElementStart(doc2, selection3) {
  let node = selection3.focusNode, offset = selection3.focusOffset;
  if (!node || selection3.anchorNode != node || selection3.anchorOffset != offset)
    return false;
  offset = Math.min(offset, maxOffset(node));
  for (; ; ) {
    if (offset) {
      if (node.nodeType != 1)
        return false;
      let prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false")
        offset--;
      else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc2) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}
function isScrolledToBottom(elt) {
  return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
}
function textNodeBefore(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset > 0) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset > 0) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node);
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
function textNodeAfter(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset < node.nodeValue.length) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset < node.childNodes.length) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset];
      offset = 0;
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node) + 1;
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
var DOMPos = class _DOMPos {
  constructor(node, offset, precise = true) {
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }
  static before(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom), precise);
  }
  static after(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
  }
};
var noChildren = [];
var ContentView = class _ContentView {
  constructor() {
    this.parent = null;
    this.dom = null;
    this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(view2) {
    let pos = this.posAtStart;
    for (let child of this.children) {
      if (child == view2)
        return pos;
      pos += child.length + child.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(view2) {
    return this.posBefore(view2) + view2.length;
  }
  sync(view2, track) {
    if (this.flags & 2) {
      let parent = this.dom;
      let prev = null, next;
      for (let child of this.children) {
        if (child.flags & 7) {
          if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
            let contentView = _ContentView.get(next);
            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
              child.reuseDOM(next);
          }
          child.sync(view2, track);
          child.flags &= ~7;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (track && !track.written && track.node == parent && next != child.dom)
          track.written = true;
        if (child.dom.parentNode == parent) {
          while (next && next != child.dom)
            next = rm$1(next);
        } else {
          parent.insertBefore(child.dom, next);
        }
        prev = child.dom;
      }
      next = prev ? prev.nextSibling : parent.firstChild;
      if (next && track && track.node == parent)
        track.written = true;
      while (next)
        next = rm$1(next);
    } else if (this.flags & 1) {
      for (let child of this.children)
        if (child.flags & 7) {
          child.sync(view2, track);
          child.flags &= ~7;
        }
    }
  }
  reuseDOM(_dom) {
  }
  localPosFromDOM(node, offset) {
    let after;
    if (node == this.dom) {
      after = this.dom.childNodes[offset];
    } else {
      let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
      for (; ; ) {
        let parent = node.parentNode;
        if (parent == this.dom)
          break;
        if (bias == 0 && parent.firstChild != parent.lastChild) {
          if (node == parent.firstChild)
            bias = -1;
          else
            bias = 1;
        }
        node = parent;
      }
      if (bias < 0)
        after = node;
      else
        after = node.nextSibling;
    }
    if (after == this.dom.firstChild)
      return 0;
    while (after && !_ContentView.get(after))
      after = after.nextSibling;
    if (!after)
      return this.length;
    for (let i = 0, pos = 0; ; i++) {
      let child = this.children[i];
      if (child.dom == after)
        return pos;
      pos += child.length + child.breakAfter;
    }
  }
  domBoundsAround(from, to, offset = 0) {
    let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
    for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (pos < from && end > to)
        return child.domBoundsAround(from, to, pos);
      if (end >= from && fromI == -1) {
        fromI = i;
        fromStart = pos;
      }
      if (pos > to && child.dom.parentNode == this.dom) {
        toI = i;
        toEnd = prevEnd;
        break;
      }
      prevEnd = end;
      pos = end + child.breakAfter;
    }
    return {
      from: fromStart,
      to: toEnd < 0 ? offset + this.length : toEnd,
      startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
    };
  }
  markDirty(andParent = false) {
    this.flags |= 2;
    this.markParentsDirty(andParent);
  }
  markParentsDirty(childList) {
    for (let parent = this.parent; parent; parent = parent.parent) {
      if (childList)
        parent.flags |= 2;
      if (parent.flags & 1)
        return;
      parent.flags |= 1;
      childList = false;
    }
  }
  setParent(parent) {
    if (this.parent != parent) {
      this.parent = parent;
      if (this.flags & 7)
        this.markParentsDirty(true);
    }
  }
  setDOM(dom) {
    if (this.dom == dom)
      return;
    if (this.dom)
      this.dom.cmView = null;
    this.dom = dom;
    dom.cmView = this;
  }
  get rootView() {
    for (let v = this; ; ) {
      let parent = v.parent;
      if (!parent)
        return v;
      v = parent;
    }
  }
  replaceChildren(from, to, children2 = noChildren) {
    this.markDirty();
    for (let i = from; i < to; i++) {
      let child = this.children[i];
      if (child.parent == this && children2.indexOf(child) < 0)
        child.destroy();
    }
    if (children2.length < 250)
      this.children.splice(from, to - from, ...children2);
    else
      this.children = [].concat(this.children.slice(0, from), children2, this.children.slice(to));
    for (let i = 0; i < children2.length; i++)
      children2[i].setParent(this);
  }
  ignoreMutation(_rec) {
    return false;
  }
  ignoreEvent(_event) {
    return false;
  }
  childCursor(pos = this.length) {
    return new ChildCursor(this.children, pos, this.children.length);
  }
  childPos(pos, bias = 1) {
    return this.childCursor().findPos(pos, bias);
  }
  toString() {
    let name3 = this.constructor.name.replace("View", "");
    return name3 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name3 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(node) {
    return node.cmView;
  }
  get isEditable() {
    return true;
  }
  get isWidget() {
    return false;
  }
  get isHidden() {
    return false;
  }
  merge(from, to, source2, hasStart, openStart, openEnd) {
    return false;
  }
  become(other) {
    return false;
  }
  canReuseDOM(other) {
    return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let child of this.children)
      if (child.parent == this)
        child.destroy();
    this.parent = null;
  }
};
ContentView.prototype.breakAfter = 0;
function rm$1(dom) {
  let next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
var ChildCursor = class {
  constructor(children2, pos, i) {
    this.children = children2;
    this.pos = pos;
    this.i = i;
    this.off = 0;
  }
  findPos(pos, bias = 1) {
    for (; ; ) {
      if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
        this.off = pos - this.pos;
        return this;
      }
      let next = this.children[--this.i];
      this.pos -= next.length + next.breakAfter;
    }
  }
};
function replaceRange(parent, fromI, fromOff, toI, toOff, insert5, breakAtStart, openStart, openEnd) {
  let { children: children2 } = parent;
  let before = children2.length ? children2[fromI] : null;
  let last2 = insert5.length ? insert5[insert5.length - 1] : null;
  let breakAtEnd = last2 ? last2.breakAfter : breakAtStart;
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert5.length < 2 && before.merge(fromOff, toOff, insert5.length ? last2 : null, fromOff == 0, openStart, openEnd))
    return;
  if (toI < children2.length) {
    let after = children2[toI];
    if (after && (toOff < after.length || after.breakAfter && (last2 === null || last2 === void 0 ? void 0 : last2.breakAfter))) {
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      if (!breakAtEnd && last2 && after.merge(0, toOff, last2, true, 0, openEnd)) {
        insert5[insert5.length - 1] = after;
      } else {
        if (toOff || after.children.length && !after.children[0].length)
          after.merge(0, toOff, null, false, 0, openEnd);
        insert5.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      if (last2)
        last2.breakAfter = 1;
      else
        breakAtStart = 1;
    }
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert5.length && before.merge(fromOff, before.length, insert5[0], false, openStart, 0)) {
        before.breakAfter = insert5.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  while (fromI < toI && insert5.length) {
    if (children2[toI - 1].become(insert5[insert5.length - 1])) {
      toI--;
      insert5.pop();
      openEnd = insert5.length ? 0 : openStart;
    } else if (children2[fromI].become(insert5[0])) {
      fromI++;
      insert5.shift();
      openStart = insert5.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert5.length && fromI && toI < children2.length && !children2[fromI - 1].breakAfter && children2[toI].merge(0, 0, children2[fromI - 1], false, openStart, openEnd))
    fromI--;
  if (fromI < toI || insert5.length)
    parent.replaceChildren(fromI, toI, insert5);
}
function mergeChildrenInto(parent, from, to, insert5, openStart, openEnd) {
  let cur = parent.childCursor();
  let { i: toI, off: toOff } = cur.findPos(to, 1);
  let { i: fromI, off: fromOff } = cur.findPos(from, -1);
  let dLen = from - to;
  for (let view2 of insert5)
    dLen += view2.length;
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert5, 0, openStart, openEnd);
}
var nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
var doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
var ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
var ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
var ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
var ie2 = !!(ie_upto10 || ie_11up || ie_edge);
var gecko = !ie2 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
var chrome = !ie2 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
var webkit = "webkitFontSmoothing" in doc.documentElement.style;
var safari = !ie2 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
var ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser = {
  mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
  windows: /* @__PURE__ */ /Win/.test(nav.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
  ie: ie2,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko,
  gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios,
  android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
  webkit,
  safari,
  webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
var MaxJoinLen = 256;
var TextView = class _TextView extends ContentView {
  constructor(text) {
    super();
    this.text = text;
  }
  get length() {
    return this.text.length;
  }
  createDOM(textDOM) {
    this.setDOM(textDOM || document.createTextNode(this.text));
  }
  sync(view2, track) {
    if (!this.dom)
      this.createDOM();
    if (this.dom.nodeValue != this.text) {
      if (track && track.node == this.dom)
        track.written = true;
      this.dom.nodeValue = this.text;
    }
  }
  reuseDOM(dom) {
    if (dom.nodeType == 3)
      this.createDOM(dom);
  }
  merge(from, to, source2) {
    if (this.flags & 8 || source2 && (!(source2 instanceof _TextView) || this.length - (to - from) + source2.length > MaxJoinLen || source2.flags & 8))
      return false;
    this.text = this.text.slice(0, from) + (source2 ? source2.text : "") + this.text.slice(to);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = new _TextView(this.text.slice(from));
    this.text = this.text.slice(0, from);
    this.markDirty();
    result.flags |= this.flags & 8;
    return result;
  }
  localPosFromDOM(node, offset) {
    return node == this.dom ? offset : offset ? this.text.length : 0;
  }
  domAtPos(pos) {
    return new DOMPos(this.dom, pos);
  }
  domBoundsAround(_from, _to, offset) {
    return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(pos, side) {
    return textCoords(this.dom, pos, side);
  }
};
var MarkView = class _MarkView extends ContentView {
  constructor(mark, children2 = [], length6 = 0) {
    super();
    this.mark = mark;
    this.children = children2;
    this.length = length6;
    for (let ch of children2)
      ch.setParent(this);
  }
  setAttrs(dom) {
    clearAttributes(dom);
    if (this.mark.class)
      dom.className = this.mark.class;
    if (this.mark.attrs)
      for (let name3 in this.mark.attrs)
        dom.setAttribute(name3, this.mark.attrs[name3]);
    return dom;
  }
  canReuseDOM(other) {
    return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
  }
  reuseDOM(node) {
    if (node.nodeName == this.mark.tagName.toUpperCase()) {
      this.setDOM(node);
      this.flags |= 4 | 2;
    }
  }
  sync(view2, track) {
    if (!this.dom)
      this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
    else if (this.flags & 4)
      this.setAttrs(this.dom);
    super.sync(view2, track);
  }
  merge(from, to, source2, _hasStart, openStart, openEnd) {
    if (source2 && (!(source2 instanceof _MarkView && source2.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    mergeChildrenInto(this, from, to, source2 ? source2.children.slice() : [], openStart - 1, openEnd - 1);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = [], off = 0, detachFrom = -1, i = 0;
    for (let elt of this.children) {
      let end = off + elt.length;
      if (end > from)
        result.push(off < from ? elt.split(from - off) : elt);
      if (detachFrom < 0 && off >= from)
        detachFrom = i;
      off = end;
      i++;
    }
    let length6 = this.length - from;
    this.length = from;
    if (detachFrom > -1) {
      this.children.length = detachFrom;
      this.markDirty();
    }
    return new _MarkView(this.mark, result, length6);
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  coordsAt(pos, side) {
    return coordsInChildren(this, pos, side);
  }
};
function textCoords(text, pos, side) {
  let length6 = text.nodeValue.length;
  if (pos > length6)
    pos = length6;
  let from = pos, to = pos, flatten2 = 0;
  if (pos == 0 && side < 0 || pos == length6 && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      if (pos) {
        from--;
        flatten2 = 1;
      } else if (to < length6) {
        to++;
        flatten2 = -1;
      }
    }
  } else {
    if (side < 0)
      from--;
    else if (to < length6)
      to++;
  }
  let rects = textRange(text, from, to).getClientRects();
  if (!rects.length)
    return null;
  let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten2 && rect.width == 0)
    rect = Array.prototype.find.call(rects, (r) => r.width) || rect;
  return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
}
var WidgetView = class _WidgetView extends ContentView {
  static create(widget, length6, side) {
    return new _WidgetView(widget, length6, side);
  }
  constructor(widget, length6, side) {
    super();
    this.widget = widget;
    this.length = length6;
    this.side = side;
    this.prevWidget = null;
  }
  split(from) {
    let result = _WidgetView.create(this.widget, this.length - from, this.side);
    this.length -= from;
    return result;
  }
  sync(view2) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view2)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view2));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  getSide() {
    return this.side;
  }
  merge(from, to, source2, hasStart, openStart, openEnd) {
    if (source2 && (!(source2 instanceof _WidgetView) || !this.widget.compare(source2.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    this.length = from + (source2 ? source2.length : 0) + (this.length - to);
    return true;
  }
  become(other) {
    if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
      if (!this.widget.compare(other.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Text.empty;
    let top3 = this;
    while (top3.parent)
      top3 = top3.parent;
    let { view: view2 } = top3, text = view2 && view2.state.doc, start2 = this.posAtStart;
    return text ? text.slice(start2, start2 + this.length) : Text.empty;
  }
  domAtPos(pos) {
    return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos, side) {
    let custom = this.widget.coordsAt(this.dom, pos, side);
    if (custom)
      return custom;
    let rects = this.dom.getClientRects(), rect = null;
    if (!rects.length)
      return null;
    let fromBack = this.side ? this.side < 0 : pos > 0;
    for (let i = fromBack ? rects.length - 1 : 0; ; i += fromBack ? -1 : 1) {
      rect = rects[i];
      if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
        break;
    }
    return flattenRect(rect, !fromBack);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
};
var WidgetBufferView = class _WidgetBufferView extends ContentView {
  constructor(side) {
    super();
    this.side = side;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(other) {
    return other instanceof _WidgetBufferView && other.side == this.side;
  }
  split() {
    return new _WidgetBufferView(this.side);
  }
  sync() {
    if (!this.dom) {
      let dom = document.createElement("img");
      dom.className = "cm-widgetBuffer";
      dom.setAttribute("aria-hidden", "true");
      this.setDOM(dom);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(pos) {
    return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Text.empty;
  }
  get isHidden() {
    return true;
  }
};
TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
function inlineDOMAtPos(parent, pos) {
  let dom = parent.dom, { children: children2 } = parent, i = 0;
  for (let off = 0; i < children2.length; i++) {
    let child = children2[i], end = off + child.length;
    if (end == off && child.getSide() <= 0)
      continue;
    if (pos > off && pos < end && child.dom.parentNode == dom)
      return child.domAtPos(pos - off);
    if (pos <= off)
      break;
    off = end;
  }
  for (let j = i; j > 0; j--) {
    let prev = children2[j - 1];
    if (prev.dom.parentNode == dom)
      return prev.domAtPos(prev.length);
  }
  for (let j = i; j < children2.length; j++) {
    let next = children2[j];
    if (next.dom.parentNode == dom)
      return next.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
function joinInlineInto(parent, view2, open) {
  let last2, { children: children2 } = parent;
  if (open > 0 && view2 instanceof MarkView && children2.length && (last2 = children2[children2.length - 1]) instanceof MarkView && last2.mark.eq(view2.mark)) {
    joinInlineInto(last2, view2.children[0], open - 1);
  } else {
    children2.push(view2);
    view2.setParent(parent);
  }
  parent.length += view2.length;
}
function coordsInChildren(view2, pos, side) {
  let before = null, beforePos = -1, after = null, afterPos = -1;
  function scan(view3, pos2) {
    for (let i = 0, off = 0; i < view3.children.length && off <= pos2; i++) {
      let child = view3.children[i], end = off + child.length;
      if (end >= pos2) {
        if (child.children.length) {
          scan(child, pos2 - off);
        } else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) && (end > pos2 || off == end && child.getSide() > 0)) {
          after = child;
          afterPos = pos2 - off;
        } else if (off < pos2 || off == end && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos2 - off;
        }
      }
      off = end;
    }
  }
  scan(view2, pos);
  let target = (side < 0 ? before : after) || before || after;
  if (target)
    return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view2);
}
function fallbackRect(view2) {
  let last2 = view2.dom.lastChild;
  if (!last2)
    return view2.dom.getBoundingClientRect();
  let rects = clientRectsFor(last2);
  return rects[rects.length - 1] || null;
}
function onSameLine(a, b) {
  let posA = a.coordsAt(0, 1), posB = b.coordsAt(0, 1);
  return posA && posB && posB.top < posA.bottom;
}
function combineAttrs(source2, target) {
  for (let name3 in source2) {
    if (name3 == "class" && target.class)
      target.class += " " + source2.class;
    else if (name3 == "style" && target.style)
      target.style += ";" + source2.style;
    else
      target[name3] = source2[name3];
  }
  return target;
}
var noAttrs = /* @__PURE__ */ Object.create(null);
function attrsEq(a, b, ignore) {
  if (a == b)
    return true;
  if (!a)
    a = noAttrs;
  if (!b)
    b = noAttrs;
  let keysA = Object.keys(a), keysB = Object.keys(b);
  if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
    return false;
  for (let key of keysA) {
    if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
      return false;
  }
  return true;
}
function updateAttrs(dom, prev, attrs2) {
  let changed = false;
  if (prev) {
    for (let name3 in prev)
      if (!(attrs2 && name3 in attrs2)) {
        changed = true;
        if (name3 == "style")
          dom.style.cssText = "";
        else
          dom.removeAttribute(name3);
      }
  }
  if (attrs2) {
    for (let name3 in attrs2)
      if (!(prev && prev[name3] == attrs2[name3])) {
        changed = true;
        if (name3 == "style")
          dom.style.cssText = attrs2[name3];
        else
          dom.setAttribute(name3, attrs2[name3]);
      }
  }
  return changed;
}
function getAttrs(dom) {
  let attrs2 = /* @__PURE__ */ Object.create(null);
  for (let i = 0; i < dom.attributes.length; i++) {
    let attr = dom.attributes[i];
    attrs2[attr.name] = attr.value;
  }
  return attrs2;
}
var WidgetType = class {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(widget) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(dom, view2) {
    return false;
  }
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(event) {
    return true;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(dom, pos, side) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return false;
  }
  /**
  @internal
  */
  get editable() {
    return false;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(dom) {
  }
};
var BlockType = /* @__PURE__ */ (function(BlockType2) {
  BlockType2[BlockType2["Text"] = 0] = "Text";
  BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
  BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
  BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
  return BlockType2;
})(BlockType || (BlockType = {}));
var Decoration = class extends RangeValue {
  constructor(startSide, endSide, widget, spec) {
    super();
    this.startSide = startSide;
    this.endSide = endSide;
    this.widget = widget;
    this.spec = spec;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(spec) {
    return new MarkDecoration(spec);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(spec) {
    let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block2 = !!spec.block;
    side += block2 && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
    return new PointDecoration(spec, side, side, block2, spec.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(spec) {
    let block2 = !!spec.block, startSide, endSide;
    if (spec.isBlockGap) {
      startSide = -5e8;
      endSide = 4e8;
    } else {
      let { start: start2, end } = getInclusive(spec, block2);
      startSide = (start2 ? block2 ? -3e8 : -1 : 5e8) - 1;
      endSide = (end ? block2 ? 2e8 : 1 : -6e8) + 1;
    }
    return new PointDecoration(spec, startSide, endSide, block2, spec.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(spec) {
    return new LineDecoration(spec);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(of, sort = false) {
    return RangeSet.of(of, sort);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
};
Decoration.none = RangeSet.empty;
var MarkDecoration = class _MarkDecoration extends Decoration {
  constructor(spec) {
    let { start: start2, end } = getInclusive(spec);
    super(start2 ? -1 : 5e8, end ? 1 : -6e8, null, spec);
    this.tagName = spec.tagName || "span";
    this.class = spec.class || "";
    this.attrs = spec.attributes || null;
  }
  eq(other) {
    var _a2, _b;
    return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) && attrsEq(this.attrs, other.attrs, "class");
  }
  range(from, to = from) {
    if (from >= to)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(from, to);
  }
};
MarkDecoration.prototype.point = false;
var LineDecoration = class _LineDecoration extends Decoration {
  constructor(spec) {
    super(-2e8, -2e8, null, spec);
  }
  eq(other) {
    return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
  }
  range(from, to = from) {
    if (to != from)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(from, to);
  }
};
LineDecoration.prototype.mapMode = MapMode.TrackBefore;
LineDecoration.prototype.point = true;
var PointDecoration = class _PointDecoration extends Decoration {
  constructor(spec, startSide, endSide, block2, widget, isReplace) {
    super(startSide, endSide, widget, spec);
    this.block = block2;
    this.isReplace = isReplace;
    this.mapMode = !block2 ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(other) {
    return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
  }
  range(from, to = from) {
    if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && to != from)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(from, to);
  }
};
PointDecoration.prototype.point = true;
function getInclusive(spec, block2 = false) {
  let { inclusiveStart: start2, inclusiveEnd: end } = spec;
  if (start2 == null)
    start2 = spec.inclusive;
  if (end == null)
    end = spec.inclusive;
  return { start: start2 !== null && start2 !== void 0 ? start2 : block2, end: end !== null && end !== void 0 ? end : block2 };
}
function widgetsEq(a, b) {
  return a == b || !!(a && b && a.compare(b));
}
function addRange(from, to, ranges, margin = 0) {
  let last2 = ranges.length - 1;
  if (last2 >= 0 && ranges[last2] + margin >= from)
    ranges[last2] = Math.max(ranges[last2], to);
  else
    ranges.push(from, to);
}
var LineView = class _LineView extends ContentView {
  constructor() {
    super(...arguments);
    this.children = [];
    this.length = 0;
    this.prevAttrs = void 0;
    this.attrs = null;
    this.breakAfter = 0;
  }
  // Consumes source
  merge(from, to, source2, hasStart, openStart, openEnd) {
    if (source2) {
      if (!(source2 instanceof _LineView))
        return false;
      if (!this.dom)
        source2.transferDOM(this);
    }
    if (hasStart)
      this.setDeco(source2 ? source2.attrs : null);
    mergeChildrenInto(this, from, to, source2 ? source2.children.slice() : [], openStart, openEnd);
    return true;
  }
  split(at) {
    let end = new _LineView();
    end.breakAfter = this.breakAfter;
    if (this.length == 0)
      return end;
    let { i, off } = this.childPos(at);
    if (off) {
      end.append(this.children[i].split(off), 0);
      this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
      i++;
    }
    for (let j = i; j < this.children.length; j++)
      end.append(this.children[j], 0);
    while (i > 0 && this.children[i - 1].length == 0)
      this.children[--i].destroy();
    this.children.length = i;
    this.markDirty();
    this.length = at;
    return end;
  }
  transferDOM(other) {
    if (!this.dom)
      return;
    this.markDirty();
    other.setDOM(this.dom);
    other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
    this.prevAttrs = void 0;
    this.dom = null;
  }
  setDeco(attrs2) {
    if (!attrsEq(this.attrs, attrs2)) {
      if (this.dom) {
        this.prevAttrs = this.attrs;
        this.markDirty();
      }
      this.attrs = attrs2;
    }
  }
  append(child, openStart) {
    joinInlineInto(this, child, openStart);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(deco) {
    let attrs2 = deco.spec.attributes, cls = deco.spec.class;
    if (attrs2)
      this.attrs = combineAttrs(attrs2, this.attrs || {});
    if (cls)
      this.attrs = combineAttrs({ class: cls }, this.attrs || {});
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  reuseDOM(node) {
    if (node.nodeName == "DIV") {
      this.setDOM(node);
      this.flags |= 4 | 2;
    }
  }
  sync(view2, track) {
    var _a2;
    if (!this.dom) {
      this.setDOM(document.createElement("div"));
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    } else if (this.flags & 4) {
      clearAttributes(this.dom);
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    }
    if (this.prevAttrs !== void 0) {
      updateAttrs(this.dom, this.prevAttrs, this.attrs);
      this.dom.classList.add("cm-line");
      this.prevAttrs = void 0;
    }
    super.sync(view2, track);
    let last2 = this.dom.lastChild;
    while (last2 && ContentView.get(last2) instanceof MarkView)
      last2 = last2.lastChild;
    if (!last2 || !this.length || last2.nodeName != "BR" && ((_a2 = ContentView.get(last2)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch) => ch instanceof TextView))) {
      let hack = document.createElement("BR");
      hack.cmIgnore = true;
      this.dom.appendChild(hack);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let totalWidth = 0, textHeight;
    for (let child of this.children) {
      if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
        return null;
      let rects = clientRectsFor(child.dom);
      if (rects.length != 1)
        return null;
      totalWidth += rects[0].width;
      textHeight = rects[0].height;
    }
    return !totalWidth ? null : {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: totalWidth / this.length,
      textHeight
    };
  }
  coordsAt(pos, side) {
    let rect = coordsInChildren(this, pos, side);
    if (!this.children.length && rect && this.parent) {
      let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
      if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
        let dist2 = (height - heightOracle.textHeight) / 2;
        return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
      }
    }
    return rect;
  }
  become(other) {
    return other instanceof _LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
  }
  covers() {
    return true;
  }
  static find(docView, pos) {
    for (let i = 0, off = 0; i < docView.children.length; i++) {
      let block2 = docView.children[i], end = off + block2.length;
      if (end >= pos) {
        if (block2 instanceof _LineView)
          return block2;
        if (end > pos)
          break;
      }
      off = end + block2.breakAfter;
    }
    return null;
  }
};
var BlockWidgetView = class _BlockWidgetView extends ContentView {
  constructor(widget, length6, deco) {
    super();
    this.widget = widget;
    this.length = length6;
    this.deco = deco;
    this.breakAfter = 0;
    this.prevWidget = null;
  }
  merge(from, to, source2, _takeDeco, openStart, openEnd) {
    if (source2 && (!(source2 instanceof _BlockWidgetView) || !this.widget.compare(source2.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    this.length = from + (source2 ? source2.length : 0) + (this.length - to);
    return true;
  }
  domAtPos(pos) {
    return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  split(at) {
    let len = this.length - at;
    this.length = at;
    let end = new _BlockWidgetView(this.widget, len, this.deco);
    end.breakAfter = this.breakAfter;
    return end;
  }
  get children() {
    return noChildren;
  }
  sync(view2) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view2)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view2));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(other) {
    if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
      if (!other.widget.compare(this.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      this.deco = other.deco;
      this.breakAfter = other.breakAfter;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  coordsAt(pos, side) {
    let custom = this.widget.coordsAt(this.dom, pos, side);
    if (custom)
      return custom;
    if (this.widget instanceof BlockGapWidget)
      return null;
    return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
  covers(side) {
    let { startSide, endSide } = this.deco;
    return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
  }
};
var BlockGapWidget = class extends WidgetType {
  constructor(height) {
    super();
    this.height = height;
  }
  toDOM() {
    let elt = document.createElement("div");
    elt.className = "cm-gap";
    this.updateDOM(elt);
    return elt;
  }
  eq(other) {
    return other.height == this.height;
  }
  updateDOM(elt) {
    elt.style.height = this.height + "px";
    return true;
  }
  get editable() {
    return true;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return false;
  }
};
var ContentBuilder = class _ContentBuilder {
  constructor(doc2, pos, end, disallowBlockEffectsFor) {
    this.doc = doc2;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0;
    this.bufferMarks = [];
    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc2.iter();
    this.skip = pos;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let last2 = this.content[this.content.length - 1];
    return !(last2.breakAfter || last2 instanceof BlockWidgetView && last2.deco.endSide < 0);
  }
  getLine() {
    if (!this.curLine) {
      this.content.push(this.curLine = new LineView());
      this.atCursorPos = true;
    }
    return this.curLine;
  }
  flushBuffer(active = this.bufferMarks) {
    if (this.pendingBuffer) {
      this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
      this.pendingBuffer = 0;
    }
  }
  addBlockWidget(view2) {
    this.flushBuffer();
    this.curLine = null;
    this.content.push(view2);
  }
  finish(openEnd) {
    if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
      this.flushBuffer();
    else
      this.pendingBuffer = 0;
    if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
      this.getLine();
  }
  buildText(length6, active, openStart) {
    while (length6 > 0) {
      if (this.textOff == this.text.length) {
        let { value, lineBreak, done } = this.cursor.next(this.skip);
        this.skip = 0;
        if (done)
          throw new Error("Ran out of text content when drawing inline views");
        if (lineBreak) {
          if (!this.posCovered())
            this.getLine();
          if (this.content.length)
            this.content[this.content.length - 1].breakAfter = 1;
          else
            this.breakAtStart = 1;
          this.flushBuffer();
          this.curLine = null;
          this.atCursorPos = true;
          length6--;
          continue;
        } else {
          this.text = value;
          this.textOff = 0;
        }
      }
      let remaining = Math.min(this.text.length - this.textOff, length6);
      let take4 = Math.min(
        remaining,
        512
        /* T.Chunk */
      );
      this.flushBuffer(active.slice(active.length - openStart));
      this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take4)), active), openStart);
      this.atCursorPos = true;
      this.textOff += take4;
      length6 -= take4;
      openStart = remaining <= take4 ? 0 : active.length;
    }
  }
  span(from, to, active, openStart) {
    this.buildText(to - from, active, openStart);
    this.pos = to;
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  point(from, to, deco, active, openStart, index2) {
    if (this.disallowBlockEffectsFor[index2] && deco instanceof PointDecoration) {
      if (deco.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (to > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let len = to - from;
    if (deco instanceof PointDecoration) {
      if (deco.block) {
        if (deco.startSide > 0 && !this.posCovered())
          this.getLine();
        this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
      } else {
        let view2 = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
        let cursorBefore = this.atCursorPos && !view2.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
        let cursorAfter = !view2.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
        let line2 = this.getLine();
        if (this.pendingBuffer == 2 && !cursorBefore && !view2.isEditable)
          this.pendingBuffer = 0;
        this.flushBuffer(active);
        if (cursorBefore) {
          line2.append(wrapMarks(new WidgetBufferView(1), active), openStart);
          openStart = active.length + Math.max(0, openStart - active.length);
        }
        line2.append(wrapMarks(view2, active), openStart);
        this.atCursorPos = cursorAfter;
        this.pendingBuffer = !cursorAfter ? 0 : from < to || openStart > active.length ? 1 : 2;
        if (this.pendingBuffer)
          this.bufferMarks = active.slice();
      }
    } else if (this.doc.lineAt(this.pos).from == this.pos) {
      this.getLine().addLineDeco(deco);
    }
    if (len) {
      if (this.textOff + len <= this.text.length) {
        this.textOff += len;
      } else {
        this.skip += len - (this.text.length - this.textOff);
        this.text = "";
        this.textOff = 0;
      }
      this.pos = to;
    }
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  static build(text, from, to, decorations2, dynamicDecorationMap) {
    let builder = new _ContentBuilder(text, from, to, dynamicDecorationMap);
    builder.openEnd = RangeSet.spans(decorations2, from, to, builder);
    if (builder.openStart < 0)
      builder.openStart = builder.openEnd;
    builder.finish(builder.openEnd);
    return builder;
  }
};
function wrapMarks(view2, active) {
  for (let mark of active)
    view2 = new MarkView(mark, [view2], view2.length);
  return view2;
}
var NullWidget = class extends WidgetType {
  constructor(tag) {
    super();
    this.tag = tag;
  }
  eq(other) {
    return other.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(elt) {
    return elt.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return true;
  }
};
NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
NullWidget.block = /* @__PURE__ */ new NullWidget("div");
var Direction = /* @__PURE__ */ (function(Direction2) {
  Direction2[Direction2["LTR"] = 0] = "LTR";
  Direction2[Direction2["RTL"] = 1] = "RTL";
  return Direction2;
})(Direction || (Direction = {}));
var LTR = Direction.LTR;
var RTL = Direction.RTL;
function dec(str) {
  let result = [];
  for (let i = 0; i < str.length; i++)
    result.push(1 << +str[i]);
  return result;
}
var LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
var ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var Brackets = /* @__PURE__ */ Object.create(null);
var BracketStack = [];
for (let p of ["()", "[]", "{}"]) {
  let l = /* @__PURE__ */ p.charCodeAt(0), r = /* @__PURE__ */ p.charCodeAt(1);
  Brackets[l] = r;
  Brackets[r] = -l;
}
function charType(ch) {
  return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8204 ? 256 : 64336 <= ch && ch <= 65023 ? 4 : 1;
}
var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
var BidiSpan = class {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? RTL : LTR;
  }
  /**
  @internal
  */
  constructor(from, to, level) {
    this.from = from;
    this.to = to;
    this.level = level;
  }
  /**
  @internal
  */
  side(end, dir) {
    return this.dir == dir == end ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(forward, dir) {
    return forward == (this.dir == dir);
  }
  /**
  @internal
  */
  static find(order, index2, level, assoc) {
    let maybe = -1;
    for (let i = 0; i < order.length; i++) {
      let span3 = order[i];
      if (span3.from <= index2 && span3.to >= index2) {
        if (span3.level == level)
          return i;
        if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span3.from < index2 : span3.to > index2 : order[maybe].level > span3.level))
          maybe = i;
      }
    }
    if (maybe < 0)
      throw new RangeError("Index out of range");
    return maybe;
  }
};
function isolatesEq(a, b) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++) {
    let iA = a[i], iB = b[i];
    if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
      return false;
  }
  return true;
}
var types = [];
function computeCharTypes(line2, rFrom, rTo, isolates, outerType) {
  for (let iI = 0; iI <= isolates.length; iI++) {
    let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    let prevType = iI ? 256 : outerType;
    for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
      let type2 = charType(line2.charCodeAt(i));
      if (type2 == 512)
        type2 = prev;
      else if (type2 == 8 && prevStrong == 4)
        type2 = 16;
      types[i] = type2 == 4 ? 2 : type2;
      if (type2 & 7)
        prevStrong = type2;
      prev = type2;
    }
    for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
      let type2 = types[i];
      if (type2 == 128) {
        if (i < to - 1 && prev == types[i + 1] && prev & 24)
          type2 = types[i] = prev;
        else
          types[i] = 256;
      } else if (type2 == 64) {
        let end = i + 1;
        while (end < to && types[end] == 64)
          end++;
        let replace4 = i && prev == 8 || end < rTo && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
        for (let j = i; j < end; j++)
          types[j] = replace4;
        i = end - 1;
      } else if (type2 == 8 && prevStrong == 1) {
        types[i] = 1;
      }
      prev = type2;
      if (type2 & 7)
        prevStrong = type2;
    }
  }
}
function processBracketPairs(line2, rFrom, rTo, isolates, outerType) {
  let oppositeType = outerType == 1 ? 2 : 1;
  for (let iI = 0, sI = 0, context2 = 0; iI <= isolates.length; iI++) {
    let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i = from, ch, br, type2; i < to; i++) {
      if (br = Brackets[ch = line2.charCodeAt(i)]) {
        if (br < 0) {
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            if (BracketStack[sJ + 1] == -br) {
              let flags = BracketStack[sJ + 2];
              let type3 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
              if (type3)
                types[i] = types[BracketStack[sJ]] = type3;
              sI = sJ;
              break;
            }
          }
        } else if (BracketStack.length == 189) {
          break;
        } else {
          BracketStack[sI++] = i;
          BracketStack[sI++] = ch;
          BracketStack[sI++] = context2;
        }
      } else if ((type2 = types[i]) == 2 || type2 == 1) {
        let embed = type2 == outerType;
        context2 = embed ? 0 : 1;
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          let cur = BracketStack[sJ + 2];
          if (cur & 2)
            break;
          if (embed) {
            BracketStack[sJ + 2] |= 2;
          } else {
            if (cur & 4)
              break;
            BracketStack[sJ + 2] |= 4;
          }
        }
      }
    }
  }
}
function processNeutrals(rFrom, rTo, isolates, outerType) {
  for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
    let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i = from; i < to; ) {
      let type2 = types[i];
      if (type2 == 256) {
        let end = i + 1;
        for (; ; ) {
          if (end == to) {
            if (iI == isolates.length)
              break;
            end = isolates[iI++].to;
            to = iI < isolates.length ? isolates[iI].from : rTo;
          } else if (types[end] == 256) {
            end++;
          } else {
            break;
          }
        }
        let beforeL = prev == 1;
        let afterL = (end < rTo ? types[end] : outerType) == 1;
        let replace4 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
        for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i; ) {
          if (j == fromJ) {
            j = isolates[--jI].from;
            fromJ = jI ? isolates[jI - 1].to : rFrom;
          }
          types[--j] = replace4;
        }
        i = end;
      } else {
        prev = type2;
        i++;
      }
    }
  }
}
function emitSpans(line2, from, to, level, baseLevel, isolates, order) {
  let ourType = level % 2 ? 2 : 1;
  if (level % 2 == baseLevel % 2) {
    for (let iCh = from, iI = 0; iCh < to; ) {
      let sameDir = true, isNum = false;
      if (iI == isolates.length || iCh < isolates[iI].from) {
        let next = types[iCh];
        if (next != ourType) {
          sameDir = false;
          isNum = next == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run: for (; ; ) {
        if (iI < isolates.length && iScan == isolates[iI].from) {
          if (isNum)
            break run;
          let iso = isolates[iI];
          if (!sameDir)
            for (let upto = iso.to, jI = iI + 1; ; ) {
              if (upto == to)
                break run;
              if (jI < isolates.length && isolates[jI].from == upto)
                upto = isolates[jI++].to;
              else if (types[upto] == ourType)
                break run;
              else
                break;
            }
          iI++;
          if (recurse) {
            recurse.push(iso);
          } else {
            if (iso.from > iCh)
              order.push(new BidiSpan(iCh, iso.from, localLevel));
            let dirSwap = iso.direction == LTR != !(localLevel % 2);
            computeSectionOrder(line2, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
            iCh = iso.to;
          }
          iScan = iso.to;
        } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
          break;
        } else {
          iScan++;
        }
      }
      if (recurse)
        emitSpans(line2, iCh, iScan, level + 1, baseLevel, recurse, order);
      else if (iCh < iScan)
        order.push(new BidiSpan(iCh, iScan, localLevel));
      iCh = iScan;
    }
  } else {
    for (let iCh = to, iI = isolates.length; iCh > from; ) {
      let sameDir = true, isNum = false;
      if (!iI || iCh > isolates[iI - 1].to) {
        let next = types[iCh - 1];
        if (next != ourType) {
          sameDir = false;
          isNum = next == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run: for (; ; ) {
        if (iI && iScan == isolates[iI - 1].to) {
          if (isNum)
            break run;
          let iso = isolates[--iI];
          if (!sameDir)
            for (let upto = iso.from, jI = iI; ; ) {
              if (upto == from)
                break run;
              if (jI && isolates[jI - 1].to == upto)
                upto = isolates[--jI].from;
              else if (types[upto - 1] == ourType)
                break run;
              else
                break;
            }
          if (recurse) {
            recurse.push(iso);
          } else {
            if (iso.to < iCh)
              order.push(new BidiSpan(iso.to, iCh, localLevel));
            let dirSwap = iso.direction == LTR != !(localLevel % 2);
            computeSectionOrder(line2, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
            iCh = iso.from;
          }
          iScan = iso.from;
        } else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
          break;
        } else {
          iScan--;
        }
      }
      if (recurse)
        emitSpans(line2, iScan, iCh, level + 1, baseLevel, recurse, order);
      else if (iScan < iCh)
        order.push(new BidiSpan(iScan, iCh, localLevel));
      iCh = iScan;
    }
  }
}
function computeSectionOrder(line2, level, baseLevel, isolates, from, to, order) {
  let outerType = level % 2 ? 2 : 1;
  computeCharTypes(line2, from, to, isolates, outerType);
  processBracketPairs(line2, from, to, isolates, outerType);
  processNeutrals(from, to, isolates, outerType);
  emitSpans(line2, from, to, level, baseLevel, isolates, order);
}
function computeOrder(line2, direction, isolates) {
  if (!line2)
    return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
  if (direction == LTR && !isolates.length && !BidiRE.test(line2))
    return trivialOrder(line2.length);
  if (isolates.length)
    while (line2.length > types.length)
      types[types.length] = 256;
  let order = [], level = direction == LTR ? 0 : 1;
  computeSectionOrder(line2, level, level, isolates, 0, line2.length, order);
  return order;
}
function trivialOrder(length6) {
  return [new BidiSpan(0, length6, 0)];
}
var movedOver = "";
function moveVisually(line2, order, dir, start2, forward) {
  var _a2;
  let startIndex = start2.head - line2.from;
  let spanI = BidiSpan.find(order, startIndex, (_a2 = start2.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start2.assoc);
  let span3 = order[spanI], spanEnd = span3.side(forward, dir);
  if (startIndex == spanEnd) {
    let nextI = spanI += forward ? 1 : -1;
    if (nextI < 0 || nextI >= order.length)
      return null;
    span3 = order[spanI = nextI];
    startIndex = span3.side(!forward, dir);
    spanEnd = span3.side(forward, dir);
  }
  let nextIndex = findClusterBreak2(line2.text, startIndex, span3.forward(forward, dir));
  if (nextIndex < span3.from || nextIndex > span3.to)
    nextIndex = spanEnd;
  movedOver = line2.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span3.level)
    return EditorSelection.cursor(nextSpan.side(!forward, dir) + line2.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
  return EditorSelection.cursor(nextIndex + line2.from, span3.forward(forward, dir) ? -1 : 1, span3.level);
}
function autoDirection(text, from, to) {
  for (let i = from; i < to; i++) {
    let type2 = charType(text.charCodeAt(i));
    if (type2 == 1)
      return LTR;
    if (type2 == 2 || type2 == 4)
      return RTL;
  }
  return LTR;
}
var clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
var dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
var mouseSelectionStyle = /* @__PURE__ */ Facet.define();
var exceptionSink = /* @__PURE__ */ Facet.define();
var updateListener = /* @__PURE__ */ Facet.define();
var inputHandler = /* @__PURE__ */ Facet.define();
var focusChangeEffect = /* @__PURE__ */ Facet.define();
var clipboardInputFilter = /* @__PURE__ */ Facet.define();
var clipboardOutputFilter = /* @__PURE__ */ Facet.define();
var perLineTextDirection = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
var nativeSelectionHidden = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
var scrollHandler = /* @__PURE__ */ Facet.define();
var ScrollTarget = class _ScrollTarget {
  constructor(range3, y2 = "nearest", x2 = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
    this.range = range3;
    this.y = y2;
    this.x = x2;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
    this.isSnapshot = isSnapshot;
  }
  map(changes) {
    return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(state) {
    return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
};
var scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t2, ch) => t2.map(ch) });
var setEditContextFormatting = /* @__PURE__ */ StateEffect.define();
function logException(state, exception, context2) {
  let handler = state.facet(exceptionSink);
  if (handler.length)
    handler[0](exception);
  else if (window.onerror && window.onerror(String(exception), context2, void 0, void 0, exception)) ;
  else if (context2)
    console.error(context2 + ":", exception);
  else
    console.error(exception);
}
var editable = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : true });
var nextPluginID = 0;
var viewPlugin = /* @__PURE__ */ Facet.define({
  combine(plugins) {
    return plugins.filter((p, i) => {
      for (let j = 0; j < i; j++)
        if (plugins[j].plugin == p.plugin)
          return false;
      return true;
    });
  }
});
var ViewPlugin = class _ViewPlugin {
  constructor(id4, create2, domEventHandlers, domEventObservers, buildExtensions) {
    this.id = id4;
    this.create = create2;
    this.domEventHandlers = domEventHandlers;
    this.domEventObservers = domEventObservers;
    this.baseExtensions = buildExtensions(this);
    this.extension = this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg: void 0 }));
  }
  /**
  Create an extension for this plugin with the given argument.
  */
  of(arg) {
    return this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg }));
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(create2, spec) {
    const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
    return new _ViewPlugin(nextPluginID++, create2, eventHandlers, eventObservers, (plugin) => {
      let ext = [];
      if (deco)
        ext.push(decorations.of((view2) => {
          let pluginInst = view2.plugin(plugin);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
      if (provide)
        ext.push(provide(plugin));
      return ext;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(cls, spec) {
    return _ViewPlugin.define((view2, arg) => new cls(view2, arg), spec);
  }
};
var PluginInstance = class {
  constructor(spec) {
    this.spec = spec;
    this.mustUpdate = null;
    this.value = null;
  }
  get plugin() {
    return this.spec && this.spec.plugin;
  }
  update(view2) {
    if (!this.value) {
      if (this.spec) {
        try {
          this.value = this.spec.plugin.create(view2, this.spec.arg);
        } catch (e) {
          logException(view2.state, e, "CodeMirror plugin crashed");
          this.deactivate();
        }
      }
    } else if (this.mustUpdate) {
      let update3 = this.mustUpdate;
      this.mustUpdate = null;
      if (this.value.update) {
        try {
          this.value.update(update3);
        } catch (e) {
          logException(update3.state, e, "CodeMirror plugin crashed");
          if (this.value.destroy)
            try {
              this.value.destroy();
            } catch (_) {
            }
          this.deactivate();
        }
      }
    }
    return this;
  }
  destroy(view2) {
    var _a2;
    if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
      try {
        this.value.destroy();
      } catch (e) {
        logException(view2.state, e, "CodeMirror plugin crashed");
      }
    }
  }
  deactivate() {
    this.spec = this.value = null;
  }
};
var editorAttributes = /* @__PURE__ */ Facet.define();
var contentAttributes = /* @__PURE__ */ Facet.define();
var decorations = /* @__PURE__ */ Facet.define();
var outerDecorations = /* @__PURE__ */ Facet.define();
var atomicRanges = /* @__PURE__ */ Facet.define();
var bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
function getIsolatedRanges(view2, line2) {
  let isolates = view2.state.facet(bidiIsolatedRanges);
  if (!isolates.length)
    return isolates;
  let sets = isolates.map((i) => i instanceof Function ? i(view2) : i);
  let result = [];
  RangeSet.spans(sets, line2.from, line2.to, {
    point() {
    },
    span(fromDoc, toDoc, active, open) {
      let from = fromDoc - line2.from, to = toDoc - line2.from;
      let level = result;
      for (let i = active.length - 1; i >= 0; i--, open--) {
        let direction = active[i].spec.bidiIsolate, update3;
        if (direction == null)
          direction = autoDirection(line2.text, from, to);
        if (open > 0 && level.length && (update3 = level[level.length - 1]).to == from && update3.direction == direction) {
          update3.to = to;
          level = update3.inner;
        } else {
          let add = { from, to, direction, inner: [] };
          level.push(add);
          level = add.inner;
        }
      }
    }
  });
  return result;
}
var scrollMargins = /* @__PURE__ */ Facet.define();
function getScrollMargins(view2) {
  let left2 = 0, right2 = 0, top3 = 0, bottom2 = 0;
  for (let source2 of view2.state.facet(scrollMargins)) {
    let m = source2(view2);
    if (m) {
      if (m.left != null)
        left2 = Math.max(left2, m.left);
      if (m.right != null)
        right2 = Math.max(right2, m.right);
      if (m.top != null)
        top3 = Math.max(top3, m.top);
      if (m.bottom != null)
        bottom2 = Math.max(bottom2, m.bottom);
    }
  }
  return { left: left2, right: right2, top: top3, bottom: bottom2 };
}
var styleModule = /* @__PURE__ */ Facet.define();
var ChangedRange = class _ChangedRange {
  constructor(fromA, toA, fromB, toB) {
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  join(other) {
    return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
  }
  addToSet(set3) {
    let i = set3.length, me = this;
    for (; i > 0; i--) {
      let range3 = set3[i - 1];
      if (range3.fromA > me.toA)
        continue;
      if (range3.toA < me.fromA)
        break;
      me = me.join(range3);
      set3.splice(i - 1, 1);
    }
    set3.splice(i, 0, me);
    return set3;
  }
  static extendWithRanges(diff, ranges) {
    if (ranges.length == 0)
      return diff;
    let result = [];
    for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
      let next = dI == diff.length ? null : diff[dI], off = posA - posB;
      let end = next ? next.fromB : 1e9;
      while (rI < ranges.length && ranges[rI] < end) {
        let from = ranges[rI], to = ranges[rI + 1];
        let fromB = Math.max(posB, from), toB = Math.min(end, to);
        if (fromB <= toB)
          new _ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
        if (to > end)
          break;
        else
          rI += 2;
      }
      if (!next)
        return result;
      new _ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
      posA = next.toA;
      posB = next.toB;
    }
  }
};
var ViewUpdate = class _ViewUpdate {
  constructor(view2, state, transactions) {
    this.view = view2;
    this.state = state;
    this.transactions = transactions;
    this.flags = 0;
    this.startState = view2.state;
    this.changes = ChangeSet.empty(this.startState.doc.length);
    for (let tr of transactions)
      this.changes = this.changes.compose(tr.changes);
    let changedRanges = [];
    this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
    this.changedRanges = changedRanges;
  }
  /**
  @internal
  */
  static create(view2, state, transactions) {
    return new _ViewUpdate(view2, state, transactions);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Returns true when
  [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
  and the viewport change is not just the result of mapping it in
  response to document changes.
  */
  get viewportMoved() {
    return (this.flags & 8) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & (16 | 2)) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((tr) => tr.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
};
var DocView = class extends ContentView {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(view2) {
    super();
    this.view = view2;
    this.decorations = [];
    this.dynamicDecorationMap = [false];
    this.domChanged = null;
    this.hasComposition = null;
    this.markedForComposition = /* @__PURE__ */ new Set();
    this.editContextFormatting = Decoration.none;
    this.lastCompositionAfterCursor = false;
    this.minWidth = 0;
    this.minWidthFrom = 0;
    this.minWidthTo = 0;
    this.impreciseAnchor = null;
    this.impreciseHead = null;
    this.forceSelection = false;
    this.lastUpdate = Date.now();
    this.setDOM(view2.contentDOM);
    this.children = [new LineView()];
    this.children[0].setParent(this);
    this.updateDeco();
    this.updateInner([new ChangedRange(0, 0, 0, view2.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(update3) {
    var _a2;
    let changedRanges = update3.changedRanges;
    if (this.minWidth > 0 && changedRanges.length) {
      if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
        this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
      } else {
        this.minWidthFrom = update3.changes.mapPos(this.minWidthFrom, 1);
        this.minWidthTo = update3.changes.mapPos(this.minWidthTo, 1);
      }
    }
    this.updateEditContextFormatting(update3);
    let readCompositionAt = -1;
    if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
      if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
        readCompositionAt = this.domChanged.newSel.head;
      else if (!touchesComposition(update3.changes, this.hasComposition) && !update3.selectionSet)
        readCompositionAt = update3.state.selection.main.head;
    }
    let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update3.changes, readCompositionAt) : null;
    this.domChanged = null;
    if (this.hasComposition) {
      this.markedForComposition.clear();
      let { from, to } = this.hasComposition;
      changedRanges = new ChangedRange(from, to, update3.changes.mapPos(from, -1), update3.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
    }
    this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
    if ((browser.ie || browser.chrome) && !composition && update3 && update3.state.doc.lines != update3.startState.doc.lines)
      this.forceSelection = true;
    let prevDeco = this.decorations, deco = this.updateDeco();
    let decoDiff = findChangedDeco(prevDeco, deco, update3.changes);
    changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
    if (!(this.flags & 7) && changedRanges.length == 0) {
      return false;
    } else {
      this.updateInner(changedRanges, update3.startState.doc.length, composition);
      if (update3.transactions.length)
        this.lastUpdate = Date.now();
      return true;
    }
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(changes, oldLength, composition) {
    this.view.viewState.mustMeasureContent = true;
    this.updateChildren(changes, oldLength, composition);
    let { observer } = this.view;
    observer.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
      this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
      this.sync(this.view, track);
      this.flags &= ~7;
      if (track && (track.written || observer.selectionRange.focusNode != track.node))
        this.forceSelection = true;
      this.dom.style.height = "";
    });
    this.markedForComposition.forEach(
      (cView) => cView.flags &= ~8
      /* ViewFlag.Composition */
    );
    let gaps = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
      for (let child of this.children)
        if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
          gaps.push(child.dom);
    }
    observer.updateGaps(gaps);
  }
  updateChildren(changes, oldLength, composition) {
    let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
    let cursor2 = this.childCursor(oldLength);
    for (let i = ranges.length - 1; ; i--) {
      let next = i >= 0 ? ranges[i] : null;
      if (!next)
        break;
      let { fromA, toA, fromB, toB } = next, content2, breakAtStart, openStart, openEnd;
      if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
        let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
        let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
        breakAtStart = before.breakAtStart;
        openStart = before.openStart;
        openEnd = after.openEnd;
        let compLine = this.compositionView(composition);
        if (after.breakAtStart) {
          compLine.breakAfter = 1;
        } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
          compLine.breakAfter = after.content[0].breakAfter;
          after.content.shift();
        }
        if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
          before.content.pop();
        }
        content2 = before.content.concat(compLine).concat(after.content);
      } else {
        ({ content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
      }
      let { i: toI, off: toOff } = cursor2.findPos(toA, 1);
      let { i: fromI, off: fromOff } = cursor2.findPos(fromA, -1);
      replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
    }
    if (composition)
      this.fixCompositionDOM(composition);
  }
  updateEditContextFormatting(update3) {
    this.editContextFormatting = this.editContextFormatting.map(update3.changes);
    for (let tr of update3.transactions)
      for (let effect of tr.effects)
        if (effect.is(setEditContextFormatting)) {
          this.editContextFormatting = effect.value;
        }
  }
  compositionView(composition) {
    let cur = new TextView(composition.text.nodeValue);
    cur.flags |= 8;
    for (let { deco } of composition.marks)
      cur = new MarkView(deco, [cur], cur.length);
    let line2 = new LineView();
    line2.append(cur, 0);
    return line2;
  }
  fixCompositionDOM(composition) {
    let fix = (dom, cView2) => {
      cView2.flags |= 8 | (cView2.children.some(
        (c) => c.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0);
      this.markedForComposition.add(cView2);
      let prev = ContentView.get(dom);
      if (prev && prev != cView2)
        prev.dom = null;
      cView2.setDOM(dom);
    };
    let pos = this.childPos(composition.range.fromB, 1);
    let cView = this.children[pos.i];
    fix(composition.line, cView);
    for (let i = composition.marks.length - 1; i >= -1; i--) {
      pos = cView.childPos(pos.off, 1);
      cView = cView.children[pos.i];
      fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
    }
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(mustRead = false, fromPointer = false) {
    if (mustRead || !this.view.observer.selectionRange.focusNode)
      this.view.observer.readSelectionRange();
    let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
    let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
    if (!(focused || fromPointer || selectionNotFocus))
      return;
    let force2 = this.forceSelection;
    this.forceSelection = false;
    let main = this.view.state.selection.main;
    let anchor = this.moveToLine(this.domAtPos(main.anchor));
    let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
    if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
      let dummy = document.createTextNode("");
      this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
      anchor = head = new DOMPos(dummy, 0);
      force2 = true;
    }
    let domSel = this.view.observer.selectionRange;
    if (force2 || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
      this.view.observer.ignore(() => {
        if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
          this.dom.blur();
          this.dom.focus({ preventScroll: true });
        }
        let rawSel = getSelection(this.view.root);
        if (!rawSel) ;
        else if (main.empty) {
          if (browser.gecko) {
            let nextTo = nextToUneditable(anchor.node, anchor.offset);
            if (nextTo && nextTo != (1 | 2)) {
              let text = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
              if (text)
                anchor = new DOMPos(text.node, text.offset);
            }
          }
          rawSel.collapse(anchor.node, anchor.offset);
          if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
            rawSel.caretBidiLevel = main.bidiLevel;
        } else if (rawSel.extend) {
          rawSel.collapse(anchor.node, anchor.offset);
          try {
            rawSel.extend(head.node, head.offset);
          } catch (_) {
          }
        } else {
          let range3 = document.createRange();
          if (main.anchor > main.head)
            [anchor, head] = [head, anchor];
          range3.setEnd(head.node, head.offset);
          range3.setStart(anchor.node, anchor.offset);
          rawSel.removeAllRanges();
          rawSel.addRange(range3);
        }
        if (selectionNotFocus && this.view.root.activeElement == this.dom) {
          this.dom.blur();
          if (activeElt)
            activeElt.focus();
        }
      });
      this.view.observer.setSelectionRange(anchor, head);
    }
    this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
    this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(sel, cursor2) {
    return this.hasComposition && cursor2.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor2.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: view2 } = this, cursor2 = view2.state.selection.main;
    let sel = getSelection(view2.root);
    let { anchorNode, anchorOffset } = view2.observer.selectionRange;
    if (!sel || !cursor2.empty || !cursor2.assoc || !sel.modify)
      return;
    let line2 = LineView.find(this, cursor2.head);
    if (!line2)
      return;
    let lineStart = line2.posAtStart;
    if (cursor2.head == lineStart || cursor2.head == lineStart + line2.length)
      return;
    let before = this.coordsAt(cursor2.head, -1), after = this.coordsAt(cursor2.head, 1);
    if (!before || !after || before.bottom > after.top)
      return;
    let dom = this.domAtPos(cursor2.head + cursor2.assoc);
    sel.collapse(dom.node, dom.offset);
    sel.modify("move", cursor2.assoc < 0 ? "forward" : "backward", "lineboundary");
    view2.observer.readSelectionRange();
    let newRange = view2.observer.selectionRange;
    if (view2.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor2.from)
      sel.collapse(anchorNode, anchorOffset);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(pos) {
    let dom = this.dom, newPos;
    if (pos.node != dom)
      return pos;
    for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
      let view2 = ContentView.get(dom.childNodes[i]);
      if (view2 instanceof LineView)
        newPos = view2.domAtPos(0);
    }
    for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
      let view2 = ContentView.get(dom.childNodes[i]);
      if (view2 instanceof LineView)
        newPos = view2.domAtPos(view2.length);
    }
    return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
  }
  nearest(dom) {
    for (let cur = dom; cur; ) {
      let domView = ContentView.get(cur);
      if (domView && domView.rootView == this)
        return domView;
      cur = cur.parentNode;
    }
    return null;
  }
  posFromDOM(node, offset) {
    let view2 = this.nearest(node);
    if (!view2)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return view2.localPosFromDOM(node, offset) + view2.posAtStart;
  }
  domAtPos(pos) {
    let { i, off } = this.childCursor().findPos(pos, -1);
    for (; i < this.children.length - 1; ) {
      let child = this.children[i];
      if (off < child.length || child instanceof LineView)
        break;
      i++;
      off = 0;
    }
    return this.children[i].domAtPos(off);
  }
  coordsAt(pos, side) {
    let best = null, bestPos = 0;
    for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
      let child = this.children[i], end = off - child.breakAfter, start2 = end - child.length;
      if (end < pos)
        break;
      if (start2 <= pos && (start2 < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
        best = child;
        bestPos = start2;
      } else if (best && start2 == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
        if (child.deco.startSide < 0)
          break;
        else if (i)
          best = null;
      }
      off = start2;
    }
    return best ? best.coordsAt(pos - bestPos, side) : null;
  }
  coordsForChar(pos) {
    let { i, off } = this.childPos(pos, 1), child = this.children[i];
    if (!(child instanceof LineView))
      return null;
    while (child.children.length) {
      let { i: i2, off: childOff } = child.childPos(off, 1);
      for (; ; i2++) {
        if (i2 == child.children.length)
          return null;
        if ((child = child.children[i2]).length)
          break;
      }
      off = childOff;
    }
    if (!(child instanceof TextView))
      return null;
    let end = findClusterBreak2(child.text, off);
    if (end == off)
      return null;
    let rects = textRange(child.dom, off, end).getClientRects();
    for (let i2 = 0; i2 < rects.length; i2++) {
      let rect = rects[i2];
      if (i2 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
        return rect;
    }
    return null;
  }
  measureVisibleLineHeights(viewport) {
    let result = [], { from, to } = viewport;
    let contentWidth = this.view.contentDOM.clientWidth;
    let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
    let widest = -1, ltr = this.view.textDirection == Direction.LTR;
    for (let pos = 0, i = 0; i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (end > to)
        break;
      if (pos >= from) {
        let childRect = child.dom.getBoundingClientRect();
        result.push(childRect.height);
        if (isWider) {
          let last2 = child.dom.lastChild;
          let rects = last2 ? clientRectsFor(last2) : [];
          if (rects.length) {
            let rect = rects[rects.length - 1];
            let width2 = ltr ? rect.right - childRect.left : childRect.right - rect.left;
            if (width2 > widest) {
              widest = width2;
              this.minWidth = contentWidth;
              this.minWidthFrom = pos;
              this.minWidthTo = end;
            }
          }
        }
      }
      pos = end + child.breakAfter;
    }
    return result;
  }
  textDirectionAt(pos) {
    let { i } = this.childPos(pos, 1);
    return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
  }
  measureTextSize() {
    for (let child of this.children) {
      if (child instanceof LineView) {
        let measure = child.measureTextSize();
        if (measure)
          return measure;
      }
    }
    let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
    dummy.className = "cm-line";
    dummy.style.width = "99999px";
    dummy.style.position = "absolute";
    dummy.textContent = "abc def ghi jkl mno pqr stu";
    this.view.observer.ignore(() => {
      this.dom.appendChild(dummy);
      let rect = clientRectsFor(dummy.firstChild)[0];
      lineHeight = dummy.getBoundingClientRect().height;
      charWidth = rect ? rect.width / 27 : 7;
      textHeight = rect ? rect.height : lineHeight;
      dummy.remove();
    });
    return { lineHeight, charWidth, textHeight };
  }
  childCursor(pos = this.length) {
    let i = this.children.length;
    if (i)
      pos -= this.children[--i].length;
    return new ChildCursor(this.children, pos, i);
  }
  computeBlockGapDeco() {
    let deco = [], vs = this.view.viewState;
    for (let pos = 0, i = 0; ; i++) {
      let next = i == vs.viewports.length ? null : vs.viewports[i];
      let end = next ? next.from - 1 : this.length;
      if (end > pos) {
        let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
        deco.push(Decoration.replace({
          widget: new BlockGapWidget(height),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(pos, end));
      }
      if (!next)
        break;
      pos = next.to + 1;
    }
    return Decoration.set(deco);
  }
  updateDeco() {
    let i = 1;
    let allDeco = this.view.state.facet(decorations).map((d) => {
      let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
      return dynamic ? d(this.view) : d;
    });
    let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i2) => {
      let dynamic = typeof d == "function";
      if (dynamic)
        dynamicOuter = true;
      return dynamic ? d(this.view) : d;
    });
    if (outerDeco.length) {
      this.dynamicDecorationMap[i++] = dynamicOuter;
      allDeco.push(RangeSet.join(outerDeco));
    }
    this.decorations = [
      this.editContextFormatting,
      ...allDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
    while (i < this.decorations.length)
      this.dynamicDecorationMap[i++] = false;
    return this.decorations;
  }
  scrollIntoView(target) {
    if (target.isSnapshot) {
      let ref = this.view.viewState.lineBlockAt(target.range.head);
      this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
      this.view.scrollDOM.scrollLeft = target.xMargin;
      return;
    }
    for (let handler of this.view.state.facet(scrollHandler)) {
      try {
        if (handler(this.view, target.range, target))
          return true;
      } catch (e) {
        logException(this.view.state, e, "scroll handler");
      }
    }
    let { range: range3 } = target;
    let rect = this.coordsAt(range3.head, range3.empty ? range3.assoc : range3.head > range3.anchor ? -1 : 1), other;
    if (!rect)
      return;
    if (!range3.empty && (other = this.coordsAt(range3.anchor, range3.anchor > range3.head ? -1 : 1)))
      rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
    let margins = getScrollMargins(this.view);
    let targetRect = {
      left: rect.left - margins.left,
      top: rect.top - margins.top,
      right: rect.right + margins.right,
      bottom: rect.bottom + margins.bottom
    };
    let { offsetWidth, offsetHeight } = this.view.scrollDOM;
    scrollRectIntoView(this.view.scrollDOM, targetRect, range3.head < range3.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
  }
};
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
function findCompositionNode(view2, headPos) {
  let sel = view2.observer.selectionRange;
  if (!sel.focusNode)
    return null;
  let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
  let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
  let textNode = textBefore || textAfter;
  if (textAfter && textBefore && textAfter.node != textBefore.node) {
    let descAfter = ContentView.get(textAfter.node);
    if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
      textNode = textAfter;
    } else if (view2.docView.lastCompositionAfterCursor) {
      let descBefore = ContentView.get(textBefore.node);
      if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
        textNode = textAfter;
    }
  }
  view2.docView.lastCompositionAfterCursor = textNode != textBefore;
  if (!textNode)
    return null;
  let from = headPos - textNode.offset;
  return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
}
function findCompositionRange(view2, changes, headPos) {
  let found = findCompositionNode(view2, headPos);
  if (!found)
    return null;
  let { node: textNode, from, to } = found, text = textNode.nodeValue;
  if (/[\n\r]/.test(text))
    return null;
  if (view2.state.doc.sliceString(found.from, found.to) != text)
    return null;
  let inv = changes.invertedDesc;
  let range3 = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
  let marks2 = [];
  for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
    let parentView = ContentView.get(parent);
    if (parentView instanceof MarkView)
      marks2.push({ node: parent, deco: parentView.mark });
    else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view2.contentDOM)
      return { range: range3, text: textNode, marks: marks2, line: parent };
    else if (parent != view2.contentDOM)
      marks2.push({ node: parent, deco: new MarkDecoration({
        inclusive: true,
        attributes: getAttrs(parent),
        tagName: parent.tagName.toLowerCase()
      }) });
    else
      return null;
  }
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1)
    return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
}
var DecorationComparator$1 = class DecorationComparator {
  constructor() {
    this.changes = [];
  }
  compareRange(from, to) {
    addRange(from, to, this.changes);
  }
  comparePoint(from, to) {
    addRange(from, to, this.changes);
  }
  boundChange(pos) {
    addRange(pos, pos, this.changes);
  }
};
function findChangedDeco(a, b, diff) {
  let comp = new DecorationComparator$1();
  RangeSet.compare(a, b, diff, comp);
  return comp.changes;
}
function inUneditable(node, inside2) {
  for (let cur = node; cur && cur != inside2; cur = cur.assignedSlot || cur.parentNode) {
    if (cur.nodeType == 1 && cur.contentEditable == "false") {
      return true;
    }
  }
  return false;
}
function touchesComposition(changes, composition) {
  let touched = false;
  if (composition)
    changes.iterChangedRanges((from, to) => {
      if (from < composition.to && to > composition.from)
        touched = true;
    });
  return touched;
}
function groupAt(state, pos, bias = 1) {
  let categorize = state.charCategorizer(pos);
  let line2 = state.doc.lineAt(pos), linePos = pos - line2.from;
  if (line2.length == 0)
    return EditorSelection.cursor(pos);
  if (linePos == 0)
    bias = 1;
  else if (linePos == line2.length)
    bias = -1;
  let from = linePos, to = linePos;
  if (bias < 0)
    from = findClusterBreak2(line2.text, linePos, false);
  else
    to = findClusterBreak2(line2.text, linePos);
  let cat = categorize(line2.text.slice(from, to));
  while (from > 0) {
    let prev = findClusterBreak2(line2.text, from, false);
    if (categorize(line2.text.slice(prev, from)) != cat)
      break;
    from = prev;
  }
  while (to < line2.length) {
    let next = findClusterBreak2(line2.text, to);
    if (categorize(line2.text.slice(to, next)) != cat)
      break;
    to = next;
  }
  return EditorSelection.range(from + line2.from, to + line2.from);
}
function getdx(x2, rect) {
  return rect.left > x2 ? rect.left - x2 : Math.max(0, x2 - rect.right);
}
function getdy(y2, rect) {
  return rect.top > y2 ? rect.top - y2 : Math.max(0, y2 - rect.bottom);
}
function yOverlap(a, b) {
  return a.top < b.bottom - 1 && a.bottom > b.top + 1;
}
function upTop(rect, top3) {
  return top3 < rect.top ? { top: top3, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
}
function upBot(rect, bottom2) {
  return bottom2 > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom: bottom2 } : rect;
}
function domPosAtCoords(parent, x2, y2) {
  let closest, closestRect, closestX, closestY, closestOverlap = false;
  let above, below, aboveRect, belowRect;
  for (let child = parent.firstChild; child; child = child.nextSibling) {
    let rects = clientRectsFor(child);
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (closestRect && yOverlap(closestRect, rect))
        rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      let dx = getdx(x2, rect), dy = getdy(y2, rect);
      if (dx == 0 && dy == 0)
        return child.nodeType == 3 ? domPosInText(child, x2, y2) : domPosAtCoords(child, x2, y2);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
        closestOverlap = !dx ? true : x2 < rect.left ? i > 0 : i < rects.length - 1;
      }
      if (dx == 0) {
        if (y2 > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y2 < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y2) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y2) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest)
    return { node: parent, offset: 0 };
  let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x2));
  if (closest.nodeType == 3)
    return domPosInText(closest, clipX, y2);
  if (closestOverlap && closest.contentEditable != "false")
    return domPosAtCoords(closest, clipX, y2);
  let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x2 >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return { node: parent, offset };
}
function domPosInText(node, x2, y2) {
  let len = node.nodeValue.length;
  let closestOffset = -1, closestDY = 1e9, generalSide = 0;
  for (let i = 0; i < len; i++) {
    let rects = textRange(node, i, i + 1).getClientRects();
    for (let j = 0; j < rects.length; j++) {
      let rect = rects[j];
      if (rect.top == rect.bottom)
        continue;
      if (!generalSide)
        generalSide = x2 - rect.left;
      let dy = (rect.top > y2 ? rect.top - y2 : y2 - rect.bottom) - 1;
      if (rect.left - 1 <= x2 && rect.right + 1 >= x2 && dy < closestDY) {
        let right2 = x2 >= (rect.left + rect.right) / 2, after = right2;
        if (browser.chrome || browser.gecko) {
          let rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect.right)
            after = !right2;
        }
        if (dy <= 0)
          return { node, offset: i + (after ? 1 : 0) };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
}
function posAtCoords(view2, coords, precise, bias = -1) {
  var _a2, _b;
  let content2 = view2.contentDOM.getBoundingClientRect(), docTop = content2.top + view2.viewState.paddingTop;
  let block2, { docHeight } = view2.viewState;
  let { x: x2, y: y2 } = coords, yOffset = y2 - docTop;
  if (yOffset < 0)
    return 0;
  if (yOffset > docHeight)
    return view2.state.doc.length;
  for (let halfLine = view2.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
    block2 = view2.elementAtHeight(yOffset);
    if (block2.type == BlockType.Text)
      break;
    for (; ; ) {
      yOffset = bias > 0 ? block2.bottom + halfLine : block2.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight)
        break;
      if (bounced)
        return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y2 = docTop + yOffset;
  let lineStart = block2.from;
  if (lineStart < view2.viewport.from)
    return view2.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view2, content2, block2, x2, y2);
  if (lineStart > view2.viewport.to)
    return view2.viewport.to == view2.state.doc.length ? view2.state.doc.length : precise ? null : posAtCoordsImprecise(view2, content2, block2, x2, y2);
  let doc2 = view2.dom.ownerDocument;
  let root2 = view2.root.elementFromPoint ? view2.root : doc2;
  let element = root2.elementFromPoint(x2, y2);
  if (element && !view2.contentDOM.contains(element))
    element = null;
  if (!element) {
    x2 = Math.max(content2.left + 1, Math.min(content2.right - 1, x2));
    element = root2.elementFromPoint(x2, y2);
    if (element && !view2.contentDOM.contains(element))
      element = null;
  }
  let node, offset = -1;
  if (element && ((_a2 = view2.docView.nearest(element)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
    if (doc2.caretPositionFromPoint) {
      let pos = doc2.caretPositionFromPoint(x2, y2);
      if (pos)
        ({ offsetNode: node, offset } = pos);
    } else if (doc2.caretRangeFromPoint) {
      let range3 = doc2.caretRangeFromPoint(x2, y2);
      if (range3)
        ({ startContainer: node, startOffset: offset } = range3);
    }
    if (node && (!view2.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x2) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x2)))
      node = void 0;
    if (node)
      offset = Math.min(maxOffset(node), offset);
  }
  if (!node || !view2.docView.dom.contains(node)) {
    let line2 = LineView.find(view2.docView, lineStart);
    if (!line2)
      return yOffset > block2.top + block2.height / 2 ? block2.to : block2.from;
    ({ node, offset } = domPosAtCoords(line2.dom, x2, y2));
  }
  let nearest = view2.docView.nearest(node);
  if (!nearest)
    return null;
  if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
    let rect = nearest.dom.getBoundingClientRect();
    return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view2, contentRect, block2, x2, y2) {
  let into = Math.round((x2 - contentRect.left) * view2.defaultCharacterWidth);
  if (view2.lineWrapping && block2.height > view2.defaultLineHeight * 1.5) {
    let textHeight = view2.viewState.heightOracle.textHeight;
    let line2 = Math.floor((y2 - block2.top - (view2.defaultLineHeight - textHeight) * 0.5) / textHeight);
    into += line2 * view2.viewState.heightOracle.lineLength;
  }
  let content2 = view2.state.sliceDoc(block2.from, block2.to);
  return block2.from + findColumn(content2, into, view2.state.tabSize);
}
function isEndOfLineBefore(node, offset, x2) {
  let len, scan = node;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
    return false;
  for (; ; ) {
    let next = scan.nextSibling;
    if (next) {
      if (next.nodeName == "BR")
        break;
      return false;
    } else {
      let parent = scan.parentNode;
      if (!parent || parent.nodeName == "DIV")
        break;
      scan = parent;
    }
  }
  return textRange(node, len - 1, len).getBoundingClientRect().right > x2;
}
function isSuspiciousSafariCaretResult(node, offset, x2) {
  return isEndOfLineBefore(node, offset, x2);
}
function isSuspiciousChromeCaretResult(node, offset, x2) {
  if (offset != 0)
    return isEndOfLineBefore(node, offset, x2);
  for (let cur = node; ; ) {
    let parent = cur.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
      return false;
    if (parent.classList.contains("cm-line"))
      break;
    cur = parent;
  }
  let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x2 - rect.left > 5;
}
function blockAt(view2, pos, side) {
  let line2 = view2.lineBlockAt(pos);
  if (Array.isArray(line2.type)) {
    let best;
    for (let l of line2.type) {
      if (l.from > pos)
        break;
      if (l.to < pos)
        continue;
      if (l.from < pos && l.to > pos)
        return l;
      if (!best || l.type == BlockType.Text && (best.type != l.type || (side < 0 ? l.from < pos : l.to > pos)))
        best = l;
    }
    return best || line2;
  }
  return line2;
}
function moveToLineBoundary(view2, start2, forward, includeWrap) {
  let line2 = blockAt(view2, start2.head, start2.assoc || -1);
  let coords = !includeWrap || line2.type != BlockType.Text || !(view2.lineWrapping || line2.widgetLineBreaks) ? null : view2.coordsAtPos(start2.assoc < 0 && start2.head > line2.from ? start2.head - 1 : start2.head);
  if (coords) {
    let editorRect = view2.dom.getBoundingClientRect();
    let direction = view2.textDirectionAt(line2.from);
    let pos = view2.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null)
      return EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  return EditorSelection.cursor(forward ? line2.to : line2.from, forward ? -1 : 1);
}
function moveByChar(view2, start2, forward, by) {
  let line2 = view2.state.doc.lineAt(start2.head), spans = view2.bidiSpans(line2);
  let direction = view2.textDirectionAt(line2.from);
  for (let cur = start2, check2 = null; ; ) {
    let next = moveVisually(line2, spans, direction, cur, forward), char2 = movedOver;
    if (!next) {
      if (line2.number == (forward ? view2.state.doc.lines : 1))
        return cur;
      char2 = "\n";
      line2 = view2.state.doc.line(line2.number + (forward ? 1 : -1));
      spans = view2.bidiSpans(line2);
      next = view2.visualLineSide(line2, !forward);
    }
    if (!check2) {
      if (!by)
        return next;
      check2 = by(char2);
    } else if (!check2(char2)) {
      return cur;
    }
    cur = next;
  }
}
function byGroup(view2, pos, start2) {
  let categorize = view2.state.charCategorizer(pos);
  let cat = categorize(start2);
  return (next) => {
    let nextCat = categorize(next);
    if (cat == CharCategory.Space)
      cat = nextCat;
    return cat == nextCat;
  };
}
function moveVertically(view2, start2, forward, distance) {
  let startPos = start2.head, dir = forward ? 1 : -1;
  if (startPos == (forward ? view2.state.doc.length : 0))
    return EditorSelection.cursor(startPos, start2.assoc);
  let goal = start2.goalColumn, startY;
  let rect = view2.contentDOM.getBoundingClientRect();
  let startCoords = view2.coordsAtPos(startPos, start2.assoc || -1), docTop = view2.documentTop;
  if (startCoords) {
    if (goal == null)
      goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    let line2 = view2.viewState.lineBlockAt(startPos);
    if (goal == null)
      goal = Math.min(rect.right - rect.left, view2.defaultCharacterWidth * (startPos - line2.from));
    startY = (dir < 0 ? line2.top : line2.bottom) + docTop;
  }
  let resolvedGoal = rect.left + goal;
  let dist2 = distance !== null && distance !== void 0 ? distance : view2.viewState.heightOracle.textHeight >> 1;
  for (let extra = 0; ; extra += 10) {
    let curY = startY + (dist2 + extra) * dir;
    let pos = posAtCoords(view2, { x: resolvedGoal, y: curY }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
      let charRect = view2.docView.coordsForChar(pos);
      let assoc = !charRect || curY < charRect.top ? -1 : 1;
      return EditorSelection.cursor(pos, assoc, void 0, goal);
    }
  }
}
function skipAtomicRanges(atoms, pos, bias) {
  for (; ; ) {
    let moved = 0;
    for (let set3 of atoms) {
      set3.between(pos - 1, pos + 1, (from, to, value) => {
        if (pos > from && pos < to) {
          let side = moved || bias || (pos - from < to - pos ? -1 : 1);
          pos = side < 0 ? from : to;
          moved = side;
        }
      });
    }
    if (!moved)
      return pos;
  }
}
function skipAtomsForSelection(atoms, sel) {
  let ranges = null;
  for (let i = 0; i < sel.ranges.length; i++) {
    let range3 = sel.ranges[i], updated = null;
    if (range3.empty) {
      let pos = skipAtomicRanges(atoms, range3.from, 0);
      if (pos != range3.from)
        updated = EditorSelection.cursor(pos, -1);
    } else {
      let from = skipAtomicRanges(atoms, range3.from, -1);
      let to = skipAtomicRanges(atoms, range3.to, 1);
      if (from != range3.from || to != range3.to)
        updated = EditorSelection.range(range3.from == range3.anchor ? from : to, range3.from == range3.head ? from : to);
    }
    if (updated) {
      if (!ranges)
        ranges = sel.ranges.slice();
      ranges[i] = updated;
    }
  }
  return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
}
function skipAtoms(view2, oldPos, pos) {
  let newPos = skipAtomicRanges(view2.state.facet(atomicRanges).map((f) => f(view2)), pos.from, oldPos.head > pos.from ? -1 : 1);
  return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
}
var LineBreakPlaceholder = "\uFFFF";
var DOMReader = class {
  constructor(points, state) {
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(EditorState.lineSeparator);
  }
  append(text) {
    this.text += text;
  }
  lineBreak() {
    this.text += LineBreakPlaceholder;
  }
  readRange(start2, end) {
    if (!start2)
      return this;
    let parent = start2.parentNode;
    for (let cur = start2; ; ) {
      this.findPointBefore(parent, cur);
      let oldLen = this.text.length;
      this.readNode(cur);
      let next = cur.nextSibling;
      if (next == end)
        break;
      let view2 = ContentView.get(cur), nextView = ContentView.get(next);
      if (view2 && nextView ? view2.breakAfter : (view2 ? view2.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen)
        this.lineBreak();
      cur = next;
    }
    this.findPointBefore(parent, end);
    return this;
  }
  readTextNode(node) {
    let text = node.nodeValue;
    for (let point2 of this.points)
      if (point2.node == node)
        point2.pos = this.text.length + Math.min(point2.offset, text.length);
    for (let off = 0, re2 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let nextBreak = -1, breakSize = 1, m;
      if (this.lineSeparator) {
        nextBreak = text.indexOf(this.lineSeparator, off);
        breakSize = this.lineSeparator.length;
      } else if (m = re2.exec(text)) {
        nextBreak = m.index;
        breakSize = m[0].length;
      }
      this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
      if (nextBreak < 0)
        break;
      this.lineBreak();
      if (breakSize > 1) {
        for (let point2 of this.points)
          if (point2.node == node && point2.pos > this.text.length)
            point2.pos -= breakSize - 1;
      }
      off = nextBreak + breakSize;
    }
  }
  readNode(node) {
    if (node.cmIgnore)
      return;
    let view2 = ContentView.get(node);
    let fromView = view2 && view2.overrideDOMText;
    if (fromView != null) {
      this.findPointInside(node, fromView.length);
      for (let i = fromView.iter(); !i.next().done; ) {
        if (i.lineBreak)
          this.lineBreak();
        else
          this.append(i.value);
      }
    } else if (node.nodeType == 3) {
      this.readTextNode(node);
    } else if (node.nodeName == "BR") {
      if (node.nextSibling)
        this.lineBreak();
    } else if (node.nodeType == 1) {
      this.readRange(node.firstChild, null);
    }
  }
  findPointBefore(node, next) {
    for (let point2 of this.points)
      if (point2.node == node && node.childNodes[point2.offset] == next)
        point2.pos = this.text.length;
  }
  findPointInside(node, length6) {
    for (let point2 of this.points)
      if (node.nodeType == 3 ? point2.node == node : node.contains(point2.node))
        point2.pos = this.text.length + (isAtEnd(node, point2.node, point2.offset) ? length6 : 0);
  }
};
function isAtEnd(parent, node, offset) {
  for (; ; ) {
    if (!node || offset < maxOffset(node))
      return false;
    if (node == parent)
      return true;
    offset = domIndex(node) + 1;
    node = node.parentNode;
  }
}
var DOMPoint = class {
  constructor(node, offset) {
    this.node = node;
    this.offset = offset;
    this.pos = -1;
  }
};
var DOMChange = class {
  constructor(view2, start2, end, typeOver) {
    this.typeOver = typeOver;
    this.bounds = null;
    this.text = "";
    this.domChanged = start2 > -1;
    let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view2.docView;
    if (view2.state.readOnly && start2 > -1) {
      this.newSel = null;
    } else if (start2 > -1 && (this.bounds = view2.docView.domBoundsAround(start2, end, 0))) {
      let selPoints = iHead || iAnchor ? [] : selectionPoints(view2);
      let reader = new DOMReader(selPoints, view2.state);
      reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
      this.text = reader.text;
      this.newSel = selectionFromPoints(selPoints, this.bounds.from);
    } else {
      let domSel = view2.observer.selectionRange;
      let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view2.contentDOM, domSel.focusNode) ? view2.state.selection.main.head : view2.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view2.contentDOM, domSel.anchorNode) ? view2.state.selection.main.anchor : view2.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
      let vp = view2.viewport;
      if ((browser.ios || browser.chrome) && view2.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view2.state.doc.length)) {
        let from = Math.min(head, anchor), to = Math.max(head, anchor);
        let offFrom = vp.from - from, offTo = vp.to - to;
        if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view2.state.doc.length)) {
          head = 0;
          anchor = view2.state.doc.length;
        }
      }
      this.newSel = EditorSelection.single(anchor, head);
    }
  }
};
function applyDOMChange(view2, domChange) {
  let change;
  let { newSel } = domChange, sel = view2.state.selection.main;
  let lastKey = view2.inputState.lastKeyTime > Date.now() - 100 ? view2.inputState.lastKeyCode : -1;
  if (domChange.bounds) {
    let { from, to } = domChange.bounds;
    let preferredPos = sel.from, preferredSide = null;
    if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    let diff = findDiff(view2.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
    if (diff) {
      if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
        diff.toB--;
      change = {
        from: from + diff.from,
        to: from + diff.toA,
        insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view2.hasFocus && view2.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel)
    return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    change = { from: sel.from, to: sel.to, insert: view2.state.doc.slice(sel.from, sel.to) };
  } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view2.contentDOM.getAttribute("autocorrect") == "off") {
    if (newSel && change.insert.length == 2)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    change = {
      from: sel.from,
      to: sel.to,
      insert: view2.state.doc.slice(sel.from, change.from).append(change.insert).append(view2.state.doc.slice(change.to, sel.to))
    };
  } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view2.lineWrapping) {
    if (newSel)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  }
  if (change) {
    return applyDOMChangeInner(view2, change, newSel, lastKey);
  } else if (newSel && !newSel.main.eq(sel)) {
    let scrollIntoView2 = false, userEvent = "select";
    if (view2.inputState.lastSelectionTime > Date.now() - 50) {
      if (view2.inputState.lastSelectionOrigin == "select")
        scrollIntoView2 = true;
      userEvent = view2.inputState.lastSelectionOrigin;
      if (userEvent == "select.pointer")
        newSel = skipAtomsForSelection(view2.state.facet(atomicRanges).map((f) => f(view2)), newSel);
    }
    view2.dispatch({ selection: newSel, scrollIntoView: scrollIntoView2, userEvent });
    return true;
  } else {
    return false;
  }
}
function applyDOMChangeInner(view2, change, newSel, lastKey = -1) {
  if (browser.ios && view2.inputState.flushIOSKey(change))
    return true;
  let sel = view2.state.selection.main;
  if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (change.from == sel.from || change.from == sel.from - 1 && view2.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view2.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view2.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view2.contentDOM, "Delete", 46)))
    return true;
  let text = change.insert.toString();
  if (view2.inputState.composing >= 0)
    view2.inputState.composing++;
  let defaultTr;
  let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view2, change, newSel));
  if (!view2.state.facet(inputHandler).some((h) => h(view2, change.from, change.to, text, defaultInsert)))
    view2.dispatch(defaultInsert());
  return true;
}
function applyDefaultInsert(view2, change, newSel) {
  let tr, startState2 = view2.state, sel = startState2.selection.main, inAtomic = -1;
  if (change.from == change.to && change.from < sel.from || change.from > sel.to) {
    let side = change.from < sel.from ? -1 : 1, pos = side < 0 ? sel.from : sel.to;
    let moved = skipAtomicRanges(startState2.facet(atomicRanges).map((f) => f(view2)), pos, side);
    if (change.from == moved)
      inAtomic = moved;
  }
  if (inAtomic > -1) {
    tr = {
      changes: change,
      selection: EditorSelection.cursor(change.from + change.insert.length, -1)
    };
  } else if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view2.inputState.composing < 0) {
    let before = sel.from < change.from ? startState2.sliceDoc(sel.from, change.from) : "";
    let after = sel.to > change.to ? startState2.sliceDoc(change.to, sel.to) : "";
    tr = startState2.replaceSelection(view2.state.toText(before + change.insert.sliceString(0, void 0, view2.state.lineBreak) + after));
  } else {
    let changes = startState2.changes(change);
    let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
    if (startState2.selection.ranges.length > 1 && view2.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
      let replaced = view2.state.sliceDoc(change.from, change.to);
      let compositionRange, composition = newSel && findCompositionNode(view2, newSel.main.head);
      if (composition) {
        let dLen = change.insert.length - (change.to - change.from);
        compositionRange = { from: composition.from, to: composition.to - dLen };
      } else {
        compositionRange = view2.state.doc.lineAt(sel.head);
      }
      let offset = sel.to - change.to, size3 = sel.to - sel.from;
      tr = startState2.changeByRange((range3) => {
        if (range3.from == sel.from && range3.to == sel.to)
          return { changes, range: mainSel || range3.map(changes) };
        let to = range3.to - offset, from = to - replaced.length;
        if (range3.to - range3.from != size3 || view2.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        range3.to >= compositionRange.from && range3.from <= compositionRange.to)
          return { range: range3 };
        let rangeChanges = startState2.changes({ from, to, insert: change.insert }), selOff = range3.to - sel.to;
        return {
          changes: rangeChanges,
          range: !mainSel ? range3.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
        };
      });
    } else {
      tr = {
        changes,
        selection: mainSel && startState2.selection.replaceRange(mainSel)
      };
    }
  }
  let userEvent = "input.type";
  if (view2.composing || view2.inputState.compositionPendingChange && view2.inputState.compositionEndedAt > Date.now() - 50) {
    view2.inputState.compositionPendingChange = false;
    userEvent += ".compose";
    if (view2.inputState.compositionFirstChange) {
      userEvent += ".start";
      view2.inputState.compositionFirstChange = false;
    }
  }
  return startState2.update(tr, { userEvent, scrollIntoView: true });
}
function findDiff(a, b, preferredPos, preferredSide) {
  let minLen = Math.min(a.length, b.length);
  let from = 0;
  while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
    from++;
  if (from == minLen && a.length == b.length)
    return null;
  let toA = a.length, toB = b.length;
  while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    let adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }
  if (toA < from && a.length < b.length) {
    let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= move;
    toA = from + (toA - toB);
    toB = from;
  }
  return { from, toA, toB };
}
function selectionPoints(view2) {
  let result = [];
  if (view2.root.activeElement != view2.contentDOM)
    return result;
  let { anchorNode, anchorOffset, focusNode, focusOffset } = view2.observer.selectionRange;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset)
      result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base2) {
  if (points.length == 0)
    return null;
  let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
}
var InputState = class {
  setSelectionOrigin(origin) {
    this.lastSelectionOrigin = origin;
    this.lastSelectionTime = Date.now();
  }
  constructor(view2) {
    this.view = view2;
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.pendingIOSKey = void 0;
    this.tabFocusMode = -1;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.handlers = /* @__PURE__ */ Object.create(null);
    this.composing = -1;
    this.compositionFirstChange = null;
    this.compositionEndedAt = 0;
    this.compositionPendingKey = false;
    this.compositionPendingChange = false;
    this.mouseSelection = null;
    this.draggedContent = null;
    this.handleEvent = this.handleEvent.bind(this);
    this.notifiedFocused = view2.hasFocus;
    if (browser.safari)
      view2.contentDOM.addEventListener("input", () => null);
    if (browser.gecko)
      firefoxCopyCutHack(view2.contentDOM.ownerDocument);
  }
  handleEvent(event) {
    if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
      return;
    if (event.type == "keydown" && this.keydown(event))
      return;
    if (this.view.updateState != 0)
      Promise.resolve().then(() => this.runHandlers(event.type, event));
    else
      this.runHandlers(event.type, event);
  }
  runHandlers(type2, event) {
    let handlers2 = this.handlers[type2];
    if (handlers2) {
      for (let observer of handlers2.observers)
        observer(this.view, event);
      for (let handler of handlers2.handlers) {
        if (event.defaultPrevented)
          break;
        if (handler(this.view, event)) {
          event.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(plugins) {
    let handlers2 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
    for (let type2 in handlers2)
      if (type2 != "scroll") {
        let passive = !handlers2[type2].handlers.length;
        let exists = prev[type2];
        if (exists && passive != !exists.handlers.length) {
          dom.removeEventListener(type2, this.handleEvent);
          exists = null;
        }
        if (!exists)
          dom.addEventListener(type2, this.handleEvent, { passive });
      }
    for (let type2 in prev)
      if (type2 != "scroll" && !handlers2[type2])
        dom.removeEventListener(type2, this.handleEvent);
    this.handlers = handlers2;
  }
  keydown(event) {
    this.lastKeyCode = event.keyCode;
    this.lastKeyTime = Date.now();
    if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return true;
    if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
      this.tabFocusMode = -1;
    if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
      this.view.observer.delayAndroidKey(event.key, event.keyCode);
      return true;
    }
    let pending;
    if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
      this.pendingIOSKey = pending || event;
      setTimeout(() => this.flushIOSKey(), 250);
      return true;
    }
    if (event.keyCode != 229)
      this.view.observer.forceFlush();
    return false;
  }
  flushIOSKey(change) {
    let key = this.pendingIOSKey;
    if (!key)
      return false;
    if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
      return false;
    this.pendingIOSKey = void 0;
    return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : void 0);
  }
  ignoreDuringComposition(event) {
    if (!/^key/.test(event.type))
      return false;
    if (this.composing > 0)
      return true;
    if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
      this.compositionPendingKey = false;
      return true;
    }
    return false;
  }
  startMouseSelection(mouseSelection) {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
    this.mouseSelection = mouseSelection;
  }
  update(update3) {
    this.view.observer.update(update3);
    if (this.mouseSelection)
      this.mouseSelection.update(update3);
    if (this.draggedContent && update3.docChanged)
      this.draggedContent = this.draggedContent.map(update3.changes);
    if (update3.transactions.length)
      this.lastKeyCode = this.lastSelectionTime = 0;
  }
  destroy() {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
  }
};
function bindHandler(plugin, handler) {
  return (view2, event) => {
    try {
      return handler.call(plugin, event, view2);
    } catch (e) {
      logException(view2.state, e);
    }
  };
}
function computeHandlers(plugins) {
  let result = /* @__PURE__ */ Object.create(null);
  function record2(type2) {
    return result[type2] || (result[type2] = { observers: [], handlers: [] });
  }
  for (let plugin of plugins) {
    let spec = plugin.spec, handlers2 = spec && spec.plugin.domEventHandlers, observers2 = spec && spec.plugin.domEventObservers;
    if (handlers2)
      for (let type2 in handlers2) {
        let f = handlers2[type2];
        if (f)
          record2(type2).handlers.push(bindHandler(plugin.value, f));
      }
    if (observers2)
      for (let type2 in observers2) {
        let f = observers2[type2];
        if (f)
          record2(type2).observers.push(bindHandler(plugin.value, f));
      }
  }
  for (let type2 in handlers)
    record2(type2).handlers.push(handlers[type2]);
  for (let type2 in observers)
    record2(type2).observers.push(observers[type2]);
  return result;
}
var PendingKeys = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
];
var EmacsyPendingKeys = "dthko";
var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
var dragScrollMargin = 6;
function dragScrollSpeed(dist2) {
  return Math.max(0, dist2) * 0.7 + 8;
}
function dist(a, b) {
  return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
}
var MouseSelection = class {
  constructor(view2, startEvent, style, mustSelect) {
    this.view = view2;
    this.startEvent = startEvent;
    this.style = style;
    this.mustSelect = mustSelect;
    this.scrollSpeed = { x: 0, y: 0 };
    this.scrolling = -1;
    this.lastEvent = startEvent;
    this.scrollParents = scrollableParents(view2.contentDOM);
    this.atoms = view2.state.facet(atomicRanges).map((f) => f(view2));
    let doc2 = view2.contentDOM.ownerDocument;
    doc2.addEventListener("mousemove", this.move = this.move.bind(this));
    doc2.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view2.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view2, startEvent);
    this.dragging = isInPrimarySelection(view2, startEvent) && getClickType(startEvent) == 1 ? null : false;
  }
  start(event) {
    if (this.dragging === false)
      this.select(event);
  }
  move(event) {
    if (event.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
      return;
    this.select(this.lastEvent = event);
    let sx = 0, sy = 0;
    let left2 = 0, top3 = 0, right2 = this.view.win.innerWidth, bottom2 = this.view.win.innerHeight;
    if (this.scrollParents.x)
      ({ left: left2, right: right2 } = this.scrollParents.x.getBoundingClientRect());
    if (this.scrollParents.y)
      ({ top: top3, bottom: bottom2 } = this.scrollParents.y.getBoundingClientRect());
    let margins = getScrollMargins(this.view);
    if (event.clientX - margins.left <= left2 + dragScrollMargin)
      sx = -dragScrollSpeed(left2 - event.clientX);
    else if (event.clientX + margins.right >= right2 - dragScrollMargin)
      sx = dragScrollSpeed(event.clientX - right2);
    if (event.clientY - margins.top <= top3 + dragScrollMargin)
      sy = -dragScrollSpeed(top3 - event.clientY);
    else if (event.clientY + margins.bottom >= bottom2 - dragScrollMargin)
      sy = dragScrollSpeed(event.clientY - bottom2);
    this.setScrollSpeed(sx, sy);
  }
  up(event) {
    if (this.dragging == null)
      this.select(this.lastEvent);
    if (!this.dragging)
      event.preventDefault();
    this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let doc2 = this.view.contentDOM.ownerDocument;
    doc2.removeEventListener("mousemove", this.move);
    doc2.removeEventListener("mouseup", this.up);
    this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(sx, sy) {
    this.scrollSpeed = { x: sx, y: sy };
    if (sx || sy) {
      if (this.scrolling < 0)
        this.scrolling = setInterval(() => this.scroll(), 50);
    } else if (this.scrolling > -1) {
      clearInterval(this.scrolling);
      this.scrolling = -1;
    }
  }
  scroll() {
    let { x: x2, y: y2 } = this.scrollSpeed;
    if (x2 && this.scrollParents.x) {
      this.scrollParents.x.scrollLeft += x2;
      x2 = 0;
    }
    if (y2 && this.scrollParents.y) {
      this.scrollParents.y.scrollTop += y2;
      y2 = 0;
    }
    if (x2 || y2)
      this.view.win.scrollBy(x2, y2);
    if (this.dragging === false)
      this.select(this.lastEvent);
  }
  select(event) {
    let { view: view2 } = this, selection3 = skipAtomsForSelection(this.atoms, this.style.get(event, this.extend, this.multiple));
    if (this.mustSelect || !selection3.eq(view2.state.selection, this.dragging === false))
      this.view.dispatch({
        selection: selection3,
        userEvent: "select.pointer"
      });
    this.mustSelect = false;
  }
  update(update3) {
    if (update3.transactions.some((tr) => tr.isUserEvent("input.type")))
      this.destroy();
    else if (this.style.update(update3))
      setTimeout(() => this.select(this.lastEvent), 20);
  }
};
function addsSelectionRange(view2, event) {
  let facet = view2.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view2, event) {
  let facet = view2.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view2, event) {
  let { main } = view2.state.selection;
  if (main.empty)
    return false;
  let sel = getSelection(view2.root);
  if (!sel || sel.rangeCount == 0)
    return true;
  let rects = sel.getRangeAt(0).getClientRects();
  for (let i = 0; i < rects.length; i++) {
    let rect = rects[i];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
      return true;
  }
  return false;
}
function eventBelongsToEditor(view2, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node = event.target, cView; node != view2.contentDOM; node = node.parentNode)
    if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
      return false;
  return true;
}
var handlers = /* @__PURE__ */ Object.create(null);
var observers = /* @__PURE__ */ Object.create(null);
var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
function capturePaste(view2) {
  let parent = view2.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view2.focus();
    target.remove();
    doPaste(view2, target.value);
  }, 50);
}
function textFilter(state, facet, text) {
  for (let filter3 of state.facet(facet))
    text = filter3(text, state);
  return text;
}
function doPaste(view2, input) {
  input = textFilter(view2.state, clipboardInputFilter, input);
  let { state } = view2, changes, i = 1, text = state.toText(input);
  let byLine = text.lines == state.selection.ranges.length;
  let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r) => r.empty) && lastLinewiseCopy == text.toString();
  if (linewise) {
    let lastLine = -1;
    changes = state.changeByRange((range3) => {
      let line2 = state.doc.lineAt(range3.from);
      if (line2.from == lastLine)
        return { range: range3 };
      lastLine = line2.from;
      let insert5 = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
      return {
        changes: { from: line2.from, insert: insert5 },
        range: EditorSelection.cursor(range3.from + insert5.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange((range3) => {
      let line2 = text.line(i++);
      return {
        changes: { from: range3.from, to: range3.to, insert: line2.text },
        range: EditorSelection.cursor(range3.from + line2.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view2.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
observers.scroll = (view2) => {
  view2.inputState.lastScrollTop = view2.scrollDOM.scrollTop;
  view2.inputState.lastScrollLeft = view2.scrollDOM.scrollLeft;
};
handlers.keydown = (view2, event) => {
  view2.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27 && view2.inputState.tabFocusMode != 0)
    view2.inputState.tabFocusMode = Date.now() + 2e3;
  return false;
};
observers.touchstart = (view2, e) => {
  view2.inputState.lastTouchTime = Date.now();
  view2.inputState.setSelectionOrigin("select.pointer");
};
observers.touchmove = (view2) => {
  view2.inputState.setSelectionOrigin("select.pointer");
};
handlers.mousedown = (view2, event) => {
  view2.observer.flush();
  if (view2.inputState.lastTouchTime > Date.now() - 2e3)
    return false;
  let style = null;
  for (let makeStyle of view2.state.facet(mouseSelectionStyle)) {
    style = makeStyle(view2, event);
    if (style)
      break;
  }
  if (!style && event.button == 0)
    style = basicMouseSelection(view2, event);
  if (style) {
    let mustFocus = !view2.hasFocus;
    view2.inputState.startMouseSelection(new MouseSelection(view2, event, style, mustFocus));
    if (mustFocus)
      view2.observer.ignore(() => {
        focusPreventScroll(view2.contentDOM);
        let active = view2.root.activeElement;
        if (active && !active.contains(view2.contentDOM))
          active.blur();
      });
    let mouseSel = view2.inputState.mouseSelection;
    if (mouseSel) {
      mouseSel.start(event);
      return mouseSel.dragging === false;
    }
  } else {
    view2.inputState.setSelectionOrigin("select.pointer");
  }
  return false;
};
function rangeForClick(view2, pos, bias, type2) {
  if (type2 == 1) {
    return EditorSelection.cursor(pos, bias);
  } else if (type2 == 2) {
    return groupAt(view2.state, pos, bias);
  } else {
    let visual = LineView.find(view2.docView, pos), line2 = view2.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    let from = visual ? visual.posAtStart : line2.from, to = visual ? visual.posAtEnd : line2.to;
    if (to < view2.state.doc.length && to == line2.to)
      to++;
    return EditorSelection.range(from, to);
  }
}
var inside = (x2, y2, rect) => y2 >= rect.top && y2 <= rect.bottom && x2 >= rect.left && x2 <= rect.right;
function findPositionSide(view2, pos, x2, y2) {
  let line2 = LineView.find(view2.docView, pos);
  if (!line2)
    return 1;
  let off = pos - line2.posAtStart;
  if (off == 0)
    return 1;
  if (off == line2.length)
    return -1;
  let before = line2.coordsAt(off, -1);
  if (before && inside(x2, y2, before))
    return -1;
  let after = line2.coordsAt(off, 1);
  if (after && inside(x2, y2, after))
    return 1;
  return before && before.bottom >= y2 ? -1 : 1;
}
function queryPos(view2, event) {
  let pos = view2.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  return { pos, bias: findPositionSide(view2, pos, event.clientX, event.clientY) };
}
var BadMouseDetail = browser.ie && browser.ie_version <= 11;
var lastMouseDown = null;
var lastMouseDownCount = 0;
var lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail)
    return event.detail;
  let last2 = lastMouseDown, lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last2 || lastTime > Date.now() - 400 && Math.abs(last2.clientX - event.clientX) < 2 && Math.abs(last2.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view2, event) {
  let start2 = queryPos(view2, event), type2 = getClickType(event);
  let startSel = view2.state.selection;
  return {
    update(update3) {
      if (update3.docChanged) {
        start2.pos = update3.changes.mapPos(start2.pos);
        startSel = startSel.map(update3.changes);
      }
    },
    get(event2, extend3, multiple) {
      let cur = queryPos(view2, event2), removed;
      let range3 = rangeForClick(view2, cur.pos, cur.bias, type2);
      if (start2.pos != cur.pos && !extend3) {
        let startRange = rangeForClick(view2, start2.pos, start2.bias, type2);
        let from = Math.min(startRange.from, range3.from), to = Math.max(startRange.to, range3.to);
        range3 = from < range3.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
      }
      if (extend3)
        return startSel.replaceRange(startSel.main.extend(range3.from, range3.to));
      else if (multiple && type2 == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
        return removed;
      else if (multiple)
        return startSel.addRange(range3);
      else
        return EditorSelection.create([range3]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (let i = 0; i < sel.ranges.length; i++) {
    let { from, to } = sel.ranges[i];
    if (from <= pos && to >= pos)
      return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
  }
  return null;
}
handlers.dragstart = (view2, event) => {
  let { selection: { main: range3 } } = view2.state;
  if (event.target.draggable) {
    let cView = view2.docView.nearest(event.target);
    if (cView && cView.isWidget) {
      let from = cView.posAtStart, to = from + cView.length;
      if (from >= range3.to || to <= range3.from)
        range3 = EditorSelection.range(from, to);
    }
  }
  let { inputState } = view2;
  if (inputState.mouseSelection)
    inputState.mouseSelection.dragging = true;
  inputState.draggedContent = range3;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", textFilter(view2.state, clipboardOutputFilter, view2.state.sliceDoc(range3.from, range3.to)));
    event.dataTransfer.effectAllowed = "copyMove";
  }
  return false;
};
handlers.dragend = (view2) => {
  view2.inputState.draggedContent = null;
  return false;
};
function dropText(view2, event, text, direct) {
  text = textFilter(view2.state, clipboardInputFilter, text);
  if (!text)
    return;
  let dropPos = view2.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let { draggedContent } = view2.inputState;
  let del = direct && draggedContent && dragMovesSelection(view2, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
  let ins = { from: dropPos, insert: text };
  let changes = view2.state.changes(del ? [del, ins] : ins);
  view2.focus();
  view2.dispatch({
    changes,
    selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
    userEvent: del ? "move.drop" : "input.drop"
  });
  view2.inputState.draggedContent = null;
}
handlers.drop = (view2, event) => {
  if (!event.dataTransfer)
    return false;
  if (view2.state.readOnly)
    return true;
  let files = event.dataTransfer.files;
  if (files && files.length) {
    let text = Array(files.length), read2 = 0;
    let finishFile = () => {
      if (++read2 == files.length)
        dropText(view2, event, text.filter((s) => s != null).join(view2.state.lineBreak), false);
    };
    for (let i = 0; i < files.length; i++) {
      let reader = new FileReader();
      reader.onerror = finishFile;
      reader.onload = () => {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
          text[i] = reader.result;
        finishFile();
      };
      reader.readAsText(files[i]);
    }
    return true;
  } else {
    let text = event.dataTransfer.getData("Text");
    if (text) {
      dropText(view2, event, text, true);
      return true;
    }
  }
  return false;
};
handlers.paste = (view2, event) => {
  if (view2.state.readOnly)
    return true;
  view2.observer.flush();
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    doPaste(view2, data.getData("text/plain") || data.getData("text/uri-list"));
    return true;
  } else {
    capturePaste(view2);
    return false;
  }
};
function captureCopy(view2, text) {
  let parent = view2.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(() => {
    target.remove();
    view2.focus();
  }, 50);
}
function copiedRange(state) {
  let content2 = [], ranges = [], linewise = false;
  for (let range3 of state.selection.ranges)
    if (!range3.empty) {
      content2.push(state.sliceDoc(range3.from, range3.to));
      ranges.push(range3);
    }
  if (!content2.length) {
    let upto = -1;
    for (let { from } of state.selection.ranges) {
      let line2 = state.doc.lineAt(from);
      if (line2.number > upto) {
        content2.push(line2.text);
        ranges.push({ from: line2.from, to: Math.min(state.doc.length, line2.to + 1) });
      }
      upto = line2.number;
    }
    linewise = true;
  }
  return { text: textFilter(state, clipboardOutputFilter, content2.join(state.lineBreak)), ranges, linewise };
}
var lastLinewiseCopy = null;
handlers.copy = handlers.cut = (view2, event) => {
  let { text, ranges, linewise } = copiedRange(view2.state);
  if (!text && !linewise)
    return false;
  lastLinewiseCopy = linewise ? text : null;
  if (event.type == "cut" && !view2.state.readOnly)
    view2.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    data.clearData();
    data.setData("text/plain", text);
    return true;
  } else {
    captureCopy(view2, text);
    return false;
  }
};
var isFocusChange = /* @__PURE__ */ Annotation.define();
function focusChangeTransaction(state, focus) {
  let effects = [];
  for (let getEffect of state.facet(focusChangeEffect)) {
    let effect = getEffect(state, focus);
    if (effect)
      effects.push(effect);
  }
  return effects.length ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
}
function updateForFocusChange(view2) {
  setTimeout(() => {
    let focus = view2.hasFocus;
    if (focus != view2.inputState.notifiedFocused) {
      let tr = focusChangeTransaction(view2.state, focus);
      if (tr)
        view2.dispatch(tr);
      else
        view2.update([]);
    }
  }, 10);
}
observers.focus = (view2) => {
  view2.inputState.lastFocusTime = Date.now();
  if (!view2.scrollDOM.scrollTop && (view2.inputState.lastScrollTop || view2.inputState.lastScrollLeft)) {
    view2.scrollDOM.scrollTop = view2.inputState.lastScrollTop;
    view2.scrollDOM.scrollLeft = view2.inputState.lastScrollLeft;
  }
  updateForFocusChange(view2);
};
observers.blur = (view2) => {
  view2.observer.clearSelectionRange();
  updateForFocusChange(view2);
};
observers.compositionstart = observers.compositionupdate = (view2) => {
  if (view2.observer.editContext)
    return;
  if (view2.inputState.compositionFirstChange == null)
    view2.inputState.compositionFirstChange = true;
  if (view2.inputState.composing < 0) {
    view2.inputState.composing = 0;
  }
};
observers.compositionend = (view2) => {
  if (view2.observer.editContext)
    return;
  view2.inputState.composing = -1;
  view2.inputState.compositionEndedAt = Date.now();
  view2.inputState.compositionPendingKey = true;
  view2.inputState.compositionPendingChange = view2.observer.pendingRecords().length > 0;
  view2.inputState.compositionFirstChange = null;
  if (browser.chrome && browser.android) {
    view2.observer.flushSoon();
  } else if (view2.inputState.compositionPendingChange) {
    Promise.resolve().then(() => view2.observer.flush());
  } else {
    setTimeout(() => {
      if (view2.inputState.composing < 0 && view2.docView.hasComposition)
        view2.update([]);
    }, 50);
  }
};
observers.contextmenu = (view2) => {
  view2.inputState.lastContextMenu = Date.now();
};
handlers.beforeinput = (view2, event) => {
  var _a2, _b;
  if (event.inputType == "insertReplacementText" && view2.observer.editContext) {
    let text = (_a2 = event.dataTransfer) === null || _a2 === void 0 ? void 0 : _a2.getData("text/plain"), ranges = event.getTargetRanges();
    if (text && ranges.length) {
      let r = ranges[0];
      let from = view2.posAtDOM(r.startContainer, r.startOffset), to = view2.posAtDOM(r.endContainer, r.endOffset);
      applyDOMChangeInner(view2, { from, to, insert: view2.state.toText(text) }, null);
      return true;
    }
  }
  let pending;
  if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
    view2.observer.delayAndroidKey(pending.key, pending.keyCode);
    if (pending.key == "Backspace" || pending.key == "Delete") {
      let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
      setTimeout(() => {
        var _a3;
        if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view2.hasFocus) {
          view2.contentDOM.blur();
          view2.focus();
        }
      }, 100);
    }
  }
  if (browser.ios && event.inputType == "deleteContentForward") {
    view2.observer.flushSoon();
  }
  if (browser.safari && event.inputType == "insertText" && view2.inputState.composing >= 0) {
    setTimeout(() => observers.compositionend(view2, event), 20);
  }
  return false;
};
var appliedFirefoxHack = /* @__PURE__ */ new Set();
function firefoxCopyCutHack(doc2) {
  if (!appliedFirefoxHack.has(doc2)) {
    appliedFirefoxHack.add(doc2);
    doc2.addEventListener("copy", () => {
    });
    doc2.addEventListener("cut", () => {
    });
  }
}
var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
var heightChangeFlag = false;
function clearHeightChangeFlag() {
  heightChangeFlag = false;
}
var HeightOracle = class {
  constructor(lineWrapping) {
    this.lineWrapping = lineWrapping;
    this.doc = Text.empty;
    this.heightSamples = {};
    this.lineHeight = 14;
    this.charWidth = 7;
    this.textHeight = 14;
    this.lineLength = 30;
  }
  heightForGap(from, to) {
    let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
    if (this.lineWrapping)
      lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
    return this.lineHeight * lines;
  }
  heightForLine(length6) {
    if (!this.lineWrapping)
      return this.lineHeight;
    let lines = 1 + Math.max(0, Math.ceil((length6 - this.lineLength) / Math.max(1, this.lineLength - 5)));
    return lines * this.lineHeight;
  }
  setDoc(doc2) {
    this.doc = doc2;
    return this;
  }
  mustRefreshForWrapping(whiteSpace) {
    return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(lineHeights) {
    let newHeight = false;
    for (let i = 0; i < lineHeights.length; i++) {
      let h = lineHeights[i];
      if (h < 0) {
        i++;
      } else if (!this.heightSamples[Math.floor(h * 10)]) {
        newHeight = true;
        this.heightSamples[Math.floor(h * 10)] = true;
      }
    }
    return newHeight;
  }
  refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
    let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
    let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
    this.lineWrapping = lineWrapping;
    this.lineHeight = lineHeight;
    this.charWidth = charWidth;
    this.textHeight = textHeight;
    this.lineLength = lineLength;
    if (changed) {
      this.heightSamples = {};
      for (let i = 0; i < knownHeights.length; i++) {
        let h = knownHeights[i];
        if (h < 0)
          i++;
        else
          this.heightSamples[Math.floor(h * 10)] = true;
      }
    }
    return changed;
  }
};
var MeasuredHeights = class {
  constructor(from, heights) {
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
};
var BlockInfo = class _BlockInfo {
  /**
  @internal
  */
  constructor(from, length6, top3, height, _content) {
    this.from = from;
    this.length = length6;
    this.top = top3;
    this.height = height;
    this._content = _content;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof PointDecoration ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(other) {
    let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
    return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
  }
};
var QueryType = /* @__PURE__ */ (function(QueryType2) {
  QueryType2[QueryType2["ByPos"] = 0] = "ByPos";
  QueryType2[QueryType2["ByHeight"] = 1] = "ByHeight";
  QueryType2[QueryType2["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType2;
})(QueryType || (QueryType = {}));
var Epsilon = 1e-3;
var HeightMap = class _HeightMap {
  constructor(length6, height, flags = 2) {
    this.length = length6;
    this.height = height;
    this.flags = flags;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(value) {
    this.flags = (value ? 2 : 0) | this.flags & ~2;
  }
  setHeight(height) {
    if (this.height != height) {
      if (Math.abs(this.height - height) > Epsilon)
        heightChangeFlag = true;
      this.height = height;
    }
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(_from, _to, nodes) {
    return _HeightMap.of(nodes);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(_to, result) {
    result.push(this);
  }
  decomposeRight(_from, result) {
    result.push(this);
  }
  applyChanges(decorations2, oldDoc, oracle, changes) {
    let me = this, doc2 = oracle.doc;
    for (let i = changes.length - 1; i >= 0; i--) {
      let { fromA, toA, fromB, toB } = changes[i];
      let start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
      let end = start2.to >= toA ? start2 : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
      toB += end.to - toA;
      toA = end.to;
      while (i > 0 && start2.from <= changes[i - 1].toA) {
        fromA = changes[i - 1].fromA;
        fromB = changes[i - 1].fromB;
        i--;
        if (fromA < start2.from)
          start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
      }
      fromB += start2.from - fromA;
      fromA = start2.from;
      let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
      me = replace(me, me.replace(fromA, toA, nodes));
    }
    return me.updateHeight(oracle, 0);
  }
  static empty() {
    return new HeightMapText(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(nodes) {
    if (nodes.length == 1)
      return nodes[0];
    let i = 0, j = nodes.length, before = 0, after = 0;
    for (; ; ) {
      if (i == j) {
        if (before > after * 2) {
          let split4 = nodes[i - 1];
          if (split4.break)
            nodes.splice(--i, 1, split4.left, null, split4.right);
          else
            nodes.splice(--i, 1, split4.left, split4.right);
          j += 1 + split4.break;
          before -= split4.size;
        } else if (after > before * 2) {
          let split4 = nodes[j];
          if (split4.break)
            nodes.splice(j, 1, split4.left, null, split4.right);
          else
            nodes.splice(j, 1, split4.left, split4.right);
          j += 2 + split4.break;
          after -= split4.size;
        } else {
          break;
        }
      } else if (before < after) {
        let next = nodes[i++];
        if (next)
          before += next.size;
      } else {
        let next = nodes[--j];
        if (next)
          after += next.size;
      }
    }
    let brk = 0;
    if (nodes[i - 1] == null) {
      brk = 1;
      i--;
    } else if (nodes[i] == null) {
      brk = 1;
      j++;
    }
    return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i)), brk, _HeightMap.of(nodes.slice(j)));
  }
};
function replace(old, val) {
  if (old == val)
    return old;
  if (old.constructor != val.constructor)
    heightChangeFlag = true;
  return val;
}
HeightMap.prototype.size = 1;
var HeightMapBlock = class extends HeightMap {
  constructor(length6, height, deco) {
    super(length6, height);
    this.deco = deco;
  }
  blockAt(_height, _oracle, top3, offset) {
    return new BlockInfo(offset, this.length, top3, this.height, this.deco || 0);
  }
  lineAt(_value, _type, oracle, top3, offset) {
    return this.blockAt(0, oracle, top3, offset);
  }
  forEachLine(from, to, oracle, top3, offset, f) {
    if (from <= offset + this.length && to >= offset)
      f(this.blockAt(0, oracle, top3, offset));
  }
  updateHeight(oracle, offset = 0, _force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(measured.heights[measured.index++]);
    this.outdated = false;
    return this;
  }
  toString() {
    return `block(${this.length})`;
  }
};
var HeightMapText = class _HeightMapText extends HeightMapBlock {
  constructor(length6, height) {
    super(length6, height, null);
    this.collapsed = 0;
    this.widgetHeight = 0;
    this.breaks = 0;
  }
  blockAt(_height, _oracle, top3, offset) {
    return new BlockInfo(offset, this.length, top3, this.height, this.breaks);
  }
  replace(_from, _to, nodes) {
    let node = nodes[0];
    if (nodes.length == 1 && (node instanceof _HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
      if (node instanceof HeightMapGap)
        node = new _HeightMapText(node.length, this.height);
      else
        node.height = this.height;
      if (!this.outdated)
        node.outdated = false;
      return node;
    } else {
      return HeightMap.of(nodes);
    }
  }
  updateHeight(oracle, offset = 0, force2 = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(measured.heights[measured.index++]);
    else if (force2 || this.outdated)
      this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
    this.outdated = false;
    return this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
};
var HeightMapGap = class _HeightMapGap extends HeightMap {
  constructor(length6) {
    super(length6, 0);
  }
  heightMetrics(oracle, offset) {
    let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
    let lines = lastLine - firstLine + 1;
    let perLine, perChar = 0;
    if (oracle.lineWrapping) {
      let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
      perLine = totalPerLine / lines;
      if (this.length > lines + 1)
        perChar = (this.height - totalPerLine) / (this.length - lines - 1);
    } else {
      perLine = this.height / lines;
    }
    return { firstLine, lastLine, perLine, perChar };
  }
  blockAt(height, oracle, top3, offset) {
    let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    if (oracle.lineWrapping) {
      let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top3) / this.height)) * this.length));
      let line2 = oracle.doc.lineAt(guess), lineHeight = perLine + line2.length * perChar;
      let lineTop = Math.max(top3, height - lineHeight / 2);
      return new BlockInfo(line2.from, line2.length, lineTop, lineHeight, 0);
    } else {
      let line2 = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top3) / perLine)));
      let { from, length: length6 } = oracle.doc.line(firstLine + line2);
      return new BlockInfo(from, length6, top3 + perLine * line2, perLine, 0);
    }
  }
  lineAt(value, type2, oracle, top3, offset) {
    if (type2 == QueryType.ByHeight)
      return this.blockAt(value, oracle, top3, offset);
    if (type2 == QueryType.ByPosNoHeight) {
      let { from, to } = oracle.doc.lineAt(value);
      return new BlockInfo(from, to - from, 0, 0, 0);
    }
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    let line2 = oracle.doc.lineAt(value), lineHeight = perLine + line2.length * perChar;
    let linesAbove = line2.number - firstLine;
    let lineTop = top3 + perLine * linesAbove + perChar * (line2.from - offset - linesAbove);
    return new BlockInfo(line2.from, line2.length, Math.max(top3, Math.min(lineTop, top3 + this.height - lineHeight)), lineHeight, 0);
  }
  forEachLine(from, to, oracle, top3, offset, f) {
    from = Math.max(from, offset);
    to = Math.min(to, offset + this.length);
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    for (let pos = from, lineTop = top3; pos <= to; ) {
      let line2 = oracle.doc.lineAt(pos);
      if (pos == from) {
        let linesAbove = line2.number - firstLine;
        lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
      }
      let lineHeight = perLine + perChar * line2.length;
      f(new BlockInfo(line2.from, line2.length, lineTop, lineHeight, 0));
      lineTop += lineHeight;
      pos = line2.to + 1;
    }
  }
  replace(from, to, nodes) {
    let after = this.length - to;
    if (after > 0) {
      let last2 = nodes[nodes.length - 1];
      if (last2 instanceof _HeightMapGap)
        nodes[nodes.length - 1] = new _HeightMapGap(last2.length + after);
      else
        nodes.push(null, new _HeightMapGap(after - 1));
    }
    if (from > 0) {
      let first = nodes[0];
      if (first instanceof _HeightMapGap)
        nodes[0] = new _HeightMapGap(from + first.length);
      else
        nodes.unshift(new _HeightMapGap(from - 1), null);
    }
    return HeightMap.of(nodes);
  }
  decomposeLeft(to, result) {
    result.push(new _HeightMapGap(to - 1), null);
  }
  decomposeRight(from, result) {
    result.push(null, new _HeightMapGap(this.length - from - 1));
  }
  updateHeight(oracle, offset = 0, force2 = false, measured) {
    let end = offset + this.length;
    if (measured && measured.from <= offset + this.length && measured.more) {
      let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
      if (measured.from > offset)
        nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
      while (pos <= end && measured.more) {
        let len = oracle.doc.lineAt(pos).length;
        if (nodes.length)
          nodes.push(null);
        let height = measured.heights[measured.index++];
        if (singleHeight == -1)
          singleHeight = height;
        else if (Math.abs(height - singleHeight) >= Epsilon)
          singleHeight = -2;
        let line2 = new HeightMapText(len, height);
        line2.outdated = false;
        nodes.push(line2);
        pos += len + 1;
      }
      if (pos <= end)
        nodes.push(null, new _HeightMapGap(end - pos).updateHeight(oracle, pos));
      let result = HeightMap.of(nodes);
      if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
        heightChangeFlag = true;
      return replace(this, result);
    } else if (force2 || this.outdated) {
      this.setHeight(oracle.heightForGap(offset, offset + this.length));
      this.outdated = false;
    }
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
};
var HeightMapBranch = class extends HeightMap {
  constructor(left2, brk, right2) {
    super(left2.length + brk + right2.length, left2.height + right2.height, brk | (left2.outdated || right2.outdated ? 2 : 0));
    this.left = left2;
    this.right = right2;
    this.size = left2.size + right2.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(height, oracle, top3, offset) {
    let mid = top3 + this.left.height;
    return height < mid ? this.left.blockAt(height, oracle, top3, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
  }
  lineAt(value, type2, oracle, top3, offset) {
    let rightTop = top3 + this.left.height, rightOffset = offset + this.left.length + this.break;
    let left2 = type2 == QueryType.ByHeight ? value < rightTop : value < rightOffset;
    let base2 = left2 ? this.left.lineAt(value, type2, oracle, top3, offset) : this.right.lineAt(value, type2, oracle, rightTop, rightOffset);
    if (this.break || (left2 ? base2.to < rightOffset : base2.from > rightOffset))
      return base2;
    let subQuery = type2 == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
    if (left2)
      return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
    else
      return this.left.lineAt(rightOffset, subQuery, oracle, top3, offset).join(base2);
  }
  forEachLine(from, to, oracle, top3, offset, f) {
    let rightTop = top3 + this.left.height, rightOffset = offset + this.left.length + this.break;
    if (this.break) {
      if (from < rightOffset)
        this.left.forEachLine(from, to, oracle, top3, offset, f);
      if (to >= rightOffset)
        this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
    } else {
      let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top3, offset);
      if (from < mid.from)
        this.left.forEachLine(from, mid.from - 1, oracle, top3, offset, f);
      if (mid.to >= from && mid.from <= to)
        f(mid);
      if (to > mid.to)
        this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
    }
  }
  replace(from, to, nodes) {
    let rightStart = this.left.length + this.break;
    if (to < rightStart)
      return this.balanced(this.left.replace(from, to, nodes), this.right);
    if (from > this.left.length)
      return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
    let result = [];
    if (from > 0)
      this.decomposeLeft(from, result);
    let left2 = result.length;
    for (let node of nodes)
      result.push(node);
    if (from > 0)
      mergeGaps(result, left2 - 1);
    if (to < this.length) {
      let right2 = result.length;
      this.decomposeRight(to, result);
      mergeGaps(result, right2);
    }
    return HeightMap.of(result);
  }
  decomposeLeft(to, result) {
    let left2 = this.left.length;
    if (to <= left2)
      return this.left.decomposeLeft(to, result);
    result.push(this.left);
    if (this.break) {
      left2++;
      if (to >= left2)
        result.push(null);
    }
    if (to > left2)
      this.right.decomposeLeft(to - left2, result);
  }
  decomposeRight(from, result) {
    let left2 = this.left.length, right2 = left2 + this.break;
    if (from >= right2)
      return this.right.decomposeRight(from - right2, result);
    if (from < left2)
      this.left.decomposeRight(from, result);
    if (this.break && from < right2)
      result.push(null);
    result.push(this.right);
  }
  balanced(left2, right2) {
    if (left2.size > 2 * right2.size || right2.size > 2 * left2.size)
      return HeightMap.of(this.break ? [left2, null, right2] : [left2, right2]);
    this.left = replace(this.left, left2);
    this.right = replace(this.right, right2);
    this.setHeight(left2.height + right2.height);
    this.outdated = left2.outdated || right2.outdated;
    this.size = left2.size + right2.size;
    this.length = left2.length + this.break + right2.length;
    return this;
  }
  updateHeight(oracle, offset = 0, force2 = false, measured) {
    let { left: left2, right: right2 } = this, rightStart = offset + left2.length + this.break, rebalance = null;
    if (measured && measured.from <= offset + left2.length && measured.more)
      rebalance = left2 = left2.updateHeight(oracle, offset, force2, measured);
    else
      left2.updateHeight(oracle, offset, force2);
    if (measured && measured.from <= rightStart + right2.length && measured.more)
      rebalance = right2 = right2.updateHeight(oracle, rightStart, force2, measured);
    else
      right2.updateHeight(oracle, rightStart, force2);
    if (rebalance)
      return this.balanced(left2, right2);
    this.height = this.left.height + this.right.height;
    this.outdated = false;
    return this;
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
};
function mergeGaps(nodes, around) {
  let before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
    nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
var relevantWidgetHeight = 5;
var NodeBuilder = class _NodeBuilder {
  constructor(pos, oracle) {
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(_from, to) {
    if (this.lineStart > -1) {
      let end = Math.min(to, this.lineEnd), last2 = this.nodes[this.nodes.length - 1];
      if (last2 instanceof HeightMapText)
        last2.length += end - this.pos;
      else if (end > this.pos || !this.isCovered)
        this.nodes.push(new HeightMapText(end - this.pos, -1));
      this.writtenTo = end;
      if (to > end) {
        this.nodes.push(null);
        this.writtenTo++;
        this.lineStart = -1;
      }
    }
    this.pos = to;
  }
  point(from, to, deco) {
    if (from < to || deco.heightRelevant) {
      let height = deco.widget ? deco.widget.estimatedHeight : 0;
      let breaks = deco.widget ? deco.widget.lineBreaks : 0;
      if (height < 0)
        height = this.oracle.lineHeight;
      let len = to - from;
      if (deco.block) {
        this.addBlock(new HeightMapBlock(len, height, deco));
      } else if (len || breaks || height >= relevantWidgetHeight) {
        this.addLineDeco(height, breaks, len);
      }
    } else if (to > from) {
      this.span(from, to);
    }
    if (this.lineEnd > -1 && this.lineEnd < this.pos)
      this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from, to } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = from;
    this.lineEnd = to;
    if (this.writtenTo < from) {
      if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
        this.nodes.push(this.blankContent(this.writtenTo, from - 1));
      this.nodes.push(null);
    }
    if (this.pos > from)
      this.nodes.push(new HeightMapText(this.pos - from, -1));
    this.writtenTo = this.pos;
  }
  blankContent(from, to) {
    let gap = new HeightMapGap(to - from);
    if (this.oracle.doc.lineAt(from).to == to)
      gap.flags |= 4;
    return gap;
  }
  ensureLine() {
    this.enterLine();
    let last2 = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (last2 instanceof HeightMapText)
      return last2;
    let line2 = new HeightMapText(0, -1);
    this.nodes.push(line2);
    return line2;
  }
  addBlock(block2) {
    this.enterLine();
    let deco = block2.deco;
    if (deco && deco.startSide > 0 && !this.isCovered)
      this.ensureLine();
    this.nodes.push(block2);
    this.writtenTo = this.pos = this.pos + block2.length;
    if (deco && deco.endSide > 0)
      this.covering = block2;
  }
  addLineDeco(height, breaks, length6) {
    let line2 = this.ensureLine();
    line2.length += length6;
    line2.collapsed += length6;
    line2.widgetHeight = Math.max(line2.widgetHeight, height);
    line2.breaks += breaks;
    this.writtenTo = this.pos = this.pos + length6;
  }
  finish(from) {
    let last2 = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    if (this.lineStart > -1 && !(last2 instanceof HeightMapText) && !this.isCovered)
      this.nodes.push(new HeightMapText(0, -1));
    else if (this.writtenTo < this.pos || last2 == null)
      this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let pos = from;
    for (let node of this.nodes) {
      if (node instanceof HeightMapText)
        node.updateHeight(this.oracle, pos);
      pos += node ? node.length : 1;
    }
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(oracle, decorations2, from, to) {
    let builder = new _NodeBuilder(from, oracle);
    RangeSet.spans(decorations2, from, to, builder, 0);
    return builder.finish(from);
  }
};
function heightRelevantDecoChanges(a, b, diff) {
  let comp = new DecorationComparator2();
  RangeSet.compare(a, b, diff, comp, 0);
  return comp.changes;
}
var DecorationComparator2 = class {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(from, to, a, b) {
    if (from < to || a && a.heightRelevant || b && b.heightRelevant)
      addRange(from, to, this.changes, 5);
  }
};
function visiblePixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  let left2 = Math.max(0, rect.left), right2 = Math.min(win.innerWidth, rect.right);
  let top3 = Math.max(0, rect.top), bottom2 = Math.min(win.innerHeight, rect.bottom);
  for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
    if (parent.nodeType == 1) {
      let elt = parent;
      let style = window.getComputedStyle(elt);
      if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
        let parentRect = elt.getBoundingClientRect();
        left2 = Math.max(left2, parentRect.left);
        right2 = Math.min(right2, parentRect.right);
        top3 = Math.max(top3, parentRect.top);
        bottom2 = Math.min(parent == dom.parentNode ? win.innerHeight : bottom2, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
    } else if (parent.nodeType == 11) {
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left2 - rect.left,
    right: Math.max(left2, right2) - rect.left,
    top: top3 - (rect.top + paddingTop),
    bottom: Math.max(top3, bottom2) - (rect.top + paddingTop)
  };
}
function inWindow(elt) {
  let rect = elt.getBoundingClientRect(), win = elt.ownerDocument.defaultView || window;
  return rect.left < win.innerWidth && rect.right > 0 && rect.top < win.innerHeight && rect.bottom > 0;
}
function fullPixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
}
var LineGap = class {
  constructor(from, to, size3, displaySize) {
    this.from = from;
    this.to = to;
    this.size = size3;
    this.displaySize = displaySize;
  }
  static same(a, b) {
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++) {
      let gA = a[i], gB = b[i];
      if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
        return false;
    }
    return true;
  }
  draw(viewState, wrapping) {
    return Decoration.replace({
      widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
    }).range(this.from, this.to);
  }
};
var LineGapWidget = class extends WidgetType {
  constructor(size3, vertical) {
    super();
    this.size = size3;
    this.vertical = vertical;
  }
  eq(other) {
    return other.size == this.size && other.vertical == this.vertical;
  }
  toDOM() {
    let elt = document.createElement("div");
    if (this.vertical) {
      elt.style.height = this.size + "px";
    } else {
      elt.style.width = this.size + "px";
      elt.style.height = "2px";
      elt.style.display = "inline-block";
    }
    return elt;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
};
var ViewState = class {
  constructor(state) {
    this.state = state;
    this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    this.scrollTop = 0;
    this.scrolledToBottom = false;
    this.scaleX = 1;
    this.scaleY = 1;
    this.scrollAnchorPos = 0;
    this.scrollAnchorHeight = -1;
    this.scaler = IdScaler;
    this.scrollTarget = null;
    this.printing = false;
    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.LTR;
    this.visibleRanges = [];
    this.mustEnforceCursorAssoc = false;
    let guessWrapping = state.facet(contentAttributes).some((v) => typeof v != "function" && v.class == "cm-lineWrapping");
    this.heightOracle = new HeightOracle(guessWrapping);
    this.stateDeco = state.facet(decorations).filter((d) => typeof d != "function");
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    for (let i = 0; i < 2; i++) {
      this.viewport = this.getViewport(0, null);
      if (!this.updateForViewport())
        break;
    }
    this.updateViewportLines();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
    this.computeVisibleRanges();
  }
  updateForViewport() {
    let viewports = [this.viewport], { main } = this.state.selection;
    for (let i = 0; i <= 1; i++) {
      let pos = i ? main.head : main.anchor;
      if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
        let { from, to } = this.lineBlockAt(pos);
        viewports.push(new Viewport(from, to));
      }
    }
    this.viewports = viewports.sort((a, b) => a.from - b.from);
    return this.updateScaler();
  }
  updateScaler() {
    let scaler = this.scaler;
    this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
    return scaler.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [];
    this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block2) => {
      this.viewportLines.push(scaleBlock(block2, this.scaler));
    });
  }
  update(update3, scrollTarget = null) {
    this.state = update3.state;
    let prevDeco = this.stateDeco;
    this.stateDeco = this.state.facet(decorations).filter((d) => typeof d != "function");
    let contentChanges = update3.changedRanges;
    let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update3 ? update3.changes : ChangeSet.empty(this.state.doc.length)));
    let prevHeight = this.heightMap.height;
    let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    clearHeightChangeFlag();
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, update3.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
    if (this.heightMap.height != prevHeight || heightChangeFlag)
      update3.flags |= 2;
    if (scrollAnchor) {
      this.scrollAnchorPos = update3.changes.mapPos(scrollAnchor.from, -1);
      this.scrollAnchorHeight = scrollAnchor.top;
    } else {
      this.scrollAnchorPos = -1;
      this.scrollAnchorHeight = prevHeight;
    }
    let viewport = heightChanges.length ? this.mapViewport(this.viewport, update3.changes) : this.viewport;
    if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
      viewport = this.getViewport(0, scrollTarget);
    let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
    this.viewport = viewport;
    update3.flags |= this.updateForViewport();
    if (viewportChange || !update3.changes.empty || update3.flags & 2)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update3.changes)));
    update3.flags |= this.computeVisibleRanges(update3.changes);
    if (scrollTarget)
      this.scrollTarget = scrollTarget;
    if (!this.mustEnforceCursorAssoc && update3.selectionSet && update3.view.lineWrapping && update3.state.selection.main.empty && update3.state.selection.main.assoc && !update3.state.facet(nativeSelectionHidden))
      this.mustEnforceCursorAssoc = true;
  }
  measure(view2) {
    let dom = view2.contentDOM, style = window.getComputedStyle(dom);
    let oracle = this.heightOracle;
    let whiteSpace = style.whiteSpace;
    this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
    let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
    let domRect = dom.getBoundingClientRect();
    let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
    this.contentDOMHeight = domRect.height;
    this.mustMeasureContent = false;
    let result = 0, bias = 0;
    if (domRect.width && domRect.height) {
      let { scaleX, scaleY } = getScale(dom, domRect);
      if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        result |= 16;
        refresh = measureContent = true;
      }
    }
    let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
    let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
    if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
      this.paddingTop = paddingTop;
      this.paddingBottom = paddingBottom;
      result |= 16 | 2;
    }
    if (this.editorWidth != view2.scrollDOM.clientWidth) {
      if (oracle.lineWrapping)
        measureContent = true;
      this.editorWidth = view2.scrollDOM.clientWidth;
      result |= 16;
    }
    let scrollTop = view2.scrollDOM.scrollTop * this.scaleY;
    if (this.scrollTop != scrollTop) {
      this.scrollAnchorHeight = -1;
      this.scrollTop = scrollTop;
    }
    this.scrolledToBottom = isScrolledToBottom(view2.scrollDOM);
    let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
    let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
    this.pixelViewport = pixelViewport;
    let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (inView != this.inView) {
      this.inView = inView;
      if (inView)
        measureContent = true;
    }
    if (!this.inView && !this.scrollTarget && !inWindow(view2.dom))
      return 0;
    let contentWidth = domRect.width;
    if (this.contentDOMWidth != contentWidth || this.editorHeight != view2.scrollDOM.clientHeight) {
      this.contentDOMWidth = domRect.width;
      this.editorHeight = view2.scrollDOM.clientHeight;
      result |= 16;
    }
    if (measureContent) {
      let lineHeights = view2.docView.measureVisibleLineHeights(this.viewport);
      if (oracle.mustRefreshForHeights(lineHeights))
        refresh = true;
      if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
        let { lineHeight, charWidth, textHeight } = view2.docView.measureTextSize();
        refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, Math.max(5, contentWidth / charWidth), lineHeights);
        if (refresh) {
          view2.docView.minWidth = 0;
          result |= 16;
        }
      }
      if (dTop > 0 && dBottom > 0)
        bias = Math.max(dTop, dBottom);
      else if (dTop < 0 && dBottom < 0)
        bias = Math.min(dTop, dBottom);
      clearHeightChangeFlag();
      for (let vp of this.viewports) {
        let heights = vp.from == this.viewport.from ? lineHeights : view2.docView.measureVisibleLineHeights(vp);
        this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view2.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
      }
      if (heightChangeFlag)
        result |= 2;
    }
    let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    if (viewportChange) {
      if (result & 2)
        result |= this.updateScaler();
      this.viewport = this.getViewport(bias, this.scrollTarget);
      result |= this.updateForViewport();
    }
    if (result & 2 || viewportChange)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view2));
    result |= this.computeVisibleRanges();
    if (this.mustEnforceCursorAssoc) {
      this.mustEnforceCursorAssoc = false;
      view2.docView.enforceCursorAssoc();
    }
    return result;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(bias, scrollTarget) {
    let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
    let map4 = this.heightMap, oracle = this.heightOracle;
    let { visibleTop, visibleBottom } = this;
    let viewport = new Viewport(map4.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map4.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
    if (scrollTarget) {
      let { head } = scrollTarget.range;
      if (head < viewport.from || head > viewport.to) {
        let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
        let block2 = map4.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
        if (scrollTarget.y == "center")
          topPos = (block2.top + block2.bottom) / 2 - viewHeight / 2;
        else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
          topPos = block2.top;
        else
          topPos = block2.bottom - viewHeight;
        viewport = new Viewport(map4.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map4.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
      }
    }
    return viewport;
  }
  mapViewport(viewport, changes) {
    let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
    return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from, to }, bias = 0) {
    if (!this.inView)
      return true;
    let { top: top3 } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
    let { bottom: bottom2 } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
    let { visibleTop, visibleBottom } = this;
    return (from == 0 || top3 <= visibleTop - Math.max(10, Math.min(
      -bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (to == this.state.doc.length || bottom2 >= visibleBottom + Math.max(10, Math.min(
      bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (top3 > visibleTop - 2 * 1e3 && bottom2 < visibleBottom + 2 * 1e3);
  }
  mapLineGaps(gaps, changes) {
    if (!gaps.length || changes.empty)
      return gaps;
    let mapped = [];
    for (let gap of gaps)
      if (!changes.touchesRange(gap.from, gap.to))
        mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
    return mapped;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(current, mayMeasure) {
    let wrapping = this.heightOracle.lineWrapping;
    let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
    if (this.defaultTextDirection != Direction.LTR && !wrapping)
      return [];
    let gaps = [];
    let addGap = (from, to, line2, structure) => {
      if (to - from < halfMargin)
        return;
      let sel = this.state.selection.main, avoid = [sel.from];
      if (!sel.empty)
        avoid.push(sel.to);
      for (let pos of avoid) {
        if (pos > from && pos < to) {
          addGap(from, pos - 10, line2, structure);
          addGap(pos + 10, to, line2, structure);
          return;
        }
      }
      let gap = find2(current, (gap2) => gap2.from >= line2.from && gap2.to <= line2.to && Math.abs(gap2.from - from) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
      if (!gap) {
        if (to < line2.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r) => r.from <= to && r.to >= to)) {
          let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
          if (lineStart > from)
            to = lineStart;
        }
        let size3 = this.gapSize(line2, from, to, structure);
        let displaySize = wrapping || size3 < 2e6 ? size3 : 2e6;
        gap = new LineGap(from, to, size3, displaySize);
      }
      gaps.push(gap);
    };
    let checkLine = (line2) => {
      if (line2.length < doubleMargin || line2.type != BlockType.Text)
        return;
      let structure = lineStructure(line2.from, line2.to, this.stateDeco);
      if (structure.total < doubleMargin)
        return;
      let target = this.scrollTarget ? this.scrollTarget.range.head : null;
      let viewFrom, viewTo;
      if (wrapping) {
        let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
        let top3, bot;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line2.height;
          top3 = targetFrac - spaceFrac;
          bot = targetFrac + spaceFrac;
        } else {
          top3 = (this.visibleTop - line2.top - marginHeight) / line2.height;
          bot = (this.visibleBottom - line2.top + marginHeight) / line2.height;
        }
        viewFrom = findPosition(structure, top3);
        viewTo = findPosition(structure, bot);
      } else {
        let totalWidth = structure.total * this.heightOracle.charWidth;
        let marginWidth = margin * this.heightOracle.charWidth;
        let horizOffset = 0;
        if (totalWidth > 2e6)
          for (let old of current) {
            if (old.from >= line2.from && old.from < line2.to && old.size != old.displaySize && old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
              horizOffset = old.size - old.displaySize;
          }
        let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
        let left2, right2;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
          left2 = targetFrac - spaceFrac;
          right2 = targetFrac + spaceFrac;
        } else {
          left2 = (pxLeft - marginWidth) / totalWidth;
          right2 = (pxRight + marginWidth) / totalWidth;
        }
        viewFrom = findPosition(structure, left2);
        viewTo = findPosition(structure, right2);
      }
      if (viewFrom > line2.from)
        addGap(line2.from, viewFrom, line2, structure);
      if (viewTo < line2.to)
        addGap(viewTo, line2.to, line2, structure);
    };
    for (let line2 of this.viewportLines) {
      if (Array.isArray(line2.type))
        line2.type.forEach(checkLine);
      else
        checkLine(line2);
    }
    return gaps;
  }
  gapSize(line2, from, to, structure) {
    let fraction2 = findFraction(structure, to) - findFraction(structure, from);
    if (this.heightOracle.lineWrapping) {
      return line2.height * fraction2;
    } else {
      return structure.total * this.heightOracle.charWidth * fraction2;
    }
  }
  updateLineGaps(gaps) {
    if (!LineGap.same(gaps, this.lineGaps)) {
      this.lineGaps = gaps;
      this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
    }
  }
  computeVisibleRanges(changes) {
    let deco = this.stateDeco;
    if (this.lineGaps.length)
      deco = deco.concat(this.lineGapDeco);
    let ranges = [];
    RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
      span(from, to) {
        ranges.push({ from, to });
      },
      point() {
      }
    }, 20);
    let changed = 0;
    if (ranges.length != this.visibleRanges.length) {
      changed = 8 | 4;
    } else {
      for (let i = 0; i < ranges.length && !(changed & 8); i++) {
        let old = this.visibleRanges[i], nw = ranges[i];
        if (old.from != nw.from || old.to != nw.to) {
          changed |= 4;
          if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
            changed |= 8;
        }
      }
    }
    this.visibleRanges = ranges;
    return changed;
  }
  lineBlockAt(pos) {
    return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b) => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(height) {
    return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((l) => l.top <= height && l.bottom >= height) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(scrollTop) {
    let block2 = this.lineBlockAtHeight(scrollTop + 8);
    return block2.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block2 : this.viewportLines[0];
  }
  elementAtHeight(height) {
    return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
};
var Viewport = class {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }
};
function lineStructure(from, to, stateDeco) {
  let ranges = [], pos = from, total = 0;
  RangeSet.spans(stateDeco, from, to, {
    span() {
    },
    point(from2, to2) {
      if (from2 > pos) {
        ranges.push({ from: pos, to: from2 });
        total += from2 - pos;
      }
      pos = to2;
    }
  }, 20);
  if (pos < to) {
    ranges.push({ from: pos, to });
    total += to - pos;
  }
  return { total, ranges };
}
function findPosition({ total, ranges }, ratio) {
  if (ratio <= 0)
    return ranges[0].from;
  if (ratio >= 1)
    return ranges[ranges.length - 1].to;
  let dist2 = Math.floor(total * ratio);
  for (let i = 0; ; i++) {
    let { from, to } = ranges[i], size3 = to - from;
    if (dist2 <= size3)
      return from + dist2;
    dist2 -= size3;
  }
}
function findFraction(structure, pos) {
  let counted = 0;
  for (let { from, to } of structure.ranges) {
    if (pos <= to) {
      counted += pos - from;
      break;
    }
    counted += to - from;
  }
  return counted / structure.total;
}
function find2(array2, f) {
  for (let val of array2)
    if (f(val))
      return val;
  return void 0;
}
var IdScaler = {
  toDOM(n) {
    return n;
  },
  fromDOM(n) {
    return n;
  },
  scale: 1,
  eq(other) {
    return other == this;
  }
};
var BigScaler = class _BigScaler {
  constructor(oracle, heightMap, viewports) {
    let vpHeight = 0, base2 = 0, domBase = 0;
    this.viewports = viewports.map(({ from, to }) => {
      let top3 = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
      let bottom2 = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
      vpHeight += bottom2 - top3;
      return { from, to, top: top3, bottom: bottom2, domTop: 0, domBottom: 0 };
    });
    this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
    for (let obj of this.viewports) {
      obj.domTop = domBase + (obj.top - base2) * this.scale;
      domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
      base2 = obj.bottom;
    }
  }
  toDOM(n) {
    for (let i = 0, base2 = 0, domBase = 0; ; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n < vp.top)
        return domBase + (n - base2) * this.scale;
      if (n <= vp.bottom)
        return vp.domTop + (n - vp.top);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
  fromDOM(n) {
    for (let i = 0, base2 = 0, domBase = 0; ; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n < vp.domTop)
        return base2 + (n - domBase) / this.scale;
      if (n <= vp.domBottom)
        return vp.top + (n - vp.domTop);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
  eq(other) {
    if (!(other instanceof _BigScaler))
      return false;
    return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
  }
};
function scaleBlock(block2, scaler) {
  if (scaler.scale == 1)
    return block2;
  let bTop = scaler.toDOM(block2.top), bBottom = scaler.toDOM(block2.bottom);
  return new BlockInfo(block2.from, block2.length, bTop, bBottom - bTop, Array.isArray(block2._content) ? block2._content.map((b) => scaleBlock(b, scaler)) : block2._content);
}
var theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
var darkTheme = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.indexOf(true) > -1 });
var baseThemeID = /* @__PURE__ */ StyleModule.newName();
var baseLightID = /* @__PURE__ */ StyleModule.newName();
var baseDarkID = /* @__PURE__ */ StyleModule.newName();
var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
function buildTheme(main, spec, scopes) {
  return new StyleModule(spec, {
    finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, (m) => {
        if (m == "&")
          return main;
        if (!scopes || !scopes[m])
          throw new RangeError(`Unsupported selector: ${m}`);
        return scopes[m];
      }) : main + " " + sel;
    }
  });
}
var baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0,
    overflowAnchor: "none"
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#ddd"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    zIndex: 200
  },
  ".cm-gutters-before": { insetInlineStart: 0 },
  ".cm-gutters-after": { insetInlineEnd: 0 },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    border: "0px solid #ddd",
    "&.cm-gutters-before": { borderRightWidth: "1px" },
    "&.cm-gutters-after": { borderLeftWidth: "1px" }
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0,
    zIndex: 300
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-dialog": {
    padding: "2px 19px 4px 6px",
    position: "relative",
    "& label": { fontSize: "80%" }
  },
  ".cm-dialog-close": {
    position: "absolute",
    top: "3px",
    right: "4px",
    backgroundColor: "inherit",
    border: "none",
    font: "inherit",
    fontSize: "14px",
    padding: "0"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top",
    userSelect: "none"
  },
  ".cm-highlightSpace": {
    backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
    backgroundPosition: "center"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
var observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
};
var useCharData = browser.ie && browser.ie_version <= 11;
var DOMObserver = class {
  constructor(view2) {
    this.view = view2;
    this.active = false;
    this.editContext = null;
    this.selectionRange = new DOMSelectionState();
    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
    this.lastChange = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.resizeScroll = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = [];
    this.printQuery = null;
    this.parentCheck = -1;
    this.dom = view2.contentDOM;
    this.observer = new MutationObserver((mutations) => {
      for (let mut of mutations)
        this.queue.push(mut);
      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view2.composing) && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (window.EditContext && browser.android && view2.constructor.EDIT_CONTEXT !== false && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(browser.chrome && browser.chrome_version < 126)) {
      this.editContext = new EditContextManager(view2);
      if (view2.state.facet(editable))
        view2.contentDOM.editContext = this.editContext.editContext;
    }
    if (useCharData)
      this.onCharData = (event) => {
        this.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        this.flushSoon();
      };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);
    if (window.matchMedia)
      this.printQuery = window.matchMedia("print");
    if (typeof ResizeObserver == "function") {
      this.resizeScroll = new ResizeObserver(() => {
        var _a2;
        if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
          this.onResize();
      });
      this.resizeScroll.observe(view2.scrollDOM);
    }
    this.addWindowListeners(this.win = view2.win);
    this.start();
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver((entries) => {
        if (this.parentCheck < 0)
          this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
          this.intersecting = !this.intersecting;
          if (this.intersecting != this.view.inView)
            this.onScrollChanged(document.createEvent("Event"));
        }
      }, { threshold: [0, 1e-3] });
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver((entries) => {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
          this.onScrollChanged(document.createEvent("Event"));
      }, {});
    }
    this.listenForScroll();
    this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e);
    if (this.intersecting)
      this.view.measure();
  }
  onScroll(e) {
    if (this.intersecting)
      this.flush(false);
    if (this.editContext)
      this.view.requestMeasure(this.editContext.measureReq);
    this.onScrollChanged(e);
  }
  onResize() {
    if (this.resizeTimeout < 0)
      this.resizeTimeout = setTimeout(() => {
        this.resizeTimeout = -1;
        this.view.requestMeasure();
      }, 50);
  }
  onPrint(event) {
    if ((event.type == "change" || !event.type) && !event.matches)
      return;
    this.view.viewState.printing = true;
    this.view.measure();
    setTimeout(() => {
      this.view.viewState.printing = false;
      this.view.requestMeasure();
    }, 500);
  }
  updateGaps(gaps) {
    if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
      this.gapIntersection.disconnect();
      for (let gap of gaps)
        this.gapIntersection.observe(gap);
      this.gaps = gaps;
    }
  }
  onSelectionChange(event) {
    let wasChanged = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: view2 } = this, sel = this.selectionRange;
    if (view2.state.facet(editable) ? view2.root.activeElement != this.dom : !hasSelection(this.dom, sel))
      return;
    let context2 = sel.anchorNode && view2.docView.nearest(sel.anchorNode);
    if (context2 && context2.ignoreEvent(event)) {
      if (!wasChanged)
        this.selectionChanged = false;
      return;
    }
    if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view2.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
      this.flushSoon();
    else
      this.flush(false);
  }
  readSelectionRange() {
    let { view: view2 } = this;
    let selection3 = getSelection(view2.root);
    if (!selection3)
      return false;
    let range3 = browser.safari && view2.root.nodeType == 11 && view2.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection3) || selection3;
    if (!range3 || this.selectionRange.eq(range3))
      return false;
    let local = hasSelection(this.dom, range3);
    if (local && !this.selectionChanged && view2.inputState.lastFocusTime > Date.now() - 200 && view2.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range3)) {
      this.view.inputState.lastFocusTime = 0;
      view2.docView.updateSelection();
      return false;
    }
    this.selectionRange.setRange(range3);
    if (local)
      this.selectionChanged = true;
    return true;
  }
  setSelectionRange(anchor, head) {
    this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
    this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let i = 0, changed = null;
    for (let dom = this.dom; dom; ) {
      if (dom.nodeType == 1) {
        if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
          i++;
        else if (!changed)
          changed = this.scrollTargets.slice(0, i);
        if (changed)
          changed.push(dom);
        dom = dom.assignedSlot || dom.parentNode;
      } else if (dom.nodeType == 11) {
        dom = dom.host;
      } else {
        break;
      }
    }
    if (i < this.scrollTargets.length && !changed)
      changed = this.scrollTargets.slice(0, i);
    if (changed) {
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      for (let dom of this.scrollTargets = changed)
        dom.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(f) {
    if (!this.active)
      return f();
    try {
      this.stop();
      return f();
    } finally {
      this.start();
      this.clear();
    }
  }
  start() {
    if (this.active)
      return;
    this.observer.observe(this.dom, observeOptions);
    if (useCharData)
      this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.active = true;
  }
  stop() {
    if (!this.active)
      return;
    this.active = false;
    this.observer.disconnect();
    if (useCharData)
      this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
  }
  // Throw away any pending changes
  clear() {
    this.processRecords();
    this.queue.length = 0;
    this.selectionChanged = false;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(key, keyCode) {
    var _a2;
    if (!this.delayedAndroidKey) {
      let flush = () => {
        let key2 = this.delayedAndroidKey;
        if (key2) {
          this.clearDelayedAndroidKey();
          this.view.inputState.lastKeyCode = key2.keyCode;
          this.view.inputState.lastKeyTime = Date.now();
          let flushed = this.flush();
          if (!flushed && key2.force)
            dispatchKey(this.dom, key2.key, key2.keyCode);
        }
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
    }
    if (!this.delayedAndroidKey || key == "Enter")
      this.delayedAndroidKey = {
        key,
        keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
      };
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
  }
  flushSoon() {
    if (this.delayedFlush < 0)
      this.delayedFlush = this.view.win.requestAnimationFrame(() => {
        this.delayedFlush = -1;
        this.flush();
      });
  }
  forceFlush() {
    if (this.delayedFlush >= 0) {
      this.view.win.cancelAnimationFrame(this.delayedFlush);
      this.delayedFlush = -1;
    }
    this.flush();
  }
  pendingRecords() {
    for (let mut of this.observer.takeRecords())
      this.queue.push(mut);
    return this.queue;
  }
  processRecords() {
    let records = this.pendingRecords();
    if (records.length)
      this.queue = [];
    let from = -1, to = -1, typeOver = false;
    for (let record2 of records) {
      let range3 = this.readMutation(record2);
      if (!range3)
        continue;
      if (range3.typeOver)
        typeOver = true;
      if (from == -1) {
        ({ from, to } = range3);
      } else {
        from = Math.min(range3.from, from);
        to = Math.max(range3.to, to);
      }
    }
    return { from, to, typeOver };
  }
  readChange() {
    let { from, to, typeOver } = this.processRecords();
    let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
    if (from < 0 && !newSel)
      return null;
    if (from > -1)
      this.lastChange = Date.now();
    this.view.inputState.lastFocusTime = 0;
    this.selectionChanged = false;
    let change = new DOMChange(this.view, from, to, typeOver);
    this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
    return change;
  }
  // Apply pending changes, if any
  flush(readSelection = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    if (readSelection)
      this.readSelectionRange();
    let domChange = this.readChange();
    if (!domChange) {
      this.view.requestMeasure();
      return false;
    }
    let startState2 = this.view.state;
    let handled = applyDOMChange(this.view, domChange);
    if (this.view.state == startState2 && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
      this.view.update([]);
    return handled;
  }
  readMutation(rec) {
    let cView = this.view.docView.nearest(rec.target);
    if (!cView || cView.ignoreMutation(rec))
      return null;
    cView.markDirty(rec.type == "attributes");
    if (rec.type == "attributes")
      cView.flags |= 4;
    if (rec.type == "childList") {
      let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
      let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
      return {
        from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
        to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
        typeOver: false
      };
    } else if (rec.type == "characterData") {
      return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
    } else {
      return null;
    }
  }
  setWindow(win) {
    if (win != this.win) {
      this.removeWindowListeners(this.win);
      this.win = win;
      this.addWindowListeners(this.win);
    }
  }
  addWindowListeners(win) {
    win.addEventListener("resize", this.onResize);
    if (this.printQuery) {
      if (this.printQuery.addEventListener)
        this.printQuery.addEventListener("change", this.onPrint);
      else
        this.printQuery.addListener(this.onPrint);
    } else
      win.addEventListener("beforeprint", this.onPrint);
    win.addEventListener("scroll", this.onScroll);
    win.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(win) {
    win.removeEventListener("scroll", this.onScroll);
    win.removeEventListener("resize", this.onResize);
    if (this.printQuery) {
      if (this.printQuery.removeEventListener)
        this.printQuery.removeEventListener("change", this.onPrint);
      else
        this.printQuery.removeListener(this.onPrint);
    } else
      win.removeEventListener("beforeprint", this.onPrint);
    win.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(update3) {
    if (this.editContext) {
      this.editContext.update(update3);
      if (update3.startState.facet(editable) != update3.state.facet(editable))
        update3.view.contentDOM.editContext = update3.state.facet(editable) ? this.editContext.editContext : null;
    }
  }
  destroy() {
    var _a2, _b, _c;
    this.stop();
    (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
    (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
    for (let dom of this.scrollTargets)
      dom.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win);
    clearTimeout(this.parentCheck);
    clearTimeout(this.resizeTimeout);
    this.win.cancelAnimationFrame(this.delayedFlush);
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    if (this.editContext) {
      this.view.contentDOM.editContext = null;
      this.editContext.destroy();
    }
  }
};
function findChild(cView, dom, dir) {
  while (dom) {
    let curView = ContentView.get(dom);
    if (curView && curView.parent == cView)
      return curView;
    let parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
function buildSelectionRangeFromRange(view2, range3) {
  let anchorNode = range3.startContainer, anchorOffset = range3.startOffset;
  let focusNode = range3.endContainer, focusOffset = range3.endOffset;
  let curAnchor = view2.docView.domAtPos(view2.state.selection.main.anchor);
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function safariSelectionRangeHack(view2, selection3) {
  if (selection3.getComposedRanges) {
    let range3 = selection3.getComposedRanges(view2.root)[0];
    if (range3)
      return buildSelectionRangeFromRange(view2, range3);
  }
  let found = null;
  function read2(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view2.contentDOM.addEventListener("beforeinput", read2, true);
  view2.dom.ownerDocument.execCommand("indent");
  view2.contentDOM.removeEventListener("beforeinput", read2, true);
  return found ? buildSelectionRangeFromRange(view2, found) : null;
}
var EditContextManager = class {
  constructor(view2) {
    this.from = 0;
    this.to = 0;
    this.pendingContextChange = null;
    this.handlers = /* @__PURE__ */ Object.create(null);
    this.composing = null;
    this.resetRange(view2.state);
    let context2 = this.editContext = new window.EditContext({
      text: view2.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view2.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(view2.state.selection.main.head)
    });
    this.handlers.textupdate = (e) => {
      let main = view2.state.selection.main, { anchor, head } = main;
      let from = this.toEditorPos(e.updateRangeStart), to = this.toEditorPos(e.updateRangeEnd);
      if (view2.inputState.composing >= 0 && !this.composing)
        this.composing = { contextBase: e.updateRangeStart, editorBase: from, drifted: false };
      let change = { from, to, insert: Text.of(e.text.split("\n")) };
      if (change.from == this.from && anchor < this.from)
        change.from = anchor;
      else if (change.to == this.to && anchor > this.to)
        change.to = anchor;
      if (change.from == change.to && !change.insert.length) {
        let newSel = EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd));
        if (!newSel.main.eq(main))
          view2.dispatch({ selection: newSel, userEvent: "select" });
        return;
      }
      if ((browser.mac || browser.android) && change.from == head - 1 && /^\. ?$/.test(e.text) && view2.contentDOM.getAttribute("autocorrect") == "off")
        change = { from, to, insert: Text.of([e.text.replace(".", " ")]) };
      this.pendingContextChange = change;
      if (!view2.state.readOnly) {
        let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
        applyDOMChangeInner(view2, change, EditorSelection.single(this.toEditorPos(e.selectionStart, newLen), this.toEditorPos(e.selectionEnd, newLen)));
      }
      if (this.pendingContextChange) {
        this.revertPending(view2.state);
        this.setSelection(view2.state);
      }
    };
    this.handlers.characterboundsupdate = (e) => {
      let rects = [], prev = null;
      for (let i = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i < end; i++) {
        let rect = view2.coordsForChar(i);
        prev = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev || new DOMRect();
        rects.push(prev);
      }
      context2.updateCharacterBounds(e.rangeStart, rects);
    };
    this.handlers.textformatupdate = (e) => {
      let deco = [];
      for (let format3 of e.getTextFormats()) {
        let lineStyle = format3.underlineStyle, thickness = format3.underlineThickness;
        if (lineStyle != "None" && thickness != "None") {
          let from = this.toEditorPos(format3.rangeStart), to = this.toEditorPos(format3.rangeEnd);
          if (from < to) {
            let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
            deco.push(Decoration.mark({ attributes: { style } }).range(from, to));
          }
        }
      }
      view2.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
    };
    this.handlers.compositionstart = () => {
      if (view2.inputState.composing < 0) {
        view2.inputState.composing = 0;
        view2.inputState.compositionFirstChange = true;
      }
    };
    this.handlers.compositionend = () => {
      view2.inputState.composing = -1;
      view2.inputState.compositionFirstChange = null;
      if (this.composing) {
        let { drifted } = this.composing;
        this.composing = null;
        if (drifted)
          this.reset(view2.state);
      }
    };
    for (let event in this.handlers)
      context2.addEventListener(event, this.handlers[event]);
    this.measureReq = { read: (view3) => {
      this.editContext.updateControlBounds(view3.contentDOM.getBoundingClientRect());
      let sel = getSelection(view3.root);
      if (sel && sel.rangeCount)
        this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(update3) {
    let off = 0, abort = false, pending = this.pendingContextChange;
    update3.changes.iterChanges((fromA, toA, _fromB, _toB, insert5) => {
      if (abort)
        return;
      let dLen = insert5.length - (toA - fromA);
      if (pending && toA >= pending.to) {
        if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert5)) {
          pending = this.pendingContextChange = null;
          off += dLen;
          this.to += dLen;
          return;
        } else {
          pending = null;
          this.revertPending(update3.state);
        }
      }
      fromA += off;
      toA += off;
      if (toA <= this.from) {
        this.from += dLen;
        this.to += dLen;
      } else if (fromA < this.to) {
        if (fromA < this.from || toA > this.to || this.to - this.from + insert5.length > 3e4) {
          abort = true;
          return;
        }
        this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert5.toString());
        this.to += dLen;
      }
      off += dLen;
    });
    if (pending && !abort)
      this.revertPending(update3.state);
    return !abort;
  }
  update(update3) {
    let reverted = this.pendingContextChange, startSel = update3.startState.selection.main;
    if (this.composing && (this.composing.drifted || !update3.changes.touchesRange(startSel.from, startSel.to) && update3.transactions.some((tr) => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to)))) {
      this.composing.drifted = true;
      this.composing.editorBase = update3.changes.mapPos(this.composing.editorBase);
    } else if (!this.applyEdits(update3) || !this.rangeIsValid(update3.state)) {
      this.pendingContextChange = null;
      this.reset(update3.state);
    } else if (update3.docChanged || update3.selectionSet || reverted) {
      this.setSelection(update3.state);
    }
    if (update3.geometryChanged || update3.docChanged || update3.selectionSet)
      update3.view.requestMeasure(this.measureReq);
  }
  resetRange(state) {
    let { head } = state.selection.main;
    this.from = Math.max(
      0,
      head - 1e4
      /* CxVp.Margin */
    );
    this.to = Math.min(
      state.doc.length,
      head + 1e4
      /* CxVp.Margin */
    );
  }
  reset(state) {
    this.resetRange(state);
    this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
    this.setSelection(state);
  }
  revertPending(state) {
    let pending = this.pendingContextChange;
    this.pendingContextChange = null;
    this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
  }
  setSelection(state) {
    let { main } = state.selection;
    let start2 = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
    let end = this.toContextPos(main.head);
    if (this.editContext.selectionStart != start2 || this.editContext.selectionEnd != end)
      this.editContext.updateSelection(start2, end);
  }
  rangeIsValid(state) {
    let { head } = state.selection.main;
    return !(this.from > 0 && head - this.from < 500 || this.to < state.doc.length && this.to - head < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(contextPos, clipLen = this.to - this.from) {
    contextPos = Math.min(contextPos, clipLen);
    let c = this.composing;
    return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
  }
  toContextPos(editorPos) {
    let c = this.composing;
    return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
  }
  destroy() {
    for (let event in this.handlers)
      this.editContext.removeEventListener(event, this.handlers[event]);
  }
};
var EditorView = class _EditorView {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return !!this.inputState && this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return !!this.inputState && this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(config = {}) {
    var _a2;
    this.plugins = [];
    this.pluginMap = /* @__PURE__ */ new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    this.updateState = 2;
    this.measureScheduled = -1;
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.className = "cm-announced";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    if (config.parent)
      config.parent.appendChild(this.dom);
    let { dispatch: dispatch3 } = config;
    this.dispatchTransactions = config.dispatchTransactions || dispatch3 && ((trs) => trs.forEach((tr) => dispatch3(tr, this))) || ((trs) => this.update(trs));
    this.dispatch = this.dispatch.bind(this);
    this._root = config.root || getRoot(config.parent) || document;
    this.viewState = new ViewState(config.state || EditorState.create(config));
    if (config.scrollTo && config.scrollTo.is(scrollIntoView))
      this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
    this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
    for (let plugin of this.plugins)
      plugin.update(this);
    this.observer = new DOMObserver(this);
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0;
    this.requestMeasure();
    if ((_a2 = document.fonts) === null || _a2 === void 0 ? void 0 : _a2.ready)
      document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...input) {
    let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
    this.dispatchTransactions(trs, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(transactions) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let redrawn = false, attrsChanged = false, update3;
    let state = this.state;
    for (let tr of transactions) {
      if (tr.startState != state)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      state = tr.state;
    }
    if (this.destroyed) {
      this.viewState.state = state;
      return;
    }
    let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
    if (transactions.some((tr) => tr.annotation(isFocusChange))) {
      this.inputState.notifiedFocused = focus;
      focusFlag = 1;
    } else if (focus != this.inputState.notifiedFocused) {
      this.inputState.notifiedFocused = focus;
      dispatchFocus = focusChangeTransaction(state, focus);
      if (!dispatchFocus)
        focusFlag = 1;
    }
    let pendingKey = this.observer.delayedAndroidKey, domChange = null;
    if (pendingKey) {
      this.observer.clearDelayedAndroidKey();
      domChange = this.observer.readChange();
      if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
        domChange = null;
    } else {
      this.observer.clear();
    }
    if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
      return this.setState(state);
    update3 = ViewUpdate.create(this, state, transactions);
    update3.flags |= focusFlag;
    let scrollTarget = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let tr of transactions) {
        if (scrollTarget)
          scrollTarget = scrollTarget.map(tr.changes);
        if (tr.scrollIntoView) {
          let { main } = tr.state.selection;
          scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
        }
        for (let e of tr.effects)
          if (e.is(scrollIntoView))
            scrollTarget = e.value.clip(this.state);
      }
      this.viewState.update(update3, scrollTarget);
      this.bidiCache = CachedOrder.update(this.bidiCache, update3.changes);
      if (!update3.empty) {
        this.updatePlugins(update3);
        this.inputState.update(update3);
      }
      redrawn = this.docView.update(update3);
      if (this.state.facet(styleModule) != this.styleModules)
        this.mountStyles();
      attrsChanged = this.updateAttrs();
      this.showAnnouncements(transactions);
      this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (update3.startState.facet(theme) != update3.state.facet(theme))
      this.viewState.mustMeasureContent = true;
    if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
      this.requestMeasure();
    if (redrawn)
      this.docViewUpdate();
    if (!update3.empty)
      for (let listener of this.state.facet(updateListener)) {
        try {
          listener(update3);
        } catch (e) {
          logException(this.state, e, "update listener");
        }
      }
    if (dispatchFocus || domChange)
      Promise.resolve().then(() => {
        if (dispatchFocus && this.state == dispatchFocus.startState)
          this.dispatch(dispatchFocus);
        if (domChange) {
          if (!applyDOMChange(this, domChange) && pendingKey.force)
            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
        }
      });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(newState) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = newState;
      return;
    }
    this.updateState = 2;
    let hadFocus = this.hasFocus;
    try {
      for (let plugin of this.plugins)
        plugin.destroy(this);
      this.viewState = new ViewState(newState);
      this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      this.pluginMap.clear();
      for (let plugin of this.plugins)
        plugin.update(this);
      this.docView.destroy();
      this.docView = new DocView(this);
      this.inputState.ensureHandlers(this.plugins);
      this.mountStyles();
      this.updateAttrs();
      this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    if (hadFocus)
      this.focus();
    this.requestMeasure();
  }
  updatePlugins(update3) {
    let prevSpecs = update3.startState.facet(viewPlugin), specs = update3.state.facet(viewPlugin);
    if (prevSpecs != specs) {
      let newPlugins = [];
      for (let spec of specs) {
        let found = prevSpecs.indexOf(spec);
        if (found < 0) {
          newPlugins.push(new PluginInstance(spec));
        } else {
          let plugin = this.plugins[found];
          plugin.mustUpdate = update3;
          newPlugins.push(plugin);
        }
      }
      for (let plugin of this.plugins)
        if (plugin.mustUpdate != update3)
          plugin.destroy(this);
      this.plugins = newPlugins;
      this.pluginMap.clear();
    } else {
      for (let p of this.plugins)
        p.mustUpdate = update3;
    }
    for (let i = 0; i < this.plugins.length; i++)
      this.plugins[i].update(this);
    if (prevSpecs != specs)
      this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let plugin of this.plugins) {
      let val = plugin.value;
      if (val && val.docViewUpdate) {
        try {
          val.docViewUpdate(this);
        } catch (e) {
          logException(this.state, e, "doc view update listener");
        }
      }
    }
  }
  /**
  @internal
  */
  measure(flush = true) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    if (this.observer.delayedAndroidKey) {
      this.measureScheduled = -1;
      this.requestMeasure();
      return;
    }
    this.measureScheduled = 0;
    if (flush)
      this.observer.forceFlush();
    let updated = null;
    let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
    let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
    if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
      scrollAnchorHeight = -1;
    this.viewState.scrollAnchorHeight = -1;
    try {
      for (let i = 0; ; i++) {
        if (scrollAnchorHeight < 0) {
          if (isScrolledToBottom(sDOM)) {
            scrollAnchorPos = -1;
            scrollAnchorHeight = this.viewState.heightMap.height;
          } else {
            let block2 = this.viewState.scrollAnchorAt(scrollTop);
            scrollAnchorPos = block2.from;
            scrollAnchorHeight = block2.top;
          }
        }
        this.updateState = 1;
        let changed = this.viewState.measure(this);
        if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (i > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let measuring = [];
        if (!(changed & 4))
          [this.measureRequests, measuring] = [measuring, this.measureRequests];
        let measured = measuring.map((m) => {
          try {
            return m.read(this);
          } catch (e) {
            logException(this.state, e);
            return BadMeasure;
          }
        });
        let update3 = ViewUpdate.create(this, this.state, []), redrawn = false;
        update3.flags |= changed;
        if (!updated)
          updated = update3;
        else
          updated.flags |= changed;
        this.updateState = 2;
        if (!update3.empty) {
          this.updatePlugins(update3);
          this.inputState.update(update3);
          this.updateAttrs();
          redrawn = this.docView.update(update3);
          if (redrawn)
            this.docViewUpdate();
        }
        for (let i2 = 0; i2 < measuring.length; i2++)
          if (measured[i2] != BadMeasure) {
            try {
              let m = measuring[i2];
              if (m.write)
                m.write(measured[i2], this);
            } catch (e) {
              logException(this.state, e);
            }
          }
        if (redrawn)
          this.docView.updateSelection(true);
        if (!update3.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight) {
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget);
              this.viewState.scrollTarget = null;
              scrollAnchorHeight = -1;
              continue;
            } else {
              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
              let diff = newAnchorHeight - scrollAnchorHeight;
              if (diff > 1 || diff < -1) {
                scrollTop = scrollTop + diff;
                sDOM.scrollTop = scrollTop / this.scaleY;
                scrollAnchorHeight = -1;
                continue;
              }
            }
          }
          break;
        }
      }
    } finally {
      this.updateState = 0;
      this.measureScheduled = -1;
    }
    if (updated && !updated.empty)
      for (let listener of this.state.facet(updateListener))
        listener(updated);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
  }
  updateAttrs() {
    let editorAttrs = attrsFromFacet(this, editorAttributes, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    });
    let contentAttrs = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      writingsuggestions: "false",
      translate: "no",
      contenteditable: !this.state.facet(editable) ? "false" : "true",
      class: "cm-content",
      style: `${browser.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    if (this.state.readOnly)
      contentAttrs["aria-readonly"] = "true";
    attrsFromFacet(this, contentAttributes, contentAttrs);
    let changed = this.observer.ignore(() => {
      let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
      let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
      return changedContent || changedEditor;
    });
    this.editorAttrs = editorAttrs;
    this.contentAttrs = contentAttrs;
    return changed;
  }
  showAnnouncements(trs) {
    let first = true;
    for (let tr of trs)
      for (let effect of tr.effects)
        if (effect.is(_EditorView.announce)) {
          if (first)
            this.announceDOM.textContent = "";
          first = false;
          let div = this.announceDOM.appendChild(document.createElement("div"));
          div.textContent = effect.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(styleModule);
    let nonce = this.state.facet(_EditorView.cspNonce);
    StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    if (this.updateState == 0 && this.measureScheduled > -1)
      this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(request2) {
    if (this.measureScheduled < 0)
      this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
    if (request2) {
      if (this.measureRequests.indexOf(request2) > -1)
        return;
      if (request2.key != null)
        for (let i = 0; i < this.measureRequests.length; i++) {
          if (this.measureRequests[i].key === request2.key) {
            this.measureRequests[i] = request2;
            return;
          }
        }
      this.measureRequests.push(request2);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(plugin) {
    let known = this.pluginMap.get(plugin);
    if (known === void 0 || known && known.plugin != plugin)
      this.pluginMap.set(plugin, known = this.plugins.find((p) => p.plugin == plugin) || null);
    return known && known.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(height) {
    this.readMeasured();
    return this.viewState.elementAtHeight(height);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt)) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(height) {
    this.readMeasured();
    return this.viewState.lineBlockAtHeight(height);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(pos) {
    return this.viewState.lineBlockAt(pos);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(start2, forward, by) {
    return skipAtoms(this, start2, moveByChar(this, start2, forward, by));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(start2, forward) {
    return skipAtoms(this, start2, moveByChar(this, start2, forward, (initial) => byGroup(this, start2.head, initial)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(line2, end) {
    let order = this.bidiSpans(line2), dir = this.textDirectionAt(line2.from);
    let span3 = order[end ? order.length - 1 : 0];
    return EditorSelection.cursor(span3.side(end, dir) + line2.from, span3.forward(!end, dir) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(start2, forward, includeWrap = true) {
    return moveToLineBoundary(this, start2, forward, includeWrap);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(start2, forward, distance) {
    return skipAtoms(this, start2, moveVertically(this, start2, forward, distance));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(pos) {
    return this.docView.domAtPos(pos);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(node, offset = 0) {
    return this.docView.posFromDOM(node, offset);
  }
  posAtCoords(coords, precise = true) {
    this.readMeasured();
    return posAtCoords(this, coords, precise);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(pos, side = 1) {
    this.readMeasured();
    let rect = this.docView.coordsAt(pos, side);
    if (!rect || rect.left == rect.right)
      return rect;
    let line2 = this.state.doc.lineAt(pos), order = this.bidiSpans(line2);
    let span3 = order[BidiSpan.find(order, pos - line2.from, -1, side)];
    return flattenRect(rect, span3.dir == Direction.LTR == side > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(pos) {
    this.readMeasured();
    return this.docView.coordsForChar(pos);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(pos) {
    let perLine = this.state.facet(perLineTextDirection);
    if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
      return this.textDirection;
    this.readMeasured();
    return this.docView.textDirectionAt(pos);
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(line2) {
    if (line2.length > MaxBidiLine)
      return trivialOrder(line2.length);
    let dir = this.textDirectionAt(line2.from), isolates;
    for (let entry of this.bidiCache) {
      if (entry.from == line2.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line2))))
        return entry.order;
    }
    if (!isolates)
      isolates = getIsolatedRanges(this, line2);
    let order = computeOrder(line2.text, dir, isolates);
    this.bidiCache.push(new CachedOrder(line2.from, line2.to, dir, isolates, true, order));
    return order;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var _a2;
    return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      focusPreventScroll(this.contentDOM);
      this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(root2) {
    if (this._root != root2) {
      this._root = root2;
      this.observer.setWindow((root2.nodeType == 9 ? root2 : root2.ownerDocument).defaultView || window);
      this.mountStyles();
    }
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    if (this.root.activeElement == this.contentDOM)
      this.contentDOM.blur();
    for (let plugin of this.plugins)
      plugin.destroy(this);
    this.plugins = [];
    this.inputState.destroy();
    this.docView.destroy();
    this.dom.remove();
    this.observer.destroy();
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(pos, options = {}) {
    return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop, scrollLeft } = this.scrollDOM;
    let ref = this.viewState.scrollAnchorAt(scrollTop);
    return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(to) {
    if (to == null)
      this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
    else if (typeof to == "boolean")
      this.inputState.tabFocusMode = to ? 0 : -1;
    else if (this.inputState.tabFocusMode != 0)
      this.inputState.tabFocusMode = Date.now() + to;
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(handlers2) {
    return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(observers2) {
    return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(spec, options) {
    let prefix = StyleModule.newName();
    let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
    if (options && options.dark)
      result.push(darkTheme.of(true));
    return result;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(spec) {
    return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(dom) {
    var _a2;
    let content2 = dom.querySelector(".cm-content");
    let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
    return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
  }
};
EditorView.styleModule = styleModule;
EditorView.inputHandler = inputHandler;
EditorView.clipboardInputFilter = clipboardInputFilter;
EditorView.clipboardOutputFilter = clipboardOutputFilter;
EditorView.scrollHandler = scrollHandler;
EditorView.focusChangeEffect = focusChangeEffect;
EditorView.perLineTextDirection = perLineTextDirection;
EditorView.exceptionSink = exceptionSink;
EditorView.updateListener = updateListener;
EditorView.editable = editable;
EditorView.mouseSelectionStyle = mouseSelectionStyle;
EditorView.dragMovesSelection = dragMovesSelection$1;
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
EditorView.decorations = decorations;
EditorView.outerDecorations = outerDecorations;
EditorView.atomicRanges = atomicRanges;
EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
EditorView.scrollMargins = scrollMargins;
EditorView.darkTheme = darkTheme;
EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : "" });
EditorView.contentAttributes = contentAttributes;
EditorView.editorAttributes = editorAttributes;
EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
EditorView.announce = /* @__PURE__ */ StateEffect.define();
var MaxBidiLine = 4096;
var BadMeasure = {};
var CachedOrder = class _CachedOrder {
  constructor(from, to, dir, isolates, fresh, order) {
    this.from = from;
    this.to = to;
    this.dir = dir;
    this.isolates = isolates;
    this.fresh = fresh;
    this.order = order;
  }
  static update(cache2, changes) {
    if (changes.empty && !cache2.some((c) => c.fresh))
      return cache2;
    let result = [], lastDir = cache2.length ? cache2[cache2.length - 1].dir : Direction.LTR;
    for (let i = Math.max(0, cache2.length - 10); i < cache2.length; i++) {
      let entry = cache2[i];
      if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
        result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
    }
    return result;
  }
};
function attrsFromFacet(view2, facet, base2) {
  for (let sources = view2.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
    let source2 = sources[i], value = typeof source2 == "function" ? source2(view2) : source2;
    if (value)
      combineAttrs(value, base2);
  }
  return base2;
}
var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
function normalizeKeyName(name3, platform) {
  const parts = name3.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt2, ctrl, shift2, meta2;
  for (let i = 0; i < parts.length - 1; ++i) {
    const mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta2 = true;
    else if (/^a(lt)?$/i.test(mod))
      alt2 = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (platform == "mac")
        meta2 = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt2)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta2)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function modifiers(name3, event, shift2) {
  if (event.altKey)
    name3 = "Alt-" + name3;
  if (event.ctrlKey)
    name3 = "Ctrl-" + name3;
  if (event.metaKey)
    name3 = "Meta-" + name3;
  if (shift2 !== false && event.shiftKey)
    name3 = "Shift-" + name3;
  return name3;
}
var handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
  keydown(event, view2) {
    return runHandlers(getKeymap(view2.state), event, view2, "editor");
  }
}));
var keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
var Keymaps = /* @__PURE__ */ new WeakMap();
function getKeymap(state) {
  let bindings = state.facet(keymap);
  let map4 = Keymaps.get(bindings);
  if (!map4)
    Keymaps.set(bindings, map4 = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
  return map4;
}
var storedPrefix = null;
var PrefixTimeout = 4e3;
function buildKeymap(bindings, platform = currentPlatform) {
  let bound = /* @__PURE__ */ Object.create(null);
  let isPrefix = /* @__PURE__ */ Object.create(null);
  let checkPrefix = (name3, is) => {
    let current = isPrefix[name3];
    if (current == null)
      isPrefix[name3] = is;
    else if (current != is)
      throw new Error("Key binding " + name3 + " is used both as a regular binding and as a multi-stroke prefix");
  };
  let add = (scope, key, command2, preventDefault2, stopPropagation2) => {
    var _a2, _b;
    let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
    let parts = key.split(/ (?!$)/).map((k) => normalizeKeyName(k, platform));
    for (let i = 1; i < parts.length; i++) {
      let prefix = parts.slice(0, i).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix])
        scopeObj[prefix] = {
          preventDefault: true,
          stopPropagation: false,
          run: [(view2) => {
            let ourObj = storedPrefix = { view: view2, prefix, scope };
            setTimeout(() => {
              if (storedPrefix == ourObj)
                storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
    }
    let full = parts.join(" ");
    checkPrefix(full, false);
    let binding2 = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      stopPropagation: false,
      run: ((_b = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
    });
    if (command2)
      binding2.run.push(command2);
    if (preventDefault2)
      binding2.preventDefault = true;
    if (stopPropagation2)
      binding2.stopPropagation = true;
  };
  for (let b of bindings) {
    let scopes = b.scope ? b.scope.split(" ") : ["editor"];
    if (b.any)
      for (let scope of scopes) {
        let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
        if (!scopeObj._any)
          scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
        let { any: any3 } = b;
        for (let key in scopeObj)
          scopeObj[key].run.push((view2) => any3(view2, currentKeyEvent));
      }
    let name3 = b[platform] || b.key;
    if (!name3)
      continue;
    for (let scope of scopes) {
      add(scope, name3, b.run, b.preventDefault, b.stopPropagation);
      if (b.shift)
        add(scope, "Shift-" + name3, b.shift, b.preventDefault, b.stopPropagation);
    }
  }
  return bound;
}
var currentKeyEvent = null;
function runHandlers(map4, event, view2, scope) {
  currentKeyEvent = event;
  let name3 = keyName(event);
  let charCode = codePointAt2(name3, 0), isChar = codePointSize2(charCode) == name3.length && name3 != " ";
  let prefix = "", handled = false, prevented = false, stopPropagation2 = false;
  if (storedPrefix && storedPrefix.view == view2 && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (modifierCodes.indexOf(event.keyCode) < 0) {
      prevented = true;
      storedPrefix = null;
    }
  }
  let ran = /* @__PURE__ */ new Set();
  let runFor = (binding2) => {
    if (binding2) {
      for (let cmd of binding2.run)
        if (!ran.has(cmd)) {
          ran.add(cmd);
          if (cmd(view2)) {
            if (binding2.stopPropagation)
              stopPropagation2 = true;
            return true;
          }
        }
      if (binding2.preventDefault) {
        if (binding2.stopPropagation)
          stopPropagation2 = true;
        prevented = true;
      }
    }
    return false;
  };
  let scopeObj = map4[scope], baseName, shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name3, event, !isChar)])) {
      handled = true;
    } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
    !(browser.windows && event.ctrlKey && event.altKey) && // Alt-combinations on macOS tend to be typed characters
    !(browser.mac && event.altKey && !(event.ctrlKey || event.metaKey)) && (baseName = base[event.keyCode]) && baseName != name3) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
        handled = true;
      } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name3 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
        handled = true;
      }
    } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name3, event, true)])) {
      handled = true;
    }
    if (!handled && runFor(scopeObj._any))
      handled = true;
  }
  if (prevented)
    handled = true;
  if (handled && stopPropagation2)
    event.stopPropagation();
  currentKeyEvent = null;
  return handled;
}
var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
var baseTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-tooltip": {
    zIndex: 500,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: `${7}px`,
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: `${7}px solid transparent`,
      borderRight: `${7}px solid transparent`
    },
    ".cm-tooltip-above &": {
      bottom: `-${7}px`,
      "&:before": {
        borderTop: `${7}px solid #bbb`
      },
      "&:after": {
        borderTop: `${7}px solid #f5f5f5`,
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: `-${7}px`,
      "&:before": {
        borderBottom: `${7}px solid #bbb`
      },
      "&:after": {
        borderBottom: `${7}px solid #f5f5f5`,
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
});
var GutterMarker = class extends RangeValue {
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(other) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(dom) {
  }
};
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = void 0;
GutterMarker.prototype.mapMode = MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
var gutterLineClass = /* @__PURE__ */ Facet.define();
var gutterWidgetClass = /* @__PURE__ */ Facet.define();
var activeGutters = /* @__PURE__ */ Facet.define();
var unfixGutters = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
function gutters(config) {
  let result = [
    gutterView
  ];
  if (config && config.fixed === false)
    result.push(unfixGutters.of(true));
  return result;
}
var gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view2) {
    this.view = view2;
    this.domAfter = null;
    this.prevViewport = view2.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters cm-gutters-before";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
    this.gutters = view2.state.facet(activeGutters).map((conf) => new SingleGutterView(view2, conf));
    this.fixed = !view2.state.facet(unfixGutters);
    for (let gutter2 of this.gutters) {
      if (gutter2.config.side == "after")
        this.getDOMAfter().appendChild(gutter2.dom);
      else
        this.dom.appendChild(gutter2.dom);
    }
    if (this.fixed) {
      this.dom.style.position = "sticky";
    }
    this.syncGutters(false);
    view2.scrollDOM.insertBefore(this.dom, view2.contentDOM);
  }
  getDOMAfter() {
    if (!this.domAfter) {
      this.domAfter = document.createElement("div");
      this.domAfter.className = "cm-gutters cm-gutters-after";
      this.domAfter.setAttribute("aria-hidden", "true");
      this.domAfter.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      this.domAfter.style.position = this.fixed ? "sticky" : "";
      this.view.scrollDOM.appendChild(this.domAfter);
    }
    return this.domAfter;
  }
  update(update3) {
    if (this.updateGutters(update3)) {
      let vpA = this.prevViewport, vpB = update3.view.viewport;
      let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
      this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
    }
    if (update3.geometryChanged) {
      let min3 = this.view.contentHeight / this.view.scaleY + "px";
      this.dom.style.minHeight = min3;
      if (this.domAfter)
        this.domAfter.style.minHeight = min3;
    }
    if (this.view.state.facet(unfixGutters) != !this.fixed) {
      this.fixed = !this.fixed;
      this.dom.style.position = this.fixed ? "sticky" : "";
      if (this.domAfter)
        this.domAfter.style.position = this.fixed ? "sticky" : "";
    }
    this.prevViewport = update3.view.viewport;
  }
  syncGutters(detach) {
    let after = this.dom.nextSibling;
    if (detach) {
      this.dom.remove();
      if (this.domAfter)
        this.domAfter.remove();
    }
    let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
    let classSet = [];
    let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
    for (let line2 of this.view.viewportLineBlocks) {
      if (classSet.length)
        classSet = [];
      if (Array.isArray(line2.type)) {
        let first = true;
        for (let b of line2.type) {
          if (b.type == BlockType.Text && first) {
            advanceCursor(lineClasses, classSet, b.from);
            for (let cx of contexts)
              cx.line(this.view, b, classSet);
            first = false;
          } else if (b.widget) {
            for (let cx of contexts)
              cx.widget(this.view, b);
          }
        }
      } else if (line2.type == BlockType.Text) {
        advanceCursor(lineClasses, classSet, line2.from);
        for (let cx of contexts)
          cx.line(this.view, line2, classSet);
      } else if (line2.widget) {
        for (let cx of contexts)
          cx.widget(this.view, line2);
      }
    }
    for (let cx of contexts)
      cx.finish();
    if (detach) {
      this.view.scrollDOM.insertBefore(this.dom, after);
      if (this.domAfter)
        this.view.scrollDOM.appendChild(this.domAfter);
    }
  }
  updateGutters(update3) {
    let prev = update3.startState.facet(activeGutters), cur = update3.state.facet(activeGutters);
    let change = update3.docChanged || update3.heightChanged || update3.viewportChanged || !RangeSet.eq(update3.startState.facet(gutterLineClass), update3.state.facet(gutterLineClass), update3.view.viewport.from, update3.view.viewport.to);
    if (prev == cur) {
      for (let gutter2 of this.gutters)
        if (gutter2.update(update3))
          change = true;
    } else {
      change = true;
      let gutters2 = [];
      for (let conf of cur) {
        let known = prev.indexOf(conf);
        if (known < 0) {
          gutters2.push(new SingleGutterView(this.view, conf));
        } else {
          this.gutters[known].update(update3);
          gutters2.push(this.gutters[known]);
        }
      }
      for (let g of this.gutters) {
        g.dom.remove();
        if (gutters2.indexOf(g) < 0)
          g.destroy();
      }
      for (let g of gutters2) {
        if (g.config.side == "after")
          this.getDOMAfter().appendChild(g.dom);
        else
          this.dom.appendChild(g.dom);
      }
      this.gutters = gutters2;
    }
    return change;
  }
  destroy() {
    for (let view2 of this.gutters)
      view2.destroy();
    this.dom.remove();
    if (this.domAfter)
      this.domAfter.remove();
  }
}, {
  provide: (plugin) => EditorView.scrollMargins.of((view2) => {
    let value = view2.plugin(plugin);
    if (!value || value.gutters.length == 0 || !value.fixed)
      return null;
    let before = value.dom.offsetWidth * view2.scaleX, after = value.domAfter ? value.domAfter.offsetWidth * view2.scaleX : 0;
    return view2.textDirection == Direction.LTR ? { left: before, right: after } : { right: before, left: after };
  })
});
function asArray2(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor2, collect, pos) {
  while (cursor2.value && cursor2.from <= pos) {
    if (cursor2.from == pos)
      collect.push(cursor2.value);
    cursor2.next();
  }
}
var UpdateContext = class {
  constructor(gutter2, viewport, height) {
    this.gutter = gutter2;
    this.height = height;
    this.i = 0;
    this.cursor = RangeSet.iter(gutter2.markers, viewport.from);
  }
  addElement(view2, block2, markers) {
    let { gutter: gutter2 } = this, above = (block2.top - this.height) / view2.scaleY, height = block2.height / view2.scaleY;
    if (this.i == gutter2.elements.length) {
      let newElt = new GutterElement(view2, height, above, markers);
      gutter2.elements.push(newElt);
      gutter2.dom.appendChild(newElt.dom);
    } else {
      gutter2.elements[this.i].update(view2, height, above, markers);
    }
    this.height = block2.bottom;
    this.i++;
  }
  line(view2, line2, extraMarkers) {
    let localMarkers = [];
    advanceCursor(this.cursor, localMarkers, line2.from);
    if (extraMarkers.length)
      localMarkers = localMarkers.concat(extraMarkers);
    let forLine = this.gutter.config.lineMarker(view2, line2, localMarkers);
    if (forLine)
      localMarkers.unshift(forLine);
    let gutter2 = this.gutter;
    if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
      return;
    this.addElement(view2, line2, localMarkers);
  }
  widget(view2, block2) {
    let marker = this.gutter.config.widgetMarker(view2, block2.widget, block2), markers = marker ? [marker] : null;
    for (let cls of view2.state.facet(gutterWidgetClass)) {
      let marker2 = cls(view2, block2.widget, block2);
      if (marker2)
        (markers || (markers = [])).push(marker2);
    }
    if (markers)
      this.addElement(view2, block2, markers);
  }
  finish() {
    let gutter2 = this.gutter;
    while (gutter2.elements.length > this.i) {
      let last2 = gutter2.elements.pop();
      gutter2.dom.removeChild(last2.dom);
      last2.destroy();
    }
  }
};
var SingleGutterView = class {
  constructor(view2, config) {
    this.view = view2;
    this.config = config;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let prop in config.domEventHandlers) {
      this.dom.addEventListener(prop, (event) => {
        let target = event.target, y2;
        if (target != this.dom && this.dom.contains(target)) {
          while (target.parentNode != this.dom)
            target = target.parentNode;
          let rect = target.getBoundingClientRect();
          y2 = (rect.top + rect.bottom) / 2;
        } else {
          y2 = event.clientY;
        }
        let line2 = view2.lineBlockAtHeight(y2 - view2.documentTop);
        if (config.domEventHandlers[prop](view2, line2, event))
          event.preventDefault();
      });
    }
    this.markers = asArray2(config.markers(view2));
    if (config.initialSpacer) {
      this.spacer = new GutterElement(view2, 0, 0, [config.initialSpacer(view2)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  update(update3) {
    let prevMarkers = this.markers;
    this.markers = asArray2(this.config.markers(update3.view));
    if (this.spacer && this.config.updateSpacer) {
      let updated = this.config.updateSpacer(this.spacer.markers[0], update3);
      if (updated != this.spacer.markers[0])
        this.spacer.update(update3.view, 0, 0, [updated]);
    }
    let vp = update3.view.viewport;
    return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update3) : false);
  }
  destroy() {
    for (let elt of this.elements)
      elt.destroy();
  }
};
var GutterElement = class {
  constructor(view2, height, above, markers) {
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view2, height, above, markers);
  }
  update(view2, height, above, markers) {
    if (this.height != height) {
      this.height = height;
      this.dom.style.height = height + "px";
    }
    if (this.above != above)
      this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
    if (!sameMarkers(this.markers, markers))
      this.setMarkers(view2, markers);
  }
  setMarkers(view2, markers) {
    let cls = "cm-gutterElement", domPos = this.dom.firstChild;
    for (let iNew = 0, iOld = 0; ; ) {
      let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
      if (marker) {
        let c = marker.elementClass;
        if (c)
          cls += " " + c;
        for (let i = iOld; i < this.markers.length; i++)
          if (this.markers[i].compare(marker)) {
            skipTo = i;
            matched = true;
            break;
          }
      } else {
        skipTo = this.markers.length;
      }
      while (iOld < skipTo) {
        let next = this.markers[iOld++];
        if (next.toDOM) {
          next.destroy(domPos);
          let after = domPos.nextSibling;
          domPos.remove();
          domPos = after;
        }
      }
      if (!marker)
        break;
      if (marker.toDOM) {
        if (matched)
          domPos = domPos.nextSibling;
        else
          this.dom.insertBefore(marker.toDOM(view2), domPos);
      }
      if (matched)
        iOld++;
    }
    this.dom.className = cls;
    this.markers = markers;
  }
  destroy() {
    this.setMarkers(null, []);
  }
};
function sameMarkers(a, b) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (!a[i].compare(b[i]))
      return false;
  return true;
}
var lineNumberMarkers = /* @__PURE__ */ Facet.define();
var lineNumberWidgetMarker = /* @__PURE__ */ Facet.define();
var lineNumberConfig = /* @__PURE__ */ Facet.define({
  combine(values2) {
    return combineConfig(values2, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(a, b) {
        let result = Object.assign({}, a);
        for (let event in b) {
          let exists = result[event], add = b[event];
          result[event] = exists ? (view2, line2, event2) => exists(view2, line2, event2) || add(view2, line2, event2) : add;
        }
        return result;
      }
    });
  }
});
var NumberMarker = class extends GutterMarker {
  constructor(number7) {
    super();
    this.number = number7;
  }
  eq(other) {
    return this.number == other.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
};
function formatNumber(view2, number7) {
  return view2.state.facet(lineNumberConfig).formatNumber(number7, view2.state);
}
var lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: false,
  markers(view2) {
    return view2.state.facet(lineNumberMarkers);
  },
  lineMarker(view2, line2, others) {
    if (others.some((m) => m.toDOM))
      return null;
    return new NumberMarker(formatNumber(view2, view2.state.doc.lineAt(line2.from).number));
  },
  widgetMarker: (view2, widget, block2) => {
    for (let m of view2.state.facet(lineNumberWidgetMarker)) {
      let result = m(view2, widget, block2);
      if (result)
        return result;
    }
    return null;
  },
  lineMarkerChange: (update3) => update3.startState.facet(lineNumberConfig) != update3.state.facet(lineNumberConfig),
  initialSpacer(view2) {
    return new NumberMarker(formatNumber(view2, maxLineNumber(view2.state.doc.lines)));
  },
  updateSpacer(spacer, update3) {
    let max6 = formatNumber(update3.view, maxLineNumber(update3.view.state.doc.lines));
    return max6 == spacer.number ? spacer : new NumberMarker(max6);
  },
  domEventHandlers: state.facet(lineNumberConfig).domEventHandlers,
  side: "before"
}));
function lineNumbers(config = {}) {
  return [
    lineNumberConfig.of(config),
    gutters(),
    lineNumberGutter
  ];
}
function maxLineNumber(lines) {
  let last2 = 9;
  while (last2 < lines)
    last2 = last2 * 10 + 9;
  return last2;
}

// node_modules/@lezer/common/dist/index.js
var DefaultBufferLength = 1024;
var nextPropID = 0;
var Range2 = class {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }
};
var NodeProp = class {
  /**
  Create a new node prop type.
  */
  constructor(config = {}) {
    this.id = nextPropID++;
    this.perNode = !!config.perNode;
    this.deserialize = config.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(match3) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    if (typeof match3 != "function")
      match3 = NodeType.match(match3);
    return (type2) => {
      let result = match3(type2);
      return result === void 0 ? null : [this, result];
    };
  }
};
NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.isolate = new NodeProp({ deserialize: (value) => {
  if (value && value != "rtl" && value != "ltr" && value != "auto")
    throw new RangeError("Invalid value for isolate: " + value);
  return value || "auto";
} });
NodeProp.contextHash = new NodeProp({ perNode: true });
NodeProp.lookAhead = new NodeProp({ perNode: true });
NodeProp.mounted = new NodeProp({ perNode: true });
var MountedTree = class {
  constructor(tree, overlay, parser2) {
    this.tree = tree;
    this.overlay = overlay;
    this.parser = parser2;
  }
  /**
  @internal
  */
  static get(tree) {
    return tree && tree.props && tree.props[NodeProp.mounted.id];
  }
};
var noProps = /* @__PURE__ */ Object.create(null);
var NodeType = class _NodeType {
  /**
  @internal
  */
  constructor(name3, props, id4, flags = 0) {
    this.name = name3;
    this.props = props;
    this.id = id4;
    this.flags = flags;
  }
  /**
  Define a node type.
  */
  static define(spec) {
    let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
    let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
    let type2 = new _NodeType(spec.name || "", props, spec.id, flags);
    if (spec.props)
      for (let src of spec.props) {
        if (!Array.isArray(src))
          src = src(type2);
        if (src) {
          if (src[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          props[src[0].id] = src[1];
        }
      }
    return type2;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(prop) {
    return this.props[prop.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(name3) {
    if (typeof name3 == "string") {
      if (this.name == name3)
        return true;
      let group3 = this.prop(NodeProp.group);
      return group3 ? group3.indexOf(name3) > -1 : false;
    }
    return this.id == name3;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(map4) {
    let direct = /* @__PURE__ */ Object.create(null);
    for (let prop in map4)
      for (let name3 of prop.split(" "))
        direct[name3] = map4[prop];
    return (node) => {
      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
        let found = direct[i < 0 ? node.name : groups[i]];
        if (found)
          return found;
      }
    };
  }
};
NodeType.none = new NodeType(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
var NodeSet = class _NodeSet {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(types2) {
    this.types = types2;
    for (let i = 0; i < types2.length; i++)
      if (types2[i].id != i)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...props) {
    let newTypes = [];
    for (let type2 of this.types) {
      let newProps = null;
      for (let source2 of props) {
        let add = source2(type2);
        if (add) {
          if (!newProps)
            newProps = Object.assign({}, type2.props);
          newProps[add[0].id] = add[1];
        }
      }
      newTypes.push(newProps ? new NodeType(type2.name, newProps, type2.id, type2.flags) : type2);
    }
    return new _NodeSet(newTypes);
  }
};
var CachedNode = /* @__PURE__ */ new WeakMap();
var CachedInnerNode = /* @__PURE__ */ new WeakMap();
var IterMode;
(function(IterMode2) {
  IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
  IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
  IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
  IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (IterMode = {}));
var Tree = class _Tree {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(type2, children2, positions, length6, props) {
    this.type = type2;
    this.children = children2;
    this.positions = positions;
    this.length = length6;
    this.props = null;
    if (props && props.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [prop, value] of props)
        this.props[typeof prop == "number" ? prop : prop.id] = value;
    }
  }
  /**
  @internal
  */
  toString() {
    let mounted = MountedTree.get(this);
    if (mounted && !mounted.overlay)
      return mounted.tree.toString();
    let children2 = "";
    for (let ch of this.children) {
      let str = ch.toString();
      if (str) {
        if (children2)
          children2 += ",";
        children2 += str;
      }
    }
    return !this.type.name ? children2 : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children2.length ? "(" + children2 + ")" : "");
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(mode = 0) {
    return new TreeCursor(this.topNode, mode);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(pos, side = 0, mode = 0) {
    let scope = CachedNode.get(this) || this.topNode;
    let cursor2 = new TreeCursor(scope);
    cursor2.moveTo(pos, side);
    CachedNode.set(this, cursor2._tree);
    return cursor2;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new TreeNode(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(pos, side = 0) {
    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
    CachedNode.set(this, node);
    return node;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(pos, side = 0) {
    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
    CachedInnerNode.set(this, node);
    return node;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(pos, side = 0) {
    return stackIterator(this, pos, side);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(spec) {
    let { enter, leave, from = 0, to = this.length } = spec;
    let mode = spec.mode || 0, anon2 = (mode & IterMode.IncludeAnonymous) > 0;
    for (let c = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
      let entered = false;
      if (c.from <= to && c.to >= from && (!anon2 && c.type.isAnonymous || enter(c) !== false)) {
        if (c.firstChild())
          continue;
        entered = true;
      }
      for (; ; ) {
        if (entered && leave && (anon2 || !c.type.isAnonymous))
          leave(c);
        if (c.nextSibling())
          break;
        if (!c.parent())
          return;
        entered = true;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(prop) {
    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let result = [];
    if (this.props)
      for (let id4 in this.props)
        result.push([+id4, this.props[id4]]);
    return result;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(config = {}) {
    return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children2, positions, length6) => new _Tree(this.type, children2, positions, length6, this.propValues), config.makeTree || ((children2, positions, length6) => new _Tree(NodeType.none, children2, positions, length6)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(data) {
    return buildTree(data);
  }
};
Tree.empty = new Tree(NodeType.none, [], [], 0);
var FlatBufferCursor = class _FlatBufferCursor {
  constructor(buffer, index2) {
    this.buffer = buffer;
    this.index = index2;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new _FlatBufferCursor(this.buffer, this.index);
  }
};
var TreeBuffer = class _TreeBuffer {
  /**
  Create a tree buffer.
  */
  constructor(buffer, length6, set3) {
    this.buffer = buffer;
    this.length = length6;
    this.set = set3;
  }
  /**
  @internal
  */
  get type() {
    return NodeType.none;
  }
  /**
  @internal
  */
  toString() {
    let result = [];
    for (let index2 = 0; index2 < this.buffer.length; ) {
      result.push(this.childString(index2));
      index2 = this.buffer[index2 + 3];
    }
    return result.join(",");
  }
  /**
  @internal
  */
  childString(index2) {
    let id4 = this.buffer[index2], endIndex = this.buffer[index2 + 3];
    let type2 = this.set.types[id4], result = type2.name;
    if (/\W/.test(result) && !type2.isError)
      result = JSON.stringify(result);
    index2 += 4;
    if (endIndex == index2)
      return result;
    let children2 = [];
    while (index2 < endIndex) {
      children2.push(this.childString(index2));
      index2 = this.buffer[index2 + 3];
    }
    return result + "(" + children2.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(startIndex, endIndex, dir, pos, side) {
    let { buffer } = this, pick = -1;
    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
        pick = i;
        if (dir > 0)
          break;
      }
    }
    return pick;
  }
  /**
  @internal
  */
  slice(startI, endI, from) {
    let b = this.buffer;
    let copy2 = new Uint16Array(endI - startI), len = 0;
    for (let i = startI, j = 0; i < endI; ) {
      copy2[j++] = b[i++];
      copy2[j++] = b[i++] - from;
      let to = copy2[j++] = b[i++] - from;
      copy2[j++] = b[i++] - startI;
      len = Math.max(len, to);
    }
    return new _TreeBuffer(copy2, len, this.set);
  }
};
function checkSide(side, pos, from, to) {
  switch (side) {
    case -2:
      return from < pos;
    case -1:
      return to >= pos && from < pos;
    case 0:
      return from < pos && to > pos;
    case 1:
      return from <= pos && to > pos;
    case 2:
      return to > pos;
    case 4:
      return true;
  }
}
function resolveNode(node, pos, side, overlays) {
  var _a2;
  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
    if (!parent)
      return node;
    node = parent;
  }
  let mode = overlays ? 0 : IterMode.IgnoreOverlays;
  if (overlays)
    for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
      if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
        node = parent;
    }
  for (; ; ) {
    let inner = node.enter(pos, side, mode);
    if (!inner)
      return node;
    node = inner;
  }
}
var BaseNode = class {
  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }
  getChild(type2, before = null, after = null) {
    let r = getChildren(this, type2, before, after);
    return r.length ? r[0] : null;
  }
  getChildren(type2, before = null, after = null) {
    return getChildren(this, type2, before, after);
  }
  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }
  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }
  matchContext(context2) {
    return matchNodeContext(this.parent, context2);
  }
  enterUnfinishedNodesBefore(pos) {
    let scan = this.childBefore(pos), node = this;
    while (scan) {
      let last2 = scan.lastChild;
      if (!last2 || last2.to != scan.to)
        break;
      if (last2.type.isError && last2.from == last2.to) {
        node = scan;
        scan = last2.prevSibling;
      } else {
        scan = last2;
      }
    }
    return node;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
};
var TreeNode = class _TreeNode extends BaseNode {
  constructor(_tree, from, index2, _parent) {
    super();
    this._tree = _tree;
    this.from = from;
    this.index = index2;
    this._parent = _parent;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(i, dir, pos, side, mode = 0) {
    for (let parent = this; ; ) {
      for (let { children: children2, positions } = parent._tree, e = dir > 0 ? children2.length : -1; i != e; i += dir) {
        let next = children2[i], start2 = positions[i] + parent.from;
        if (!checkSide(side, pos, start2, start2 + next.length))
          continue;
        if (next instanceof TreeBuffer) {
          if (mode & IterMode.ExcludeBuffers)
            continue;
          let index2 = next.findChild(0, next.buffer.length, dir, pos - start2, side);
          if (index2 > -1)
            return new BufferNode(new BufferContext(parent, next, i, start2), null, index2);
        } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
          let mounted;
          if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
            return new _TreeNode(mounted.tree, start2, i, parent);
          let inner = new _TreeNode(next, start2, i, parent);
          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
        }
      }
      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
        return null;
      if (parent.index >= 0)
        i = parent.index + dir;
      else
        i = dir < 0 ? -1 : parent._parent._tree.children.length;
      parent = parent._parent;
      if (!parent)
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.nextChild(
      0,
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    let mounted;
    if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
      let rPos = pos - this.from;
      for (let { from, to } of mounted.overlay) {
        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos))
          return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
      }
    }
    return this.nextChild(0, 1, pos, side, mode);
  }
  nextSignificantParent() {
    let val = this;
    while (val.type.isAnonymous && val._parent)
      val = val._parent;
    return val;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
};
function getChildren(node, type2, before, after) {
  let cur = node.cursor(), result = [];
  if (!cur.firstChild())
    return result;
  if (before != null)
    for (let found = false; !found; ) {
      found = cur.type.is(before);
      if (!cur.nextSibling())
        return result;
    }
  for (; ; ) {
    if (after != null && cur.type.is(after))
      return result;
    if (cur.type.is(type2))
      result.push(cur.node);
    if (!cur.nextSibling())
      return after == null ? result : [];
  }
}
function matchNodeContext(node, context2, i = context2.length - 1) {
  for (let p = node; i >= 0; p = p.parent) {
    if (!p)
      return false;
    if (!p.type.isAnonymous) {
      if (context2[i] && context2[i] != p.name)
        return false;
      i--;
    }
  }
  return true;
}
var BufferContext = class {
  constructor(parent, buffer, index2, start2) {
    this.parent = parent;
    this.buffer = buffer;
    this.index = index2;
    this.start = start2;
  }
};
var BufferNode = class _BufferNode extends BaseNode {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(context2, _parent, index2) {
    super();
    this.context = context2;
    this._parent = _parent;
    this.index = index2;
    this.type = context2.buffer.set.types[context2.buffer.buffer[index2]];
  }
  child(dir, pos, side) {
    let { buffer } = this.context;
    let index2 = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
    return index2 < 0 ? null : new _BufferNode(this.context, this, index2);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.child(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.child(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    if (mode & IterMode.ExcludeBuffers)
      return null;
    let { buffer } = this.context;
    let index2 = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
    return index2 < 0 ? null : new _BufferNode(this.context, this, index2);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(dir) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + dir,
      dir,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer } = this.context;
    let after = buffer.buffer[this.index + 3];
    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
      return new _BufferNode(this.context, this._parent, after);
    return this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer } = this.context;
    let parentStart = this._parent ? this._parent.index + 4 : 0;
    if (this.index == parentStart)
      return this.externalSibling(-1);
    return new _BufferNode(this.context, this._parent, buffer.findChild(
      parentStart,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let children2 = [], positions = [];
    let { buffer } = this.context;
    let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
    if (endI > startI) {
      let from = buffer.buffer[this.index + 1];
      children2.push(buffer.slice(startI, endI, from));
      positions.push(0);
    }
    return new Tree(this.type, children2, positions, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
};
function iterStack(heads) {
  if (!heads.length)
    return null;
  let pick = 0, picked = heads[0];
  for (let i = 1; i < heads.length; i++) {
    let node = heads[i];
    if (node.from > picked.from || node.to < picked.to) {
      picked = node;
      pick = i;
    }
  }
  let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
  let newHeads = heads.slice();
  if (next)
    newHeads[pick] = next;
  else
    newHeads.splice(pick, 1);
  return new StackIterator(newHeads, picked);
}
var StackIterator = class {
  constructor(heads, node) {
    this.heads = heads;
    this.node = node;
  }
  get next() {
    return iterStack(this.heads);
  }
};
function stackIterator(tree, pos, side) {
  let inner = tree.resolveInner(pos, side), layers = null;
  for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
    if (scan.index < 0) {
      let parent = scan.parent;
      (layers || (layers = [inner])).push(parent.resolve(pos, side));
      scan = parent;
    } else {
      let mount = MountedTree.get(scan.tree);
      if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
        let root2 = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
        (layers || (layers = [inner])).push(resolveNode(root2, pos, side, false));
      }
    }
  }
  return layers ? iterStack(layers) : inner;
}
var TreeCursor = class {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(node, mode = 0) {
    this.mode = mode;
    this.buffer = null;
    this.stack = [];
    this.index = 0;
    this.bufferNode = null;
    if (node instanceof TreeNode) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;
      for (let n = node._parent; n; n = n._parent)
        this.stack.unshift(n.index);
      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  }
  yieldNode(node) {
    if (!node)
      return false;
    this._tree = node;
    this.type = node.type;
    this.from = node.from;
    this.to = node.to;
    return true;
  }
  yieldBuf(index2, type2) {
    this.index = index2;
    let { start: start2, buffer } = this.buffer;
    this.type = type2 || buffer.set.types[buffer.buffer[index2]];
    this.from = start2 + buffer.buffer[index2 + 1];
    this.to = start2 + buffer.buffer[index2 + 2];
    return true;
  }
  /**
  @internal
  */
  yield(node) {
    if (!node)
      return false;
    if (node instanceof TreeNode) {
      this.buffer = null;
      return this.yieldNode(node);
    }
    this.buffer = node.context;
    return this.yieldBuf(node.index, node.type);
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(dir, pos, side) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
    let { buffer } = this.buffer;
    let index2 = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
    if (index2 < 0)
      return false;
    this.stack.push(this.index);
    return this.yieldBuf(index2);
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(pos) {
    return this.enterChild(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(pos) {
    return this.enterChild(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(pos, side, mode = this.mode) {
    if (!this.buffer)
      return this.yield(this._tree.enter(pos, side, mode));
    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    this.buffer = null;
    return this.yieldNode(parent);
  }
  /**
  @internal
  */
  sibling(dir) {
    if (!this.buffer)
      return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
    let { buffer } = this.buffer, d = this.stack.length - 1;
    if (dir < 0) {
      let parentStart = d < 0 ? 0 : this.stack[d] + 4;
      if (this.index != parentStart)
        return this.yieldBuf(buffer.findChild(
          parentStart,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let after = buffer.buffer[this.index + 3];
      if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
        return this.yieldBuf(after);
    }
    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(dir) {
    let index2, parent, { buffer } = this;
    if (buffer) {
      if (dir > 0) {
        if (this.index < buffer.buffer.buffer.length)
          return false;
      } else {
        for (let i = 0; i < this.index; i++)
          if (buffer.buffer.buffer[i + 3] < this.index)
            return false;
      }
      ({ index: index2, parent } = buffer);
    } else {
      ({ index: index2, _parent: parent } = this._tree);
    }
    for (; parent; { index: index2, _parent: parent } = parent) {
      if (index2 > -1)
        for (let i = index2 + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
          let child = parent._tree.children[i];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
            return false;
        }
    }
    return true;
  }
  move(dir, enter) {
    if (enter && this.enterChild(
      dir,
      0,
      4
      /* Side.DontCare */
    ))
      return true;
    for (; ; ) {
      if (this.sibling(dir))
        return true;
      if (this.atLastNode(dir) || !this.parent())
        return false;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(enter = true) {
    return this.move(1, enter);
  }
  /**
  Move to the next node in a last-to-first pre-order traversal. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(enter = true) {
    return this.move(-1, enter);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(pos, side = 0) {
    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
      if (!this.parent())
        break;
    while (this.enterChild(1, pos, side)) {
    }
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let cache2 = this.bufferNode, result = null, depth = 0;
    if (cache2 && cache2.context == this.buffer) {
      scan: for (let index2 = this.index, d = this.stack.length; d >= 0; ) {
        for (let c = cache2; c; c = c._parent)
          if (c.index == index2) {
            if (index2 == this.index)
              return c;
            result = c;
            depth = d + 1;
            break scan;
          }
        index2 = this.stack[--d];
      }
    }
    for (let i = depth; i < this.stack.length; i++)
      result = new BufferNode(this.buffer, result, this.stack[i]);
    return this.bufferNode = new BufferNode(this.buffer, result, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(enter, leave) {
    for (let depth = 0; ; ) {
      let mustLeave = false;
      if (this.type.isAnonymous || enter(this) !== false) {
        if (this.firstChild()) {
          depth++;
          continue;
        }
        if (!this.type.isAnonymous)
          mustLeave = true;
      }
      for (; ; ) {
        if (mustLeave && leave)
          leave(this);
        mustLeave = this.type.isAnonymous;
        if (!depth)
          return;
        if (this.nextSibling())
          break;
        this.parent();
        depth--;
        mustLeave = true;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(context2) {
    if (!this.buffer)
      return matchNodeContext(this.node.parent, context2);
    let { buffer } = this.buffer, { types: types2 } = buffer.set;
    for (let i = context2.length - 1, d = this.stack.length - 1; i >= 0; d--) {
      if (d < 0)
        return matchNodeContext(this._tree, context2, i);
      let type2 = types2[buffer.buffer[this.stack[d]]];
      if (!type2.isAnonymous) {
        if (context2[i] && context2[i] != type2.name)
          return false;
        i--;
      }
    }
    return true;
  }
};
function hasChild(tree) {
  return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
}
function buildTree(data) {
  var _a2;
  let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
  let cursor2 = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  let types2 = nodeSet.types;
  let contextHash = 0, lookAhead = 0;
  function takeNode(parentStart, minPos, children3, positions2, inRepeat, depth) {
    let { id: id4, start: start2, end, size: size3 } = cursor2;
    let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
    while (size3 < 0) {
      cursor2.next();
      if (size3 == -1) {
        let node2 = reused[id4];
        children3.push(node2);
        positions2.push(start2 - parentStart);
        return;
      } else if (size3 == -3) {
        contextHash = id4;
        return;
      } else if (size3 == -4) {
        lookAhead = id4;
        return;
      } else {
        throw new RangeError(`Unrecognized record size: ${size3}`);
      }
    }
    let type2 = types2[id4], node, buffer2;
    let startPos = start2 - parentStart;
    if (end - start2 <= maxBufferLength && (buffer2 = findBufferSize(cursor2.pos - minPos, inRepeat))) {
      let data2 = new Uint16Array(buffer2.size - buffer2.skip);
      let endPos = cursor2.pos - buffer2.size, index2 = data2.length;
      while (cursor2.pos > endPos)
        index2 = copyToBuffer(buffer2.start, data2, index2);
      node = new TreeBuffer(data2, end - buffer2.start, nodeSet);
      startPos = buffer2.start - parentStart;
    } else {
      let endPos = cursor2.pos - size3;
      cursor2.next();
      let localChildren = [], localPositions = [];
      let localInRepeat = id4 >= minRepeatType ? id4 : -1;
      let lastGroup = 0, lastEnd = end;
      while (cursor2.pos > endPos) {
        if (localInRepeat >= 0 && cursor2.id == localInRepeat && cursor2.size >= 0) {
          if (cursor2.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, cursor2.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor2.end;
          }
          cursor2.next();
        } else if (depth > 2500) {
          takeFlatNode(start2, endPos, localChildren, localPositions);
        } else {
          takeNode(start2, endPos, localChildren, localPositions, localInRepeat, depth + 1);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
        makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, start2, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        let make = makeBalanced(type2, contextAtStart);
        node = balanceRange(type2, localChildren, localPositions, 0, localChildren.length, 0, end - start2, make, make);
      } else {
        node = makeTree(type2, localChildren, localPositions, end - start2, lookAheadAtStart - end, contextAtStart);
      }
    }
    children3.push(node);
    positions2.push(startPos);
  }
  function takeFlatNode(parentStart, minPos, children3, positions2) {
    let nodes = [];
    let nodeCount = 0, stopAt = -1;
    while (cursor2.pos > minPos) {
      let { id: id4, start: start2, end, size: size3 } = cursor2;
      if (size3 > 4) {
        cursor2.next();
      } else if (stopAt > -1 && start2 < stopAt) {
        break;
      } else {
        if (stopAt < 0)
          stopAt = end - maxBufferLength;
        nodes.push(id4, start2, end);
        nodeCount++;
        cursor2.next();
      }
    }
    if (nodeCount) {
      let buffer2 = new Uint16Array(nodeCount * 4);
      let start2 = nodes[nodes.length - 2];
      for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
        buffer2[j++] = nodes[i];
        buffer2[j++] = nodes[i + 1] - start2;
        buffer2[j++] = nodes[i + 2] - start2;
        buffer2[j++] = j;
      }
      children3.push(new TreeBuffer(buffer2, nodes[2] - start2, nodeSet));
      positions2.push(start2 - parentStart);
    }
  }
  function makeBalanced(type2, contextHash2) {
    return (children3, positions2, length7) => {
      let lookAhead2 = 0, lastI = children3.length - 1, last2, lookAheadProp;
      if (lastI >= 0 && (last2 = children3[lastI]) instanceof Tree) {
        if (!lastI && last2.type == type2 && last2.length == length7)
          return last2;
        if (lookAheadProp = last2.prop(NodeProp.lookAhead))
          lookAhead2 = positions2[lastI] + last2.length + lookAheadProp;
      }
      return makeTree(type2, children3, positions2, length7, lookAhead2, contextHash2);
    };
  }
  function makeRepeatLeaf(children3, positions2, base2, i, from, to, type2, lookAhead2, contextHash2) {
    let localChildren = [], localPositions = [];
    while (children3.length > i) {
      localChildren.push(children3.pop());
      localPositions.push(positions2.pop() + base2 - from);
    }
    children3.push(makeTree(nodeSet.types[type2], localChildren, localPositions, to - from, lookAhead2 - to, contextHash2));
    positions2.push(from - base2);
  }
  function makeTree(type2, children3, positions2, length7, lookAhead2, contextHash2, props) {
    if (contextHash2) {
      let pair2 = [NodeProp.contextHash, contextHash2];
      props = props ? [pair2].concat(props) : [pair2];
    }
    if (lookAhead2 > 25) {
      let pair2 = [NodeProp.lookAhead, lookAhead2];
      props = props ? [pair2].concat(props) : [pair2];
    }
    return new Tree(type2, children3, positions2, length7, props);
  }
  function findBufferSize(maxSize, inRepeat) {
    let fork = cursor2.fork();
    let size3 = 0, start2 = 0, skip = 0, minStart = fork.end - maxBufferLength;
    let result = { size: 0, start: 0, skip: 0 };
    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
      let nodeSize2 = fork.size;
      if (fork.id == inRepeat && nodeSize2 >= 0) {
        result.size = size3;
        result.start = start2;
        result.skip = skip;
        skip += 4;
        size3 += 4;
        fork.next();
        continue;
      }
      let startPos = fork.pos - nodeSize2;
      if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
        break;
      let localSkipped = fork.id >= minRepeatType ? 4 : 0;
      let nodeStart = fork.start;
      fork.next();
      while (fork.pos > startPos) {
        if (fork.size < 0) {
          if (fork.size == -3)
            localSkipped += 4;
          else
            break scan;
        } else if (fork.id >= minRepeatType) {
          localSkipped += 4;
        }
        fork.next();
      }
      start2 = nodeStart;
      size3 += nodeSize2;
      skip += localSkipped;
    }
    if (inRepeat < 0 || size3 == maxSize) {
      result.size = size3;
      result.start = start2;
      result.skip = skip;
    }
    return result.size > 4 ? result : void 0;
  }
  function copyToBuffer(bufferStart, buffer2, index2) {
    let { id: id4, start: start2, end, size: size3 } = cursor2;
    cursor2.next();
    if (size3 >= 0 && id4 < minRepeatType) {
      let startIndex = index2;
      if (size3 > 4) {
        let endPos = cursor2.pos - (size3 - 4);
        while (cursor2.pos > endPos)
          index2 = copyToBuffer(bufferStart, buffer2, index2);
      }
      buffer2[--index2] = startIndex;
      buffer2[--index2] = end - bufferStart;
      buffer2[--index2] = start2 - bufferStart;
      buffer2[--index2] = id4;
    } else if (size3 == -3) {
      contextHash = id4;
    } else if (size3 == -4) {
      lookAhead = id4;
    }
    return index2;
  }
  let children2 = [], positions = [];
  while (cursor2.pos > 0)
    takeNode(data.start || 0, data.bufferStart || 0, children2, positions, -1, 0);
  let length6 = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children2.length ? positions[0] + children2[0].length : 0;
  return new Tree(types2[data.topID], children2.reverse(), positions.reverse(), length6);
}
var nodeSizeCache = /* @__PURE__ */ new WeakMap();
function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
    return 1;
  let size3 = nodeSizeCache.get(node);
  if (size3 == null) {
    size3 = 1;
    for (let child of node.children) {
      if (child.type != balanceType || !(child instanceof Tree)) {
        size3 = 1;
        break;
      }
      size3 += nodeSize(balanceType, child);
    }
    nodeSizeCache.set(node, size3);
  }
  return size3;
}
function balanceRange(balanceType, children2, positions, from, to, start2, length6, mkTop, mkTree) {
  let total = 0;
  for (let i = from; i < to; i++)
    total += nodeSize(balanceType, children2[i]);
  let maxChild = Math.ceil(
    total * 1.5 / 8
    /* Balance.BranchFactor */
  );
  let localChildren = [], localPositions = [];
  function divide2(children3, positions2, from2, to2, offset) {
    for (let i = from2; i < to2; ) {
      let groupFrom = i, groupStart = positions2[i], groupSize = nodeSize(balanceType, children3[i]);
      i++;
      for (; i < to2; i++) {
        let nextSize = nodeSize(balanceType, children3[i]);
        if (groupSize + nextSize >= maxChild)
          break;
        groupSize += nextSize;
      }
      if (i == groupFrom + 1) {
        if (groupSize > maxChild) {
          let only = children3[groupFrom];
          divide2(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
          continue;
        }
        localChildren.push(children3[groupFrom]);
      } else {
        let length7 = positions2[i - 1] + children3[i - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children3, positions2, groupFrom, i, groupStart, length7, null, mkTree));
      }
      localPositions.push(groupStart + offset - start2);
    }
  }
  divide2(children2, positions, from, to, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length6);
}
var NodeWeakMap = class {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(buffer, index2, value) {
    let inner = this.map.get(buffer);
    if (!inner)
      this.map.set(buffer, inner = /* @__PURE__ */ new Map());
    inner.set(index2, value);
  }
  getBuffer(buffer, index2) {
    let inner = this.map.get(buffer);
    return inner && inner.get(index2);
  }
  /**
  Set the value for this syntax node.
  */
  set(node, value) {
    if (node instanceof BufferNode)
      this.setBuffer(node.context.buffer, node.index, value);
    else if (node instanceof TreeNode)
      this.map.set(node.tree, value);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(node) {
    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(cursor2, value) {
    if (cursor2.buffer)
      this.setBuffer(cursor2.buffer.buffer, cursor2.index, value);
    else
      this.map.set(cursor2.tree, value);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(cursor2) {
    return cursor2.buffer ? this.getBuffer(cursor2.buffer.buffer, cursor2.index) : this.map.get(cursor2.tree);
  }
};
var TreeFragment = class _TreeFragment {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(from, to, tree, offset, openStart = false, openEnd = false) {
    this.from = from;
    this.to = to;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(tree, fragments = [], partial = false) {
    let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
    for (let f of fragments)
      if (f.to > tree.length)
        result.push(f);
    return result;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(fragments, changes, minGap = 128) {
    if (!changes.length)
      return fragments;
    let result = [];
    let fI = 1, nextF = fragments.length ? fragments[0] : null;
    for (let cI = 0, pos = 0, off = 0; ; cI++) {
      let nextC = cI < changes.length ? changes[cI] : null;
      let nextPos = nextC ? nextC.fromA : 1e9;
      if (nextPos - pos >= minGap)
        while (nextF && nextF.from < nextPos) {
          let cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
          }
          if (cut)
            result.push(cut);
          if (nextF.to > nextPos)
            break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
      if (!nextC)
        break;
      pos = nextC.toA;
      off = nextC.toA - nextC.toB;
    }
    return result;
  }
};
var Parser = class {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(input, fragments, ranges) {
    if (typeof input == "string")
      input = new StringInput(input);
    ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r) => new Range2(r.from, r.to)) : [new Range2(0, 0)];
    return this.createParse(input, fragments || [], ranges);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(input, fragments, ranges) {
    let parse2 = this.startParse(input, fragments, ranges);
    for (; ; ) {
      let done = parse2.advance();
      if (done)
        return done;
    }
  }
};
var StringInput = class {
  constructor(string4) {
    this.string = string4;
  }
  get length() {
    return this.string.length;
  }
  chunk(from) {
    return this.string.slice(from);
  }
  get lineChunks() {
    return false;
  }
  read(from, to) {
    return this.string.slice(from, to);
  }
};
var stoppedInner = new NodeProp({ perNode: true });

// node_modules/@lezer/highlight/dist/index.js
var nextTagID = 0;
var Tag = class _Tag {
  /**
  @internal
  */
  constructor(name3, set3, base2, modified) {
    this.name = name3;
    this.set = set3;
    this.base = base2;
    this.modified = modified;
    this.id = nextTagID++;
  }
  toString() {
    let { name: name3 } = this;
    for (let mod of this.modified)
      if (mod.name)
        name3 = `${mod.name}(${name3})`;
    return name3;
  }
  static define(nameOrParent, parent) {
    let name3 = typeof nameOrParent == "string" ? nameOrParent : "?";
    if (nameOrParent instanceof _Tag)
      parent = nameOrParent;
    if (parent === null || parent === void 0 ? void 0 : parent.base)
      throw new Error("Can not derive from a modified tag");
    let tag = new _Tag(name3, [], null, []);
    tag.set.push(tag);
    if (parent)
      for (let t2 of parent.set)
        tag.set.push(t2);
    return tag;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier(name3) {
    let mod = new Modifier(name3);
    return (tag) => {
      if (tag.modified.indexOf(mod) > -1)
        return tag;
      return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
    };
  }
};
var nextModifierID = 0;
var Modifier = class _Modifier {
  constructor(name3) {
    this.name = name3;
    this.instances = [];
    this.id = nextModifierID++;
  }
  static get(base2, mods) {
    if (!mods.length)
      return base2;
    let exists = mods[0].instances.find((t2) => t2.base == base2 && sameArray2(mods, t2.modified));
    if (exists)
      return exists;
    let set3 = [], tag = new Tag(base2.name, set3, base2, mods);
    for (let m of mods)
      m.instances.push(tag);
    let configs = powerSet(mods);
    for (let parent of base2.set)
      if (!parent.modified.length)
        for (let config of configs)
          set3.push(_Modifier.get(parent, config));
    return tag;
  }
};
function sameArray2(a, b) {
  return a.length == b.length && a.every((x2, i) => x2 == b[i]);
}
function powerSet(array2) {
  let sets = [[]];
  for (let i = 0; i < array2.length; i++) {
    for (let j = 0, e = sets.length; j < e; j++) {
      sets.push(sets[j].concat(array2[i]));
    }
  }
  return sets.sort((a, b) => b.length - a.length);
}
function styleTags(spec) {
  let byName = /* @__PURE__ */ Object.create(null);
  for (let prop in spec) {
    let tags2 = spec[prop];
    if (!Array.isArray(tags2))
      tags2 = [tags2];
    for (let part of prop.split(" "))
      if (part) {
        let pieces = [], mode = 2, rest = part;
        for (let pos = 0; ; ) {
          if (rest == "..." && pos > 0 && pos + 3 == part.length) {
            mode = 1;
            break;
          }
          let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
          if (!m)
            throw new RangeError("Invalid path: " + part);
          pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
          pos += m[0].length;
          if (pos == part.length)
            break;
          let next = part[pos++];
          if (pos == part.length && next == "!") {
            mode = 0;
            break;
          }
          if (next != "/")
            throw new RangeError("Invalid path: " + part);
          rest = part.slice(pos);
        }
        let last2 = pieces.length - 1, inner = pieces[last2];
        if (!inner)
          throw new RangeError("Invalid path: " + part);
        let rule = new Rule(tags2, mode, last2 > 0 ? pieces.slice(0, last2) : null);
        byName[inner] = rule.sort(byName[inner]);
      }
  }
  return ruleNodeProp.add(byName);
}
var ruleNodeProp = new NodeProp();
var Rule = class {
  constructor(tags2, mode, context2, next) {
    this.tags = tags2;
    this.mode = mode;
    this.context = context2;
    this.next = next;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(other) {
    if (!other || other.depth < this.depth) {
      this.next = other;
      return this;
    }
    other.next = this.sort(other.next);
    return other;
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
};
Rule.empty = new Rule([], 2, null);
function tagHighlighter(tags2, options) {
  let map4 = /* @__PURE__ */ Object.create(null);
  for (let style of tags2) {
    if (!Array.isArray(style.tag))
      map4[style.tag.id] = style.class;
    else
      for (let tag of style.tag)
        map4[tag.id] = style.class;
  }
  let { scope, all: all5 = null } = options || {};
  return {
    style: (tags3) => {
      let cls = all5;
      for (let tag of tags3) {
        for (let sub of tag.set) {
          let tagClass = map4[sub.id];
          if (tagClass) {
            cls = cls ? cls + " " + tagClass : tagClass;
            break;
          }
        }
      }
      return cls;
    },
    scope
  };
}
function highlightTags(highlighters, tags2) {
  let result = null;
  for (let highlighter of highlighters) {
    let value = highlighter.style(tags2);
    if (value)
      result = result ? result + " " + value : value;
  }
  return result;
}
function highlightTree(tree, highlighter, putStyle, from = 0, to = tree.length) {
  let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
  builder.flush(to);
}
var HighlightBuilder = class {
  constructor(at, highlighters, span3) {
    this.at = at;
    this.highlighters = highlighters;
    this.span = span3;
    this.class = "";
  }
  startSpan(at, cls) {
    if (cls != this.class) {
      this.flush(at);
      if (at > this.at)
        this.at = at;
      this.class = cls;
    }
  }
  flush(to) {
    if (to > this.at && this.class)
      this.span(this.at, to, this.class);
  }
  highlightRange(cursor2, from, to, inheritedClass, highlighters) {
    let { type: type2, from: start2, to: end } = cursor2;
    if (start2 >= to || end <= from)
      return;
    if (type2.isTop)
      highlighters = this.highlighters.filter((h) => !h.scope || h.scope(type2));
    let cls = inheritedClass;
    let rule = getStyleTags(cursor2) || Rule.empty;
    let tagCls = highlightTags(highlighters, rule.tags);
    if (tagCls) {
      if (cls)
        cls += " ";
      cls += tagCls;
      if (rule.mode == 1)
        inheritedClass += (inheritedClass ? " " : "") + tagCls;
    }
    this.startSpan(Math.max(from, start2), cls);
    if (rule.opaque)
      return;
    let mounted = cursor2.tree && cursor2.tree.prop(NodeProp.mounted);
    if (mounted && mounted.overlay) {
      let inner = cursor2.node.enter(mounted.overlay[0].from + start2, 1);
      let innerHighlighters = this.highlighters.filter((h) => !h.scope || h.scope(mounted.tree.type));
      let hasChild2 = cursor2.firstChild();
      for (let i = 0, pos = start2; ; i++) {
        let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
        let nextPos = next ? next.from + start2 : end;
        let rangeFrom2 = Math.max(from, pos), rangeTo2 = Math.min(to, nextPos);
        if (rangeFrom2 < rangeTo2 && hasChild2) {
          while (cursor2.from < rangeTo2) {
            this.highlightRange(cursor2, rangeFrom2, rangeTo2, inheritedClass, highlighters);
            this.startSpan(Math.min(rangeTo2, cursor2.to), cls);
            if (cursor2.to >= nextPos || !cursor2.nextSibling())
              break;
          }
        }
        if (!next || nextPos > to)
          break;
        pos = next.to + start2;
        if (pos > from) {
          this.highlightRange(inner.cursor(), Math.max(from, next.from + start2), Math.min(to, pos), "", innerHighlighters);
          this.startSpan(Math.min(to, pos), cls);
        }
      }
      if (hasChild2)
        cursor2.parent();
    } else if (cursor2.firstChild()) {
      if (mounted)
        inheritedClass = "";
      do {
        if (cursor2.to <= from)
          continue;
        if (cursor2.from >= to)
          break;
        this.highlightRange(cursor2, from, to, inheritedClass, highlighters);
        this.startSpan(Math.min(to, cursor2.to), cls);
      } while (cursor2.nextSibling());
      cursor2.parent();
    }
  }
};
function getStyleTags(node) {
  let rule = node.type.prop(ruleNodeProp);
  while (rule && rule.context && !node.matchContext(rule.context))
    rule = rule.next;
  return rule || null;
}
var t = Tag.define;
var comment = t();
var name = t();
var typeName = t(name);
var propertyName = t(name);
var literal = t();
var string = t(literal);
var number4 = t(literal);
var content = t();
var heading = t(content);
var keyword = t();
var operator = t();
var punctuation = t();
var bracket = t(punctuation);
var meta = t();
var tags = {
  /**
  A comment.
  */
  comment,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: t(comment),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: t(comment),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: t(comment),
  /**
  Any kind of identifier.
  */
  name,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: t(name),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: t(typeName),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: t(propertyName),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: t(name),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: t(name),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: t(name),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: t(name),
  /**
  A literal value.
  */
  literal,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: t(string),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: t(string),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: t(string),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: number4,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: t(number4),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: t(number4),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: t(literal),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: t(literal),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: t(literal),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: t(literal),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: t(literal),
  /**
  A language keyword.
  */
  keyword,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: t(keyword),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: t(keyword),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: t(keyword),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: t(keyword),
  /**
  An operator.
  */
  operator,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: t(operator),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: t(operator),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: t(operator),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: t(operator),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: t(operator),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: t(operator),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: t(punctuation),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: t(bracket),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: t(heading),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: t(heading),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: t(heading),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: t(heading),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: t(heading),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: t(heading),
  /**
  A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
  */
  contentSeparator: t(content),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: t(content),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: t(content),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: t(content),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: t(content),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: t(content),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: t(content),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: t(),
  /**
  Deleted text.
  */
  deleted: t(),
  /**
  Changed text.
  */
  changed: t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: t(),
  /**
  Metadata or meta-instruction.
  */
  meta,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: t(meta),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: t(meta),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Tag.defineModifier("definition"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Tag.defineModifier("constant"),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Tag.defineModifier("function"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Tag.defineModifier("standard"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Tag.defineModifier("local"),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Tag.defineModifier("special")
};
for (let name3 in tags) {
  let val = tags[name3];
  if (val instanceof Tag)
    val.name = name3;
}
var classHighlighter = tagHighlighter([
  { tag: tags.link, class: "tok-link" },
  { tag: tags.heading, class: "tok-heading" },
  { tag: tags.emphasis, class: "tok-emphasis" },
  { tag: tags.strong, class: "tok-strong" },
  { tag: tags.keyword, class: "tok-keyword" },
  { tag: tags.atom, class: "tok-atom" },
  { tag: tags.bool, class: "tok-bool" },
  { tag: tags.url, class: "tok-url" },
  { tag: tags.labelName, class: "tok-labelName" },
  { tag: tags.inserted, class: "tok-inserted" },
  { tag: tags.deleted, class: "tok-deleted" },
  { tag: tags.literal, class: "tok-literal" },
  { tag: tags.string, class: "tok-string" },
  { tag: tags.number, class: "tok-number" },
  { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
  { tag: tags.variableName, class: "tok-variableName" },
  { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
  { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
  { tag: tags.special(tags.variableName), class: "tok-variableName2" },
  { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
  { tag: tags.typeName, class: "tok-typeName" },
  { tag: tags.namespace, class: "tok-namespace" },
  { tag: tags.className, class: "tok-className" },
  { tag: tags.macroName, class: "tok-macroName" },
  { tag: tags.propertyName, class: "tok-propertyName" },
  { tag: tags.operator, class: "tok-operator" },
  { tag: tags.comment, class: "tok-comment" },
  { tag: tags.meta, class: "tok-meta" },
  { tag: tags.invalid, class: "tok-invalid" },
  { tag: tags.punctuation, class: "tok-punctuation" }
]);

// node_modules/@codemirror/language/dist/index.js
var _a;
var languageDataProp = /* @__PURE__ */ new NodeProp();
function defineLanguageFacet(baseData) {
  return Facet.define({
    combine: baseData ? (values2) => values2.concat(baseData) : void 0
  });
}
var sublanguageProp = /* @__PURE__ */ new NodeProp();
var Language = class {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(data, parser2, extraExtensions = [], name3 = "") {
    this.data = data;
    this.name = name3;
    if (!EditorState.prototype.hasOwnProperty("tree"))
      Object.defineProperty(EditorState.prototype, "tree", { get() {
        return syntaxTree(this);
      } });
    this.parser = parser2;
    this.extension = [
      language.of(this),
      EditorState.languageData.of((state, pos, side) => {
        let top3 = topNodeAt(state, pos, side), data2 = top3.type.prop(languageDataProp);
        if (!data2)
          return [];
        let base2 = state.facet(data2), sub = top3.type.prop(sublanguageProp);
        if (sub) {
          let innerNode = top3.resolve(pos - top3.from, side);
          for (let sublang of sub)
            if (sublang.test(innerNode, state)) {
              let data3 = state.facet(sublang.facet);
              return sublang.type == "replace" ? data3 : data3.concat(base2);
            }
        }
        return base2;
      })
    ].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(state, pos, side = -1) {
    return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(state) {
    let lang = state.facet(language);
    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
      return [{ from: 0, to: state.doc.length }];
    if (!lang || !lang.allowsNesting)
      return [];
    let result = [];
    let explore = (tree, from) => {
      if (tree.prop(languageDataProp) == this.data) {
        result.push({ from, to: from + tree.length });
        return;
      }
      let mount = tree.prop(NodeProp.mounted);
      if (mount) {
        if (mount.tree.prop(languageDataProp) == this.data) {
          if (mount.overlay)
            for (let r of mount.overlay)
              result.push({ from: r.from + from, to: r.to + from });
          else
            result.push({ from, to: from + tree.length });
          return;
        } else if (mount.overlay) {
          let size3 = result.length;
          explore(mount.tree, mount.overlay[0].from + from);
          if (result.length > size3)
            return;
        }
      }
      for (let i = 0; i < tree.children.length; i++) {
        let ch = tree.children[i];
        if (ch instanceof Tree)
          explore(ch, tree.positions[i] + from);
      }
    };
    explore(syntaxTree(state), 0);
    return result;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return true;
  }
};
Language.setState = /* @__PURE__ */ StateEffect.define();
function topNodeAt(state, pos, side) {
  let topLang = state.facet(language), tree = syntaxTree(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
      if (node.type.isTop)
        tree = node;
  }
  return tree;
}
var LRLanguage = class _LRLanguage extends Language {
  constructor(data, parser2, name3) {
    super(data, parser2, [], name3);
    this.parser = parser2;
  }
  /**
  Define a language from a parser.
  */
  static define(spec) {
    let data = defineLanguageFacet(spec.languageData);
    return new _LRLanguage(data, spec.parser.configure({
      props: [languageDataProp.add((type2) => type2.isTop ? data : void 0)]
    }), spec.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(options, name3) {
    return new _LRLanguage(this.data, this.parser.configure(options), name3 || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
};
function syntaxTree(state) {
  let field = state.field(Language.state, false);
  return field ? field.tree : Tree.empty;
}
var DocInput = class {
  /**
  Create an input object for the given document.
  */
  constructor(doc2) {
    this.doc = doc2;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc2.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(pos) {
    this.string = this.cursor.next(pos - this.cursorPos).value;
    this.cursorPos = pos + this.string.length;
    return this.cursorPos - this.string.length;
  }
  chunk(pos) {
    this.syncTo(pos);
    return this.string;
  }
  get lineChunks() {
    return true;
  }
  read(from, to) {
    let stringStart2 = this.cursorPos - this.string.length;
    if (from < stringStart2 || to >= this.cursorPos)
      return this.doc.sliceString(from, to);
    else
      return this.string.slice(from - stringStart2, to - stringStart2);
  }
};
var currentContext = null;
var ParseContext = class _ParseContext {
  constructor(parser2, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
    this.parser = parser2;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(parser2, state, viewport) {
    return new _ParseContext(parser2, state, [], Tree.empty, 0, viewport, [], null);
  }
  startParse() {
    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(until, upto) {
    if (upto != null && upto >= this.state.doc.length)
      upto = void 0;
    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
      this.takeTree();
      return true;
    }
    return this.withContext(() => {
      var _a2;
      if (typeof until == "number") {
        let endTime = Date.now() + until;
        until = () => Date.now() > endTime;
      }
      if (!this.parse)
        this.parse = this.startParse();
      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
        this.parse.stopAt(upto);
      for (; ; ) {
        let done = this.parse.advance();
        if (done) {
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
          this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
          this.tree = done;
          this.parse = null;
          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        }
        if (until())
          return false;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let pos, tree;
    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
        this.parse.stopAt(pos);
      this.withContext(() => {
        while (!(tree = this.parse.advance())) {
        }
      });
      this.treeLen = pos;
      this.tree = tree;
      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
      this.parse = null;
    }
  }
  withContext(f) {
    let prev = currentContext;
    currentContext = this;
    try {
      return f();
    } finally {
      currentContext = prev;
    }
  }
  withoutTempSkipped(fragments) {
    for (let r; r = this.tempSkipped.pop(); )
      fragments = cutFragments(fragments, r.from, r.to);
    return fragments;
  }
  /**
  @internal
  */
  changes(changes, newState) {
    let { fragments, tree, treeLen, viewport, skipped } = this;
    this.takeTree();
    if (!changes.empty) {
      let ranges = [];
      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
      fragments = TreeFragment.applyChanges(fragments, ranges);
      tree = Tree.empty;
      treeLen = 0;
      viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
      if (this.skipped.length) {
        skipped = [];
        for (let r of this.skipped) {
          let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
          if (from < to)
            skipped.push({ from, to });
        }
      }
    }
    return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(viewport) {
    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
      return false;
    this.viewport = viewport;
    let startLen = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from, to } = this.skipped[i];
      if (from < viewport.to && to > viewport.from) {
        this.fragments = cutFragments(this.fragments, from, to);
        this.skipped.splice(i--, 1);
      }
    }
    if (this.skipped.length >= startLen)
      return false;
    this.reset();
    return true;
  }
  /**
  @internal
  */
  reset() {
    if (this.parse) {
      this.takeTree();
      this.parse = null;
    }
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(from, to) {
    this.skipped.push({ from, to });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(until) {
    return new class extends Parser {
      createParse(input, fragments, ranges) {
        let from = ranges[0].from, to = ranges[ranges.length - 1].to;
        let parser2 = {
          parsedPos: from,
          advance() {
            let cx = currentContext;
            if (cx) {
              for (let r of ranges)
                cx.tempSkipped.push(r);
              if (until)
                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
            }
            this.parsedPos = to;
            return new Tree(NodeType.none, [], [], to - from);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
        return parser2;
      }
    }();
  }
  /**
  @internal
  */
  isDone(upto) {
    upto = Math.min(upto, this.state.doc.length);
    let frags = this.fragments;
    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return currentContext;
  }
};
function cutFragments(fragments, from, to) {
  return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
}
var LanguageState = class _LanguageState {
  constructor(context2) {
    this.context = context2;
    this.tree = context2.tree;
  }
  apply(tr) {
    if (!tr.docChanged && this.tree == this.context.tree)
      return this;
    let newCx = this.context.changes(tr.changes, tr.state);
    let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
    if (!newCx.work(20, upto))
      newCx.takeTree();
    return new _LanguageState(newCx);
  }
  static init(state) {
    let vpTo = Math.min(3e3, state.doc.length);
    let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
    if (!parseState.work(20, vpTo))
      parseState.takeTree();
    return new _LanguageState(parseState);
  }
};
Language.state = /* @__PURE__ */ StateField.define({
  create: LanguageState.init,
  update(value, tr) {
    for (let e of tr.effects)
      if (e.is(Language.setState))
        return e.value;
    if (tr.startState.facet(language) != tr.state.facet(language))
      return LanguageState.init(tr.state);
    return value.apply(tr);
  }
});
var requestIdle = (callback) => {
  let timeout2 = setTimeout(
    () => callback(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(timeout2);
};
if (typeof requestIdleCallback != "undefined")
  requestIdle = (callback) => {
    let idle = -1, timeout2 = setTimeout(
      () => {
        idle = requestIdleCallback(callback, {
          timeout: 500 - 100
          /* Work.MinPause */
        });
      },
      100
      /* Work.MinPause */
    );
    return () => idle < 0 ? clearTimeout(timeout2) : cancelIdleCallback(idle);
  };
var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
var parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
  constructor(view2) {
    this.view = view2;
    this.working = null;
    this.workScheduled = 0;
    this.chunkEnd = -1;
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  update(update3) {
    let cx = this.view.state.field(Language.state).context;
    if (cx.updateViewport(update3.view.viewport) || this.view.viewport.to > cx.treeLen)
      this.scheduleWork();
    if (update3.docChanged || update3.selectionSet) {
      if (this.view.hasFocus)
        this.chunkBudget += 50;
      this.scheduleWork();
    }
    this.checkAsyncSchedule(cx);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state } = this.view, field = state.field(Language.state);
    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
      this.working = requestIdle(this.work);
  }
  work(deadline) {
    this.working = null;
    let now3 = Date.now();
    if (this.chunkEnd < now3 && (this.chunkEnd < 0 || this.view.hasFocus)) {
      this.chunkEnd = now3 + 3e4;
      this.chunkBudget = 3e3;
    }
    if (this.chunkBudget <= 0)
      return;
    let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
    if (field.tree == field.context.tree && field.context.isDone(
      vpTo + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
    let done = field.context.work(() => {
      return isInputPending && isInputPending() || Date.now() > endTime;
    }, vpTo + (viewportFirst ? 0 : 1e5));
    this.chunkBudget -= Date.now() - now3;
    if (done || this.chunkBudget <= 0) {
      field.context.takeTree();
      this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
    }
    if (this.chunkBudget > 0 && !(done && !viewportFirst))
      this.scheduleWork();
    this.checkAsyncSchedule(field.context);
  }
  checkAsyncSchedule(cx) {
    if (cx.scheduleOn) {
      this.workScheduled++;
      cx.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
      cx.scheduleOn = null;
    }
  }
  destroy() {
    if (this.working)
      this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
});
var language = /* @__PURE__ */ Facet.define({
  combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: (language2) => [
    Language.state,
    parseWorker,
    EditorView.contentAttributes.compute([language2], (state) => {
      let lang = state.facet(language2);
      return lang && lang.name ? { "data-language": lang.name } : {};
    })
  ]
});
var LanguageSupport = class {
  /**
  Create a language support object.
  */
  constructor(language2, support = []) {
    this.language = language2;
    this.support = support;
    this.extension = [language2, support];
  }
};
var indentService = /* @__PURE__ */ Facet.define();
var indentUnit = /* @__PURE__ */ Facet.define({
  combine: (values2) => {
    if (!values2.length)
      return "  ";
    let unit2 = values2[0];
    if (!unit2 || /\S/.test(unit2) || Array.from(unit2).some((e) => e != unit2[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(values2[0]));
    return unit2;
  }
});
function getIndentUnit(state) {
  let unit2 = state.facet(indentUnit);
  return unit2.charCodeAt(0) == 9 ? state.tabSize * unit2.length : unit2.length;
}
function indentString(state, cols) {
  let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
  if (ch == "	") {
    while (cols >= ts) {
      result += "	";
      cols -= ts;
    }
    ch = " ";
  }
  for (let i = 0; i < cols; i++)
    result += ch;
  return result;
}
function getIndentation(context2, pos) {
  if (context2 instanceof EditorState)
    context2 = new IndentContext(context2);
  for (let service of context2.state.facet(indentService)) {
    let result = service(context2, pos);
    if (result !== void 0)
      return result;
  }
  let tree = syntaxTree(context2.state);
  return tree.length >= pos ? syntaxIndentation(context2, tree, pos) : null;
}
var IndentContext = class {
  /**
  Create an indent context.
  */
  constructor(state, options = {}) {
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(pos, bias = 1) {
    let line2 = this.state.doc.lineAt(pos);
    let { simulateBreak, simulateDoubleBreak } = this.options;
    if (simulateBreak != null && simulateBreak >= line2.from && simulateBreak <= line2.to) {
      if (simulateDoubleBreak && simulateBreak == pos)
        return { text: "", from: pos };
      else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
        return { text: line2.text.slice(simulateBreak - line2.from), from: simulateBreak };
      else
        return { text: line2.text.slice(0, simulateBreak - line2.from), from: line2.from };
    }
    return line2;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(pos, bias = 1) {
    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
      return "";
    let { text, from } = this.lineAt(pos, bias);
    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
  }
  /**
  Find the column for the given position.
  */
  column(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let result = this.countColumn(text, pos - from);
    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
    if (override > -1)
      result += override - this.countColumn(text, text.search(/\S|$/));
    return result;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(line2, pos = line2.length) {
    return countColumn(line2, this.state.tabSize, pos);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let override = this.options.overrideIndentation;
    if (override) {
      let overriden = override(from);
      if (overriden > -1)
        return overriden;
    }
    return this.countColumn(text, text.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
};
var indentNodeProp = /* @__PURE__ */ new NodeProp();
function syntaxIndentation(cx, ast, pos) {
  let stack = ast.resolveStack(pos);
  let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
  if (inner != stack.node) {
    let add = [];
    for (let cur = inner; cur && !(cur.from < stack.node.from || cur.to > stack.node.to || cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent)
      add.push(cur);
    for (let i = add.length - 1; i >= 0; i--)
      stack = { node: add[i], next: stack };
  }
  return indentFor(stack, cx, pos);
}
function indentFor(stack, cx, pos) {
  for (let cur = stack; cur; cur = cur.next) {
    let strategy = indentStrategy(cur.node);
    if (strategy)
      return strategy(TreeIndentContext.create(cx, pos, cur));
  }
  return 0;
}
function ignoreClosed(cx) {
  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  let strategy = tree.type.prop(indentNodeProp);
  if (strategy)
    return strategy;
  let first = tree.firstChild, close2;
  if (first && (close2 = first.type.prop(NodeProp.closedBy))) {
    let last2 = tree.lastChild, closed = last2 && close2.indexOf(last2.name) > -1;
    return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last2.from : void 0);
  }
  return tree.parent == null ? topIndent : null;
}
function topIndent() {
  return 0;
}
var TreeIndentContext = class _TreeIndentContext extends IndentContext {
  constructor(base2, pos, context2) {
    super(base2.state, base2.options);
    this.base = base2;
    this.pos = pos;
    this.context = context2;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(base2, pos, context2) {
    return new _TreeIndentContext(base2, pos, context2);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(node) {
    let line2 = this.state.doc.lineAt(node.from);
    for (; ; ) {
      let atBreak = node.resolve(line2.from);
      while (atBreak.parent && atBreak.parent.from == atBreak.from)
        atBreak = atBreak.parent;
      if (isParent(atBreak, node))
        break;
      line2 = this.state.doc.lineAt(atBreak.from);
    }
    return this.lineIndent(line2.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return indentFor(this.context.next, this.base, this.pos);
  }
};
function isParent(parent, of) {
  for (let cur = of; cur; cur = cur.parent)
    if (parent == cur)
      return true;
  return false;
}
function bracketedAligned(context2) {
  let tree = context2.node;
  let openToken = tree.childAfter(tree.from), last2 = tree.lastChild;
  if (!openToken)
    return null;
  let sim = context2.options.simulateBreak;
  let openLine = context2.state.doc.lineAt(openToken.from);
  let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (let pos = openToken.to; ; ) {
    let next = tree.childAfter(pos);
    if (!next || next == last2)
      return null;
    if (!next.type.isSkipped) {
      if (next.from >= lineEnd)
        return null;
      let space2 = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
      return { from: openToken.from, to: openToken.to + space2 };
    }
    pos = next.to;
  }
}
function delimitedIndent({ closing, align: align2 = true, units = 1 }) {
  return (context2) => delimitedStrategy(context2, align2, units, closing);
}
function delimitedStrategy(context2, align2, units, closing, closedAt) {
  let after = context2.textAfter, space2 = after.match(/^\s*/)[0].length;
  let closed = closing && after.slice(space2, space2 + closing.length) == closing || closedAt == context2.pos + space2;
  let aligned = align2 ? bracketedAligned(context2) : null;
  if (aligned)
    return closed ? context2.column(aligned.from) : context2.column(aligned.to);
  return context2.baseIndent + (closed ? 0 : context2.unit * units);
}
var foldNodeProp = /* @__PURE__ */ new NodeProp();
function foldInside(node) {
  let first = node.firstChild, last2 = node.lastChild;
  return first && first.to < last2.from ? { from: first.to, to: last2.type.isError ? node.to : last2.from } : null;
}
var HighlightStyle = class _HighlightStyle {
  constructor(specs, options) {
    this.specs = specs;
    let modSpec;
    function def(spec) {
      let cls = StyleModule.newName();
      (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
      return cls;
    }
    const all5 = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
    const scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? (type2) => type2.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type2) => type2 == scopeOpt : void 0;
    this.style = tagHighlighter(specs.map((style) => ({
      tag: style.tag,
      class: style.class || def(Object.assign({}, style, { tag: null }))
    })), {
      all: all5
    }).style;
    this.module = modSpec ? new StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(specs, options) {
    return new _HighlightStyle(specs, options || {});
  }
};
var highlighterFacet = /* @__PURE__ */ Facet.define();
var fallbackHighlighter = /* @__PURE__ */ Facet.define({
  combine(values2) {
    return values2.length ? [values2[0]] : null;
  }
});
function getHighlighters(state) {
  let main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
function syntaxHighlighting(highlighter, options) {
  let ext = [treeHighlighter], themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module)
      ext.push(EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback)
    ext.push(fallbackHighlighter.of(highlighter));
  else if (themeType)
    ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));
  else
    ext.push(highlighterFacet.of(highlighter));
  return ext;
}
var TreeHighlighter = class {
  constructor(view2) {
    this.markCache = /* @__PURE__ */ Object.create(null);
    this.tree = syntaxTree(view2.state);
    this.decorations = this.buildDeco(view2, getHighlighters(view2.state));
    this.decoratedTo = view2.viewport.to;
  }
  update(update3) {
    let tree = syntaxTree(update3.state), highlighters = getHighlighters(update3.state);
    let styleChange = highlighters != getHighlighters(update3.startState);
    let { viewport } = update3.view, decoratedToMapped = update3.changes.mapPos(this.decoratedTo, 1);
    if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
      this.decorations = this.decorations.map(update3.changes);
      this.decoratedTo = decoratedToMapped;
    } else if (tree != this.tree || update3.viewportChanged || styleChange) {
      this.tree = tree;
      this.decorations = this.buildDeco(update3.view, highlighters);
      this.decoratedTo = viewport.to;
    }
  }
  buildDeco(view2, highlighters) {
    if (!highlighters || !this.tree.length)
      return Decoration.none;
    let builder = new RangeSetBuilder();
    for (let { from, to } of view2.visibleRanges) {
      highlightTree(this.tree, highlighters, (from2, to2, style) => {
        builder.add(from2, to2, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
      }, from, to);
    }
    return builder.finish();
  }
};
var treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
  decorations: (v) => v.decorations
}));
var defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
  {
    tag: tags.meta,
    color: "#404740"
  },
  {
    tag: tags.link,
    textDecoration: "underline"
  },
  {
    tag: tags.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: tags.emphasis,
    fontStyle: "italic"
  },
  {
    tag: tags.strong,
    fontWeight: "bold"
  },
  {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: tags.keyword,
    color: "#708"
  },
  {
    tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
    color: "#219"
  },
  {
    tag: [tags.literal, tags.inserted],
    color: "#164"
  },
  {
    tag: [tags.string, tags.deleted],
    color: "#a11"
  },
  {
    tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ tags.definition(tags.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ tags.local(tags.variableName),
    color: "#30a"
  },
  {
    tag: [tags.typeName, tags.namespace],
    color: "#085"
  },
  {
    tag: tags.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ tags.definition(tags.propertyName),
    color: "#00c"
  },
  {
    tag: tags.comment,
    color: "#940"
  },
  {
    tag: tags.invalid,
    color: "#f00"
  }
]);
var DefaultScanDist = 1e4;
var DefaultBrackets = "()[]{}";
var bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
function matchingNodes(node, dir, brackets2) {
  let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
  if (byProp)
    return byProp;
  if (node.name.length == 1) {
    let index2 = brackets2.indexOf(node.name);
    if (index2 > -1 && index2 % 2 == (dir < 0 ? 1 : 0))
      return [brackets2[index2 + dir]];
  }
  return null;
}
function findHandle(node) {
  let hasHandle = node.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node.node) : node;
}
function matchBrackets(state, pos, dir, config = {}) {
  let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets2 = config.brackets || DefaultBrackets;
  let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
  for (let cur = node; cur; cur = cur.parent) {
    let matches = matchingNodes(cur.type, dir, brackets2);
    if (matches && cur.from < cur.to) {
      let handle = findHandle(cur);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
        return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets2);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets2);
}
function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets2) {
  let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
  let depth = 0, cursor2 = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor2 && (dir < 0 ? cursor2.childBefore(token.from) : cursor2.childAfter(token.to)))
    do {
      if (dir < 0 ? cursor2.to <= token.from : cursor2.from >= token.to) {
        if (depth == 0 && matching.indexOf(cursor2.type.name) > -1 && cursor2.from < cursor2.to) {
          let endHandle = findHandle(cursor2);
          return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
        } else if (matchingNodes(cursor2.type, dir, brackets2)) {
          depth++;
        } else if (matchingNodes(cursor2.type, -dir, brackets2)) {
          if (depth == 0) {
            let endHandle = findHandle(cursor2);
            return {
              start: firstToken,
              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
              matched: false
            };
          }
          depth--;
        }
      }
    } while (dir < 0 ? cursor2.prevSibling() : cursor2.nextSibling());
  return { start: firstToken, matched: false };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets2) {
  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  let bracket2 = brackets2.indexOf(startCh);
  if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
    return null;
  let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
  let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
  for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
    let text = iter.value;
    if (dir < 0)
      distance += text.length;
    let basePos = pos + distance * dir;
    for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
      let found = brackets2.indexOf(text[pos2]);
      if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
        continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
      } else {
        depth--;
      }
    }
    if (dir > 0)
      distance += text.length;
  }
  return iter.done ? { start: startToken, matched: false } : null;
}
var noTokens = /* @__PURE__ */ Object.create(null);
var typeArray = [NodeType.none];
var warned = [];
var byTag = /* @__PURE__ */ Object.create(null);
var defaultTable = /* @__PURE__ */ Object.create(null);
for (let [legacyName, name3] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name3);
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1)
    return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  let tags$1 = [];
  for (let name4 of tagStr.split(" ")) {
    let found = [];
    for (let part of name4.split(".")) {
      let value = extra[part] || tags[part];
      if (!value) {
        warnForPart(part, `Unknown highlighting tag ${part}`);
      } else if (typeof value == "function") {
        if (!found.length)
          warnForPart(part, `Modifier ${part} used at start of tag`);
        else
          found = found.map(value);
      } else {
        if (found.length)
          warnForPart(part, `Tag ${part} used as modifier`);
        else
          found = Array.isArray(value) ? value : [value];
      }
    }
    for (let tag of found)
      tags$1.push(tag);
  }
  if (!tags$1.length)
    return 0;
  let name3 = tagStr.replace(/ /g, "_"), key = name3 + " " + tags$1.map((t2) => t2.id);
  let known = byTag[key];
  if (known)
    return known.id;
  let type2 = byTag[key] = NodeType.define({
    id: typeArray.length,
    name: name3,
    props: [styleTags({ [name3]: tags$1 })]
  });
  typeArray.push(type2);
  return type2.id;
}
var marks = {
  rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
  ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
  auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
};

// node_modules/@codemirror/commands/dist/index.js
var toggleComment = (target) => {
  let { state } = target, line2 = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line2.from);
  return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
};
function command(f, option) {
  return ({ state, dispatch: dispatch3 }) => {
    if (state.readOnly)
      return false;
    let tr = f(option, state);
    if (!tr)
      return false;
    dispatch3(state.update(tr));
    return true;
  };
}
var toggleLineComment = /* @__PURE__ */ command(
  changeLineComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockComment = /* @__PURE__ */ command(
  changeBlockComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockCommentByLine = /* @__PURE__ */ command(
  (o, s) => changeBlockComment(o, s, selectedLineRanges(s)),
  0
  /* CommentOption.Toggle */
);
function getConfig(state, pos) {
  let data = state.languageDataAt("commentTokens", pos, 1);
  return data.length ? data[0] : {};
}
var SearchMargin = 50;
function findBlockComment(state, { open, close: close2 }, from, to) {
  let textBefore = state.sliceDoc(from - SearchMargin, from);
  let textAfter = state.sliceDoc(to, to + SearchMargin);
  let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
  let beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close2.length) == close2) {
    return {
      open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
      close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
    };
  }
  let startText, endText;
  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }
  let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
  let endOff = endText.length - endSpace - close2.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close2.length) == close2) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close2.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  let ranges = [];
  for (let r of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r.from);
    let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
    if (toLine.from > fromLine.from && toLine.from == r.to)
      toLine = r.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r.to - 1);
    let last2 = ranges.length - 1;
    if (last2 >= 0 && ranges[last2].to > fromLine.from)
      ranges[last2].to = toLine.to;
    else
      ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
  }
  return ranges;
}
function changeBlockComment(option, state, ranges = state.selection.ranges) {
  let tokens = ranges.map((r) => getConfig(state, r.from).block);
  if (!tokens.every((c) => c))
    return null;
  let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
  if (option != 2 && !comments.every((c) => c)) {
    return { changes: state.changes(ranges.map((range3, i) => {
      if (comments[i])
        return [];
      return [{ from: range3.from, insert: tokens[i].open + " " }, { from: range3.to, insert: " " + tokens[i].close }];
    })) };
  } else if (option != 1 && comments.some((c) => c)) {
    let changes = [];
    for (let i = 0, comment2; i < comments.length; i++)
      if (comment2 = comments[i]) {
        let token = tokens[i], { open, close: close2 } = comment2;
        changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close2.pos - close2.margin, to: close2.pos + token.close.length });
      }
    return { changes };
  }
  return null;
}
function changeLineComment(option, state, ranges = state.selection.ranges) {
  let lines = [];
  let prevLine = -1;
  for (let { from, to } of ranges) {
    let startI = lines.length, minIndent = 1e9;
    let token = getConfig(state, from).line;
    if (!token)
      continue;
    for (let pos = from; pos <= to; ) {
      let line2 = state.doc.lineAt(pos);
      if (line2.from > prevLine && (from == to || to > line2.from)) {
        prevLine = line2.from;
        let indent2 = /^\s*/.exec(line2.text)[0].length;
        let empty3 = indent2 == line2.length;
        let comment2 = line2.text.slice(indent2, indent2 + token.length) == token ? indent2 : -1;
        if (indent2 < line2.text.length && indent2 < minIndent)
          minIndent = indent2;
        lines.push({ line: line2, comment: comment2, token, indent: indent2, empty: empty3, single: false });
      }
      pos = line2.to + 1;
    }
    if (minIndent < 1e9) {
      for (let i = startI; i < lines.length; i++)
        if (lines[i].indent < lines[i].line.text.length)
          lines[i].indent = minIndent;
    }
    if (lines.length == startI + 1)
      lines[startI].single = true;
  }
  if (option != 2 && lines.some((l) => l.comment < 0 && (!l.empty || l.single))) {
    let changes = [];
    for (let { line: line2, token, indent: indent2, empty: empty3, single } of lines)
      if (single || !empty3)
        changes.push({ from: line2.from + indent2, insert: token + " " });
    let changeSet = state.changes(changes);
    return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
  } else if (option != 1 && lines.some((l) => l.comment >= 0)) {
    let changes = [];
    for (let { line: line2, comment: comment2, token } of lines)
      if (comment2 >= 0) {
        let from = line2.from + comment2, to = from + token.length;
        if (line2.text[to - line2.from] == " ")
          to++;
        changes.push({ from, to });
      }
    return { changes };
  }
  return null;
}
var fromHistory = /* @__PURE__ */ Annotation.define();
var invertedEffects = /* @__PURE__ */ Facet.define();
var HistEvent = class _HistEvent {
  constructor(changes, effects, mapped, startSelection, selectionsAfter) {
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  setSelAfter(after) {
    return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
  }
  toJSON() {
    var _a2, _b, _c;
    return {
      changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
      mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
      startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s) => s.toJSON())
    };
  }
  static fromJSON(json) {
    return new _HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(tr, selection3) {
    let effects = none3;
    for (let invert of tr.startState.facet(invertedEffects)) {
      let result = invert(tr);
      if (result.length)
        effects = effects.concat(result);
    }
    if (!effects.length && tr.changes.empty)
      return null;
    return new _HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection3 || tr.startState.selection, none3);
  }
  static selection(selections) {
    return new _HistEvent(void 0, none3, void 0, void 0, selections);
  }
};
function updateBranch(branch, to, maxLen, newEvent) {
  let start2 = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  let newBranch = branch.slice(start2, to);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a, b) {
  let ranges = [], isAdjacent2 = false;
  a.iterChangedRanges((f, t2) => ranges.push(f, t2));
  b.iterChangedRanges((_f, _t, f, t2) => {
    for (let i = 0; i < ranges.length; ) {
      let from = ranges[i++], to = ranges[i++];
      if (t2 >= from && f <= to)
        isAdjacent2 = true;
    }
  });
  return isAdjacent2;
}
function eqSelectionShape(a, b) {
  return a.ranges.length == b.ranges.length && a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
}
function conc(a, b) {
  return !a.length ? b : !b.length ? a : a.concat(b);
}
var none3 = [];
var MaxSelectionsPerEvent = 200;
function addSelection(branch, selection3) {
  if (!branch.length) {
    return [HistEvent.selection([selection3])];
  } else {
    let lastEvent = branch[branch.length - 1];
    let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection3))
      return branch;
    sels.push(selection3);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
function popSelection(branch) {
  let last2 = branch[branch.length - 1];
  let newBranch = branch.slice();
  newBranch[branch.length - 1] = last2.setSelAfter(last2.selectionsAfter.slice(0, last2.selectionsAfter.length - 1));
  return newBranch;
}
function addMappingToBranch(branch, mapping) {
  if (!branch.length)
    return branch;
  let length6 = branch.length, selections = none3;
  while (length6) {
    let event = mapEvent(branch[length6 - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      let result = branch.slice(0, length6);
      result[length6 - 1] = event;
      return result;
    } else {
      mapping = event.mapped;
      length6--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none3;
}
function mapEvent(event, mapping, extraSelections) {
  let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s) => s.map(mapping)) : none3, extraSelections);
  if (!event.changes)
    return HistEvent.selection(selections);
  let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/;
var HistoryState = class _HistoryState {
  constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  isolate() {
    return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
  }
  addChanges(event, time2, userEvent, config, tr) {
    let done = this.done, lastEvent = done[done.length - 1];
    if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time2 - this.prevTime < config.newGroupDelay && config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
    userEvent == "input.type.compose")) {
      done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none3));
    } else {
      done = updateBranch(done, done.length, config.minDepth, event);
    }
    return new _HistoryState(done, none3, time2, userEvent);
  }
  addSelection(selection3, time2, userEvent, newGroupDelay) {
    let last2 = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none3;
    if (last2.length > 0 && time2 - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last2[last2.length - 1], selection3))
      return this;
    return new _HistoryState(addSelection(this.done, selection3), this.undone, time2, userEvent);
  }
  addMapping(mapping) {
    return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
  }
  pop(side, state, onlySelection) {
    let branch = side == 0 ? this.done : this.undone;
    if (branch.length == 0)
      return null;
    let event = branch[branch.length - 1], selection3 = event.selectionsAfter[0] || state.selection;
    if (onlySelection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({ side, rest: popSelection(branch), selection: selection3 }),
        userEvent: side == 0 ? "select.undo" : "select.redo",
        scrollIntoView: true
      });
    } else if (!event.changes) {
      return null;
    } else {
      let rest = branch.length == 1 ? none3 : branch.slice(0, branch.length - 1);
      if (event.mapped)
        rest = addMappingToBranch(rest, event.mapped);
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({ side, rest, selection: selection3 }),
        filter: false,
        userEvent: side == 0 ? "undo" : "redo",
        scrollIntoView: true
      });
    }
  }
};
HistoryState.empty = /* @__PURE__ */ new HistoryState(none3, none3);
function updateSel(sel, by) {
  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection3) {
  return state.update({ selection: selection3, scrollIntoView: true, userEvent: "select" });
}
function moveSel({ state, dispatch: dispatch3 }, how) {
  let selection3 = updateSel(state.selection, how);
  if (selection3.eq(state.selection, true))
    return false;
  dispatch3(setSel(state, selection3));
  return true;
}
function rangeEnd(range3, forward) {
  return EditorSelection.cursor(forward ? range3.to : range3.from);
}
function cursorByChar(view2, forward) {
  return moveSel(view2, (range3) => range3.empty ? view2.moveByChar(range3, forward) : rangeEnd(range3, forward));
}
function ltrAtCursor(view2) {
  return view2.textDirectionAt(view2.state.selection.main.head) == Direction.LTR;
}
var cursorCharLeft = (view2) => cursorByChar(view2, !ltrAtCursor(view2));
var cursorCharRight = (view2) => cursorByChar(view2, ltrAtCursor(view2));
function cursorByGroup(view2, forward) {
  return moveSel(view2, (range3) => range3.empty ? view2.moveByGroup(range3, forward) : rangeEnd(range3, forward));
}
var cursorGroupLeft = (view2) => cursorByGroup(view2, !ltrAtCursor(view2));
var cursorGroupRight = (view2) => cursorByGroup(view2, ltrAtCursor(view2));
var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? /* @__PURE__ */ new Intl.Segmenter(void 0, { granularity: "word" }) : null;
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp))
    return true;
  let len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start2, forward) {
  let pos = syntaxTree(state).resolveInner(start2.head);
  let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
  for (let at = start2.head; ; ) {
    let next = forward ? pos.childAfter(at) : pos.childBefore(at);
    if (!next)
      break;
    if (interestingNode(state, next, bracketProp))
      pos = next;
    else
      at = forward ? next.to : next.from;
  }
  let bracket2 = pos.type.prop(bracketProp), match3, newPos;
  if (bracket2 && (match3 = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match3.matched)
    newPos = forward ? match3.end.to : match3.end.from;
  else
    newPos = forward ? pos.to : pos.from;
  return EditorSelection.cursor(newPos, forward ? -1 : 1);
}
var cursorSyntaxLeft = (view2) => moveSel(view2, (range3) => moveBySyntax(view2.state, range3, !ltrAtCursor(view2)));
var cursorSyntaxRight = (view2) => moveSel(view2, (range3) => moveBySyntax(view2.state, range3, ltrAtCursor(view2)));
function cursorByLine(view2, forward) {
  return moveSel(view2, (range3) => {
    if (!range3.empty)
      return rangeEnd(range3, forward);
    let moved = view2.moveVertically(range3, forward);
    return moved.head != range3.head ? moved : view2.moveToLineBoundary(range3, forward);
  });
}
var cursorLineUp = (view2) => cursorByLine(view2, false);
var cursorLineDown = (view2) => cursorByLine(view2, true);
function pageInfo(view2) {
  let selfScroll = view2.scrollDOM.clientHeight < view2.scrollDOM.scrollHeight - 2;
  let marginTop = 0, marginBottom = 0, height;
  if (selfScroll) {
    for (let source2 of view2.state.facet(EditorView.scrollMargins)) {
      let margins = source2(view2);
      if (margins === null || margins === void 0 ? void 0 : margins.top)
        marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
      if (margins === null || margins === void 0 ? void 0 : margins.bottom)
        marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
    }
    height = view2.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view2.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop,
    marginBottom,
    selfScroll,
    height: Math.max(view2.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view2, forward) {
  let page = pageInfo(view2);
  let { state } = view2, selection3 = updateSel(state.selection, (range3) => {
    return range3.empty ? view2.moveVertically(range3, forward, page.height) : rangeEnd(range3, forward);
  });
  if (selection3.eq(state.selection))
    return false;
  let effect;
  if (page.selfScroll) {
    let startPos = view2.coordsAtPos(state.selection.main.head);
    let scrollRect = view2.scrollDOM.getBoundingClientRect();
    let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
      effect = EditorView.scrollIntoView(selection3.main.head, { y: "start", yMargin: startPos.top - scrollTop });
  }
  view2.dispatch(setSel(state, selection3), { effects: effect });
  return true;
}
var cursorPageUp = (view2) => cursorByPage(view2, false);
var cursorPageDown = (view2) => cursorByPage(view2, true);
function moveByLineBoundary(view2, start2, forward) {
  let line2 = view2.lineBlockAt(start2.head), moved = view2.moveToLineBoundary(start2, forward);
  if (moved.head == start2.head && moved.head != (forward ? line2.to : line2.from))
    moved = view2.moveToLineBoundary(start2, forward, false);
  if (!forward && moved.head == line2.from && line2.length) {
    let space2 = /^\s*/.exec(view2.state.sliceDoc(line2.from, Math.min(line2.from + 100, line2.to)))[0].length;
    if (space2 && start2.head != line2.from + space2)
      moved = EditorSelection.cursor(line2.from + space2);
  }
  return moved;
}
var cursorLineBoundaryForward = (view2) => moveSel(view2, (range3) => moveByLineBoundary(view2, range3, true));
var cursorLineBoundaryBackward = (view2) => moveSel(view2, (range3) => moveByLineBoundary(view2, range3, false));
var cursorLineBoundaryLeft = (view2) => moveSel(view2, (range3) => moveByLineBoundary(view2, range3, !ltrAtCursor(view2)));
var cursorLineBoundaryRight = (view2) => moveSel(view2, (range3) => moveByLineBoundary(view2, range3, ltrAtCursor(view2)));
var cursorLineStart = (view2) => moveSel(view2, (range3) => EditorSelection.cursor(view2.lineBlockAt(range3.head).from, 1));
var cursorLineEnd = (view2) => moveSel(view2, (range3) => EditorSelection.cursor(view2.lineBlockAt(range3.head).to, -1));
function toMatchingBracket(state, dispatch3, extend3) {
  let found = false, selection3 = updateSel(state.selection, (range3) => {
    let matching = matchBrackets(state, range3.head, -1) || matchBrackets(state, range3.head, 1) || range3.head > 0 && matchBrackets(state, range3.head - 1, 1) || range3.head < state.doc.length && matchBrackets(state, range3.head + 1, -1);
    if (!matching || !matching.end)
      return range3;
    found = true;
    let head = matching.start.from == range3.head ? matching.end.to : matching.end.from;
    return extend3 ? EditorSelection.range(range3.anchor, head) : EditorSelection.cursor(head);
  });
  if (!found)
    return false;
  dispatch3(setSel(state, selection3));
  return true;
}
var cursorMatchingBracket = ({ state, dispatch: dispatch3 }) => toMatchingBracket(state, dispatch3, false);
function extendSel(target, how) {
  let selection3 = updateSel(target.state.selection, (range3) => {
    let head = how(range3);
    return EditorSelection.range(range3.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
  });
  if (selection3.eq(target.state.selection))
    return false;
  target.dispatch(setSel(target.state, selection3));
  return true;
}
function selectByChar(view2, forward) {
  return extendSel(view2, (range3) => view2.moveByChar(range3, forward));
}
var selectCharLeft = (view2) => selectByChar(view2, !ltrAtCursor(view2));
var selectCharRight = (view2) => selectByChar(view2, ltrAtCursor(view2));
function selectByGroup(view2, forward) {
  return extendSel(view2, (range3) => view2.moveByGroup(range3, forward));
}
var selectGroupLeft = (view2) => selectByGroup(view2, !ltrAtCursor(view2));
var selectGroupRight = (view2) => selectByGroup(view2, ltrAtCursor(view2));
var selectSyntaxLeft = (view2) => extendSel(view2, (range3) => moveBySyntax(view2.state, range3, !ltrAtCursor(view2)));
var selectSyntaxRight = (view2) => extendSel(view2, (range3) => moveBySyntax(view2.state, range3, ltrAtCursor(view2)));
function selectByLine(view2, forward) {
  return extendSel(view2, (range3) => view2.moveVertically(range3, forward));
}
var selectLineUp = (view2) => selectByLine(view2, false);
var selectLineDown = (view2) => selectByLine(view2, true);
function selectByPage(view2, forward) {
  return extendSel(view2, (range3) => view2.moveVertically(range3, forward, pageInfo(view2).height));
}
var selectPageUp = (view2) => selectByPage(view2, false);
var selectPageDown = (view2) => selectByPage(view2, true);
var selectLineBoundaryForward = (view2) => extendSel(view2, (range3) => moveByLineBoundary(view2, range3, true));
var selectLineBoundaryBackward = (view2) => extendSel(view2, (range3) => moveByLineBoundary(view2, range3, false));
var selectLineBoundaryLeft = (view2) => extendSel(view2, (range3) => moveByLineBoundary(view2, range3, !ltrAtCursor(view2)));
var selectLineBoundaryRight = (view2) => extendSel(view2, (range3) => moveByLineBoundary(view2, range3, ltrAtCursor(view2)));
var selectLineStart = (view2) => extendSel(view2, (range3) => EditorSelection.cursor(view2.lineBlockAt(range3.head).from));
var selectLineEnd = (view2) => extendSel(view2, (range3) => EditorSelection.cursor(view2.lineBlockAt(range3.head).to));
var cursorDocStart = ({ state, dispatch: dispatch3 }) => {
  dispatch3(setSel(state, { anchor: 0 }));
  return true;
};
var cursorDocEnd = ({ state, dispatch: dispatch3 }) => {
  dispatch3(setSel(state, { anchor: state.doc.length }));
  return true;
};
var selectDocStart = ({ state, dispatch: dispatch3 }) => {
  dispatch3(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
  return true;
};
var selectDocEnd = ({ state, dispatch: dispatch3 }) => {
  dispatch3(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
  return true;
};
var selectAll = ({ state, dispatch: dispatch3 }) => {
  dispatch3(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
  return true;
};
var selectLine = ({ state, dispatch: dispatch3 }) => {
  let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
  dispatch3(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
  return true;
};
var selectParentSyntax = ({ state, dispatch: dispatch3 }) => {
  let selection3 = updateSel(state.selection, (range3) => {
    let tree = syntaxTree(state), stack = tree.resolveStack(range3.from, 1);
    if (range3.empty) {
      let stackBefore = tree.resolveStack(range3.from, -1);
      if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
        stack = stackBefore;
    }
    for (let cur = stack; cur; cur = cur.next) {
      let { node } = cur;
      if ((node.from < range3.from && node.to >= range3.to || node.to > range3.to && node.from <= range3.from) && cur.next)
        return EditorSelection.range(node.to, node.from);
    }
    return range3;
  });
  if (selection3.eq(state.selection))
    return false;
  dispatch3(setSel(state, selection3));
  return true;
};
var simplifySelection = ({ state, dispatch: dispatch3 }) => {
  let cur = state.selection, selection3 = null;
  if (cur.ranges.length > 1)
    selection3 = EditorSelection.create([cur.main]);
  else if (!cur.main.empty)
    selection3 = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
  if (!selection3)
    return false;
  dispatch3(setSel(state, selection3));
  return true;
};
function deleteBy(target, by) {
  if (target.state.readOnly)
    return false;
  let event = "delete.selection", { state } = target;
  let changes = state.changeByRange((range3) => {
    let { from, to } = range3;
    if (from == to) {
      let towards = by(range3);
      if (towards < from) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from = Math.min(from, towards);
      to = Math.max(to, towards);
    } else {
      from = skipAtomic(target, from, false);
      to = skipAtomic(target, to, true);
    }
    return from == to ? { range: range3 } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range3.head ? -1 : 1) };
  });
  if (changes.changes.empty)
    return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView)
    for (let ranges of target.state.facet(EditorView.atomicRanges).map((f) => f(target)))
      ranges.between(pos, pos, (from, to) => {
        if (from < pos && to > pos)
          pos = forward ? to : from;
      });
  return pos;
}
var deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range3) => {
  let pos = range3.from, { state } = target, line2 = state.doc.lineAt(pos), before, targetPos;
  if (byIndentUnit && !forward && pos > line2.from && pos < line2.from + 200 && !/[^ \t]/.test(before = line2.text.slice(0, pos - line2.from))) {
    if (before[before.length - 1] == "	")
      return pos - 1;
    let col = countColumn(before, state.tabSize), drop3 = col % getIndentUnit(state) || getIndentUnit(state);
    for (let i = 0; i < drop3 && before[before.length - 1 - i] == " "; i++)
      pos--;
    targetPos = pos;
  } else {
    targetPos = findClusterBreak2(line2.text, pos - line2.from, forward, forward) + line2.from;
    if (targetPos == pos && line2.number != (forward ? state.doc.lines : 1))
      targetPos += forward ? 1 : -1;
    else if (!forward && /[\ufe00-\ufe0f]/.test(line2.text.slice(targetPos - line2.from, pos - line2.from)))
      targetPos = findClusterBreak2(line2.text, targetPos - line2.from, false, false) + line2.from;
  }
  return targetPos;
});
var deleteCharBackward = (view2) => deleteByChar(view2, false, true);
var deleteCharForward = (view2) => deleteByChar(view2, true, false);
var deleteByGroup = (target, forward) => deleteBy(target, (range3) => {
  let pos = range3.head, { state } = target, line2 = state.doc.lineAt(pos);
  let categorize = state.charCategorizer(pos);
  for (let cat = null; ; ) {
    if (pos == (forward ? line2.to : line2.from)) {
      if (pos == range3.head && line2.number != (forward ? state.doc.lines : 1))
        pos += forward ? 1 : -1;
      break;
    }
    let next = findClusterBreak2(line2.text, pos - line2.from, forward) + line2.from;
    let nextChar = line2.text.slice(Math.min(pos, next) - line2.from, Math.max(pos, next) - line2.from);
    let nextCat = categorize(nextChar);
    if (cat != null && nextCat != cat)
      break;
    if (nextChar != " " || pos != range3.head)
      cat = nextCat;
    pos = next;
  }
  return pos;
});
var deleteGroupBackward = (target) => deleteByGroup(target, false);
var deleteGroupForward = (target) => deleteByGroup(target, true);
var deleteToLineEnd = (view2) => deleteBy(view2, (range3) => {
  let lineEnd = view2.lineBlockAt(range3.head).to;
  return range3.head < lineEnd ? lineEnd : Math.min(view2.state.doc.length, range3.head + 1);
});
var deleteLineBoundaryBackward = (view2) => deleteBy(view2, (range3) => {
  let lineStart = view2.moveToLineBoundary(range3, false).head;
  return range3.head > lineStart ? lineStart : Math.max(0, range3.head - 1);
});
var deleteLineBoundaryForward = (view2) => deleteBy(view2, (range3) => {
  let lineStart = view2.moveToLineBoundary(range3, true).head;
  return range3.head < lineStart ? lineStart : Math.min(view2.state.doc.length, range3.head + 1);
});
var splitLine = ({ state, dispatch: dispatch3 }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range3) => {
    return {
      changes: { from: range3.from, to: range3.to, insert: Text.of(["", ""]) },
      range: EditorSelection.cursor(range3.from)
    };
  });
  dispatch3(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
  return true;
};
var transposeChars = ({ state, dispatch: dispatch3 }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range3) => {
    if (!range3.empty || range3.from == 0 || range3.from == state.doc.length)
      return { range: range3 };
    let pos = range3.from, line2 = state.doc.lineAt(pos);
    let from = pos == line2.from ? pos - 1 : findClusterBreak2(line2.text, pos - line2.from, false) + line2.from;
    let to = pos == line2.to ? pos + 1 : findClusterBreak2(line2.text, pos - line2.from, true) + line2.from;
    return {
      changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
      range: EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty)
    return false;
  dispatch3(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
  return true;
};
function selectedLineBlocks(state) {
  let blocks = [], upto = -1;
  for (let range3 of state.selection.ranges) {
    let startLine = state.doc.lineAt(range3.from), endLine = state.doc.lineAt(range3.to);
    if (!range3.empty && range3.to == endLine.from)
      endLine = state.doc.lineAt(range3.to - 1);
    if (upto >= startLine.number) {
      let prev = blocks[blocks.length - 1];
      prev.to = endLine.to;
      prev.ranges.push(range3);
    } else {
      blocks.push({ from: startLine.from, to: endLine.to, ranges: [range3] });
    }
    upto = endLine.number + 1;
  }
  return blocks;
}
function moveLine(state, dispatch3, forward) {
  if (state.readOnly)
    return false;
  let changes = [], ranges = [];
  for (let block2 of selectedLineBlocks(state)) {
    if (forward ? block2.to == state.doc.length : block2.from == 0)
      continue;
    let nextLine = state.doc.lineAt(forward ? block2.to + 1 : block2.from - 1);
    let size3 = nextLine.length + 1;
    if (forward) {
      changes.push({ from: block2.to, to: nextLine.to }, { from: block2.from, insert: nextLine.text + state.lineBreak });
      for (let r of block2.ranges)
        ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size3), Math.min(state.doc.length, r.head + size3)));
    } else {
      changes.push({ from: nextLine.from, to: block2.from }, { from: block2.to, insert: state.lineBreak + nextLine.text });
      for (let r of block2.ranges)
        ranges.push(EditorSelection.range(r.anchor - size3, r.head - size3));
    }
  }
  if (!changes.length)
    return false;
  dispatch3(state.update({
    changes,
    scrollIntoView: true,
    selection: EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
var moveLineUp = ({ state, dispatch: dispatch3 }) => moveLine(state, dispatch3, false);
var moveLineDown = ({ state, dispatch: dispatch3 }) => moveLine(state, dispatch3, true);
function copyLine(state, dispatch3, forward) {
  if (state.readOnly)
    return false;
  let changes = [];
  for (let block2 of selectedLineBlocks(state)) {
    if (forward)
      changes.push({ from: block2.from, insert: state.doc.slice(block2.from, block2.to) + state.lineBreak });
    else
      changes.push({ from: block2.to, insert: state.lineBreak + state.doc.slice(block2.from, block2.to) });
  }
  dispatch3(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
  return true;
}
var copyLineUp = ({ state, dispatch: dispatch3 }) => copyLine(state, dispatch3, false);
var copyLineDown = ({ state, dispatch: dispatch3 }) => copyLine(state, dispatch3, true);
var deleteLine = (view2) => {
  if (view2.state.readOnly)
    return false;
  let { state } = view2, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
    if (from > 0)
      from--;
    else if (to < state.doc.length)
      to++;
    return { from, to };
  }));
  let selection3 = updateSel(state.selection, (range3) => {
    let dist2 = void 0;
    if (view2.lineWrapping) {
      let block2 = view2.lineBlockAt(range3.head), pos = view2.coordsAtPos(range3.head, range3.assoc || 1);
      if (pos)
        dist2 = block2.bottom + view2.documentTop - pos.bottom + view2.defaultLineHeight / 2;
    }
    return view2.moveVertically(range3, true, dist2);
  }).map(changes);
  view2.dispatch({ changes, selection: selection3, scrollIntoView: true, userEvent: "delete.line" });
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
    return { from: pos, to: pos };
  let context2 = syntaxTree(state).resolveInner(pos);
  let before = context2.childBefore(pos), after = context2.childAfter(pos), closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
    return { from: before.to, to: after.from };
  return null;
}
var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
function newlineAndIndent(atEof) {
  return ({ state, dispatch: dispatch3 }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range3) => {
      let { from, to } = range3, line2 = state.doc.lineAt(from);
      let explode = !atEof && from == to && isBetweenBrackets(state, from);
      if (atEof)
        from = to = (to <= line2.to ? line2 : state.doc.lineAt(to)).to;
      let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
      let indent2 = getIndentation(cx, from);
      if (indent2 == null)
        indent2 = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
      while (to < line2.to && /\s/.test(line2.text[to - line2.from]))
        to++;
      if (explode)
        ({ from, to } = explode);
      else if (from > line2.from && from < line2.from + 100 && !/\S/.test(line2.text.slice(0, from)))
        from = line2.from;
      let insert5 = ["", indentString(state, indent2)];
      if (explode)
        insert5.push(indentString(state, cx.lineIndent(line2.from, -1)));
      return {
        changes: { from, to, insert: Text.of(insert5) },
        range: EditorSelection.cursor(from + 1 + insert5[1].length)
      };
    });
    dispatch3(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
}
function changeBySelectedLine(state, f) {
  let atLine = -1;
  return state.changeByRange((range3) => {
    let changes = [];
    for (let pos = range3.from; pos <= range3.to; ) {
      let line2 = state.doc.lineAt(pos);
      if (line2.number > atLine && (range3.empty || range3.to > line2.from)) {
        f(line2, changes, range3);
        atLine = line2.number;
      }
      pos = line2.to + 1;
    }
    let changeSet = state.changes(changes);
    return {
      changes,
      range: EditorSelection.range(changeSet.mapPos(range3.anchor, 1), changeSet.mapPos(range3.head, 1))
    };
  });
}
var indentSelection = ({ state, dispatch: dispatch3 }) => {
  if (state.readOnly)
    return false;
  let updated = /* @__PURE__ */ Object.create(null);
  let context2 = new IndentContext(state, { overrideIndentation: (start2) => {
    let found = updated[start2];
    return found == null ? -1 : found;
  } });
  let changes = changeBySelectedLine(state, (line2, changes2, range3) => {
    let indent2 = getIndentation(context2, line2.from);
    if (indent2 == null)
      return;
    if (!/\S/.test(line2.text))
      indent2 = 0;
    let cur = /^\s*/.exec(line2.text)[0];
    let norm = indentString(state, indent2);
    if (cur != norm || range3.from < line2.from + cur.length) {
      updated[line2.from] = indent2;
      changes2.push({ from: line2.from, to: line2.from + cur.length, insert: norm });
    }
  });
  if (!changes.changes.empty)
    dispatch3(state.update(changes, { userEvent: "indent" }));
  return true;
};
var indentMore = ({ state, dispatch: dispatch3 }) => {
  if (state.readOnly)
    return false;
  dispatch3(state.update(changeBySelectedLine(state, (line2, changes) => {
    changes.push({ from: line2.from, insert: state.facet(indentUnit) });
  }), { userEvent: "input.indent" }));
  return true;
};
var indentLess = ({ state, dispatch: dispatch3 }) => {
  if (state.readOnly)
    return false;
  dispatch3(state.update(changeBySelectedLine(state, (line2, changes) => {
    let space2 = /^\s*/.exec(line2.text)[0];
    if (!space2)
      return;
    let col = countColumn(space2, state.tabSize), keep = 0;
    let insert5 = indentString(state, Math.max(0, col - getIndentUnit(state)));
    while (keep < space2.length && keep < insert5.length && space2.charCodeAt(keep) == insert5.charCodeAt(keep))
      keep++;
    changes.push({ from: line2.from + keep, to: line2.from + space2.length, insert: insert5.slice(keep) });
  }), { userEvent: "delete.dedent" }));
  return true;
};
var toggleTabFocusMode = (view2) => {
  view2.setTabFocusMode();
  return true;
};
var emacsStyleKeymap = [
  { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
  { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
  { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
  { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
  { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
  { key: "Ctrl-d", run: deleteCharForward },
  { key: "Ctrl-h", run: deleteCharBackward },
  { key: "Ctrl-k", run: deleteToLineEnd },
  { key: "Ctrl-Alt-h", run: deleteGroupBackward },
  { key: "Ctrl-o", run: splitLine },
  { key: "Ctrl-t", run: transposeChars },
  { key: "Ctrl-v", run: cursorPageDown }
];
var standardKeymap = /* @__PURE__ */ [
  { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
  { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
  { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
  { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
  { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
  { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
  { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
  { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
  { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
  { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
  { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
  { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
  { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
  { key: "Mod-a", run: selectAll },
  { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
  { key: "Delete", run: deleteCharForward },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
  { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
  { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
  { mac: "Mod-Delete", run: deleteLineBoundaryForward }
].concat(/* @__PURE__ */ emacsStyleKeymap.map((b) => ({ mac: b.key, run: b.run, shift: b.shift })));
var defaultKeymap = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
  { key: "Alt-ArrowUp", run: moveLineUp },
  { key: "Shift-Alt-ArrowUp", run: copyLineUp },
  { key: "Alt-ArrowDown", run: moveLineDown },
  { key: "Shift-Alt-ArrowDown", run: copyLineDown },
  { key: "Escape", run: simplifySelection },
  { key: "Mod-Enter", run: insertBlankLine },
  { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
  { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
  { key: "Mod-[", run: indentLess },
  { key: "Mod-]", run: indentMore },
  { key: "Mod-Alt-\\", run: indentSelection },
  { key: "Shift-Mod-k", run: deleteLine },
  { key: "Shift-Mod-\\", run: cursorMatchingBracket },
  { key: "Mod-/", run: toggleComment },
  { key: "Alt-A", run: toggleBlockComment },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode }
].concat(standardKeymap);

// node_modules/@lezer/lr/dist/index.js
var Stack = class _Stack {
  /**
  @internal
  */
  constructor(p, stack, state, reducePos, pos, score, buffer, bufferBase, curContext, lookAhead = 0, parent) {
    this.p = p;
    this.stack = stack;
    this.state = state;
    this.reducePos = reducePos;
    this.pos = pos;
    this.score = score;
    this.buffer = buffer;
    this.bufferBase = bufferBase;
    this.curContext = curContext;
    this.lookAhead = lookAhead;
    this.parent = parent;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(p, state, pos = 0) {
    let cx = p.parser.context;
    return new _Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(state, start2) {
    this.stack.push(this.state, start2, this.bufferBase + this.buffer.length);
    this.state = state;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(action) {
    var _a2;
    let depth = action >> 19, type2 = action & 65535;
    let { parser: parser2 } = this.p;
    let lookaheadRecord = this.reducePos < this.pos - 25;
    if (lookaheadRecord)
      this.setLookAhead(this.pos);
    let dPrec = parser2.dynamicPrecedence(type2);
    if (dPrec)
      this.score += dPrec;
    if (depth == 0) {
      this.pushState(parser2.getGoto(this.state, type2, true), this.reducePos);
      if (type2 < parser2.minRepeatTerm)
        this.storeNode(type2, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
      this.reduceContext(type2, this.reducePos);
      return;
    }
    let base2 = this.stack.length - (depth - 1) * 3 - (action & 262144 ? 6 : 0);
    let start2 = base2 ? this.stack[base2 - 2] : this.p.ranges[0].from, size3 = this.reducePos - start2;
    if (size3 >= 2e3 && !((_a2 = this.p.parser.nodeSet.types[type2]) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous)) {
      if (start2 == this.p.lastBigReductionStart) {
        this.p.bigReductionCount++;
        this.p.lastBigReductionSize = size3;
      } else if (this.p.lastBigReductionSize < size3) {
        this.p.bigReductionCount = 1;
        this.p.lastBigReductionStart = start2;
        this.p.lastBigReductionSize = size3;
      }
    }
    let bufferBase = base2 ? this.stack[base2 - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
    if (type2 < parser2.minRepeatTerm || action & 131072) {
      let pos = parser2.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(type2, start2, pos, count + 4, true);
    }
    if (action & 262144) {
      this.state = this.stack[base2];
    } else {
      let baseStateID = this.stack[base2 - 3];
      this.state = parser2.getGoto(baseStateID, type2, true);
    }
    while (this.stack.length > base2)
      this.stack.pop();
    this.reduceContext(type2, start2);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(term, start2, end, size3 = 4, mustSink = false) {
    if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let cur = this, top3 = this.buffer.length;
      if (top3 == 0 && cur.parent) {
        top3 = cur.bufferBase - cur.parent.bufferBase;
        cur = cur.parent;
      }
      if (top3 > 0 && cur.buffer[top3 - 4] == 0 && cur.buffer[top3 - 1] > -1) {
        if (start2 == end)
          return;
        if (cur.buffer[top3 - 2] >= start2) {
          cur.buffer[top3 - 2] = end;
          return;
        }
      }
    }
    if (!mustSink || this.pos == end) {
      this.buffer.push(term, start2, end, size3);
    } else {
      let index2 = this.buffer.length;
      if (index2 > 0 && this.buffer[index2 - 4] != 0) {
        let mustMove = false;
        for (let scan = index2; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
          if (this.buffer[scan - 1] >= 0) {
            mustMove = true;
            break;
          }
        }
        if (mustMove)
          while (index2 > 0 && this.buffer[index2 - 2] > end) {
            this.buffer[index2] = this.buffer[index2 - 4];
            this.buffer[index2 + 1] = this.buffer[index2 - 3];
            this.buffer[index2 + 2] = this.buffer[index2 - 2];
            this.buffer[index2 + 3] = this.buffer[index2 - 1];
            index2 -= 4;
            if (size3 > 4)
              size3 -= 4;
          }
      }
      this.buffer[index2] = term;
      this.buffer[index2 + 1] = start2;
      this.buffer[index2 + 2] = end;
      this.buffer[index2 + 3] = size3;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(action, type2, start2, end) {
    if (action & 131072) {
      this.pushState(action & 65535, this.pos);
    } else if ((action & 262144) == 0) {
      let nextState = action, { parser: parser2 } = this.p;
      if (end > this.pos || type2 <= parser2.maxNode) {
        this.pos = end;
        if (!parser2.stateFlag(
          nextState,
          1
          /* StateFlag.Skipped */
        ))
          this.reducePos = end;
      }
      this.pushState(nextState, start2);
      this.shiftContext(type2, start2);
      if (type2 <= parser2.maxNode)
        this.buffer.push(type2, start2, end, 4);
    } else {
      this.pos = end;
      this.shiftContext(type2, start2);
      if (type2 <= this.p.parser.maxNode)
        this.buffer.push(type2, start2, end, 4);
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(action, next, nextStart, nextEnd) {
    if (action & 65536)
      this.reduce(action);
    else
      this.shift(action, next, nextStart, nextEnd);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(value, next) {
    let index2 = this.p.reused.length - 1;
    if (index2 < 0 || this.p.reused[index2] != value) {
      this.p.reused.push(value);
      index2++;
    }
    let start2 = this.pos;
    this.reducePos = this.pos = start2 + value.length;
    this.pushState(next, start2);
    this.buffer.push(
      index2,
      start2,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    );
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let parent = this;
    let off = parent.buffer.length;
    while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
      off -= 4;
    let buffer = parent.buffer.slice(off), base2 = parent.bufferBase + off;
    while (parent && base2 == parent.bufferBase)
      parent = parent.parent;
    return new _Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base2, this.curContext, this.lookAhead, parent);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(next, nextEnd) {
    let isNode = next <= this.p.parser.maxNode;
    if (isNode)
      this.storeNode(next, this.pos, nextEnd, 4);
    this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
    this.pos = this.reducePos = nextEnd;
    this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(term) {
    for (let sim = new SimulatedStack(this); ; ) {
      let action = this.p.parser.stateSlot(
        sim.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(sim.state, term);
      if (action == 0)
        return false;
      if ((action & 65536) == 0)
        return true;
      sim.reduce(action);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(next) {
    if (this.stack.length >= 300)
      return [];
    let nextStates = this.p.parser.nextStates(this.state);
    if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
      let best = [];
      for (let i = 0, s; i < nextStates.length; i += 2) {
        if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
          best.push(nextStates[i], s);
      }
      if (this.stack.length < 120)
        for (let i = 0; best.length < 4 << 1 && i < nextStates.length; i += 2) {
          let s = nextStates[i + 1];
          if (!best.some((v, i2) => i2 & 1 && v == s))
            best.push(nextStates[i], s);
        }
      nextStates = best;
    }
    let result = [];
    for (let i = 0; i < nextStates.length && result.length < 4; i += 2) {
      let s = nextStates[i + 1];
      if (s == this.state)
        continue;
      let stack = this.split();
      stack.pushState(s, this.pos);
      stack.storeNode(0, stack.pos, stack.pos, 4, true);
      stack.shiftContext(nextStates[i], this.pos);
      stack.reducePos = this.pos;
      stack.score -= 200;
      result.push(stack);
    }
    return result;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: parser2 } = this.p;
    let reduce = parser2.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((reduce & 65536) == 0)
      return false;
    if (!parser2.validAction(this.state, reduce)) {
      let depth = reduce >> 19, term = reduce & 65535;
      let target = this.stack.length - depth * 3;
      if (target < 0 || parser2.getGoto(this.stack[target], term, false) < 0) {
        let backup = this.findForcedReduction();
        if (backup == null)
          return false;
        reduce = backup;
      }
      this.storeNode(0, this.pos, this.pos, 4, true);
      this.score -= 100;
    }
    this.reducePos = this.pos;
    this.reduce(reduce);
    return true;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: parser2 } = this.p, seen = [];
    let explore = (state, depth) => {
      if (seen.includes(state))
        return;
      seen.push(state);
      return parser2.allActions(state, (action) => {
        if (action & (262144 | 131072)) ;
        else if (action & 65536) {
          let rDepth = (action >> 19) - depth;
          if (rDepth > 1) {
            let term = action & 65535, target = this.stack.length - rDepth * 3;
            if (target >= 0 && parser2.getGoto(this.stack[target], term, false) >= 0)
              return rDepth << 19 | 65536 | term;
          }
        } else {
          let found = explore(action, depth + 1);
          if (found != null)
            return found;
        }
      });
    };
    return explore(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    while (!this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    )) {
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, true);
        break;
      }
    }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return false;
    let { parser: parser2 } = this.p;
    return parser2.data[parser2.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !parser2.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, true);
    this.state = this.stack[0];
    this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(other) {
    if (this.state != other.state || this.stack.length != other.stack.length)
      return false;
    for (let i = 0; i < this.stack.length; i += 3)
      if (this.stack[i] != other.stack[i])
        return false;
    return true;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(dialectID) {
    return this.p.parser.dialect.flags[dialectID];
  }
  shiftContext(term, start2) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start2)));
  }
  reduceContext(term, start2) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start2)));
  }
  /**
  @internal
  */
  emitContext() {
    let last2 = this.buffer.length - 1;
    if (last2 < 0 || this.buffer[last2] != -3)
      this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let last2 = this.buffer.length - 1;
    if (last2 < 0 || this.buffer[last2] != -4)
      this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(context2) {
    if (context2 != this.curContext.context) {
      let newCx = new StackContext(this.curContext.tracker, context2);
      if (newCx.hash != this.curContext.hash)
        this.emitContext();
      this.curContext = newCx;
    }
  }
  /**
  @internal
  */
  setLookAhead(lookAhead) {
    if (lookAhead > this.lookAhead) {
      this.emitLookAhead();
      this.lookAhead = lookAhead;
    }
  }
  /**
  @internal
  */
  close() {
    if (this.curContext && this.curContext.tracker.strict)
      this.emitContext();
    if (this.lookAhead > 0)
      this.emitLookAhead();
  }
};
var StackContext = class {
  constructor(tracker, context2) {
    this.tracker = tracker;
    this.context = context2;
    this.hash = tracker.strict ? tracker.hash(context2) : 0;
  }
};
var SimulatedStack = class {
  constructor(start2) {
    this.start = start2;
    this.state = start2.state;
    this.stack = start2.stack;
    this.base = this.stack.length;
  }
  reduce(action) {
    let term = action & 65535, depth = action >> 19;
    if (depth == 0) {
      if (this.stack == this.start.stack)
        this.stack = this.stack.slice();
      this.stack.push(this.state, 0, 0);
      this.base += 3;
    } else {
      this.base -= (depth - 1) * 3;
    }
    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
    this.state = goto;
  }
};
var StackBufferCursor = class _StackBufferCursor {
  constructor(stack, pos, index2) {
    this.stack = stack;
    this.pos = pos;
    this.index = index2;
    this.buffer = stack.buffer;
    if (this.index == 0)
      this.maybeNext();
  }
  static create(stack, pos = stack.bufferBase + stack.buffer.length) {
    return new _StackBufferCursor(stack, pos, pos - stack.bufferBase);
  }
  maybeNext() {
    let next = this.stack.parent;
    if (next != null) {
      this.index = this.stack.bufferBase - next.bufferBase;
      this.stack = next;
      this.buffer = next.buffer;
    }
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4;
    this.pos -= 4;
    if (this.index == 0)
      this.maybeNext();
  }
  fork() {
    return new _StackBufferCursor(this.stack, this.pos, this.index);
  }
};
function decodeArray(input, Type = Uint16Array) {
  if (typeof input != "string")
    return input;
  let array2 = null;
  for (let pos = 0, out = 0; pos < input.length; ) {
    let value = 0;
    for (; ; ) {
      let next = input.charCodeAt(pos++), stop = false;
      if (next == 126) {
        value = 65535;
        break;
      }
      if (next >= 92)
        next--;
      if (next >= 34)
        next--;
      let digit2 = next - 32;
      if (digit2 >= 46) {
        digit2 -= 46;
        stop = true;
      }
      value += digit2;
      if (stop)
        break;
      value *= 46;
    }
    if (array2)
      array2[out++] = value;
    else
      array2 = new Type(value);
  }
  return array2;
}
var CachedToken = class {
  constructor() {
    this.start = -1;
    this.value = -1;
    this.end = -1;
    this.extended = -1;
    this.lookAhead = 0;
    this.mask = 0;
    this.context = 0;
  }
};
var nullToken = new CachedToken();
var InputStream = class {
  /**
  @internal
  */
  constructor(input, ranges) {
    this.input = input;
    this.ranges = ranges;
    this.chunk = "";
    this.chunkOff = 0;
    this.chunk2 = "";
    this.chunk2Pos = 0;
    this.next = -1;
    this.token = nullToken;
    this.rangeIndex = 0;
    this.pos = this.chunkPos = ranges[0].from;
    this.range = ranges[0];
    this.end = ranges[ranges.length - 1].to;
    this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(offset, assoc) {
    let range3 = this.range, index2 = this.rangeIndex;
    let pos = this.pos + offset;
    while (pos < range3.from) {
      if (!index2)
        return null;
      let next = this.ranges[--index2];
      pos -= range3.from - next.to;
      range3 = next;
    }
    while (assoc < 0 ? pos > range3.to : pos >= range3.to) {
      if (index2 == this.ranges.length - 1)
        return null;
      let next = this.ranges[++index2];
      pos += next.from - range3.to;
      range3 = next;
    }
    return pos;
  }
  /**
  @internal
  */
  clipPos(pos) {
    if (pos >= this.range.from && pos < this.range.to)
      return pos;
    for (let range3 of this.ranges)
      if (range3.to > pos)
        return Math.max(pos, range3.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(offset) {
    let idx = this.chunkOff + offset, pos, result;
    if (idx >= 0 && idx < this.chunk.length) {
      pos = this.pos + offset;
      result = this.chunk.charCodeAt(idx);
    } else {
      let resolved = this.resolveOffset(offset, 1);
      if (resolved == null)
        return -1;
      pos = resolved;
      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
      } else {
        let i = this.rangeIndex, range3 = this.range;
        while (range3.to <= pos)
          range3 = this.ranges[++i];
        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
        if (pos + this.chunk2.length > range3.to)
          this.chunk2 = this.chunk2.slice(0, range3.to - pos);
        result = this.chunk2.charCodeAt(0);
      }
    }
    if (pos >= this.token.lookAhead)
      this.token.lookAhead = pos + 1;
    return result;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(token, endOffset = 0) {
    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
    if (end == null || end < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = token;
    this.token.end = end;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(token, endPos) {
    this.token.value = token;
    this.token.end = endPos;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk, chunkPos } = this;
      this.chunk = this.chunk2;
      this.chunkPos = this.chunk2Pos;
      this.chunk2 = chunk;
      this.chunk2Pos = chunkPos;
      this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk;
      this.chunk2Pos = this.chunkPos;
      let nextChunk = this.input.chunk(this.pos);
      let end = this.pos + nextChunk.length;
      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
      this.chunkPos = this.pos;
      this.chunkOff = 0;
    }
  }
  readNext() {
    if (this.chunkOff >= this.chunk.length) {
      this.getChunk();
      if (this.chunkOff == this.chunk.length)
        return this.next = -1;
    }
    return this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(n = 1) {
    this.chunkOff += n;
    while (this.pos + n >= this.range.to) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      n -= this.range.to - this.pos;
      this.range = this.ranges[++this.rangeIndex];
      this.pos = this.range.from;
    }
    this.pos += n;
    if (this.pos >= this.token.lookAhead)
      this.token.lookAhead = this.pos + 1;
    return this.readNext();
  }
  setDone() {
    this.pos = this.chunkPos = this.end;
    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
    this.chunk = "";
    return this.next = -1;
  }
  /**
  @internal
  */
  reset(pos, token) {
    if (token) {
      this.token = token;
      token.start = pos;
      token.lookAhead = pos + 1;
      token.value = token.extended = -1;
    } else {
      this.token = nullToken;
    }
    if (this.pos != pos) {
      this.pos = pos;
      if (pos == this.end) {
        this.setDone();
        return this;
      }
      while (pos < this.range.from)
        this.range = this.ranges[--this.rangeIndex];
      while (pos >= this.range.to)
        this.range = this.ranges[++this.rangeIndex];
      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
        this.chunkOff = pos - this.chunkPos;
      } else {
        this.chunk = "";
        this.chunkOff = 0;
      }
      this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(from, to) {
    if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
    if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
    if (from >= this.range.from && to <= this.range.to)
      return this.input.read(from, to);
    let result = "";
    for (let r of this.ranges) {
      if (r.from >= to)
        break;
      if (r.to > from)
        result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
    }
    return result;
  }
};
var TokenGroup = class {
  constructor(data, id4) {
    this.data = data;
    this.id = id4;
  }
  token(input, stack) {
    let { parser: parser2 } = stack.p;
    readToken(this.data, input, stack, this.id, parser2.data, parser2.tokenPrecTable);
  }
};
TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
var LocalTokenGroup = class {
  constructor(data, precTable, elseToken) {
    this.precTable = precTable;
    this.elseToken = elseToken;
    this.data = typeof data == "string" ? decodeArray(data) : data;
  }
  token(input, stack) {
    let start2 = input.pos, skipped = 0;
    for (; ; ) {
      let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
      readToken(this.data, input, stack, 0, this.data, this.precTable);
      if (input.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (!atEof)
        skipped++;
      if (nextPos == null)
        break;
      input.reset(nextPos, input.token);
    }
    if (skipped) {
      input.reset(start2, input.token);
      input.acceptToken(this.elseToken, skipped);
    }
  }
};
LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
var ExternalTokenizer = class {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(token, options = {}) {
    this.token = token;
    this.contextual = !!options.contextual;
    this.fallback = !!options.fallback;
    this.extend = !!options.extend;
  }
};
function readToken(data, input, stack, group3, precTable, precOffset) {
  let state = 0, groupMask = 1 << group3, { dialect } = stack.p.parser;
  scan: for (; ; ) {
    if ((groupMask & data[state]) == 0)
      break;
    let accEnd = data[state + 1];
    for (let i = state + 3; i < accEnd; i += 2)
      if ((data[i + 1] & groupMask) > 0) {
        let term = data[i];
        if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
          input.acceptToken(term);
          break;
        }
      }
    let next = input.next, low = 0, high = data[state + 2];
    if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535) {
      state = data[accEnd + high * 3 - 1];
      continue scan;
    }
    for (; low < high; ) {
      let mid = low + high >> 1;
      let index2 = accEnd + mid + (mid << 1);
      let from = data[index2], to = data[index2 + 1] || 65536;
      if (next < from)
        high = mid;
      else if (next >= to)
        low = mid + 1;
      else {
        state = data[index2 + 2];
        input.advance();
        continue scan;
      }
    }
    break;
  }
}
function findOffset(data, start2, term) {
  for (let i = start2, next; (next = data[i]) != 65535; i++)
    if (next == term)
      return i - start2;
  return -1;
}
function overrides(token, prev, tableData, tableOffset) {
  let iPrev = findOffset(tableData, tableOffset, prev);
  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
}
var verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
var stackIDs = null;
function cutAt(tree, pos, side) {
  let cursor2 = tree.cursor(IterMode.IncludeAnonymous);
  cursor2.moveTo(pos);
  for (; ; ) {
    if (!(side < 0 ? cursor2.childBefore(pos) : cursor2.childAfter(pos)))
      for (; ; ) {
        if ((side < 0 ? cursor2.to < pos : cursor2.from > pos) && !cursor2.type.isError)
          return side < 0 ? Math.max(0, Math.min(
            cursor2.to - 1,
            pos - 25
            /* Lookahead.Margin */
          )) : Math.min(tree.length, Math.max(
            cursor2.from + 1,
            pos + 25
            /* Lookahead.Margin */
          ));
        if (side < 0 ? cursor2.prevSibling() : cursor2.nextSibling())
          break;
        if (!cursor2.parent())
          return side < 0 ? 0 : tree.length;
      }
  }
}
var FragmentCursor = class {
  constructor(fragments, nodeSet) {
    this.fragments = fragments;
    this.nodeSet = nodeSet;
    this.i = 0;
    this.fragment = null;
    this.safeFrom = -1;
    this.safeTo = -1;
    this.trees = [];
    this.start = [];
    this.index = [];
    this.nextFragment();
  }
  nextFragment() {
    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (fr) {
      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
      while (this.trees.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
      }
      this.trees.push(fr.tree);
      this.start.push(-fr.offset);
      this.index.push(0);
      this.nextStart = this.safeFrom;
    } else {
      this.nextStart = 1e9;
    }
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(pos) {
    if (pos < this.nextStart)
      return null;
    while (this.fragment && this.safeTo <= pos)
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let last2 = this.trees.length - 1;
      if (last2 < 0) {
        this.nextFragment();
        return null;
      }
      let top3 = this.trees[last2], index2 = this.index[last2];
      if (index2 == top3.children.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
        continue;
      }
      let next = top3.children[index2];
      let start2 = this.start[last2] + top3.positions[index2];
      if (start2 > pos) {
        this.nextStart = start2;
        return null;
      }
      if (next instanceof Tree) {
        if (start2 == pos) {
          if (start2 < this.safeFrom)
            return null;
          let end = start2 + next.length;
          if (end <= this.safeTo) {
            let lookAhead = next.prop(NodeProp.lookAhead);
            if (!lookAhead || end + lookAhead < this.fragment.to)
              return next;
          }
        }
        this.index[last2]++;
        if (start2 + next.length >= Math.max(this.safeFrom, pos)) {
          this.trees.push(next);
          this.start.push(start2);
          this.index.push(0);
        }
      } else {
        this.index[last2]++;
        this.nextStart = start2 + next.length;
      }
    }
  }
};
var TokenCache = class {
  constructor(parser2, stream) {
    this.stream = stream;
    this.tokens = [];
    this.mainToken = null;
    this.actions = [];
    this.tokens = parser2.tokenizers.map((_) => new CachedToken());
  }
  getActions(stack) {
    let actionIndex = 0;
    let main = null;
    let { parser: parser2 } = stack.p, { tokenizers } = parser2;
    let mask = parser2.stateSlot(
      stack.state,
      3
      /* ParseState.TokenizerMask */
    );
    let context2 = stack.curContext ? stack.curContext.hash : 0;
    let lookAhead = 0;
    for (let i = 0; i < tokenizers.length; i++) {
      if ((1 << i & mask) == 0)
        continue;
      let tokenizer = tokenizers[i], token = this.tokens[i];
      if (main && !tokenizer.fallback)
        continue;
      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context2) {
        this.updateCachedToken(token, tokenizer, stack);
        token.mask = mask;
        token.context = context2;
      }
      if (token.lookAhead > token.end + 25)
        lookAhead = Math.max(token.lookAhead, lookAhead);
      if (token.value != 0) {
        let startIndex = actionIndex;
        if (token.extended > -1)
          actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
        if (!tokenizer.extend) {
          main = token;
          if (actionIndex > startIndex)
            break;
        }
      }
    }
    while (this.actions.length > actionIndex)
      this.actions.pop();
    if (lookAhead)
      stack.setLookAhead(lookAhead);
    if (!main && stack.pos == this.stream.end) {
      main = new CachedToken();
      main.value = stack.p.parser.eofTerm;
      main.start = main.end = stack.pos;
      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
    }
    this.mainToken = main;
    return this.actions;
  }
  getMainToken(stack) {
    if (this.mainToken)
      return this.mainToken;
    let main = new CachedToken(), { pos, p } = stack;
    main.start = pos;
    main.end = Math.min(pos + 1, p.stream.end);
    main.value = pos == p.stream.end ? p.parser.eofTerm : 0;
    return main;
  }
  updateCachedToken(token, tokenizer, stack) {
    let start2 = this.stream.clipPos(stack.pos);
    tokenizer.token(this.stream.reset(start2, token), stack);
    if (token.value > -1) {
      let { parser: parser2 } = stack.p;
      for (let i = 0; i < parser2.specialized.length; i++)
        if (parser2.specialized[i] == token.value) {
          let result = parser2.specializers[i](this.stream.read(token.start, token.end), stack);
          if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
            if ((result & 1) == 0)
              token.value = result >> 1;
            else
              token.extended = result >> 1;
            break;
          }
        }
    } else {
      token.value = 0;
      token.end = this.stream.clipPos(start2 + 1);
    }
  }
  putAction(action, token, end, index2) {
    for (let i = 0; i < index2; i += 3)
      if (this.actions[i] == action)
        return index2;
    this.actions[index2++] = action;
    this.actions[index2++] = token;
    this.actions[index2++] = end;
    return index2;
  }
  addActions(stack, token, end, index2) {
    let { state } = stack, { parser: parser2 } = stack.p, { data } = parser2;
    for (let set3 = 0; set3 < 2; set3++) {
      for (let i = parser2.stateSlot(
        state,
        set3 ? 2 : 1
        /* ParseState.Actions */
      ); ; i += 3) {
        if (data[i] == 65535) {
          if (data[i + 1] == 1) {
            i = pair(data, i + 2);
          } else {
            if (index2 == 0 && data[i + 1] == 2)
              index2 = this.putAction(pair(data, i + 2), token, end, index2);
            break;
          }
        }
        if (data[i] == token)
          index2 = this.putAction(pair(data, i + 1), token, end, index2);
      }
    }
    return index2;
  }
};
var Parse = class {
  constructor(parser2, input, fragments, ranges) {
    this.parser = parser2;
    this.input = input;
    this.ranges = ranges;
    this.recovering = 0;
    this.nextStackID = 9812;
    this.minStackPos = 0;
    this.reused = [];
    this.stoppedAt = null;
    this.lastBigReductionStart = -1;
    this.lastBigReductionSize = 0;
    this.bigReductionCount = 0;
    this.stream = new InputStream(input, ranges);
    this.tokens = new TokenCache(parser2, this.stream);
    this.topTerm = parser2.top[1];
    let { from } = ranges[0];
    this.stacks = [Stack.start(this, parser2.top[0], from)];
    this.fragments = fragments.length && this.stream.end - from > parser2.bufferLength * 4 ? new FragmentCursor(fragments, parser2.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let stacks = this.stacks, pos = this.minStackPos;
    let newStacks = this.stacks = [];
    let stopped, stoppedTokens;
    if (this.bigReductionCount > 300 && stacks.length == 1) {
      let [s] = stacks;
      while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {
      }
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let i = 0; i < stacks.length; i++) {
      let stack = stacks[i];
      for (; ; ) {
        this.tokens.mainToken = null;
        if (stack.pos > pos) {
          newStacks.push(stack);
        } else if (this.advanceStack(stack, newStacks, stacks)) {
          continue;
        } else {
          if (!stopped) {
            stopped = [];
            stoppedTokens = [];
          }
          stopped.push(stack);
          let tok = this.tokens.getMainToken(stack);
          stoppedTokens.push(tok.value, tok.end);
        }
        break;
      }
    }
    if (!newStacks.length) {
      let finished = stopped && findFinished(stopped);
      if (finished) {
        if (verbose)
          console.log("Finish with " + this.stackID(finished));
        return this.stackToTree(finished);
      }
      if (this.parser.strict) {
        if (verbose && stopped)
          console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
        throw new SyntaxError("No parse at " + pos);
      }
      if (!this.recovering)
        this.recovering = 5;
    }
    if (this.recovering && stopped) {
      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
      if (finished) {
        if (verbose)
          console.log("Force-finish " + this.stackID(finished));
        return this.stackToTree(finished.forceAll());
      }
    }
    if (this.recovering) {
      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
      if (newStacks.length > maxRemaining) {
        newStacks.sort((a, b) => b.score - a.score);
        while (newStacks.length > maxRemaining)
          newStacks.pop();
      }
      if (newStacks.some((s) => s.reducePos > pos))
        this.recovering--;
    } else if (newStacks.length > 1) {
      outer: for (let i = 0; i < newStacks.length - 1; i++) {
        let stack = newStacks[i];
        for (let j = i + 1; j < newStacks.length; j++) {
          let other = newStacks[j];
          if (stack.sameState(other) || stack.buffer.length > 500 && other.buffer.length > 500) {
            if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
              newStacks.splice(j--, 1);
            } else {
              newStacks.splice(i--, 1);
              continue outer;
            }
          }
        }
      }
      if (newStacks.length > 12)
        newStacks.splice(
          12,
          newStacks.length - 12
          /* Rec.MaxStackCount */
        );
    }
    this.minStackPos = newStacks[0].pos;
    for (let i = 1; i < newStacks.length; i++)
      if (newStacks[i].pos < this.minStackPos)
        this.minStackPos = newStacks[i].pos;
    return null;
  }
  stopAt(pos) {
    if (this.stoppedAt != null && this.stoppedAt < pos)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = pos;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(stack, stacks, split4) {
    let start2 = stack.pos, { parser: parser2 } = this;
    let base2 = verbose ? this.stackID(stack) + " -> " : "";
    if (this.stoppedAt != null && start2 > this.stoppedAt)
      return stack.forceReduce() ? stack : null;
    if (this.fragments) {
      let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
      for (let cached = this.fragments.nodeAt(start2); cached; ) {
        let match3 = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser2.getGoto(stack.state, cached.type.id) : -1;
        if (match3 > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
          stack.useNode(cached, match3);
          if (verbose)
            console.log(base2 + this.stackID(stack) + ` (via reuse of ${parser2.getName(cached.type.id)})`);
          return true;
        }
        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
          break;
        let inner = cached.children[0];
        if (inner instanceof Tree && cached.positions[0] == 0)
          cached = inner;
        else
          break;
      }
    }
    let defaultReduce = parser2.stateSlot(
      stack.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (defaultReduce > 0) {
      stack.reduce(defaultReduce);
      if (verbose)
        console.log(base2 + this.stackID(stack) + ` (via always-reduce ${parser2.getName(
          defaultReduce & 65535
          /* Action.ValueMask */
        )})`);
      return true;
    }
    if (stack.stack.length >= 8400) {
      while (stack.stack.length > 6e3 && stack.forceReduce()) {
      }
    }
    let actions = this.tokens.getActions(stack);
    for (let i = 0; i < actions.length; ) {
      let action = actions[i++], term = actions[i++], end = actions[i++];
      let last2 = i == actions.length || !split4;
      let localStack = last2 ? stack : stack.split();
      let main = this.tokens.mainToken;
      localStack.apply(action, term, main ? main.start : localStack.pos, end);
      if (verbose)
        console.log(base2 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser2.getName(
          action & 65535
          /* Action.ValueMask */
        )}`} for ${parser2.getName(term)} @ ${start2}${localStack == stack ? "" : ", split"})`);
      if (last2)
        return true;
      else if (localStack.pos > start2)
        stacks.push(localStack);
      else
        split4.push(localStack);
    }
    return false;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(stack, newStacks) {
    let pos = stack.pos;
    for (; ; ) {
      if (!this.advanceStack(stack, null, null))
        return false;
      if (stack.pos > pos) {
        pushStackDedup(stack, newStacks);
        return true;
      }
    }
  }
  runRecovery(stacks, tokens, newStacks) {
    let finished = null, restarted = false;
    for (let i = 0; i < stacks.length; i++) {
      let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
      let base2 = verbose ? this.stackID(stack) + " -> " : "";
      if (stack.deadEnd) {
        if (restarted)
          continue;
        restarted = true;
        stack.restart();
        if (verbose)
          console.log(base2 + this.stackID(stack) + " (restarted)");
        let done = this.advanceFully(stack, newStacks);
        if (done)
          continue;
      }
      let force2 = stack.split(), forceBase = base2;
      for (let j = 0; force2.forceReduce() && j < 10; j++) {
        if (verbose)
          console.log(forceBase + this.stackID(force2) + " (via force-reduce)");
        let done = this.advanceFully(force2, newStacks);
        if (done)
          break;
        if (verbose)
          forceBase = this.stackID(force2) + " -> ";
      }
      for (let insert5 of stack.recoverByInsert(token)) {
        if (verbose)
          console.log(base2 + this.stackID(insert5) + " (via recover-insert)");
        this.advanceFully(insert5, newStacks);
      }
      if (this.stream.end > stack.pos) {
        if (tokenEnd == stack.pos) {
          tokenEnd++;
          token = 0;
        }
        stack.recoverByDelete(token, tokenEnd);
        if (verbose)
          console.log(base2 + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
        pushStackDedup(stack, newStacks);
      } else if (!finished || finished.score < stack.score) {
        finished = stack;
      }
    }
    return finished;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(stack) {
    stack.close();
    return Tree.build({
      buffer: StackBufferCursor.create(stack),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: stack.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(stack) {
    let id4 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack);
    if (!id4)
      stackIDs.set(stack, id4 = String.fromCodePoint(this.nextStackID++));
    return id4 + stack;
  }
};
function pushStackDedup(stack, newStacks) {
  for (let i = 0; i < newStacks.length; i++) {
    let other = newStacks[i];
    if (other.pos == stack.pos && other.sameState(stack)) {
      if (newStacks[i].score < stack.score)
        newStacks[i] = stack;
      return;
    }
  }
  newStacks.push(stack);
}
var Dialect = class {
  constructor(source2, flags, disabled) {
    this.source = source2;
    this.flags = flags;
    this.disabled = disabled;
  }
  allows(term) {
    return !this.disabled || this.disabled[term] == 0;
  }
};
var id2 = (x2) => x2;
var ContextTracker = class {
  /**
  Define a context tracker.
  */
  constructor(spec) {
    this.start = spec.start;
    this.shift = spec.shift || id2;
    this.reduce = spec.reduce || id2;
    this.reuse = spec.reuse || id2;
    this.hash = spec.hash || (() => 0);
    this.strict = spec.strict !== false;
  }
};
var LRParser = class _LRParser extends Parser {
  /**
  @internal
  */
  constructor(spec) {
    super();
    this.wrappers = [];
    if (spec.version != 14)
      throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
    let nodeNames = spec.nodeNames.split(" ");
    this.minRepeatTerm = nodeNames.length;
    for (let i = 0; i < spec.repeatNodeCount; i++)
      nodeNames.push("");
    let topTerms = Object.keys(spec.topRules).map((r) => spec.topRules[r][1]);
    let nodeProps = [];
    for (let i = 0; i < nodeNames.length; i++)
      nodeProps.push([]);
    function setProp(nodeID, prop, value) {
      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
    }
    if (spec.nodeProps)
      for (let propSpec of spec.nodeProps) {
        let prop = propSpec[0];
        if (typeof prop == "string")
          prop = NodeProp[prop];
        for (let i = 1; i < propSpec.length; ) {
          let next = propSpec[i++];
          if (next >= 0) {
            setProp(next, prop, propSpec[i++]);
          } else {
            let value = propSpec[i + -next];
            for (let j = -next; j > 0; j--)
              setProp(propSpec[i++], prop, value);
            i++;
          }
        }
      }
    this.nodeSet = new NodeSet(nodeNames.map((name3, i) => NodeType.define({
      name: i >= this.minRepeatTerm ? void 0 : name3,
      id: i,
      props: nodeProps[i],
      top: topTerms.indexOf(i) > -1,
      error: i == 0,
      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
    })));
    if (spec.propSources)
      this.nodeSet = this.nodeSet.extend(...spec.propSources);
    this.strict = false;
    this.bufferLength = DefaultBufferLength;
    let tokenArray = decodeArray(spec.tokenData);
    this.context = spec.context;
    this.specializerSpecs = spec.specialized || [];
    this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let i = 0; i < this.specializerSpecs.length; i++)
      this.specialized[i] = this.specializerSpecs[i].term;
    this.specializers = this.specializerSpecs.map(getSpecializer);
    this.states = decodeArray(spec.states, Uint32Array);
    this.data = decodeArray(spec.stateData);
    this.goto = decodeArray(spec.goto);
    this.maxTerm = spec.maxTerm;
    this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
    this.topRules = spec.topRules;
    this.dialects = spec.dialects || {};
    this.dynamicPrecedences = spec.dynamicPrecedences || null;
    this.tokenPrecTable = spec.tokenPrec;
    this.termNames = spec.termNames || null;
    this.maxNode = this.nodeSet.types.length - 1;
    this.dialect = this.parseDialect();
    this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(input, fragments, ranges) {
    let parse2 = new Parse(this, input, fragments, ranges);
    for (let w of this.wrappers)
      parse2 = w(parse2, input, fragments, ranges);
    return parse2;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(state, term, loose = false) {
    let table = this.goto;
    if (term >= table[0])
      return -1;
    for (let pos = table[term + 1]; ; ) {
      let groupTag = table[pos++], last2 = groupTag & 1;
      let target = table[pos++];
      if (last2 && loose)
        return target;
      for (let end = pos + (groupTag >> 1); pos < end; pos++)
        if (table[pos] == state)
          return target;
      if (last2)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(state, terminal) {
    let data = this.data;
    for (let set3 = 0; set3 < 2; set3++) {
      for (let i = this.stateSlot(
        state,
        set3 ? 2 : 1
        /* ParseState.Actions */
      ), next; ; i += 3) {
        if ((next = data[i]) == 65535) {
          if (data[i + 1] == 1)
            next = data[i = pair(data, i + 2)];
          else if (data[i + 1] == 2)
            return pair(data, i + 2);
          else
            break;
        }
        if (next == terminal || next == 0)
          return pair(data, i + 1);
      }
    }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(state, slot) {
    return this.states[state * 6 + slot];
  }
  /**
  @internal
  */
  stateFlag(state, flag) {
    return (this.stateSlot(
      state,
      0
      /* ParseState.Flags */
    ) & flag) > 0;
  }
  /**
  @internal
  */
  validAction(state, action) {
    return !!this.allActions(state, (a) => a == action ? true : null);
  }
  /**
  @internal
  */
  allActions(state, action) {
    let deflt = this.stateSlot(
      state,
      4
      /* ParseState.DefaultReduce */
    );
    let result = deflt ? action(deflt) : void 0;
    for (let i = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); result == null; i += 3) {
      if (this.data[i] == 65535) {
        if (this.data[i + 1] == 1)
          i = pair(this.data, i + 2);
        else
          break;
      }
      result = action(pair(this.data, i + 1));
    }
    return result;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(state) {
    let result = [];
    for (let i = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); ; i += 3) {
      if (this.data[i] == 65535) {
        if (this.data[i + 1] == 1)
          i = pair(this.data, i + 2);
        else
          break;
      }
      if ((this.data[i + 2] & 65536 >> 16) == 0) {
        let value = this.data[i + 1];
        if (!result.some((v, i2) => i2 & 1 && v == value))
          result.push(this.data[i], value);
      }
    }
    return result;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(config) {
    let copy2 = Object.assign(Object.create(_LRParser.prototype), this);
    if (config.props)
      copy2.nodeSet = this.nodeSet.extend(...config.props);
    if (config.top) {
      let info2 = this.topRules[config.top];
      if (!info2)
        throw new RangeError(`Invalid top rule name ${config.top}`);
      copy2.top = info2;
    }
    if (config.tokenizers)
      copy2.tokenizers = this.tokenizers.map((t2) => {
        let found = config.tokenizers.find((r) => r.from == t2);
        return found ? found.to : t2;
      });
    if (config.specializers) {
      copy2.specializers = this.specializers.slice();
      copy2.specializerSpecs = this.specializerSpecs.map((s, i) => {
        let found = config.specializers.find((r) => r.from == s.external);
        if (!found)
          return s;
        let spec = Object.assign(Object.assign({}, s), { external: found.to });
        copy2.specializers[i] = getSpecializer(spec);
        return spec;
      });
    }
    if (config.contextTracker)
      copy2.context = config.contextTracker;
    if (config.dialect)
      copy2.dialect = this.parseDialect(config.dialect);
    if (config.strict != null)
      copy2.strict = config.strict;
    if (config.wrap)
      copy2.wrappers = copy2.wrappers.concat(config.wrap);
    if (config.bufferLength != null)
      copy2.bufferLength = config.bufferLength;
    return copy2;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(term) {
    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(term) {
    let prec2 = this.dynamicPrecedences;
    return prec2 == null ? 0 : prec2[term] || 0;
  }
  /**
  @internal
  */
  parseDialect(dialect) {
    let values2 = Object.keys(this.dialects), flags = values2.map(() => false);
    if (dialect)
      for (let part of dialect.split(" ")) {
        let id4 = values2.indexOf(part);
        if (id4 >= 0)
          flags[id4] = true;
      }
    let disabled = null;
    for (let i = 0; i < values2.length; i++)
      if (!flags[i]) {
        for (let j = this.dialects[values2[i]], id4; (id4 = this.data[j++]) != 65535; )
          (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id4] = 1;
      }
    return new Dialect(dialect, flags, disabled);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(spec) {
    return new _LRParser(spec);
  }
};
function pair(data, off) {
  return data[off] | data[off + 1] << 16;
}
function findFinished(stacks) {
  let best = null;
  for (let stack of stacks) {
    let stopped = stack.p.stoppedAt;
    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(
      stack.state,
      2
      /* StateFlag.Accepting */
    ) && (!best || best.score < stack.score))
      best = stack;
  }
  return best;
}
function getSpecializer(spec) {
  if (spec.external) {
    let mask = spec.extend ? 1 : 0;
    return (value, stack) => spec.external(value, stack) << 1 | mask;
  }
  return spec.get;
}

// node_modules/@lezer/python/dist/index.js
var printKeyword = 1;
var indent = 194;
var dedent = 195;
var newline$1 = 196;
var blankLineStart = 197;
var newlineBracketed = 198;
var eof = 199;
var stringContent = 200;
var Escape = 2;
var replacementStart = 3;
var stringEnd = 201;
var ParenL = 24;
var ParenthesizedExpression = 25;
var TupleExpression = 49;
var ComprehensionExpression = 50;
var BracketL = 55;
var ArrayExpression = 56;
var ArrayComprehensionExpression = 57;
var BraceL = 59;
var DictionaryExpression = 60;
var DictionaryComprehensionExpression = 61;
var SetExpression = 62;
var SetComprehensionExpression = 63;
var ArgList = 65;
var subscript = 238;
var String$1 = 71;
var stringStart = 241;
var stringStartD = 242;
var stringStartL = 243;
var stringStartLD = 244;
var stringStartR = 245;
var stringStartRD = 246;
var stringStartRL = 247;
var stringStartRLD = 248;
var FormatString = 72;
var stringStartF = 249;
var stringStartFD = 250;
var stringStartFL = 251;
var stringStartFLD = 252;
var stringStartFR = 253;
var stringStartFRD = 254;
var stringStartFRL = 255;
var stringStartFRLD = 256;
var FormatReplacement = 73;
var nestedFormatReplacement = 77;
var importList = 263;
var TypeParamList = 112;
var ParamList = 130;
var SequencePattern = 151;
var MappingPattern = 152;
var PatternArgList = 155;
var newline = 10;
var carriageReturn = 13;
var space = 32;
var tab = 9;
var hash = 35;
var parenOpen = 40;
var dot = 46;
var braceOpen = 123;
var braceClose = 125;
var singleQuote = 39;
var doubleQuote = 34;
var backslash = 92;
var letter_o = 111;
var letter_x = 120;
var letter_N = 78;
var letter_u = 117;
var letter_U = 85;
var bracketed = /* @__PURE__ */ new Set([
  ParenthesizedExpression,
  TupleExpression,
  ComprehensionExpression,
  importList,
  ArgList,
  ParamList,
  ArrayExpression,
  ArrayComprehensionExpression,
  subscript,
  SetExpression,
  SetComprehensionExpression,
  FormatString,
  FormatReplacement,
  nestedFormatReplacement,
  DictionaryExpression,
  DictionaryComprehensionExpression,
  SequencePattern,
  MappingPattern,
  PatternArgList,
  TypeParamList
]);
function isLineBreak(ch) {
  return ch == newline || ch == carriageReturn;
}
function isHex(ch) {
  return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
}
var newlines = new ExternalTokenizer((input, stack) => {
  let prev;
  if (input.next < 0) {
    input.acceptToken(eof);
  } else if (stack.context.flags & cx_Bracketed) {
    if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);
  } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) && stack.canShift(blankLineStart)) {
    let spaces2 = 0;
    while (input.next == space || input.next == tab) {
      input.advance();
      spaces2++;
    }
    if (input.next == newline || input.next == carriageReturn || input.next == hash)
      input.acceptToken(blankLineStart, -spaces2);
  } else if (isLineBreak(input.next)) {
    input.acceptToken(newline$1, 1);
  }
}, { contextual: true });
var indentation = new ExternalTokenizer((input, stack) => {
  let context2 = stack.context;
  if (context2.flags) return;
  let prev = input.peek(-1);
  if (prev == newline || prev == carriageReturn) {
    let depth = 0, chars = 0;
    for (; ; ) {
      if (input.next == space) depth++;
      else if (input.next == tab) depth += 8 - depth % 8;
      else break;
      input.advance();
      chars++;
    }
    if (depth != context2.indent && input.next != newline && input.next != carriageReturn && input.next != hash) {
      if (depth < context2.indent) input.acceptToken(dedent, -chars);
      else input.acceptToken(indent);
    }
  }
});
var cx_Bracketed = 1;
var cx_String = 2;
var cx_DoubleQuote = 4;
var cx_Long = 8;
var cx_Raw = 16;
var cx_Format = 32;
function Context(parent, indent2, flags) {
  this.parent = parent;
  this.indent = indent2;
  this.flags = flags;
  this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + indent2 + (indent2 << 4) + flags + (flags << 6);
}
var topIndent2 = new Context(null, 0, 0);
function countIndent(space2) {
  let depth = 0;
  for (let i = 0; i < space2.length; i++)
    depth += space2.charCodeAt(i) == tab ? 8 - depth % 8 : 1;
  return depth;
}
var stringFlags = new Map([
  [stringStart, 0],
  [stringStartD, cx_DoubleQuote],
  [stringStartL, cx_Long],
  [stringStartLD, cx_Long | cx_DoubleQuote],
  [stringStartR, cx_Raw],
  [stringStartRD, cx_Raw | cx_DoubleQuote],
  [stringStartRL, cx_Raw | cx_Long],
  [stringStartRLD, cx_Raw | cx_Long | cx_DoubleQuote],
  [stringStartF, cx_Format],
  [stringStartFD, cx_Format | cx_DoubleQuote],
  [stringStartFL, cx_Format | cx_Long],
  [stringStartFLD, cx_Format | cx_Long | cx_DoubleQuote],
  [stringStartFR, cx_Format | cx_Raw],
  [stringStartFRD, cx_Format | cx_Raw | cx_DoubleQuote],
  [stringStartFRL, cx_Format | cx_Raw | cx_Long],
  [stringStartFRLD, cx_Format | cx_Raw | cx_Long | cx_DoubleQuote]
].map(([term, flags]) => [term, flags | cx_String]));
var trackIndent = new ContextTracker({
  start: topIndent2,
  reduce(context2, term, _, input) {
    if (context2.flags & cx_Bracketed && bracketed.has(term) || (term == String$1 || term == FormatString) && context2.flags & cx_String)
      return context2.parent;
    return context2;
  },
  shift(context2, term, stack, input) {
    if (term == indent)
      return new Context(context2, countIndent(input.read(input.pos, stack.pos)), 0);
    if (term == dedent)
      return context2.parent;
    if (term == ParenL || term == BracketL || term == BraceL || term == replacementStart)
      return new Context(context2, 0, cx_Bracketed);
    if (stringFlags.has(term))
      return new Context(context2, 0, stringFlags.get(term) | context2.flags & cx_Bracketed);
    return context2;
  },
  hash(context2) {
    return context2.hash;
  }
});
var legacyPrint = new ExternalTokenizer((input) => {
  for (let i = 0; i < 5; i++) {
    if (input.next != "print".charCodeAt(i)) return;
    input.advance();
  }
  if (/\w/.test(String.fromCharCode(input.next))) return;
  for (let off = 0; ; off++) {
    let next = input.peek(off);
    if (next == space || next == tab) continue;
    if (next != parenOpen && next != dot && next != newline && next != carriageReturn && next != hash)
      input.acceptToken(printKeyword);
    return;
  }
});
var strings = new ExternalTokenizer((input, stack) => {
  let { flags } = stack.context;
  let quote = flags & cx_DoubleQuote ? doubleQuote : singleQuote;
  let long = (flags & cx_Long) > 0;
  let escapes = !(flags & cx_Raw);
  let format3 = (flags & cx_Format) > 0;
  let start2 = input.pos;
  for (; ; ) {
    if (input.next < 0) {
      break;
    } else if (format3 && input.next == braceOpen) {
      if (input.peek(1) == braceOpen) {
        input.advance(2);
      } else {
        if (input.pos == start2) {
          input.acceptToken(replacementStart, 1);
          return;
        }
        break;
      }
    } else if (escapes && input.next == backslash) {
      if (input.pos == start2) {
        input.advance();
        let escaped = input.next;
        if (escaped >= 0) {
          input.advance();
          skipEscape(input, escaped);
        }
        input.acceptToken(Escape);
        return;
      }
      break;
    } else if (input.next == backslash && !escapes && input.peek(1) > -1) {
      input.advance(2);
    } else if (input.next == quote && (!long || input.peek(1) == quote && input.peek(2) == quote)) {
      if (input.pos == start2) {
        input.acceptToken(stringEnd, long ? 3 : 1);
        return;
      }
      break;
    } else if (input.next == newline) {
      if (long) {
        input.advance();
      } else if (input.pos == start2) {
        input.acceptToken(stringEnd);
        return;
      }
      break;
    } else {
      input.advance();
    }
  }
  if (input.pos > start2) input.acceptToken(stringContent);
});
function skipEscape(input, ch) {
  if (ch == letter_o) {
    for (let i = 0; i < 2 && input.next >= 48 && input.next <= 55; i++) input.advance();
  } else if (ch == letter_x) {
    for (let i = 0; i < 2 && isHex(input.next); i++) input.advance();
  } else if (ch == letter_u) {
    for (let i = 0; i < 4 && isHex(input.next); i++) input.advance();
  } else if (ch == letter_U) {
    for (let i = 0; i < 8 && isHex(input.next); i++) input.advance();
  } else if (ch == letter_N) {
    if (input.next == braceOpen) {
      input.advance();
      while (input.next >= 0 && input.next != braceClose && input.next != singleQuote && input.next != doubleQuote && input.next != newline) input.advance();
      if (input.next == braceClose) input.advance();
    }
  }
}
var pythonHighlighting = styleTags({
  'async "*" "**" FormatConversion FormatSpec': tags.modifier,
  "for while if elif else try except finally return raise break continue with pass assert await yield match case": tags.controlKeyword,
  "in not and or is del": tags.operatorKeyword,
  "from def class global nonlocal lambda": tags.definitionKeyword,
  import: tags.moduleKeyword,
  "with as print": tags.keyword,
  Boolean: tags.bool,
  None: tags.null,
  VariableName: tags.variableName,
  "CallExpression/VariableName": tags.function(tags.variableName),
  "FunctionDefinition/VariableName": tags.function(tags.definition(tags.variableName)),
  "ClassDefinition/VariableName": tags.definition(tags.className),
  PropertyName: tags.propertyName,
  "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
  Comment: tags.lineComment,
  Number: tags.number,
  String: tags.string,
  FormatString: tags.special(tags.string),
  Escape: tags.escape,
  UpdateOp: tags.updateOperator,
  "ArithOp!": tags.arithmeticOperator,
  BitOp: tags.bitwiseOperator,
  CompareOp: tags.compareOperator,
  AssignOp: tags.definitionOperator,
  Ellipsis: tags.punctuation,
  At: tags.meta,
  "( )": tags.paren,
  "[ ]": tags.squareBracket,
  "{ }": tags.brace,
  ".": tags.derefOperator,
  ", ;": tags.separator
});
var spec_identifier = { __proto__: null, await: 44, or: 54, and: 56, in: 60, not: 62, is: 64, if: 70, else: 72, lambda: 76, yield: 94, from: 96, async: 102, for: 104, None: 162, True: 164, False: 164, del: 178, pass: 182, break: 186, continue: 190, return: 194, raise: 202, import: 206, as: 208, global: 212, nonlocal: 214, assert: 218, type: 223, elif: 236, while: 240, try: 246, except: 248, finally: 250, with: 254, def: 258, class: 268, match: 279, case: 285 };
var parser = LRParser.deserialize({
  version: 14,
  states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rO#KrQdO,5>rO#K}QdO,5>qO#L`QdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LhQdO1G1dOOQS7+)T7+)TP#LmQdO'#FwO#L}QdO1G2OO#MbQdO1G2OO#MrQdO1G2OP#M}QdO'#FxO#N[QdO7+)VO#NlQdO7+)VO#NlQdO7+)VO#NtQdO7+)VO$ UQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ oQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$!PQtO1G1|P$!ZQdO'#FvOOQS1G2R1G2RP$!hQdO'#F{O$!uQdO7+)jO$#`QdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#nQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$$XQdO<<M[OOQS,5<q,5<qO$$jQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$xQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(sQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$)QQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)cQfO7+'OO$)nQdO'#F_O$*uQdO7+'jO$+VQdO7+'jOOQS7+'j7+'jO$+bQdO<<LqO$+rQdO<<LqO$+rQdO<<LqO$+zQdO'#H^OOQS<<Lh<<LhO$,UQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,oQdO1G4RO$,wQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$-SQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-vQtO'#FaOOQS'#Fc'#FcO$.WQdO'#FbO$.xQdO'#FbOOQS'#Fb'#FbO$.}QdO'#IYO$)nQdO'#FiO$)nQdO'#FiO$/fQdO'#FjO$)nQdO'#FkO$/mQdO'#IZOOQS'#IZ'#IZO$0[QdO,5;yOOQS<<KU<<KUO$0dQdO<<KUO$0tQdOANB]O$1UQdOANB]O$1^QdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1wQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2`QdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2hQtO,5<SO$)nQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$3YQdO,5;|O$3_QdO,5;|OOQS'#Fg'#FgO$)nQdO'#G`O$4PQdO,5<QO$4kQdO,5>tO$4{QdO,5>tO1XQdO,5<PO$5^QdO,5<TO$5cQdO,5<TO$)nQdO'#I[O$5hQdO'#I[O$5mQdO,5<UOOQS,5<V,5<VO0rQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5rQdOG27wO$6SQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$6XQtO'#FaO$6`QdO'#I]O$6nQdO'#I]O$6vQdO,5<XOOQS1G1h1G1hO$6{QdO1G1hO$7QQdO,5<zOOQS-E:^-E:^O$7lQdO,5=OO$8TQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8eQdO,5>vO$)nQdO,5>vOOQS1G1p1G1pOOQS,5<[,5<[OOQU7+'P7+'PO$+zQdO1G/iO$)nQdO,5<YO$8sQdO,5>wO$8zQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)nQdO'#GdO$9SQdO1G4bO$9^QdO1G4bO$9fQdO1G4bOOQS7+%T7+%TO$9tQdO1G1tO$:SQtO'#FaO$:ZQdO,5<}OOQS,5<},5<}O$:iQdO1G4cOOQS-E:a-E:aO$)nQdO,5<|O$:pQdO,5<|O$:uQdO7+)|OOQS-E:`-E:`O$;PQdO7+)|O$)nQdO,5<ZP$)nQdO'#GcO$;XQdO1G2hO$)nQdO1G2hP$;gQdO'#GbO$;nQdO<<MhO$;xQdO1G1uO$<WQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<fQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<yQdO'#GOO'vQdO'#GtO$=WQdO,59bO$=]QdO,59bO$=dQdO,59mO$=iQdO1G/UO1sQdO'#DRO8vQdO,59j",
  stateData: "$>S~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~O{#{Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-bO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)zOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)nOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-bOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)nOz/zO#[/OO%j.yO!['Oa~Og'Pa~P$)nOz0SOg'Pa~Oa0UO!['Oi~P$)zOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-bO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)nO{0^O~Oa0UO!['Oq~P$)zOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)zOa0UO!['Oy~P$)zO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
  goto: "!=j'QPPPPPP'RP'Z*s+[+t,_,y-fP.SP'Z.r.r'ZPPP'Z2[PPPPPP2[5PPP5PP7b7k=sPP=v>h>kPP'Z'ZPP>zPP'Z'ZPP'Z'Z'Z'Z'Z?O?w'ZP?zP@QDXGuGyPG|HWH['ZPPPH_Hk'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHqH}IVPI^IdPI^PI^I^PPPI^PKrPK{LVL]KrPI^LfPI^PLmLsPLwM]MzNeLwLwNkNxLwLwLwLw! ^! d! g! l! o! y!!P!!]!!o!!u!#P!#V!#s!#y!$P!$Z!$a!$g!$y!%T!%Z!%a!%k!%q!%w!%}!&T!&Z!&e!&k!&u!&{!'U!'[!'k!'s!'}!(UPPPPPPPPPPP!([!(_!(e!(n!(x!)TPPPPPPPPPPPP!-u!/Z!3^!6oPP!6w!7W!7a!8Y!8P!8c!8i!8l!8o!8r!8z!9jPPPPPPPPPPPPPPPPP!9m!9q!9wP!:]!:a!:m!:v!;S!;j!;m!;p!;v!;|!<S!<VP!<_!<h!=d!=g]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r{!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g}!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!P!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!R!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!T!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!V!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!Z!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&eVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0r%oXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s!Y!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aQ,^*RR-e,_X#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&dQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uQ.S-fR/q/VhUOn#d#g$j%|&_'w(p(r)t,P%U!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!Z!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
  nodeNames: "\u26A0 print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
  maxTerm: 277,
  context: trackIndent,
  nodeProps: [
    ["isolate", -5, 4, 71, 72, 73, 77, ""],
    ["group", -15, 6, 85, 87, 88, 90, 92, 94, 96, 98, 99, 100, 102, 105, 108, 110, "Statement Statement", -22, 8, 18, 21, 25, 40, 49, 50, 56, 57, 60, 61, 62, 63, 64, 67, 70, 71, 72, 79, 80, 81, 82, "Expression", -10, 114, 116, 119, 121, 122, 126, 128, 133, 135, 138, "Statement", -9, 143, 144, 147, 148, 150, 151, 152, 153, 154, "Pattern"],
    ["openedBy", 23, "(", 54, "[", 58, "{"],
    ["closedBy", 24, ")", 55, "]", 59, "}"]
  ],
  propSources: [pythonHighlighting],
  skippedNodes: [0, 4],
  repeatNodeCount: 34,
  tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
  tokenizers: [legacyPrint, indentation, newlines, strings, 0, 1, 2, 3, 4],
  topRules: { "Script": [0, 5] },
  specialized: [{ term: 221, get: (value) => spec_identifier[value] || -1 }],
  tokenPrec: 7668
});

// node_modules/@codemirror/autocomplete/dist/index.js
function toSet(chars) {
  let flat = Object.keys(chars).join("");
  let words = /\w/.test(flat);
  if (words)
    flat = flat.replace(/\w/g, "");
  return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
}
function prefixMatch(options) {
  let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
  for (let { label } of options) {
    first[label[0]] = true;
    for (let i = 1; i < label.length; i++)
      rest[label[i]] = true;
  }
  let source2 = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source2), new RegExp(source2)];
}
function completeFromList(list) {
  let options = list.map((o) => typeof o == "string" ? { label: o } : o);
  let [validFor, match3] = options.every((o) => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
  return (context2) => {
    let token = context2.matchBefore(match3);
    return token || context2.explicit ? { from: token ? token.from : context2.pos, options, validFor } : null;
  };
}
function ifNotIn(nodes, source2) {
  return (context2) => {
    for (let pos = syntaxTree(context2.state).resolveInner(context2.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1)
        return null;
      if (pos.type.isTop)
        break;
    }
    return source2(context2);
  };
}
var pickedCompletion = /* @__PURE__ */ Annotation.define();
var windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
var baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"\xB7\xB7\xB7"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: `${400}px`,
    boxSizing: "border-box",
    whiteSpace: "pre-line"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'\u0192'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'\u25CB'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'\u25CC'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'\u{1D465}'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'\u{1D436}'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'\u{1D461}'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'\u222A'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'\u25A1'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'\u{1F511}\uFE0E'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'\u25A2'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
var FieldPos = class {
  constructor(field, line2, from, to) {
    this.field = field;
    this.line = line2;
    this.from = from;
    this.to = to;
  }
};
var FieldRange = class _FieldRange {
  constructor(field, from, to) {
    this.field = field;
    this.from = from;
    this.to = to;
  }
  map(changes) {
    let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
    let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
    return from == null || to == null ? null : new _FieldRange(this.field, from, to);
  }
};
var Snippet = class _Snippet {
  constructor(lines, fieldPositions) {
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }
  instantiate(state, pos) {
    let text = [], lineStart = [pos];
    let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
    for (let line2 of this.lines) {
      if (text.length) {
        let indent2 = baseIndent, tabs = /^\t*/.exec(line2)[0].length;
        for (let i = 0; i < tabs; i++)
          indent2 += state.facet(indentUnit);
        lineStart.push(pos + indent2.length - tabs);
        line2 = indent2 + line2.slice(tabs);
      }
      text.push(line2);
      pos += line2.length + 1;
    }
    let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
    return { text, ranges };
  }
  static parse(template) {
    let fields2 = [];
    let lines = [], positions = [], m;
    for (let line2 of template.split(/\r\n?|\n/)) {
      while (m = /[#$]\{(?:(\d+)(?::([^{}]*))?|((?:\\[{}]|[^{}])*))\}/.exec(line2)) {
        let seq = m[1] ? +m[1] : null, rawName = m[2] || m[3] || "", found = -1;
        let name3 = rawName.replace(/\\[{}]/g, (m2) => m2[1]);
        for (let i = 0; i < fields2.length; i++) {
          if (seq != null ? fields2[i].seq == seq : name3 ? fields2[i].name == name3 : false)
            found = i;
        }
        if (found < 0) {
          let i = 0;
          while (i < fields2.length && (seq == null || fields2[i].seq != null && fields2[i].seq < seq))
            i++;
          fields2.splice(i, 0, { seq, name: name3 });
          found = i;
          for (let pos of positions)
            if (pos.field >= found)
              pos.field++;
        }
        for (let pos of positions)
          if (pos.line == lines.length && pos.from > m.index) {
            let snip = m[2] ? 3 + (m[1] || "").length : 2;
            pos.from -= snip;
            pos.to -= snip;
          }
        positions.push(new FieldPos(found, lines.length, m.index, m.index + name3.length));
        line2 = line2.slice(0, m.index) + rawName + line2.slice(m.index + m[0].length);
      }
      line2 = line2.replace(/\\([{}])/g, (_, brace, index2) => {
        for (let pos of positions)
          if (pos.line == lines.length && pos.from > index2) {
            pos.from--;
            pos.to--;
          }
        return brace;
      });
      lines.push(line2);
    }
    return new _Snippet(lines, positions);
  }
};
var fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
  toDOM() {
    let span3 = document.createElement("span");
    span3.className = "cm-snippetFieldPosition";
    return span3;
  }
  ignoreEvent() {
    return false;
  }
}() });
var fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
var ActiveSnippet = class _ActiveSnippet {
  constructor(ranges, active) {
    this.ranges = ranges;
    this.active = active;
    this.deco = Decoration.set(ranges.map((r) => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)), true);
  }
  map(changes) {
    let ranges = [];
    for (let r of this.ranges) {
      let mapped = r.map(changes);
      if (!mapped)
        return null;
      ranges.push(mapped);
    }
    return new _ActiveSnippet(ranges, this.active);
  }
  selectionInsideField(sel) {
    return sel.ranges.every((range3) => this.ranges.some((r) => r.field == this.active && r.from <= range3.from && r.to >= range3.to));
  }
};
var setActive = /* @__PURE__ */ StateEffect.define({
  map(value, changes) {
    return value && value.map(changes);
  }
});
var moveToField = /* @__PURE__ */ StateEffect.define();
var snippetState = /* @__PURE__ */ StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    for (let effect of tr.effects) {
      if (effect.is(setActive))
        return effect.value;
      if (effect.is(moveToField) && value)
        return new ActiveSnippet(value.ranges, effect.value);
    }
    if (value && tr.docChanged)
      value = value.map(tr.changes);
    if (value && tr.selection && !value.selectionInsideField(tr.selection))
      value = null;
    return value;
  },
  provide: (f) => EditorView.decorations.from(f, (val) => val ? val.deco : Decoration.none)
});
function fieldSelection(ranges, field) {
  return EditorSelection.create(ranges.filter((r) => r.field == field).map((r) => EditorSelection.range(r.from, r.to)));
}
function snippet(template) {
  let snippet2 = Snippet.parse(template);
  return (editor, completion, from, to) => {
    let { text, ranges } = snippet2.instantiate(editor.state, from);
    let { main } = editor.state.selection;
    let spec = {
      changes: { from, to: to == main.from ? main.to : to, insert: Text.of(text) },
      scrollIntoView: true,
      annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : void 0
    };
    if (ranges.length)
      spec.selection = fieldSelection(ranges, 0);
    if (ranges.some((r) => r.field > 0)) {
      let active = new ActiveSnippet(ranges, 0);
      let effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === void 0)
        effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme2]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return ({ state, dispatch: dispatch3 }) => {
    let active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0)
      return false;
    let next = active.active + dir, last2 = dir > 0 && !active.ranges.some((r) => r.field == next + dir);
    dispatch3(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last2 ? null : new ActiveSnippet(active.ranges, next)),
      scrollIntoView: true
    }));
    return true;
  };
}
var clearSnippet = ({ state, dispatch: dispatch3 }) => {
  let active = state.field(snippetState, false);
  if (!active)
    return false;
  dispatch3(state.update({ effects: setActive.of(null) }));
  return true;
};
var nextSnippetField = /* @__PURE__ */ moveField(1);
var prevSnippetField = /* @__PURE__ */ moveField(-1);
var defaultSnippetKeymap = [
  { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
  { key: "Escape", run: clearSnippet }
];
var snippetKeymap = /* @__PURE__ */ Facet.define({
  combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
var addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
function snippetCompletion(template, completion) {
  return { ...completion, apply: snippet(template) };
}
var snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
  mousedown(event, view2) {
    let active = view2.state.field(snippetState, false), pos;
    if (!active || (pos = view2.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
      return false;
    let match3 = active.ranges.find((r) => r.from <= pos && r.to >= pos);
    if (!match3 || match3.field == active.active)
      return false;
    view2.dispatch({
      selection: fieldSelection(active.ranges, match3.field),
      effects: setActive.of(active.ranges.some((r) => r.field > match3.field) ? new ActiveSnippet(active.ranges, match3.field) : null),
      scrollIntoView: true
    });
    return true;
  }
});
var closedBracket = /* @__PURE__ */ new class extends RangeValue {
}();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
var android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);

// node_modules/@codemirror/lang-python/dist/index.js
var cache = /* @__PURE__ */ new NodeWeakMap();
var ScopeNodes = /* @__PURE__ */ new Set([
  "Script",
  "Body",
  "FunctionDefinition",
  "ClassDefinition",
  "LambdaExpression",
  "ForStatement",
  "MatchClause"
]);
function defID(type2) {
  return (node, def, outer) => {
    if (outer)
      return false;
    let id4 = node.node.getChild("VariableName");
    if (id4)
      def(id4, type2);
    return true;
  };
}
var gatherCompletions = {
  FunctionDefinition: /* @__PURE__ */ defID("function"),
  ClassDefinition: /* @__PURE__ */ defID("class"),
  ForStatement(node, def, outer) {
    if (outer)
      for (let child = node.node.firstChild; child; child = child.nextSibling) {
        if (child.name == "VariableName")
          def(child, "variable");
        else if (child.name == "in")
          break;
      }
  },
  ImportStatement(_node, def) {
    var _a2, _b;
    let { node } = _node;
    let isFrom = ((_a2 = node.firstChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "from";
    for (let ch = node.getChild("import"); ch; ch = ch.nextSibling) {
      if (ch.name == "VariableName" && ((_b = ch.nextSibling) === null || _b === void 0 ? void 0 : _b.name) != "as")
        def(ch, isFrom ? "variable" : "namespace");
    }
  },
  AssignStatement(node, def) {
    for (let child = node.node.firstChild; child; child = child.nextSibling) {
      if (child.name == "VariableName")
        def(child, "variable");
      else if (child.name == ":" || child.name == "AssignOp")
        break;
    }
  },
  ParamList(node, def) {
    for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {
      if (child.name == "VariableName" && (!prev || !/\*|AssignOp/.test(prev.name)))
        def(child, "variable");
      prev = child;
    }
  },
  CapturePattern: /* @__PURE__ */ defID("variable"),
  AsPattern: /* @__PURE__ */ defID("variable"),
  __proto__: null
};
function getScope(doc2, node) {
  let cached = cache.get(node);
  if (cached)
    return cached;
  let completions = [], top3 = true;
  function def(node2, type2) {
    let name3 = doc2.sliceString(node2.from, node2.to);
    completions.push({ label: name3, type: type2 });
  }
  node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
    if (node2.name) {
      let gather = gatherCompletions[node2.name];
      if (gather && gather(node2, def, top3) || !top3 && ScopeNodes.has(node2.name))
        return false;
      top3 = false;
    } else if (node2.to - node2.from > 8192) {
      for (let c of getScope(doc2, node2.node))
        completions.push(c);
      return false;
    }
  });
  cache.set(node, completions);
  return completions;
}
var Identifier = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;
var dontComplete = ["String", "FormatString", "Comment", "PropertyName"];
function localCompletionSource(context2) {
  let inner = syntaxTree(context2.state).resolveInner(context2.pos, -1);
  if (dontComplete.indexOf(inner.name) > -1)
    return null;
  let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context2.state.sliceDoc(inner.from, inner.to));
  if (!isWord && !context2.explicit)
    return null;
  let options = [];
  for (let pos = inner; pos; pos = pos.parent) {
    if (ScopeNodes.has(pos.name))
      options = options.concat(getScope(context2.state.doc, pos));
  }
  return {
    options,
    from: isWord ? inner.from : context2.pos,
    validFor: Identifier
  };
}
var globals = /* @__PURE__ */ [
  "__annotations__",
  "__builtins__",
  "__debug__",
  "__doc__",
  "__import__",
  "__name__",
  "__loader__",
  "__package__",
  "__spec__",
  "False",
  "None",
  "True"
].map((n) => ({ label: n, type: "constant" })).concat(/* @__PURE__ */ [
  "ArithmeticError",
  "AssertionError",
  "AttributeError",
  "BaseException",
  "BlockingIOError",
  "BrokenPipeError",
  "BufferError",
  "BytesWarning",
  "ChildProcessError",
  "ConnectionAbortedError",
  "ConnectionError",
  "ConnectionRefusedError",
  "ConnectionResetError",
  "DeprecationWarning",
  "EOFError",
  "Ellipsis",
  "EncodingWarning",
  "EnvironmentError",
  "Exception",
  "FileExistsError",
  "FileNotFoundError",
  "FloatingPointError",
  "FutureWarning",
  "GeneratorExit",
  "IOError",
  "ImportError",
  "ImportWarning",
  "IndentationError",
  "IndexError",
  "InterruptedError",
  "IsADirectoryError",
  "KeyError",
  "KeyboardInterrupt",
  "LookupError",
  "MemoryError",
  "ModuleNotFoundError",
  "NameError",
  "NotADirectoryError",
  "NotImplemented",
  "NotImplementedError",
  "OSError",
  "OverflowError",
  "PendingDeprecationWarning",
  "PermissionError",
  "ProcessLookupError",
  "RecursionError",
  "ReferenceError",
  "ResourceWarning",
  "RuntimeError",
  "RuntimeWarning",
  "StopAsyncIteration",
  "StopIteration",
  "SyntaxError",
  "SyntaxWarning",
  "SystemError",
  "SystemExit",
  "TabError",
  "TimeoutError",
  "TypeError",
  "UnboundLocalError",
  "UnicodeDecodeError",
  "UnicodeEncodeError",
  "UnicodeError",
  "UnicodeTranslateError",
  "UnicodeWarning",
  "UserWarning",
  "ValueError",
  "Warning",
  "ZeroDivisionError"
].map((n) => ({ label: n, type: "type" }))).concat(/* @__PURE__ */ [
  "bool",
  "bytearray",
  "bytes",
  "classmethod",
  "complex",
  "float",
  "frozenset",
  "int",
  "list",
  "map",
  "memoryview",
  "object",
  "range",
  "set",
  "staticmethod",
  "str",
  "super",
  "tuple",
  "type"
].map((n) => ({ label: n, type: "class" }))).concat(/* @__PURE__ */ [
  "abs",
  "aiter",
  "all",
  "anext",
  "any",
  "ascii",
  "bin",
  "breakpoint",
  "callable",
  "chr",
  "compile",
  "delattr",
  "dict",
  "dir",
  "divmod",
  "enumerate",
  "eval",
  "exec",
  "exit",
  "filter",
  "format",
  "getattr",
  "globals",
  "hasattr",
  "hash",
  "help",
  "hex",
  "id",
  "input",
  "isinstance",
  "issubclass",
  "iter",
  "len",
  "license",
  "locals",
  "max",
  "min",
  "next",
  "oct",
  "open",
  "ord",
  "pow",
  "print",
  "property",
  "quit",
  "repr",
  "reversed",
  "round",
  "setattr",
  "slice",
  "sorted",
  "sum",
  "vars",
  "zip"
].map((n) => ({ label: n, type: "function" })));
var snippets = [
  /* @__PURE__ */ snippetCompletion("def ${name}(${params}):\n	${}", {
    label: "def",
    detail: "function",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("for ${name} in ${collection}:\n	${}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("while ${}:\n	${}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("try:\n	${}\nexcept ${error}:\n	${}", {
    label: "try",
    detail: "/ except block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if ${}:\n	\n", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if ${}:\n	${}\nelse:\n	${}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("class ${name}:\n	def __init__(self, ${params}):\n			${}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("import ${module}", {
    label: "import",
    detail: "statement",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("from ${module} import ${names}", {
    label: "from",
    detail: "import",
    type: "keyword"
  })
];
var globalCompletion = /* @__PURE__ */ ifNotIn(dontComplete, /* @__PURE__ */ completeFromList(/* @__PURE__ */ globals.concat(snippets)));
function innerBody(context2) {
  let { node, pos } = context2;
  let lineIndent = context2.lineIndent(pos, -1);
  let found = null;
  for (; ; ) {
    let before = node.childBefore(pos);
    if (!before) {
      break;
    } else if (before.name == "Comment") {
      pos = before.from;
    } else if (before.name == "Body" || before.name == "MatchBody") {
      if (context2.baseIndentFor(before) + context2.unit <= lineIndent)
        found = before;
      node = before;
    } else if (before.name == "MatchClause") {
      node = before;
    } else if (before.type.is("Statement")) {
      node = before;
    } else {
      break;
    }
  }
  return found;
}
function indentBody(context2, node) {
  let base2 = context2.baseIndentFor(node);
  let line2 = context2.lineAt(context2.pos, -1), to = line2.from + line2.text.length;
  if (/^\s*($|#)/.test(line2.text) && context2.node.to < to + 100 && !/\S/.test(context2.state.sliceDoc(to, context2.node.to)) && context2.lineIndent(context2.pos, -1) <= base2)
    return null;
  if (/^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(context2.textAfter) && context2.lineIndent(context2.pos, -1) > base2)
    return null;
  return base2 + context2.unit;
}
var pythonLanguage = /* @__PURE__ */ LRLanguage.define({
  name: "python",
  parser: /* @__PURE__ */ parser.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        Body: (context2) => {
          var _a2;
          let body = /^\s*(#|$)/.test(context2.textAfter) && innerBody(context2) || context2.node;
          return (_a2 = indentBody(context2, body)) !== null && _a2 !== void 0 ? _a2 : context2.continue();
        },
        MatchBody: (context2) => {
          var _a2;
          let inner = innerBody(context2);
          return (_a2 = indentBody(context2, inner || context2.node)) !== null && _a2 !== void 0 ? _a2 : context2.continue();
        },
        IfStatement: (cx) => /^\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
        "ForStatement WhileStatement": (cx) => /^\s*else:/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
        TryStatement: (cx) => /^\s*(except[ :]|finally:|else:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
        MatchStatement: (cx) => {
          if (/^\s*case /.test(cx.textAfter))
            return cx.baseIndent + cx.unit;
          return cx.continue();
        },
        "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /* @__PURE__ */ delimitedIndent({ closing: ")" }),
        "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /* @__PURE__ */ delimitedIndent({ closing: "}" }),
        "ArrayExpression ArrayComprehensionExpression": /* @__PURE__ */ delimitedIndent({ closing: "]" }),
        MemberExpression: (cx) => cx.baseIndent + cx.unit,
        "String FormatString": () => null,
        Script: (context2) => {
          var _a2;
          let inner = innerBody(context2);
          return (_a2 = inner && indentBody(context2, inner)) !== null && _a2 !== void 0 ? _a2 : context2.continue();
        }
      }),
      /* @__PURE__ */ foldNodeProp.add({
        "ArrayExpression DictionaryExpression SetExpression TupleExpression": foldInside,
        Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) }),
        "String FormatString": (node, state) => ({ from: state.doc.lineAt(node.from).to, to: node.to })
      })
    ]
  }),
  languageData: {
    closeBrackets: {
      brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
      stringPrefixes: [
        "f",
        "fr",
        "rf",
        "r",
        "u",
        "b",
        "br",
        "rb",
        "F",
        "FR",
        "RF",
        "R",
        "U",
        "B",
        "BR",
        "RB"
      ]
    },
    commentTokens: { line: "#" },
    // Indent logic logic are triggered upon below input patterns
    indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:|case\s+[^:]*:?)$/
  }
});
function python() {
  return new LanguageSupport(pythonLanguage, [
    pythonLanguage.data.of({ autocomplete: localCompletionSource }),
    pythonLanguage.data.of({ autocomplete: globalCompletion })
  ]);
}

// node_modules/@codemirror/theme-one-dark/dist/index.js
var chalky = "#e5c07b";
var coral = "#e06c75";
var cyan = "#56b6c2";
var invalid = "#ffffff";
var ivory = "#abb2bf";
var stone = "#7d8799";
var malibu = "#61afef";
var sage = "#98c379";
var whiskey = "#d19a66";
var violet = "#c678dd";
var darkBackground = "#21252b";
var highlightBackground = "#2c313a";
var background = "#282c34";
var tooltipBackground = "#353a42";
var selection2 = "#3E4451";
var cursor = "#528bff";
var oneDarkTheme = /* @__PURE__ */ EditorView.theme({
  "&": {
    color: ivory,
    backgroundColor: background
  },
  ".cm-content": {
    caretColor: cursor
  },
  ".cm-cursor, .cm-dropCursor": { borderLeftColor: cursor },
  "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: selection2 },
  ".cm-panels": { backgroundColor: darkBackground, color: ivory },
  ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
  ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
  ".cm-searchMatch": {
    backgroundColor: "#72a1ff59",
    outline: "1px solid #457dff"
  },
  ".cm-searchMatch.cm-searchMatch-selected": {
    backgroundColor: "#6199ff2f"
  },
  ".cm-activeLine": { backgroundColor: "#6699ff0b" },
  ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
  "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bad0f847"
  },
  ".cm-gutters": {
    backgroundColor: background,
    color: stone,
    border: "none"
  },
  ".cm-activeLineGutter": {
    backgroundColor: highlightBackground
  },
  ".cm-foldPlaceholder": {
    backgroundColor: "transparent",
    border: "none",
    color: "#ddd"
  },
  ".cm-tooltip": {
    border: "none",
    backgroundColor: tooltipBackground
  },
  ".cm-tooltip .cm-tooltip-arrow:before": {
    borderTopColor: "transparent",
    borderBottomColor: "transparent"
  },
  ".cm-tooltip .cm-tooltip-arrow:after": {
    borderTopColor: tooltipBackground,
    borderBottomColor: tooltipBackground
  },
  ".cm-tooltip-autocomplete": {
    "& > ul > li[aria-selected]": {
      backgroundColor: highlightBackground,
      color: ivory
    }
  }
}, { dark: true });
var oneDarkHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
  {
    tag: tags.keyword,
    color: violet
  },
  {
    tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
    color: coral
  },
  {
    tag: [/* @__PURE__ */ tags.function(tags.variableName), tags.labelName],
    color: malibu
  },
  {
    tag: [tags.color, /* @__PURE__ */ tags.constant(tags.name), /* @__PURE__ */ tags.standard(tags.name)],
    color: whiskey
  },
  {
    tag: [/* @__PURE__ */ tags.definition(tags.name), tags.separator],
    color: ivory
  },
  {
    tag: [tags.typeName, tags.className, tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: chalky
  },
  {
    tag: [tags.operator, tags.operatorKeyword, tags.url, tags.escape, tags.regexp, tags.link, /* @__PURE__ */ tags.special(tags.string)],
    color: cyan
  },
  {
    tag: [tags.meta, tags.comment],
    color: stone
  },
  {
    tag: tags.strong,
    fontWeight: "bold"
  },
  {
    tag: tags.emphasis,
    fontStyle: "italic"
  },
  {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: tags.link,
    color: stone,
    textDecoration: "underline"
  },
  {
    tag: tags.heading,
    fontWeight: "bold",
    color: coral
  },
  {
    tag: [tags.atom, tags.bool, /* @__PURE__ */ tags.special(tags.variableName)],
    color: whiskey
  },
  {
    tag: [tags.processingInstruction, tags.string, tags.inserted],
    color: sage
  },
  {
    tag: tags.invalid,
    color: invalid
  }
]);
var oneDark = [oneDarkTheme, /* @__PURE__ */ syntaxHighlighting(oneDarkHighlightStyle)];

// output-es/App.CodeMirror/foreign.js
function curry2(f) {
  return (x1) => (x2) => f(x1, x2);
}
var startState = EditorState.create({
  doc: "",
  extensions: [
    keymap.of(defaultKeymap),
    EditorView.editable.of(false),
    lineNumbers(),
    python(),
    oneDark
  ]
});
function getContentsLength_(ed) {
  return ed.state.doc.length;
}
function addEditorView_(id4) {
  return () => {
    const div = select_default2("#" + id4).node();
    return new EditorView({
      state: startState,
      parent: div
    });
  };
}
function replaceSelection_(editorState, str) {
  return editorState.replaceSelection(str);
}
function dispatch_(editorView, tr) {
  return () => {
    editorView.dispatch(tr);
  };
}
function update_(editorState, specs) {
  return () => {
    return editorState.update(...specs);
  };
}
var addEditorView = addEditorView_;
var dispatch2 = curry2(dispatch_);
var getContentsLength = getContentsLength_;
var replaceSelection = curry2(replaceSelection_);
var update = curry2(update_);

// output-es/Control.Semigroupoid/index.js
var semigroupoidFn = { compose: (f) => (g) => (x2) => f(g(x2)) };

// output-es/Control.Category/index.js
var categoryFn = { identity: (x2) => x2, Semigroupoid0: () => semigroupoidFn };

// output-es/Data.Function/index.js
var $$const = (a) => (v) => a;
var applyFlipped = (x2) => (f) => f(x2);
var apply = (f) => (x2) => f(x2);

// output-es/Type.Proxy/index.js
var $$$Proxy = () => ({ tag: "Proxy" });
var $$Proxy = /* @__PURE__ */ $$$Proxy();

// output-es/Data.Functor/foreign.js
var arrayMap = function(f) {
  return function(arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

// output-es/Data.Functor/index.js
var functorArray = { map: arrayMap };

// output-es/Control.Apply/foreign.js
var arrayApply = function(fs) {
  return function(xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l * k);
    var n = 0;
    for (var i = 0; i < l; i++) {
      var f = fs[i];
      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }
    return result;
  };
};

// output-es/Control.Apply/index.js
var identity4 = (x2) => x2;

// output-es/Control.Bind/foreign.js
var arrayBind = function(arr) {
  return function(f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

// output-es/Control.Bind/index.js
var identity5 = (x2) => x2;

// output-es/Record.Unsafe/foreign.js
var unsafeSet = function(label) {
  return function(value) {
    return function(rec) {
      var copy2 = {};
      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy2[key] = rec[key];
        }
      }
      copy2[label] = value;
      return copy2;
    };
  };
};

// output-es/Data.Show/foreign.js
var showIntImpl = function(n) {
  return n.toString();
};
var showNumberImpl = function(n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};
var showCharImpl = function(c) {
  var code = c.charCodeAt(0);
  if (code < 32 || code === 127) {
    switch (c) {
      case "\x07":
        return "'\\a'";
      case "\b":
        return "'\\b'";
      case "\f":
        return "'\\f'";
      case "\n":
        return "'\\n'";
      case "\r":
        return "'\\r'";
      case "	":
        return "'\\t'";
      case "\v":
        return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};
var showStringImpl = function(s) {
  var l = s.length;
  return '"' + s.replace(
    /[\0-\x1F\x7F"\\]/g,
    // eslint-disable-line no-control-regex
    function(c, i) {
      switch (c) {
        case '"':
        case "\\":
          return "\\" + c;
        case "\x07":
          return "\\a";
        case "\b":
          return "\\b";
        case "\f":
          return "\\f";
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case "	":
          return "\\t";
        case "\v":
          return "\\v";
      }
      var k = i + 1;
      var empty3 = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty3;
    }
  ) + '"';
};
var showArrayImpl = function(f) {
  return function(xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

// output-es/Data.Show/index.js
var showUnit = { show: (v) => "unit" };
var showString = { show: showStringImpl };
var showInt = { show: showIntImpl };
var showBoolean = {
  show: (v) => {
    if (v) {
      return "true";
    }
    return "false";
  }
};

// output-es/Data.Generic.Rep/index.js
var $NoArguments = () => ({ tag: "NoArguments" });
var $Product = (_1, _2) => ({ tag: "Product", _1, _2 });
var $Sum = (tag, _1) => ({ tag, _1 });
var NoArguments = /* @__PURE__ */ $NoArguments();

// output-es/Data.Ordering/index.js
var $Ordering = (tag) => tag;
var LT = /* @__PURE__ */ $Ordering("LT");
var GT = /* @__PURE__ */ $Ordering("GT");
var EQ = /* @__PURE__ */ $Ordering("EQ");

// output-es/Data.Maybe/index.js
var $Maybe = (tag, _1) => ({ tag, _1 });
var Nothing = /* @__PURE__ */ $Maybe("Nothing");
var Just = (value0) => $Maybe("Just", value0);
var isNothing = (v2) => {
  if (v2.tag === "Nothing") {
    return true;
  }
  if (v2.tag === "Just") {
    return false;
  }
  fail();
};
var functorMaybe = {
  map: (v) => (v1) => {
    if (v1.tag === "Just") {
      return $Maybe("Just", v(v1._1));
    }
    return Nothing;
  }
};
var applyMaybe = {
  apply: (v) => (v1) => {
    if (v.tag === "Just") {
      if (v1.tag === "Just") {
        return $Maybe("Just", v._1(v1._1));
      }
      return Nothing;
    }
    if (v.tag === "Nothing") {
      return Nothing;
    }
    fail();
  },
  Functor0: () => functorMaybe
};
var applicativeMaybe = { pure: Just, Apply0: () => applyMaybe };

// output-es/Data.Either/index.js
var $Either = (tag, _1) => ({ tag, _1 });
var Left = (value0) => $Either("Left", value0);
var Right = (value0) => $Either("Right", value0);
var functorEither = {
  map: (f) => (m) => {
    if (m.tag === "Left") {
      return $Either("Left", m._1);
    }
    if (m.tag === "Right") {
      return $Either("Right", f(m._1));
    }
    fail();
  }
};
var choose = (dictAlt) => {
  const $0 = dictAlt.Functor0();
  return (a) => (b) => dictAlt.alt($0.map(Left)(a))($0.map(Right)(b));
};
var applyEither = {
  apply: (v) => (v1) => {
    if (v.tag === "Left") {
      return $Either("Left", v._1);
    }
    if (v.tag === "Right") {
      if (v1.tag === "Left") {
        return $Either("Left", v1._1);
      }
      if (v1.tag === "Right") {
        return $Either("Right", v._1(v1._1));
      }
    }
    fail();
  },
  Functor0: () => functorEither
};
var applicativeEither = { pure: Right, Apply0: () => applyEither };

// output-es/Data.Identity/index.js
var Identity = (x2) => x2;
var functorIdentity = { map: (f) => (m) => f(m) };
var applyIdentity = { apply: (v) => (v1) => v(v1), Functor0: () => functorIdentity };
var bindIdentity = { bind: (v) => (f) => f(v), Apply0: () => applyIdentity };
var applicativeIdentity = { pure: Identity, Apply0: () => applyIdentity };
var monadIdentity = { Applicative0: () => applicativeIdentity, Bind1: () => bindIdentity };

// output-es/Effect/foreign.js
var pureE = function(a) {
  return function() {
    return a;
  };
};
var bindE = function(a) {
  return function(f) {
    return function() {
      return f(a())();
    };
  };
};

// output-es/Effect/index.js
var monadEffect = { Applicative0: () => applicativeEffect, Bind1: () => bindEffect };
var bindEffect = { bind: bindE, Apply0: () => applyEffect };
var applyEffect = {
  apply: (f) => (a) => () => {
    const f$p = f();
    const a$p = a();
    return applicativeEffect.pure(f$p(a$p))();
  },
  Functor0: () => functorEffect
};
var applicativeEffect = { pure: pureE, Apply0: () => applyEffect };
var functorEffect = {
  map: (f) => (a) => () => {
    const a$p = a();
    return f(a$p);
  }
};

// output-es/Control.Monad.Rec.Class/index.js
var $Step = (tag, _1) => ({ tag, _1 });
var Loop = (value0) => $Step("Loop", value0);
var monadRecIdentity = {
  tailRecM: (f) => {
    const go = (go$a0$copy) => {
      let go$a0 = go$a0$copy, go$c = true, go$r;
      while (go$c) {
        const v = go$a0;
        if (v.tag === "Loop") {
          go$a0 = f(v._1);
          continue;
        }
        if (v.tag === "Done") {
          go$c = false;
          go$r = v._1;
          continue;
        }
        fail();
      }
      return go$r;
    };
    return (x2) => go(f(x2));
  },
  Monad0: () => monadIdentity
};

// output-es/Control.Monad.ST.Internal/foreign.js
var map_ = function(f) {
  return function(a) {
    return function() {
      return f(a());
    };
  };
};
var pure_ = function(a) {
  return function() {
    return a;
  };
};
var bind_ = function(a) {
  return function(f) {
    return function() {
      return f(a())();
    };
  };
};

// output-es/Control.Monad.ST.Internal/index.js
var functorST = { map: map_ };
var monadST = { Applicative0: () => applicativeST, Bind1: () => bindST };
var bindST = { bind: bind_, Apply0: () => applyST };
var applyST = {
  apply: (f) => (a) => () => {
    const f$p = f();
    const a$p = a();
    return applicativeST.pure(f$p(a$p))();
  },
  Functor0: () => functorST
};
var applicativeST = { pure: pure_, Apply0: () => applyST };
var monadRecST = {
  tailRecM: (f) => (a) => {
    const $0 = f(a);
    return () => {
      const $1 = $0();
      let r = $1;
      while ((() => {
        const $22 = r;
        return $22.tag === "Loop";
      })()) {
        const v = r;
        if (v.tag === "Loop") {
          const e = f(v._1)();
          r = e;
          continue;
        }
        if (v.tag === "Done") {
          continue;
        }
        fail();
      }
      const $2 = r;
      if ($2.tag === "Done") {
        return $2._1;
      }
      fail();
    };
  },
  Monad0: () => monadST
};

// output-es/Control.Monad.ST.Uncurried/foreign.js
var runSTFn2 = function runSTFn22(fn) {
  return function(a) {
    return function(b) {
      return function() {
        return fn(a, b);
      };
    };
  };
};

// output-es/Data.Array.ST/foreign.js
var pushAllImpl = function(as, xs) {
  return xs.push.apply(xs, as);
};

// output-es/Data.Array.ST/index.js
var push = (a) => runSTFn2(pushAllImpl)([a]);

// output-es/Data.Foldable/foreign.js
var foldrArray = function(f) {
  return function(init5) {
    return function(xs) {
      var acc = init5;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};
var foldlArray = function(f) {
  return function(init5) {
    return function(xs) {
      var acc = init5;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

// output-es/Data.Foldable/index.js
var identity6 = (x2) => x2;
var monoidEndo = /* @__PURE__ */ (() => {
  const semigroupEndo1 = { append: (v) => (v1) => (x2) => v(v1(x2)) };
  return { mempty: (x2) => x2, Semigroup0: () => semigroupEndo1 };
})();
var traverse_ = (dictApplicative) => {
  const $0 = dictApplicative.Apply0();
  return (dictFoldable) => (f) => dictFoldable.foldr((x2) => {
    const $1 = f(x2);
    return (b) => $0.apply($0.Functor0().map((v) => identity4)($1))(b);
  })(dictApplicative.pure());
};
var for_ = (dictApplicative) => {
  const traverse_1 = traverse_(dictApplicative);
  return (dictFoldable) => {
    const $0 = traverse_1(dictFoldable);
    return (b) => (a) => $0(a)(b);
  };
};
var foldableTuple = { foldr: (f) => (z) => (v) => f(v._2)(z), foldl: (f) => (z) => (v) => f(z)(v._2), foldMap: (dictMonoid) => (f) => (v) => f(v._2) };
var foldableMaybe = {
  foldr: (v) => (v1) => (v2) => {
    if (v2.tag === "Nothing") {
      return v1;
    }
    if (v2.tag === "Just") {
      return v(v2._1)(v1);
    }
    fail();
  },
  foldl: (v) => (v1) => (v2) => {
    if (v2.tag === "Nothing") {
      return v1;
    }
    if (v2.tag === "Just") {
      return v(v1)(v2._1);
    }
    fail();
  },
  foldMap: (dictMonoid) => {
    const mempty5 = dictMonoid.mempty;
    return (v) => (v1) => {
      if (v1.tag === "Nothing") {
        return mempty5;
      }
      if (v1.tag === "Just") {
        return v(v1._1);
      }
      fail();
    };
  }
};
var foldableArray = {
  foldr: foldrArray,
  foldl: foldlArray,
  foldMap: (dictMonoid) => {
    const mempty5 = dictMonoid.mempty;
    return (f) => foldableArray.foldr((x2) => (acc) => dictMonoid.Semigroup0().append(f(x2))(acc))(mempty5);
  }
};
var foldrDefault = (dictFoldable) => {
  const foldMap22 = dictFoldable.foldMap(monoidEndo);
  return (c) => (u) => (xs) => foldMap22((x2) => c(x2))(xs)(u);
};

// output-es/Data.Tuple/index.js
var $Tuple = (_1, _2) => ({ tag: "Tuple", _1, _2 });
var Tuple = (value0) => (value1) => $Tuple(value0, value1);
var swap = (v) => $Tuple(v._2, v._1);
var snd = (v) => v._2;
var functorTuple = { map: (f) => (m) => $Tuple(m._1, f(m._2)) };
var fst = (v) => v._1;

// output-es/Data.FunctorWithIndex/foreign.js
var mapWithIndexArray = function(f) {
  return function(xs) {
    var l = xs.length;
    var result = Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(i)(xs[i]);
    }
    return result;
  };
};

// output-es/Data.FunctorWithIndex/index.js
var functorWithIndexArray = { mapWithIndex: mapWithIndexArray, Functor0: () => functorArray };

// output-es/Data.Eq/foreign.js
var refEq = function(r1) {
  return function(r2) {
    return r1 === r2;
  };
};
var eqIntImpl = refEq;
var eqNumberImpl = refEq;
var eqCharImpl = refEq;
var eqStringImpl = refEq;
var eqArrayImpl = function(f) {
  return function(xs) {
    return function(ys) {
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

// output-es/Data.Eq/index.js
var eqUnit = { eq: (v) => (v1) => true };
var eqString = { eq: eqStringImpl };
var eqNumber = { eq: eqNumberImpl };
var eqInt = { eq: eqIntImpl };
var eqChar = { eq: eqCharImpl };

// output-es/Data.Ord/foreign.js
var unsafeCompareImpl = function(lt) {
  return function(eq2) {
    return function(gt) {
      return function(x2) {
        return function(y2) {
          return x2 < y2 ? lt : x2 === y2 ? eq2 : gt;
        };
      };
    };
  };
};
var ordIntImpl = unsafeCompareImpl;
var ordNumberImpl = unsafeCompareImpl;
var ordStringImpl = unsafeCompareImpl;
var ordArrayImpl = function(f) {
  return function(xs) {
    return function(ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x2 = xs[i];
        var y2 = ys[i];
        var o = f(x2)(y2);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

// output-es/Data.Ord/index.js
var ordString = { compare: /* @__PURE__ */ ordStringImpl(LT)(EQ)(GT), Eq0: () => eqString };
var ordNumber = { compare: /* @__PURE__ */ ordNumberImpl(LT)(EQ)(GT), Eq0: () => eqNumber };
var ordInt = { compare: /* @__PURE__ */ ordIntImpl(LT)(EQ)(GT), Eq0: () => eqInt };
var ordArray = (dictOrd) => {
  const eqArray = { eq: eqArrayImpl(dictOrd.Eq0().eq) };
  return {
    compare: (xs) => (ys) => ordInt.compare(0)(ordArrayImpl((x2) => (y2) => {
      const v = dictOrd.compare(x2)(y2);
      if (v === "EQ") {
        return 0;
      }
      if (v === "LT") {
        return 1;
      }
      if (v === "GT") {
        return -1;
      }
      fail();
    })(xs)(ys)),
    Eq0: () => eqArray
  };
};

// output-es/Unsafe.Coerce/foreign.js
var unsafeCoerce = function(x2) {
  return x2;
};

// output-es/Data.Traversable/foreign.js
var traverseArrayImpl = /* @__PURE__ */ (function() {
  function array1(a) {
    return [a];
  }
  function array2(a) {
    return function(b) {
      return [a, b];
    };
  }
  function array3(a) {
    return function(b) {
      return function(c) {
        return [a, b, c];
      };
    };
  }
  function concat2(xs) {
    return function(ys) {
      return xs.concat(ys);
    };
  }
  return function(apply3) {
    return function(map4) {
      return function(pure3) {
        return function(f) {
          return function(array4) {
            function go(bot, top3) {
              switch (top3 - bot) {
                case 0:
                  return pure3([]);
                case 1:
                  return map4(array1)(f(array4[bot]));
                case 2:
                  return apply3(map4(array2)(f(array4[bot])))(f(array4[bot + 1]));
                case 3:
                  return apply3(apply3(map4(array3)(f(array4[bot])))(f(array4[bot + 1])))(f(array4[bot + 2]));
                default:
                  var pivot = bot + Math.floor((top3 - bot) / 4) * 2;
                  return apply3(map4(concat2)(go(bot, pivot)))(go(pivot, top3));
              }
            }
            return go(0, array4.length);
          };
        };
      };
    };
  };
})();

// output-es/Data.Traversable/index.js
var identity7 = (x2) => x2;
var traversableTuple = {
  traverse: (dictApplicative) => (f) => (v) => dictApplicative.Apply0().Functor0().map(Tuple(v._1))(f(v._2)),
  sequence: (dictApplicative) => (v) => dictApplicative.Apply0().Functor0().map(Tuple(v._1))(v._2),
  Functor0: () => functorTuple,
  Foldable1: () => foldableTuple
};
var traversableMaybe = {
  traverse: (dictApplicative) => (v) => (v1) => {
    if (v1.tag === "Nothing") {
      return dictApplicative.pure(Nothing);
    }
    if (v1.tag === "Just") {
      return dictApplicative.Apply0().Functor0().map(Just)(v(v1._1));
    }
    fail();
  },
  sequence: (dictApplicative) => (v) => {
    if (v.tag === "Nothing") {
      return dictApplicative.pure(Nothing);
    }
    if (v.tag === "Just") {
      return dictApplicative.Apply0().Functor0().map(Just)(v._1);
    }
    fail();
  },
  Functor0: () => functorMaybe,
  Foldable1: () => foldableMaybe
};
var traversableArray = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return traverseArrayImpl(Apply0.apply)(Apply0.Functor0().map)(dictApplicative.pure);
  },
  sequence: (dictApplicative) => traversableArray.traverse(dictApplicative)(identity7),
  Functor0: () => functorArray,
  Foldable1: () => foldableArray
};

// output-es/Data.Array/foreign.js
var rangeImpl = function(start2, end) {
  var step = start2 > end ? -1 : 1;
  var result = new Array(step * (end - start2) + 1);
  var i = start2, n = 0;
  while (i !== end) {
    result[n++] = i;
    i += step;
  }
  result[n] = i;
  return result;
};
var replicateFill = function(count, value) {
  if (count < 1) {
    return [];
  }
  var result = new Array(count);
  return result.fill(value);
};
var replicatePolyfill = function(count, value) {
  var result = [];
  var n = 0;
  for (var i = 0; i < count; i++) {
    result[n++] = value;
  }
  return result;
};
var replicateImpl = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
var fromFoldableImpl = /* @__PURE__ */ (function() {
  function Cons2(head, tail3) {
    this.head = head;
    this.tail = tail3;
  }
  var emptyList = {};
  function curryCons(head) {
    return function(tail3) {
      return new Cons2(head, tail3);
    };
  }
  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;
    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }
    return result;
  }
  return function(foldr2, xs) {
    return listToArray(foldr2(curryCons)(emptyList)(xs));
  };
})();
var unconsImpl = function(empty3, next, xs) {
  return xs.length === 0 ? empty3({}) : next(xs[0])(xs.slice(1));
};
var findIndexImpl = function(just, nothing, f, xs) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (f(xs[i])) return just(i);
  }
  return nothing;
};
var _updateAt = function(just, nothing, i, a, l) {
  if (i < 0 || i >= l.length) return nothing;
  var l1 = l.slice();
  l1[i] = a;
  return just(l1);
};
var reverse = function(l) {
  return l.slice().reverse();
};
var concat = function(xss) {
  if (xss.length <= 1e4) {
    return Array.prototype.concat.apply([], xss);
  }
  var result = [];
  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];
    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }
  return result;
};
var filterImpl = function(f, xs) {
  return xs.filter(f);
};
var partitionImpl = function(f, xs) {
  var yes = [];
  var no = [];
  for (var i = 0; i < xs.length; i++) {
    var x2 = xs[i];
    if (f(x2))
      yes.push(x2);
    else
      no.push(x2);
  }
  return { yes, no };
};
var scanlImpl = function(f, b, xs) {
  var len = xs.length;
  var acc = b;
  var out = new Array(len);
  for (var i = 0; i < len; i++) {
    acc = f(acc)(xs[i]);
    out[i] = acc;
  }
  return out;
};
var sortByImpl2 = /* @__PURE__ */ (function() {
  function mergeFromTo(compare2, fromOrdering, xs1, xs2, from, to) {
    var mid;
    var i;
    var j;
    var k;
    var x2;
    var y2;
    var c;
    mid = from + (to - from >> 1);
    if (mid - from > 1) mergeFromTo(compare2, fromOrdering, xs2, xs1, from, mid);
    if (to - mid > 1) mergeFromTo(compare2, fromOrdering, xs2, xs1, mid, to);
    i = from;
    j = mid;
    k = from;
    while (i < mid && j < to) {
      x2 = xs2[i];
      y2 = xs2[j];
      c = fromOrdering(compare2(x2)(y2));
      if (c > 0) {
        xs1[k++] = y2;
        ++j;
      } else {
        xs1[k++] = x2;
        ++i;
      }
    }
    while (i < mid) {
      xs1[k++] = xs2[i++];
    }
    while (j < to) {
      xs1[k++] = xs2[j++];
    }
  }
  return function(compare2, fromOrdering, xs) {
    var out;
    if (xs.length < 2) return xs;
    out = xs.slice(0);
    mergeFromTo(compare2, fromOrdering, out, xs.slice(0), 0, xs.length);
    return out;
  };
})();
var sliceImpl = function(s, e, l) {
  return l.slice(s, e);
};
var zipWithImpl = function(f, xs, ys) {
  var l = xs.length < ys.length ? xs.length : ys.length;
  var result = new Array(l);
  for (var i = 0; i < l; i++) {
    result[i] = f(xs[i])(ys[i]);
  }
  return result;
};
var anyImpl = function(p, xs) {
  var len = xs.length;
  for (var i = 0; i < len; i++) {
    if (p(xs[i])) return true;
  }
  return false;
};

// output-es/Data.Array/index.js
var zipWith = ($0) => ($1) => ($2) => zipWithImpl($0, $1, $2);
var sortBy = (comp) => ($0) => sortByImpl2(
  comp,
  (v) => {
    if (v === "GT") {
      return 1;
    }
    if (v === "EQ") {
      return 0;
    }
    if (v === "LT") {
      return -1;
    }
    fail();
  },
  $0
);
var sortWith = (dictOrd) => (f) => sortBy((x2) => (y2) => dictOrd.compare(f(x2))(f(y2)));
var snoc = (xs) => (x2) => (() => {
  const $0 = push(x2);
  return () => {
    const result = [...xs];
    $0(result)();
    return result;
  };
})()();
var nubBy = (comp) => (xs) => {
  const indexedAndSorted = sortBy((x2) => (y2) => comp(x2._2)(y2._2))(mapWithIndexArray(Tuple)(xs));
  if (0 < indexedAndSorted.length) {
    return arrayMap(snd)(sortWith(ordInt)(fst)((() => {
      const result = [indexedAndSorted[0]];
      for (const v1 of indexedAndSorted) {
        const $0 = comp((() => {
          const $02 = result.length - 1 | 0;
          if ($02 >= 0 && $02 < result.length) {
            return result[$02]._2;
          }
          fail();
        })())(v1._2);
        if ($0 === "LT" || $0 === "GT" || $0 !== "EQ") {
          result.push(v1);
        }
      }
      return result;
    })()));
  }
  return [];
};
var transpose = (xs) => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const idx = go$a0, allArrays = go$a1;
      const v = foldlArray((acc) => (nextArr) => {
        if (idx >= 0 && idx < nextArr.length) {
          const $0 = nextArr[idx];
          return $Maybe(
            "Just",
            (() => {
              if (acc.tag === "Nothing") {
                return [$0];
              }
              if (acc.tag === "Just") {
                return snoc(acc._1)($0);
              }
              fail();
            })()
          );
        }
        return acc;
      })(Nothing)(xs);
      if (v.tag === "Nothing") {
        go$c = false;
        go$r = allArrays;
        continue;
      }
      if (v.tag === "Just") {
        go$a0 = idx + 1 | 0;
        go$a1 = snoc(allArrays)(v._1);
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go(0)([]);
};
var foldM = (dictMonad) => (f) => (b) => ($0) => unconsImpl((v) => dictMonad.Applicative0().pure(b), (a) => (as) => dictMonad.Bind1().bind(f(b)(a))((b$p) => foldM(dictMonad)(f)(b$p)(as)), $0);
var elem = (dictEq) => (a) => (arr) => {
  const $0 = findIndexImpl(Just, Nothing, (v) => dictEq.eq(v)(a), arr);
  if ($0.tag === "Nothing") {
    return false;
  }
  if ($0.tag === "Just") {
    return true;
  }
  fail();
};
var cons = (x2) => (xs) => [x2, ...xs];
var some = (dictAlternative) => (dictLazy) => (v) => dictAlternative.Applicative0().Apply0().apply(dictAlternative.Plus1().Alt0().Functor0().map(cons)(v))(dictLazy.defer((v1) => many(dictAlternative)(dictLazy)(v)));
var many = (dictAlternative) => (dictLazy) => (v) => dictAlternative.Plus1().Alt0().alt(some(dictAlternative)(dictLazy)(v))(dictAlternative.Applicative0().pure([]));
var any = ($0) => ($1) => anyImpl($0, $1);

// output-es/Data.Number/foreign.js
var isFiniteImpl = isFinite;
function fromStringImpl(str, isFinite2, just, nothing) {
  var num = parseFloat(str);
  if (isFinite2(num)) {
    return just(num);
  } else {
    return nothing;
  }
}
var ceil = Math.ceil;
var floor = Math.floor;
var log = Math.log;
var pow = function(n) {
  return function(p) {
    return Math.pow(n, p);
  };
};

// output-es/Data.Int/foreign.js
var fromNumberImpl = function(just) {
  return function(nothing) {
    return function(n) {
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};
var toNumber = function(n) {
  return n;
};
var fromStringAsImpl = function(just) {
  return function(nothing) {
    return function(radix) {
      var digits;
      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }
      var pattern2 = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
      return function(s) {
        if (pattern2.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};
var toStringAs = function(radix) {
  return function(i) {
    return i.toString(radix);
  };
};
var quot = function(x2) {
  return function(y2) {
    return x2 / y2 | 0;
  };
};
var rem = function(x2) {
  return function(y2) {
    return x2 % y2;
  };
};

// output-es/Data.Int/index.js
var fromStringAs = /* @__PURE__ */ fromStringAsImpl(Just)(Nothing);
var fromNumber = /* @__PURE__ */ fromNumberImpl(Just)(Nothing);
var unsafeClamp = (x2) => {
  if (!isFiniteImpl(x2)) {
    return 0;
  }
  if (x2 >= toNumber(2147483647)) {
    return 2147483647;
  }
  if (x2 <= toNumber(-2147483648)) {
    return -2147483648;
  }
  const $0 = fromNumber(x2);
  if ($0.tag === "Nothing") {
    return 0;
  }
  if ($0.tag === "Just") {
    return $0._1;
  }
  fail();
};
var floor2 = (x2) => unsafeClamp(floor(x2));
var ceil2 = (x2) => unsafeClamp(ceil(x2));

// output-es/Data.Nullable/foreign.js
var nullImpl = null;
function nullable(a, r, f) {
  return a == null ? r : f(a);
}
function notNull(x2) {
  return x2;
}

// output-es/Data.Profunctor/index.js
var profunctorFn = { dimap: (a2b) => (c2d) => (b2c) => (x2) => c2d(b2c(a2b(x2))) };

// output-es/Data.Profunctor.Strong/index.js
var identity8 = (x2) => x2;
var strongFn = /* @__PURE__ */ (() => ({ first: (a2b) => (v) => $Tuple(a2b(v._1), v._2), second: functorTuple.map, Profunctor0: () => profunctorFn }))();
var fanout = (dictCategory) => {
  const identity1 = dictCategory.identity;
  const $0 = dictCategory.Semigroupoid0();
  const $1 = dictCategory.Semigroupoid0();
  return (dictStrong) => (l) => (r) => $0.compose($1.compose(dictStrong.second(r))(dictStrong.first(l)))(dictStrong.Profunctor0().dimap(identity8)((a) => $Tuple(a, a))(identity1));
};

// output-es/Data.Show.Generic/foreign.js
var intercalate = function(separator) {
  return function(xs) {
    return xs.join(separator);
  };
};

// output-es/Data.Show.Generic/index.js
var genericShowArgsNoArguments = { genericShowArgs: (v) => [] };
var genericShowArgsProduct = (dictGenericShowArgs) => (dictGenericShowArgs1) => ({ genericShowArgs: (v) => [...dictGenericShowArgs.genericShowArgs(v._1), ...dictGenericShowArgs1.genericShowArgs(v._2)] });
var genericShowConstructor = (dictGenericShowArgs) => (dictIsSymbol) => ({
  "genericShow'": (v) => {
    const ctor = dictIsSymbol.reflectSymbol($$Proxy);
    const v1 = dictGenericShowArgs.genericShowArgs(v);
    if (v1.length === 0) {
      return ctor;
    }
    return "(" + intercalate(" ")([ctor, ...v1]) + ")";
  }
});

// output-es/Data.Bounded/foreign.js
var topChar = String.fromCharCode(65535);
var bottomChar = String.fromCharCode(0);
var topNumber = Number.POSITIVE_INFINITY;
var bottomNumber = Number.NEGATIVE_INFINITY;

// output-es/Data.Enum/foreign.js
function toCharCode(c) {
  return c.charCodeAt(0);
}
function fromCharCode(c) {
  return String.fromCharCode(c);
}

// output-es/Data.Semiring/foreign.js
var intAdd = function(x2) {
  return function(y2) {
    return x2 + y2 | 0;
  };
};
var intMul = function(x2) {
  return function(y2) {
    return x2 * y2 | 0;
  };
};
var numAdd = function(n1) {
  return function(n2) {
    return n1 + n2;
  };
};
var numMul = function(n1) {
  return function(n2) {
    return n1 * n2;
  };
};

// output-es/Data.Semiring/index.js
var semiringNumber = { add: numAdd, zero: 0, mul: numMul, one: 1 };
var semiringInt = { add: intAdd, zero: 0, mul: intMul, one: 1 };

// output-es/Data.Ring/foreign.js
var intSub = function(x2) {
  return function(y2) {
    return x2 - y2 | 0;
  };
};
var numSub = function(n1) {
  return function(n2) {
    return n1 - n2;
  };
};

// output-es/Data.Ring/index.js
var ringNumber = { sub: numSub, Semiring0: () => semiringNumber };
var ringInt = { sub: intSub, Semiring0: () => semiringInt };

// output-es/Data.EuclideanRing/foreign.js
var intDiv2 = function(x2) {
  return function(y2) {
    if (y2 === 0) return 0;
    return y2 > 0 ? Math.floor(x2 / y2) : -Math.floor(x2 / -y2);
  };
};
var intMod = function(x2) {
  return function(y2) {
    if (y2 === 0) return 0;
    var yy = Math.abs(y2);
    return (x2 % yy + yy) % yy;
  };
};
var numDiv = function(n1) {
  return function(n2) {
    return n1 / n2;
  };
};

// output-es/Data.String.Unsafe/foreign.js
var charAt = function(i) {
  return function(s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

// output-es/Data.String.CodeUnits/foreign.js
var fromCharArray = function(a) {
  return a.join("");
};
var singleton = function(c) {
  return c;
};
var _charAt = function(just) {
  return function(nothing) {
    return function(i) {
      return function(s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};
var length2 = function(s) {
  return s.length;
};
var take = function(n) {
  return function(s) {
    return s.substr(0, n);
  };
};
var drop = function(n) {
  return function(s) {
    return s.substring(n);
  };
};
var splitAt = function(i) {
  return function(s) {
    return { before: s.substring(0, i), after: s.substring(i) };
  };
};

// output-es/Data.String.CodeUnits/index.js
var stripPrefix = (v) => (str) => {
  const v1 = splitAt(length2(v))(str);
  if (v1.before === v) {
    return $Maybe("Just", v1.after);
  }
  return Nothing;
};
var charAt2 = /* @__PURE__ */ _charAt(Just)(Nothing);

// output-es/Data.String.Common/foreign.js
var split = function(sep) {
  return function(s) {
    return s.split(sep);
  };
};
var toLower = function(s) {
  return s.toLowerCase();
};
var joinWith = function(s) {
  return function(xs) {
    return xs.join(s);
  };
};

// output-es/Data.Unfoldable1/foreign.js
var unfoldr1ArrayImpl = function(isNothing2) {
  return function(fromJust3) {
    return function(fst2) {
      return function(snd2) {
        return function(f) {
          return function(b) {
            var result = [];
            var value = b;
            while (true) {
              var tuple = f(value);
              result.push(fst2(tuple));
              var maybe = snd2(tuple);
              if (isNothing2(maybe)) return result;
              value = fromJust3(maybe);
            }
          };
        };
      };
    };
  };
};

// output-es/Data.Unfoldable1/index.js
var fromJust = (v) => {
  if (v.tag === "Just") {
    return v._1;
  }
  fail();
};
var unfoldable1Array = { unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust)(fst)(snd) };

// output-es/Data.Unfoldable/foreign.js
var unfoldrArrayImpl = function(isNothing2) {
  return function(fromJust3) {
    return function(fst2) {
      return function(snd2) {
        return function(f) {
          return function(b) {
            var result = [];
            var value = b;
            while (true) {
              var maybe = f(value);
              if (isNothing2(maybe)) return result;
              var tuple = fromJust3(maybe);
              result.push(fst2(tuple));
              value = snd2(tuple);
            }
          };
        };
      };
    };
  };
};

// output-es/Data.Unfoldable/index.js
var fromJust2 = (v) => {
  if (v.tag === "Just") {
    return v._1;
  }
  fail();
};
var unfoldableArray = {
  unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust2)(fst)(snd),
  Unfoldable10: () => unfoldable1Array
};

// output-es/Data.String.CodePoints/foreign.js
var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";
var _unsafeCodePointAt0 = function(fallback) {
  return hasCodePointAt ? function(str) {
    return str.codePointAt(0);
  } : fallback;
};
var _codePointAt = function(fallback) {
  return function(Just2) {
    return function(Nothing2) {
      return function(unsafeCodePointAt02) {
        return function(index2) {
          return function(str) {
            var length6 = str.length;
            if (index2 < 0 || index2 >= length6) return Nothing2;
            if (hasStringIterator) {
              var iter = str[Symbol.iterator]();
              for (var i = index2; ; --i) {
                var o = iter.next();
                if (o.done) return Nothing2;
                if (i === 0) return Just2(unsafeCodePointAt02(o.value));
              }
            }
            return fallback(index2)(str);
          };
        };
      };
    };
  };
};
var _singleton = function(fallback) {
  return hasFromCodePoint ? String.fromCodePoint : fallback;
};
var _take = function(fallback) {
  return function(n) {
    if (hasStringIterator) {
      return function(str) {
        var accum = "";
        var iter = str[Symbol.iterator]();
        for (var i = 0; i < n; ++i) {
          var o = iter.next();
          if (o.done) return accum;
          accum += o.value;
        }
        return accum;
      };
    }
    return fallback(n);
  };
};
var _toCodePointArray = function(fallback) {
  return function(unsafeCodePointAt02) {
    if (hasArrayFrom) {
      return function(str) {
        return Array.from(str, unsafeCodePointAt02);
      };
    }
    return fallback;
  };
};

// output-es/Data.String.CodePoints/index.js
var uncons = (s) => {
  const v = length2(s);
  if (v === 0) {
    return Nothing;
  }
  if (v === 1) {
    return $Maybe("Just", { head: toCharCode(charAt(0)(s)), tail: "" });
  }
  const cu1 = toCharCode(charAt(1)(s));
  const cu0 = toCharCode(charAt(0)(s));
  if (55296 <= cu0 && cu0 <= 56319 && 56320 <= cu1 && cu1 <= 57343) {
    return $Maybe("Just", { head: (((cu0 - 55296 | 0) * 1024 | 0) + (cu1 - 56320 | 0) | 0) + 65536 | 0, tail: drop(2)(s) });
  }
  return $Maybe("Just", { head: cu0, tail: drop(1)(s) });
};
var unconsButWithTuple = (s) => {
  const $0 = uncons(s);
  if ($0.tag === "Just") {
    return $Maybe("Just", $Tuple($0._1.head, $0._1.tail));
  }
  return Nothing;
};
var toCodePointArrayFallback = (s) => unfoldableArray.unfoldr(unconsButWithTuple)(s);
var unsafeCodePointAt0Fallback = (s) => {
  const cu0 = toCharCode(charAt(0)(s));
  if (55296 <= cu0 && cu0 <= 56319 && length2(s) > 1) {
    const cu1 = toCharCode(charAt(1)(s));
    if (56320 <= cu1 && cu1 <= 57343) {
      return (((cu0 - 55296 | 0) * 1024 | 0) + (cu1 - 56320 | 0) | 0) + 65536 | 0;
    }
  }
  return cu0;
};
var unsafeCodePointAt0 = /* @__PURE__ */ _unsafeCodePointAt0(unsafeCodePointAt0Fallback);
var toCodePointArray = /* @__PURE__ */ _toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
var fromCharCode2 = (x2) => singleton((() => {
  if (x2 >= 0 && x2 <= 65535) {
    return fromCharCode(x2);
  }
  if (x2 < 0) {
    return "\0";
  }
  return "\uFFFF";
})());
var singletonFallback = (v) => {
  if (v <= 65535) {
    return fromCharCode2(v);
  }
  return fromCharCode2(intDiv(v - 65536 | 0, 1024) + 55296 | 0) + fromCharCode2(intMod(v - 65536 | 0)(1024) + 56320 | 0);
};
var singleton2 = /* @__PURE__ */ _singleton(singletonFallback);
var takeFallback = (v) => (v1) => {
  if (v < 1) {
    return "";
  }
  const v2 = uncons(v1);
  if (v2.tag === "Just") {
    return singleton2(v2._1.head) + takeFallback(v - 1 | 0)(v2._1.tail);
  }
  return v1;
};
var take2 = /* @__PURE__ */ _take(takeFallback);
var codePointAtFallback = (codePointAtFallback$a0$copy) => (codePointAtFallback$a1$copy) => {
  let codePointAtFallback$a0 = codePointAtFallback$a0$copy, codePointAtFallback$a1 = codePointAtFallback$a1$copy, codePointAtFallback$c = true, codePointAtFallback$r;
  while (codePointAtFallback$c) {
    const n = codePointAtFallback$a0, s = codePointAtFallback$a1;
    const v = uncons(s);
    if (v.tag === "Just") {
      if (n === 0) {
        codePointAtFallback$c = false;
        codePointAtFallback$r = $Maybe("Just", v._1.head);
        continue;
      }
      codePointAtFallback$a0 = n - 1 | 0;
      codePointAtFallback$a1 = v._1.tail;
      continue;
    }
    codePointAtFallback$c = false;
    codePointAtFallback$r = Nothing;
  }
  return codePointAtFallback$r;
};
var codePointAt3 = (v) => (v1) => {
  if (v < 0) {
    return Nothing;
  }
  if (v === 0) {
    if (v1 === "") {
      return Nothing;
    }
    return $Maybe("Just", unsafeCodePointAt0(v1));
  }
  return _codePointAt(codePointAtFallback)(Just)(Nothing)(unsafeCodePointAt0)(v)(v1);
};

// output-es/Data.FoldableWithIndex/index.js
var traverseWithIndex_ = (dictApplicative) => {
  const $0 = dictApplicative.Apply0();
  return (dictFoldableWithIndex) => (f) => dictFoldableWithIndex.foldrWithIndex((i) => {
    const $1 = f(i);
    return (x2) => {
      const $2 = $1(x2);
      return (b) => $0.apply($0.Functor0().map((v) => identity4)($2))(b);
    };
  })(dictApplicative.pure());
};
var forWithIndex_ = (dictApplicative) => {
  const traverseWithIndex_1 = traverseWithIndex_(dictApplicative);
  return (dictFoldableWithIndex) => {
    const $0 = traverseWithIndex_1(dictFoldableWithIndex);
    return (b) => (a) => $0(a)(b);
  };
};
var foldableWithIndexArray = {
  foldrWithIndex: (f) => (z) => {
    const $0 = foldrArray((v) => {
      const $02 = v._1;
      const $12 = v._2;
      return (y2) => f($02)($12)(y2);
    })(z);
    const $1 = mapWithIndexArray(Tuple);
    return (x2) => $0($1(x2));
  },
  foldlWithIndex: (f) => (z) => {
    const $0 = foldlArray((y2) => (v) => f(v._1)(y2)(v._2))(z);
    const $1 = mapWithIndexArray(Tuple);
    return (x2) => $0($1(x2));
  },
  foldMapWithIndex: (dictMonoid) => {
    const mempty5 = dictMonoid.mempty;
    return (f) => foldableWithIndexArray.foldrWithIndex((i) => (x2) => (acc) => dictMonoid.Semigroup0().append(f(i)(x2))(acc))(mempty5);
  },
  Foldable0: () => foldableArray
};

// output-es/Foreign.Object/foreign.js
var empty2 = {};
function _fmapObject(m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(m0[k]);
    }
  }
  return m;
}
function _mapWithKey(m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(k)(m0[k]);
    }
  }
  return m;
}
function _foldM(bind) {
  return function(f) {
    return function(mz) {
      return function(m) {
        var acc = mz;
        function g(k2) {
          return function(z) {
            return f(z)(k2)(m[k2]);
          };
        }
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            acc = bind(acc)(g(k));
          }
        }
        return acc;
      };
    };
  };
}
function all(f) {
  return function(m) {
    for (var k in m) {
      if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
    }
    return true;
  };
}
function size(m) {
  var s = 0;
  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      ++s;
    }
  }
  return s;
}
function _lookup(no, yes, k, m) {
  return k in m ? yes(m[k]) : no;
}
function toArrayWithKey(f) {
  return function(m) {
    var r = [];
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }
    return r;
  };
}
var keys = Object.keys || toArrayWithKey(function(k) {
  return function() {
    return k;
  };
});

// output-es/Foreign.Object/index.js
var identity9 = (x2) => x2;
var values = /* @__PURE__ */ toArrayWithKey((v) => (v1) => v1);
var toUnfoldable = (dictUnfoldable) => {
  const $0 = toArrayWithKey(Tuple);
  return (x2) => {
    const $1 = $0(x2);
    const len = $1.length;
    return dictUnfoldable.unfoldr((i) => {
      if (i < len) {
        return $Maybe("Just", $Tuple($1[i], i + 1 | 0));
      }
      return Nothing;
    })(0);
  };
};
var toAscUnfoldable = (dictUnfoldable) => {
  const $0 = toArrayWithKey(Tuple);
  return (x2) => {
    const $1 = sortWith(ordString)(fst)($0(x2));
    const len = $1.length;
    return dictUnfoldable.unfoldr((i) => {
      if (i < len) {
        return $Maybe("Just", $Tuple($1[i], i + 1 | 0));
      }
      return Nothing;
    })(0);
  };
};
var singleton3 = (k) => (v) => {
  const $0 = {};
  $0[k] = v;
  return $0;
};
var mutate = (f) => (m) => {
  const s = { ...m };
  f(s)();
  return s;
};
var member = ($0) => ($1) => _lookup(false, (v) => true, $0, $1);
var mapWithKey = (f) => (m) => _mapWithKey(m, f);
var lookup = ($0) => ($1) => _lookup(Nothing, Just, $0, $1);
var isSubmap = (dictEq) => (m1) => (m2) => all((k) => (v) => _lookup(false, dictEq.eq(v), k, m2))(m1);
var isEmpty = /* @__PURE__ */ all((v) => (v1) => false);
var insert2 = (k) => (v) => mutate(($0) => () => {
  $0[k] = v;
  return $0;
});
var functorObject = { map: (f) => (m) => _fmapObject(m, f) };
var functorWithIndexObject = { mapWithIndex: mapWithKey, Functor0: () => functorObject };
var fromFoldable = (dictFoldable) => {
  const $0 = dictFoldable.foldr;
  return (l) => {
    const s = {};
    for (const v of fromFoldableImpl($0, l)) {
      s[v._1] = v._2;
    }
    return s;
  };
};
var foldM2 = (dictMonad) => {
  const bind1 = dictMonad.Bind1().bind;
  return (f) => (z) => _foldM(bind1)(f)(dictMonad.Applicative0().pure(z));
};
var foldM1 = /* @__PURE__ */ foldM2(monadST);
var union = (m) => mutate((s) => foldM1((s$p) => (k) => (v) => () => {
  s$p[k] = v;
  return s$p;
})(s)(m));
var unionWith = (f) => (m1) => (m2) => mutate((s1) => foldM1((s2) => (k) => (v1) => {
  const $0 = _lookup(v1, (v2) => f(v1)(v2), k, m2);
  return () => {
    s2[k] = $0;
    return s2;
  };
})(s1)(m1))(m2);
var fold = /* @__PURE__ */ _foldM(applyFlipped);
var foldMap = (dictMonoid) => {
  const mempty5 = dictMonoid.mempty;
  return (f) => fold((acc) => (k) => (v) => dictMonoid.Semigroup0().append(acc)(f(k)(v)))(mempty5);
};
var foldableObject = {
  foldl: (f) => fold((z) => (v) => f(z)),
  foldr: (f) => (z) => (m) => foldrArray(f)(z)(values(m)),
  foldMap: (dictMonoid) => {
    const foldMap1 = foldMap(dictMonoid);
    return (f) => foldMap1((v) => f);
  }
};
var foldableWithIndexObject = {
  foldlWithIndex: (f) => fold((b) => (a) => f(a)(b)),
  foldrWithIndex: (f) => (z) => (m) => foldrArray((v) => f(v._1)(v._2))(z)(toArrayWithKey(Tuple)(m)),
  foldMapWithIndex: (dictMonoid) => foldMap(dictMonoid),
  Foldable0: () => foldableObject
};
var traversableWithIndexObject = {
  traverseWithIndex: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (f) => (ms) => fold((acc) => (k) => (v) => Apply0.apply(Apply0.Functor0().map((b) => (a) => mutate(($0) => () => {
      $0[k] = a;
      return $0;
    })(b))(acc))(f(k)(v)))(dictApplicative.pure(empty2))(ms);
  },
  FunctorWithIndex0: () => functorWithIndexObject,
  FoldableWithIndex1: () => foldableWithIndexObject,
  Traversable2: () => traversableObject
};
var traversableObject = {
  traverse: (dictApplicative) => {
    const $0 = traversableWithIndexObject.traverseWithIndex(dictApplicative);
    return (x2) => $0((v) => x2);
  },
  sequence: (dictApplicative) => traversableObject.traverse(dictApplicative)(identity9),
  Functor0: () => functorObject,
  Foldable1: () => foldableObject
};
var filterWithKey = (predicate) => (m) => {
  const m$p = {};
  return foldM1((acc) => (k) => (v) => {
    if (predicate(k)(v)) {
      return () => {
        acc[k] = v;
        return acc;
      };
    }
    return () => acc;
  })(m$p)(m)();
};
var filterKeys = (predicate) => filterWithKey((x2) => {
  const $0 = predicate(x2);
  return (v) => $0;
});
var eqObject = (dictEq) => ({ eq: (m1) => (m2) => isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1) });
var $$delete = (k) => mutate(($0) => () => {
  delete $0[k];
  return $0;
});

// output-es/Data.NonEmpty/index.js
var $NonEmpty = (_1, _2) => ({ tag: "NonEmpty", _1, _2 });
var NonEmpty = (value0) => (value1) => $NonEmpty(value0, value1);
var traversableNonEmpty = (dictTraversable) => {
  const $0 = dictTraversable.Functor0();
  const functorNonEmpty1 = { map: (f) => (m) => $NonEmpty(f(m._1), $0.map(f)(m._2)) };
  const $1 = dictTraversable.Foldable1();
  const foldableNonEmpty1 = {
    foldMap: (dictMonoid) => {
      const foldMap1 = $1.foldMap(dictMonoid);
      return (f) => (v) => dictMonoid.Semigroup0().append(f(v._1))(foldMap1(f)(v._2));
    },
    foldl: (f) => (b) => (v) => $1.foldl(f)(f(b)(v._1))(v._2),
    foldr: (f) => (b) => (v) => f(v._1)($1.foldr(f)(b)(v._2))
  };
  return {
    sequence: (dictApplicative) => {
      const Apply0 = dictApplicative.Apply0();
      const sequence1 = dictTraversable.sequence(dictApplicative);
      return (v) => Apply0.apply(Apply0.Functor0().map(NonEmpty)(v._1))(sequence1(v._2));
    },
    traverse: (dictApplicative) => {
      const Apply0 = dictApplicative.Apply0();
      const traverse1 = dictTraversable.traverse(dictApplicative);
      return (f) => (v) => Apply0.apply(Apply0.Functor0().map(NonEmpty)(f(v._1)))(traverse1(f)(v._2));
    },
    Functor0: () => functorNonEmpty1,
    Foldable1: () => foldableNonEmpty1
  };
};

// output-es/Data.List.Types/index.js
var $List = (tag, _1, _2) => ({ tag, _1, _2 });
var identity10 = (x2) => x2;
var Nil = /* @__PURE__ */ $List("Nil");
var Cons = (value0) => (value1) => $List("Cons", value0, value1);
var listMap = (f) => {
  const chunkedRevMap = (chunkedRevMap$a0$copy) => (chunkedRevMap$a1$copy) => {
    let chunkedRevMap$a0 = chunkedRevMap$a0$copy, chunkedRevMap$a1 = chunkedRevMap$a1$copy, chunkedRevMap$c = true, chunkedRevMap$r;
    while (chunkedRevMap$c) {
      const v = chunkedRevMap$a0, v1 = chunkedRevMap$a1;
      if (v1.tag === "Cons" && v1._2.tag === "Cons" && v1._2._2.tag === "Cons") {
        chunkedRevMap$a0 = $List("Cons", v1, v);
        chunkedRevMap$a1 = v1._2._2._2;
        continue;
      }
      const reverseUnrolledMap = (reverseUnrolledMap$a0$copy) => (reverseUnrolledMap$a1$copy) => {
        let reverseUnrolledMap$a0 = reverseUnrolledMap$a0$copy, reverseUnrolledMap$a1 = reverseUnrolledMap$a1$copy, reverseUnrolledMap$c = true, reverseUnrolledMap$r;
        while (reverseUnrolledMap$c) {
          const v2 = reverseUnrolledMap$a0, v3 = reverseUnrolledMap$a1;
          if (v2.tag === "Cons" && v2._1.tag === "Cons" && v2._1._2.tag === "Cons" && v2._1._2._2.tag === "Cons") {
            reverseUnrolledMap$a0 = v2._2;
            reverseUnrolledMap$a1 = $List("Cons", f(v2._1._1), $List("Cons", f(v2._1._2._1), $List("Cons", f(v2._1._2._2._1), v3)));
            continue;
          }
          reverseUnrolledMap$c = false;
          reverseUnrolledMap$r = v3;
        }
        return reverseUnrolledMap$r;
      };
      chunkedRevMap$c = false;
      chunkedRevMap$r = reverseUnrolledMap(v)((() => {
        if (v1.tag === "Cons") {
          if (v1._2.tag === "Cons") {
            if (v1._2._2.tag === "Nil") {
              return $List("Cons", f(v1._1), $List("Cons", f(v1._2._1), Nil));
            }
            return Nil;
          }
          if (v1._2.tag === "Nil") {
            return $List("Cons", f(v1._1), Nil);
          }
        }
        return Nil;
      })());
    }
    return chunkedRevMap$r;
  };
  return chunkedRevMap(Nil);
};
var functorList = { map: listMap };
var functorNonEmptyList = { map: (f) => (m) => $NonEmpty(f(m._1), listMap(f)(m._2)) };
var foldableList = {
  foldr: (f) => (b) => {
    const $0 = foldableList.foldl((b$1) => (a) => f(a)(b$1))(b);
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const v = go$a0, v1 = go$a1;
        if (v1.tag === "Nil") {
          go$c = false;
          go$r = v;
          continue;
        }
        if (v1.tag === "Cons") {
          go$a0 = $List("Cons", v1._1, v);
          go$a1 = v1._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    const $1 = go(Nil);
    return (x2) => $0($1(x2));
  },
  foldl: (f) => {
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const b = go$a0, v = go$a1;
        if (v.tag === "Nil") {
          go$c = false;
          go$r = b;
          continue;
        }
        if (v.tag === "Cons") {
          go$a0 = f(b)(v._1);
          go$a1 = v._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    return go;
  },
  foldMap: (dictMonoid) => {
    const mempty5 = dictMonoid.mempty;
    return (f) => foldableList.foldl((acc) => {
      const $0 = dictMonoid.Semigroup0().append(acc);
      return (x2) => $0(f(x2));
    })(mempty5);
  }
};
var foldableNonEmptyList = {
  foldMap: (dictMonoid) => {
    const foldMap1 = foldableList.foldMap(dictMonoid);
    return (f) => (v) => dictMonoid.Semigroup0().append(f(v._1))(foldMap1(f)(v._2));
  },
  foldl: (f) => (b) => (v) => {
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const b$1 = go$a0, v$1 = go$a1;
        if (v$1.tag === "Nil") {
          go$c = false;
          go$r = b$1;
          continue;
        }
        if (v$1.tag === "Cons") {
          go$a0 = f(b$1)(v$1._1);
          go$a1 = v$1._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    return go(f(b)(v._1))(v._2);
  },
  foldr: (f) => (b) => (v) => f(v._1)(foldableList.foldr(f)(b)(v._2))
};
var semigroupNonEmptyList = { append: (v) => (as$p) => $NonEmpty(v._1, foldableList.foldr(Cons)($List("Cons", as$p._1, as$p._2))(v._2)) };
var showList = (dictShow) => {
  const show5 = dictShow.show;
  return {
    show: (v) => {
      if (v.tag === "Nil") {
        return "Nil";
      }
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const b = go$a0, v$1 = go$a1;
          if (v$1.tag === "Nil") {
            go$c = false;
            go$r = b;
            continue;
          }
          if (v$1.tag === "Cons") {
            go$a0 = b.init ? { init: false, acc: v$1._1 } : { init: false, acc: b.acc + " : " + v$1._1 };
            go$a1 = v$1._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return "(" + go({ init: true, acc: "" })(listMap(show5)(v)).acc + " : Nil)";
    }
  };
};
var showNonEmptyList = (dictShow) => {
  const $0 = showList(dictShow);
  return { show: (v) => "(NonEmptyList (NonEmpty " + dictShow.show(v._1) + " " + $0.show(v._2) + "))" };
};
var traversableList = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (f) => {
      const $0 = Apply0.Functor0().map((() => {
        const go2 = (go$a0$copy) => (go$a1$copy) => {
          let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
          while (go$c) {
            const b = go$a0, v = go$a1;
            if (v.tag === "Nil") {
              go$c = false;
              go$r = b;
              continue;
            }
            if (v.tag === "Cons") {
              go$a0 = $List("Cons", v._1, b);
              go$a1 = v._2;
              continue;
            }
            fail();
          }
          return go$r;
        };
        return go2(Nil);
      })());
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const b = go$a0, v = go$a1;
          if (v.tag === "Nil") {
            go$c = false;
            go$r = b;
            continue;
          }
          if (v.tag === "Cons") {
            go$a0 = Apply0.apply(Apply0.Functor0().map((b$1) => (a) => $List("Cons", a, b$1))(b))(f(v._1));
            go$a1 = v._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      const $1 = go(dictApplicative.pure(Nil));
      return (x2) => $0($1(x2));
    };
  },
  sequence: (dictApplicative) => traversableList.traverse(dictApplicative)(identity10),
  Functor0: () => functorList,
  Foldable1: () => foldableList
};
var traversableNonEmptyList = /* @__PURE__ */ traversableNonEmpty(traversableList);
var unfoldable1List = {
  unfoldr1: (f) => (b) => {
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const source2 = go$a0, memo = go$a1;
        const v = f(source2);
        if (v._2.tag === "Just") {
          go$a0 = v._2._1;
          go$a1 = $List("Cons", v._1, memo);
          continue;
        }
        if (v._2.tag === "Nothing") {
          const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
            let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
            while (go$1$c) {
              const b$1 = go$1$a0, v$1 = go$1$a1;
              if (v$1.tag === "Nil") {
                go$1$c = false;
                go$1$r = b$1;
                continue;
              }
              if (v$1.tag === "Cons") {
                go$1$a0 = $List("Cons", v$1._1, b$1);
                go$1$a1 = v$1._2;
                continue;
              }
              fail();
            }
            return go$1$r;
          };
          go$c = false;
          go$r = go$1(Nil)($List("Cons", v._1, memo));
          continue;
        }
        fail();
      }
      return go$r;
    };
    return go(b)(Nil);
  }
};
var unfoldableList = {
  unfoldr: (f) => (b) => {
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const source2 = go$a0, memo = go$a1;
        const v = f(source2);
        if (v.tag === "Nothing") {
          const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
            let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
            while (go$1$c) {
              const b$1 = go$1$a0, v$1 = go$1$a1;
              if (v$1.tag === "Nil") {
                go$1$c = false;
                go$1$r = b$1;
                continue;
              }
              if (v$1.tag === "Cons") {
                go$1$a0 = $List("Cons", v$1._1, b$1);
                go$1$a1 = v$1._2;
                continue;
              }
              fail();
            }
            return go$1$r;
          };
          go$c = false;
          go$r = go$1(Nil)(memo);
          continue;
        }
        if (v.tag === "Just") {
          go$a0 = v._1._2;
          go$a1 = $List("Cons", v._1._1, memo);
          continue;
        }
        fail();
      }
      return go$r;
    };
    return go(b)(Nil);
  },
  Unfoldable10: () => unfoldable1List
};
var ordList = (dictOrd) => {
  const $0 = dictOrd.Eq0();
  const eqList1 = {
    eq: (xs) => (ys) => {
      const go = (v) => (v1) => (v2) => {
        if (!v2) {
          return false;
        }
        if (v.tag === "Nil") {
          return v1.tag === "Nil" && v2;
        }
        return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && $0.eq(v1._1)(v._1));
      };
      return go(xs)(ys)(true);
    }
  };
  return {
    compare: (xs) => (ys) => {
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const v = go$a0, v1 = go$a1;
          if (v.tag === "Nil") {
            if (v1.tag === "Nil") {
              go$c = false;
              go$r = EQ;
              continue;
            }
            go$c = false;
            go$r = LT;
            continue;
          }
          if (v1.tag === "Nil") {
            go$c = false;
            go$r = GT;
            continue;
          }
          if (v.tag === "Cons" && v1.tag === "Cons") {
            const v2 = dictOrd.compare(v._1)(v1._1);
            if (v2 === "EQ") {
              go$a0 = v._2;
              go$a1 = v1._2;
              continue;
            }
            go$c = false;
            go$r = v2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return go(xs)(ys);
    },
    Eq0: () => eqList1
  };
};
var applyList = {
  apply: (v) => (v1) => {
    if (v.tag === "Nil") {
      return Nil;
    }
    if (v.tag === "Cons") {
      return foldableList.foldr(Cons)(applyList.apply(v._2)(v1))(listMap(v._1)(v1));
    }
    fail();
  },
  Functor0: () => functorList
};
var applyNonEmptyList = {
  apply: (v) => (v1) => $NonEmpty(
    v._1(v1._1),
    foldableList.foldr(Cons)(applyList.apply($List("Cons", v._1, v._2))(v1._2))(applyList.apply(v._2)($List("Cons", v1._1, Nil)))
  ),
  Functor0: () => functorNonEmptyList
};
var bindList = {
  bind: (v) => (v1) => {
    if (v.tag === "Nil") {
      return Nil;
    }
    if (v.tag === "Cons") {
      return foldableList.foldr(Cons)(bindList.bind(v._2)(v1))(v1(v._1));
    }
    fail();
  },
  Apply0: () => applyList
};
var bindNonEmptyList = {
  bind: (v) => (f) => {
    const v1 = f(v._1);
    return $NonEmpty(
      v1._1,
      foldableList.foldr(Cons)(bindList.bind(v._2)((x2) => {
        const $0 = f(x2);
        return $List("Cons", $0._1, $0._2);
      }))(v1._2)
    );
  },
  Apply0: () => applyNonEmptyList
};

// output-es/Data.Map.Internal/index.js
var $$$Map = (tag, _1, _2, _3, _4, _5, _6) => ({ tag, _1, _2, _3, _4, _5, _6 });
var $MapIter = (tag, _1, _2, _3) => ({ tag, _1, _2, _3 });
var $MapIterStep = (tag, _1, _2, _3) => ({ tag, _1, _2, _3 });
var $Split = (_1, _2, _3) => ({ tag: "Split", _1, _2, _3 });
var $SplitLast = (_1, _2, _3) => ({ tag: "SplitLast", _1, _2, _3 });
var identity11 = (x2) => x2;
var Leaf = /* @__PURE__ */ $$$Map("Leaf");
var IterLeaf = /* @__PURE__ */ $MapIter("IterLeaf");
var IterDone = /* @__PURE__ */ $MapIterStep("IterDone");
var unsafeNode = (k, v, l, r) => {
  if (l.tag === "Leaf") {
    if (r.tag === "Leaf") {
      return $$$Map("Node", 1, 1, k, v, l, r);
    }
    if (r.tag === "Node") {
      return $$$Map("Node", 1 + r._1 | 0, 1 + r._2 | 0, k, v, l, r);
    }
    fail();
  }
  if (l.tag === "Node") {
    if (r.tag === "Leaf") {
      return $$$Map("Node", 1 + l._1 | 0, 1 + l._2 | 0, k, v, l, r);
    }
    if (r.tag === "Node") {
      return $$$Map("Node", l._1 > r._1 ? 1 + l._1 | 0 : 1 + r._1 | 0, (1 + l._2 | 0) + r._2 | 0, k, v, l, r);
    }
  }
  fail();
};
var size2 = (v) => {
  if (v.tag === "Leaf") {
    return 0;
  }
  if (v.tag === "Node") {
    return v._2;
  }
  fail();
};
var unsafeBalancedNode = (k, v, l, r) => {
  if (l.tag === "Leaf") {
    if (r.tag === "Leaf") {
      return $$$Map("Node", 1, 1, k, v, Leaf, Leaf);
    }
    if (r.tag === "Node" && r._1 > 1) {
      if (r._5.tag === "Node" && (() => {
        if (r._6.tag === "Leaf") {
          return r._5._1 > 0;
        }
        if (r._6.tag === "Node") {
          return r._5._1 > r._6._1;
        }
        fail();
      })()) {
        return unsafeNode(r._5._3, r._5._4, unsafeNode(k, v, l, r._5._5), unsafeNode(r._3, r._4, r._5._6, r._6));
      }
      return unsafeNode(r._3, r._4, unsafeNode(k, v, l, r._5), r._6);
    }
    return unsafeNode(k, v, l, r);
  }
  if (l.tag === "Node") {
    if (r.tag === "Node") {
      if (r._1 > (l._1 + 1 | 0)) {
        if (r._5.tag === "Node" && (() => {
          if (r._6.tag === "Leaf") {
            return r._5._1 > 0;
          }
          if (r._6.tag === "Node") {
            return r._5._1 > r._6._1;
          }
          fail();
        })()) {
          return unsafeNode(r._5._3, r._5._4, unsafeNode(k, v, l, r._5._5), unsafeNode(r._3, r._4, r._5._6, r._6));
        }
        return unsafeNode(r._3, r._4, unsafeNode(k, v, l, r._5), r._6);
      }
      if (l._1 > (r._1 + 1 | 0)) {
        if (l._6.tag === "Node" && (() => {
          if (l._5.tag === "Leaf") {
            return 0 <= l._6._1;
          }
          if (l._5.tag === "Node") {
            return l._5._1 <= l._6._1;
          }
          fail();
        })()) {
          return unsafeNode(l._6._3, l._6._4, unsafeNode(l._3, l._4, l._5, l._6._5), unsafeNode(k, v, l._6._6, r));
        }
        return unsafeNode(l._3, l._4, l._5, unsafeNode(k, v, l._6, r));
      }
      return unsafeNode(k, v, l, r);
    }
    if (r.tag === "Leaf" && l._1 > 1) {
      if (l._6.tag === "Node" && (() => {
        if (l._5.tag === "Leaf") {
          return 0 <= l._6._1;
        }
        if (l._5.tag === "Node") {
          return l._5._1 <= l._6._1;
        }
        fail();
      })()) {
        return unsafeNode(l._6._3, l._6._4, unsafeNode(l._3, l._4, l._5, l._6._5), unsafeNode(k, v, l._6._6, r));
      }
      return unsafeNode(l._3, l._4, l._5, unsafeNode(k, v, l._6, r));
    }
    return unsafeNode(k, v, l, r);
  }
  fail();
};
var unsafeSplit = (comp, k, m) => {
  if (m.tag === "Leaf") {
    return $Split(Nothing, Leaf, Leaf);
  }
  if (m.tag === "Node") {
    const v = comp(k)(m._3);
    if (v === "LT") {
      const v1 = unsafeSplit(comp, k, m._5);
      return $Split(v1._1, v1._2, unsafeBalancedNode(m._3, m._4, v1._3, m._6));
    }
    if (v === "GT") {
      const v1 = unsafeSplit(comp, k, m._6);
      return $Split(v1._1, unsafeBalancedNode(m._3, m._4, m._5, v1._2), v1._3);
    }
    if (v === "EQ") {
      return $Split($Maybe("Just", m._4), m._5, m._6);
    }
  }
  fail();
};
var unsafeSplitLast = (k, v, l, r) => {
  if (r.tag === "Leaf") {
    return $SplitLast(k, v, l);
  }
  if (r.tag === "Node") {
    const v1 = unsafeSplitLast(r._3, r._4, r._5, r._6);
    return $SplitLast(v1._1, v1._2, unsafeBalancedNode(k, v, l, v1._3));
  }
  fail();
};
var unsafeJoinNodes = (v, v1) => {
  if (v.tag === "Leaf") {
    return v1;
  }
  if (v.tag === "Node") {
    const v2 = unsafeSplitLast(v._3, v._4, v._5, v._6);
    return unsafeBalancedNode(v2._1, v2._2, v2._3, v1);
  }
  fail();
};
var unsafeDifference = (comp, l, r) => {
  if (l.tag === "Leaf") {
    return Leaf;
  }
  if (r.tag === "Leaf") {
    return l;
  }
  if (r.tag === "Node") {
    const v = unsafeSplit(comp, r._3, l);
    return unsafeJoinNodes(unsafeDifference(comp, v._2, r._5), unsafeDifference(comp, v._3, r._6));
  }
  fail();
};
var unsafeIntersectionWith = (comp, app, l, r) => {
  if (l.tag === "Leaf") {
    return Leaf;
  }
  if (r.tag === "Leaf") {
    return Leaf;
  }
  if (r.tag === "Node") {
    const v = unsafeSplit(comp, r._3, l);
    const l$p = unsafeIntersectionWith(comp, app, v._2, r._5);
    const r$p = unsafeIntersectionWith(comp, app, v._3, r._6);
    if (v._1.tag === "Just") {
      return unsafeBalancedNode(r._3, app(v._1._1)(r._4), l$p, r$p);
    }
    if (v._1.tag === "Nothing") {
      return unsafeJoinNodes(l$p, r$p);
    }
  }
  fail();
};
var unsafeUnionWith = (comp, app, l, r) => {
  if (l.tag === "Leaf") {
    return r;
  }
  if (r.tag === "Leaf") {
    return l;
  }
  if (r.tag === "Node") {
    const v = unsafeSplit(comp, r._3, l);
    const l$p = unsafeUnionWith(comp, app, v._2, r._5);
    const r$p = unsafeUnionWith(comp, app, v._3, r._6);
    if (v._1.tag === "Just") {
      return unsafeBalancedNode(r._3, app(v._1._1)(r._4), l$p, r$p);
    }
    if (v._1.tag === "Nothing") {
      return unsafeBalancedNode(r._3, r._4, l$p, r$p);
    }
  }
  fail();
};
var stepAscCps = (next) => (done) => {
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "IterLeaf") {
        go$c = false;
        go$r = done();
        continue;
      }
      if (v.tag === "IterEmit") {
        go$c = false;
        go$r = next(v._1, v._2, v._3);
        continue;
      }
      if (v.tag === "IterNode") {
        go$a0 = (() => {
          const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
            let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
            while (go$1$c) {
              const iter = go$1$a0, v$1 = go$1$a1;
              if (v$1.tag === "Leaf") {
                go$1$c = false;
                go$1$r = iter;
                continue;
              }
              if (v$1.tag === "Node") {
                if (v$1._6.tag === "Leaf") {
                  go$1$a0 = $MapIter("IterEmit", v$1._3, v$1._4, iter);
                  go$1$a1 = v$1._5;
                  continue;
                }
                go$1$a0 = $MapIter("IterEmit", v$1._3, v$1._4, $MapIter("IterNode", v$1._6, iter));
                go$1$a1 = v$1._5;
                continue;
              }
              fail();
            }
            return go$1$r;
          };
          return go$1(v._2)(v._1);
        })();
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go;
};
var stepAsc = /* @__PURE__ */ stepAscCps((k, v, next) => $MapIterStep("IterNext", k, v, next))((v) => IterDone);
var eqMapIter = (dictEq) => (dictEq1) => ({
  eq: /* @__PURE__ */ (() => {
    const go = (a) => (b) => {
      const v = stepAsc(a);
      if (v.tag === "IterNext") {
        const v2 = stepAsc(b);
        return v2.tag === "IterNext" && dictEq.eq(v._1)(v2._1) && dictEq1.eq(v._2)(v2._2) && go(v._3)(v2._3);
      }
      if (v.tag === "IterDone") {
        return true;
      }
      fail();
    };
    return go;
  })()
});
var isEmpty2 = (v) => v.tag === "Leaf";
var insert3 = (dictOrd) => (k) => (v) => {
  const go = (v1) => {
    if (v1.tag === "Leaf") {
      return $$$Map("Node", 1, 1, k, v, Leaf, Leaf);
    }
    if (v1.tag === "Node") {
      const v2 = dictOrd.compare(k)(v1._3);
      if (v2 === "LT") {
        return unsafeBalancedNode(v1._3, v1._4, go(v1._5), v1._6);
      }
      if (v2 === "GT") {
        return unsafeBalancedNode(v1._3, v1._4, v1._5, go(v1._6));
      }
      if (v2 === "EQ") {
        return $$$Map("Node", v1._1, v1._2, k, v, v1._5, v1._6);
      }
    }
    fail();
  };
  return go;
};
var functorMap = {
  map: (f) => {
    const go = (v) => {
      if (v.tag === "Leaf") {
        return Leaf;
      }
      if (v.tag === "Node") {
        return $$$Map("Node", v._1, v._2, v._3, f(v._4), go(v._5), go(v._6));
      }
      fail();
    };
    return go;
  }
};
var foldableMap = {
  foldr: (f) => (z) => {
    const go = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go(m$p._5, f(m$p._4)(go(m$p._6, z$p)));
      }
      fail();
    };
    return (m) => go(m, z);
  },
  foldl: (f) => (z) => {
    const go = (z$p, m$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go(f(go(z$p, m$p._5))(m$p._4), m$p._6);
      }
      fail();
    };
    return (m) => go(z, m);
  },
  foldMap: (dictMonoid) => {
    const mempty5 = dictMonoid.mempty;
    const $0 = dictMonoid.Semigroup0();
    return (f) => {
      const go = (v) => {
        if (v.tag === "Leaf") {
          return mempty5;
        }
        if (v.tag === "Node") {
          return $0.append(go(v._5))($0.append(f(v._4))(go(v._6)));
        }
        fail();
      };
      return go;
    };
  }
};
var traversableMap = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (f) => {
      const go = (v) => {
        if (v.tag === "Leaf") {
          return dictApplicative.pure(Leaf);
        }
        if (v.tag === "Node") {
          const $0 = v._1;
          const $1 = v._3;
          const $2 = v._2;
          return Apply0.apply(Apply0.apply(Apply0.Functor0().map((l$p) => (v$p) => (r$p) => $$$Map("Node", $0, $2, $1, v$p, l$p, r$p))(go(v._5)))(f(v._4)))(go(v._6));
        }
        fail();
      };
      return go;
    };
  },
  sequence: (dictApplicative) => traversableMap.traverse(dictApplicative)(identity11),
  Functor0: () => functorMap,
  Foldable1: () => foldableMap
};
var findMin = (findMin$a0$copy) => {
  let findMin$a0 = findMin$a0$copy, findMin$c = true, findMin$r;
  while (findMin$c) {
    const v = findMin$a0;
    if (v.tag === "Leaf") {
      findMin$c = false;
      findMin$r = Nothing;
      continue;
    }
    if (v.tag === "Node") {
      if (v._5.tag === "Leaf") {
        findMin$c = false;
        findMin$r = $Maybe("Just", { key: v._3, value: v._4 });
        continue;
      }
      findMin$a0 = v._5;
      continue;
    }
    fail();
  }
  return findMin$r;
};
var filterKeys2 = (dictOrd) => (f) => {
  const go = (v) => {
    if (v.tag === "Leaf") {
      return Leaf;
    }
    if (v.tag === "Node") {
      if (f(v._3)) {
        return unsafeBalancedNode(v._3, v._4, go(v._5), go(v._6));
      }
      return unsafeJoinNodes(go(v._5), go(v._6));
    }
    fail();
  };
  return go;
};
var eqMap = (dictEq) => (dictEq1) => ({
  eq: (xs) => (ys) => {
    if (xs.tag === "Leaf") {
      return ys.tag === "Leaf";
    }
    if (xs.tag === "Node") {
      return ys.tag === "Node" && xs._2 === ys._2 && eqMapIter(dictEq)(dictEq1).eq($MapIter("IterNode", xs, IterLeaf))($MapIter("IterNode", ys, IterLeaf));
    }
    fail();
  }
});
var fromFoldable2 = (dictOrd) => (dictFoldable) => dictFoldable.foldl((m) => (v) => insert3(dictOrd)(v._1)(v._2)(m))(Leaf);
var $$delete2 = (dictOrd) => (k) => {
  const go = (v) => {
    if (v.tag === "Leaf") {
      return Leaf;
    }
    if (v.tag === "Node") {
      const v1 = dictOrd.compare(k)(v._3);
      if (v1 === "LT") {
        return unsafeBalancedNode(v._3, v._4, go(v._5), v._6);
      }
      if (v1 === "GT") {
        return unsafeBalancedNode(v._3, v._4, v._5, go(v._6));
      }
      if (v1 === "EQ") {
        return unsafeJoinNodes(v._5, v._6);
      }
    }
    fail();
  };
  return go;
};

// output-es/Effect.Exception/foreign.js
function showErrorImpl(err) {
  return err.stack || err.toString();
}
function error(msg) {
  return new Error(msg);
}
function message(e) {
  return e.message;
}
function throwException(e) {
  return function() {
    throw e;
  };
}

// output-es/Control.Monad.Except.Trans/index.js
var bindExceptT = (dictMonad) => ({
  bind: (v) => (k) => dictMonad.Bind1().bind(v)((v2) => {
    if (v2.tag === "Left") {
      return dictMonad.Applicative0().pure($Either("Left", v2._1));
    }
    if (v2.tag === "Right") {
      return k(v2._1);
    }
    fail();
  }),
  Apply0: () => applyExceptT(dictMonad)
});
var applyExceptT = (dictMonad) => {
  const $0 = dictMonad.Bind1().Apply0().Functor0();
  const functorExceptT1 = {
    map: (f) => $0.map((m) => {
      if (m.tag === "Left") {
        return $Either("Left", m._1);
      }
      if (m.tag === "Right") {
        return $Either("Right", f(m._1));
      }
      fail();
    })
  };
  return {
    apply: (() => {
      const $1 = bindExceptT(dictMonad);
      return (f) => (a) => $1.bind(f)((f$p) => $1.bind(a)((a$p) => applicativeExceptT(dictMonad).pure(f$p(a$p))));
    })(),
    Functor0: () => functorExceptT1
  };
};
var applicativeExceptT = (dictMonad) => ({ pure: (x2) => dictMonad.Applicative0().pure($Either("Right", x2)), Apply0: () => applyExceptT(dictMonad) });
var monadThrowExceptT = (dictMonad) => {
  const monadExceptT1 = { Applicative0: () => applicativeExceptT(dictMonad), Bind1: () => bindExceptT(dictMonad) };
  return { throwError: (x2) => dictMonad.Applicative0().pure($Either("Left", x2)), Monad0: () => monadExceptT1 };
};
var monadErrorExceptT = (dictMonad) => {
  const monadThrowExceptT1 = monadThrowExceptT(dictMonad);
  return {
    catchError: (v) => (k) => dictMonad.Bind1().bind(v)((v2) => {
      if (v2.tag === "Left") {
        return k(v2._1);
      }
      if (v2.tag === "Right") {
        return dictMonad.Applicative0().pure($Either("Right", v2._1));
      }
      fail();
    }),
    MonadThrow0: () => monadThrowExceptT1
  };
};
var altExceptT = (dictSemigroup) => (dictMonad) => {
  const Bind1 = dictMonad.Bind1();
  const $0 = dictMonad.Applicative0();
  const $1 = Bind1.Apply0().Functor0();
  const functorExceptT1 = {
    map: (f) => $1.map((m) => {
      if (m.tag === "Left") {
        return $Either("Left", m._1);
      }
      if (m.tag === "Right") {
        return $Either("Right", f(m._1));
      }
      fail();
    })
  };
  return {
    alt: (v) => (v1) => Bind1.bind(v)((rm) => {
      if (rm.tag === "Right") {
        return $0.pure($Either("Right", rm._1));
      }
      if (rm.tag === "Left") {
        const $2 = rm._1;
        return Bind1.bind(v1)((rn) => {
          if (rn.tag === "Right") {
            return $0.pure($Either("Right", rn._1));
          }
          if (rn.tag === "Left") {
            return $0.pure($Either("Left", dictSemigroup.append($2)(rn._1)));
          }
          fail();
        });
      }
      fail();
    }),
    Functor0: () => functorExceptT1
  };
};

// output-es/Data.Semigroup/foreign.js
var concatString = function(s1) {
  return function(s2) {
    return s1 + s2;
  };
};

// output-es/Data.Semigroup.Foldable/index.js
var maximum = (dictOrd) => {
  const semigroupMax = {
    append: (v) => (v1) => {
      const v$1 = dictOrd.compare(v)(v1);
      if (v$1 === "LT") {
        return v1;
      }
      if (v$1 === "EQ") {
        return v;
      }
      if (v$1 === "GT") {
        return v;
      }
      fail();
    }
  };
  return (dictFoldable1) => dictFoldable1.foldMap1(semigroupMax)(unsafeCoerce);
};
var minimum = (dictOrd) => {
  const semigroupMin = {
    append: (v) => (v1) => {
      const v$1 = dictOrd.compare(v)(v1);
      if (v$1 === "LT") {
        return v;
      }
      if (v$1 === "EQ") {
        return v;
      }
      if (v$1 === "GT") {
        return v1;
      }
      fail();
    }
  };
  return (dictFoldable1) => dictFoldable1.foldMap1(semigroupMin)(unsafeCoerce);
};

// output-es/Data.TraversableWithIndex/index.js
var traversableWithIndexArray = {
  traverseWithIndex: (dictApplicative) => {
    const sequence1 = traversableWithIndexArray.Traversable2().sequence(dictApplicative);
    return (f) => {
      const $0 = traversableWithIndexArray.FunctorWithIndex0().mapWithIndex(f);
      return (x2) => sequence1($0(x2));
    };
  },
  FunctorWithIndex0: () => functorWithIndexArray,
  FoldableWithIndex1: () => foldableWithIndexArray,
  Traversable2: () => traversableArray
};

// output-es/Data.Array.NonEmpty.Internal/foreign.js
var foldr1Impl = function(f, xs) {
  var acc = xs[xs.length - 1];
  for (var i = xs.length - 2; i >= 0; i--) {
    acc = f(xs[i])(acc);
  }
  return acc;
};
var foldl1Impl = function(f, xs) {
  var acc = xs[0];
  var len = xs.length;
  for (var i = 1; i < len; i++) {
    acc = f(acc)(xs[i]);
  }
  return acc;
};

// output-es/Data.Array.NonEmpty.Internal/index.js
var foldable1NonEmptyArray = {
  foldMap1: (dictSemigroup) => {
    const append2 = dictSemigroup.append;
    return (f) => {
      const $0 = arrayMap(f);
      const $1 = foldable1NonEmptyArray.foldl1(append2);
      return (x2) => $1($0(x2));
    };
  },
  foldr1: ($0) => ($1) => foldr1Impl($0, $1),
  foldl1: ($0) => ($1) => foldl1Impl($0, $1),
  Foldable0: () => foldableArray
};

// output-es/Data.List/index.js
var identity14 = (x2) => x2;
var updateAt = (v) => (v1) => (v2) => {
  if (v2.tag === "Cons") {
    if (v === 0) {
      return $Maybe("Just", $List("Cons", v1, v2._2));
    }
    const $0 = updateAt(v - 1 | 0)(v1)(v2._2);
    if ($0.tag === "Just") {
      return $Maybe("Just", $List("Cons", v2._1, $0._1));
    }
  }
  return Nothing;
};
var unzip2 = /* @__PURE__ */ (() => foldableList.foldr((v) => {
  const $0 = v._1;
  const $1 = v._2;
  return (v1) => $Tuple($List("Cons", $0, v1._1), $List("Cons", $1, v1._2));
})($Tuple(Nil, Nil)))();
var span2 = (v) => (v1) => {
  if (v1.tag === "Cons" && v(v1._1)) {
    const v2 = span2(v)(v1._2);
    return { init: $List("Cons", v1._1, v2.init), rest: v2.rest };
  }
  return { init: Nil, rest: v1 };
};
var take3 = /* @__PURE__ */ (() => {
  const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0, v1 = go$a1, v2 = go$a2;
      if (v1 < 1) {
        const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
          let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
          while (go$1$c) {
            const v$1 = go$1$a0, v1$1 = go$1$a1;
            if (v1$1.tag === "Nil") {
              go$1$c = false;
              go$1$r = v$1;
              continue;
            }
            if (v1$1.tag === "Cons") {
              go$1$a0 = $List("Cons", v1$1._1, v$1);
              go$1$a1 = v1$1._2;
              continue;
            }
            fail();
          }
          return go$1$r;
        };
        go$c = false;
        go$r = go$1(Nil)(v);
        continue;
      }
      if (v2.tag === "Nil") {
        const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
          let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
          while (go$1$c) {
            const v$1 = go$1$a0, v1$1 = go$1$a1;
            if (v1$1.tag === "Nil") {
              go$1$c = false;
              go$1$r = v$1;
              continue;
            }
            if (v1$1.tag === "Cons") {
              go$1$a0 = $List("Cons", v1$1._1, v$1);
              go$1$a1 = v1$1._2;
              continue;
            }
            fail();
          }
          return go$1$r;
        };
        go$c = false;
        go$r = go$1(Nil)(v);
        continue;
      }
      if (v2.tag === "Cons") {
        go$a0 = $List("Cons", v2._1, v);
        go$a1 = v1 - 1 | 0;
        go$a2 = v2._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go(Nil);
})();
var unsnoc2 = (lst) => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0, v1 = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = Nothing;
        continue;
      }
      if (v.tag === "Cons") {
        if (v._2.tag === "Nil") {
          go$c = false;
          go$r = $Maybe("Just", { revInit: v1, last: v._1 });
          continue;
        }
        go$a0 = v._2;
        go$a1 = $List("Cons", v._1, v1);
        continue;
      }
      fail();
    }
    return go$r;
  };
  const $0 = go(lst)(Nil);
  if ($0.tag === "Just") {
    return $Maybe(
      "Just",
      {
        init: (() => {
          const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
            let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
            while (go$1$c) {
              const v = go$1$a0, v1 = go$1$a1;
              if (v1.tag === "Nil") {
                go$1$c = false;
                go$1$r = v;
                continue;
              }
              if (v1.tag === "Cons") {
                go$1$a0 = $List("Cons", v1._1, v);
                go$1$a1 = v1._2;
                continue;
              }
              fail();
            }
            return go$1$r;
          };
          return go$1(Nil)($0._1.revInit);
        })(),
        last: $0._1.last
      }
    );
  }
  return Nothing;
};
var manyRec = (dictMonadRec) => (dictAlternative) => {
  const Alt0 = dictAlternative.Plus1().Alt0();
  const $0 = dictAlternative.Applicative0();
  return (p) => dictMonadRec.tailRecM((acc) => dictMonadRec.Monad0().Bind1().bind(Alt0.alt(Alt0.Functor0().map(Loop)(p))($0.pure($Step(
    "Done",
    void 0
  ))))((aa) => $0.pure((() => {
    if (aa.tag === "Loop") {
      return $Step("Loop", $List("Cons", aa._1, acc));
    }
    if (aa.tag === "Done") {
      return $Step(
        "Done",
        (() => {
          const go = (go$a0$copy) => (go$a1$copy) => {
            let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
            while (go$c) {
              const v = go$a0, v1 = go$a1;
              if (v1.tag === "Nil") {
                go$c = false;
                go$r = v;
                continue;
              }
              if (v1.tag === "Cons") {
                go$a0 = $List("Cons", v1._1, v);
                go$a1 = v1._2;
                continue;
              }
              fail();
            }
            return go$r;
          };
          return go(Nil)(acc);
        })()
      );
    }
    fail();
  })())))(Nil);
};
var index = (index$a0$copy) => (index$a1$copy) => {
  let index$a0 = index$a0$copy, index$a1 = index$a1$copy, index$c = true, index$r;
  while (index$c) {
    const v = index$a0, v1 = index$a1;
    if (v.tag === "Nil") {
      index$c = false;
      index$r = Nothing;
      continue;
    }
    if (v.tag === "Cons") {
      if (v1 === 0) {
        index$c = false;
        index$r = $Maybe("Just", v._1);
        continue;
      }
      index$a0 = v._2;
      index$a1 = v1 - 1 | 0;
      continue;
    }
    fail();
  }
  return index$r;
};
var groupBy2 = (v) => (v1) => {
  if (v1.tag === "Nil") {
    return Nil;
  }
  if (v1.tag === "Cons") {
    const v2 = span2(v(v1._1))(v1._2);
    return $List("Cons", $NonEmpty(v1._1, v2.init), groupBy2(v)(v2.rest));
  }
  fail();
};
var foldM3 = (dictMonad) => (v) => (v1) => (v2) => {
  if (v2.tag === "Nil") {
    return dictMonad.Applicative0().pure(v1);
  }
  if (v2.tag === "Cons") {
    const $0 = v2._2;
    return dictMonad.Bind1().bind(v(v1)(v2._1))((b$p) => foldM3(dictMonad)(v)(b$p)($0));
  }
  fail();
};
var drop2 = (drop$a0$copy) => (drop$a1$copy) => {
  let drop$a0 = drop$a0$copy, drop$a1 = drop$a1$copy, drop$c = true, drop$r;
  while (drop$c) {
    const v = drop$a0, v1 = drop$a1;
    if (v < 1) {
      drop$c = false;
      drop$r = v1;
      continue;
    }
    if (v1.tag === "Nil") {
      drop$c = false;
      drop$r = Nil;
      continue;
    }
    if (v1.tag === "Cons") {
      drop$a0 = v - 1 | 0;
      drop$a1 = v1._2;
      continue;
    }
    fail();
  }
  return drop$r;
};
var deleteBy3 = (v) => (v1) => (v2) => {
  if (v2.tag === "Nil") {
    return Nil;
  }
  if (v2.tag === "Cons") {
    if (v(v1)(v2._1)) {
      return v2._2;
    }
    return $List("Cons", v2._1, deleteBy3(v)(v1)(v2._2));
  }
  fail();
};
var difference = (dictEq) => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const b = go$a0, v = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = b;
        continue;
      }
      if (v.tag === "Cons") {
        go$a0 = deleteBy3(dictEq.eq)(v._1)(b);
        go$a1 = v._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go;
};

// output-es/Partial/foreign.js
var _crashWith = function(msg) {
  throw new Error(msg);
};

// output-es/Data.List.NonEmpty/index.js
var wrappedOperation = (name3) => (f) => (v) => {
  const v1 = f($List("Cons", v._1, v._2));
  if (v1.tag === "Cons") {
    return $NonEmpty(v1._1, v1._2);
  }
  if (v1.tag === "Nil") {
    return _crashWith("Impossible: empty list in NonEmptyList " + name3);
  }
  fail();
};
var unsnoc3 = (v) => {
  const v1 = unsnoc2(v._2);
  if (v1.tag === "Nothing") {
    return { init: Nil, last: v._1 };
  }
  if (v1.tag === "Just") {
    return { init: $List("Cons", v._1, v1._1.init), last: v1._1.last };
  }
  fail();
};
var tail = (v) => v._2;
var init2 = (v) => {
  const $0 = unsnoc2(v._2);
  if ($0.tag === "Just") {
    return $List("Cons", v._1, $0._1.init);
  }
  return Nil;
};

// output-es/Data.Set/index.js
var toUnfoldable1 = /* @__PURE__ */ (() => {
  const $0 = unfoldableArray.unfoldr((xs) => {
    if (xs.tag === "Nil") {
      return Nothing;
    }
    if (xs.tag === "Cons") {
      return $Maybe("Just", $Tuple(xs._1, xs._2));
    }
    fail();
  });
  return (x2) => $0((() => {
    const go = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
      }
      fail();
    };
    return go(x2, Nil);
  })());
})();
var singleton4 = (a) => $$$Map("Node", 1, 1, a, void 0, Leaf, Leaf);
var showSet = (dictShow) => ({ show: (s) => "(fromFoldable " + showArrayImpl(dictShow.show)(toUnfoldable1(s)) + ")" });
var foldableSet = {
  foldMap: (dictMonoid) => {
    const foldMap1 = foldableList.foldMap(dictMonoid);
    return (f) => {
      const $0 = foldMap1(f);
      return (x2) => $0((() => {
        const go = (m$p, z$p) => {
          if (m$p.tag === "Leaf") {
            return z$p;
          }
          if (m$p.tag === "Node") {
            return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
          }
          fail();
        };
        return go(x2, Nil);
      })());
    };
  },
  foldl: (f) => (x2) => {
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const b = go$a0, v = go$a1;
        if (v.tag === "Nil") {
          go$c = false;
          go$r = b;
          continue;
        }
        if (v.tag === "Cons") {
          go$a0 = f(b)(v._1);
          go$a1 = v._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    const $0 = go(x2);
    return (x$1) => $0((() => {
      const go$1 = (m$p, z$p) => {
        if (m$p.tag === "Leaf") {
          return z$p;
        }
        if (m$p.tag === "Node") {
          return go$1(m$p._5, $List("Cons", m$p._3, go$1(m$p._6, z$p)));
        }
        fail();
      };
      return go$1(x$1, Nil);
    })());
  },
  foldr: (f) => (x2) => {
    const $0 = foldableList.foldr(f)(x2);
    return (x$1) => $0((() => {
      const go = (m$p, z$p) => {
        if (m$p.tag === "Leaf") {
          return z$p;
        }
        if (m$p.tag === "Node") {
          return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
        }
        fail();
      };
      return go(x$1, Nil);
    })());
  }
};
var filter2 = (dictOrd) => filterKeys2(dictOrd);
var ordSet = (dictOrd) => {
  const $0 = dictOrd.Eq0();
  const eqSet1 = { eq: (v) => (v1) => eqMap($0)(eqUnit).eq(v)(v1) };
  return {
    compare: (s1) => (s2) => ordList(dictOrd).compare((() => {
      const go = (m$p, z$p) => {
        if (m$p.tag === "Leaf") {
          return z$p;
        }
        if (m$p.tag === "Node") {
          return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
        }
        fail();
      };
      return go(s1, Nil);
    })())((() => {
      const go = (m$p, z$p) => {
        if (m$p.tag === "Leaf") {
          return z$p;
        }
        if (m$p.tag === "Node") {
          return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
        }
        fail();
      };
      return go(s2, Nil);
    })()),
    Eq0: () => eqSet1
  };
};
var map2 = (dictOrd) => (f) => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const b = go$a0, v = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = b;
        continue;
      }
      if (v.tag === "Cons") {
        go$a0 = insert3(dictOrd)(f(v._1))()(b);
        go$a1 = v._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  const $0 = go(Leaf);
  return (x2) => $0((() => {
    const go$1 = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go$1(m$p._5, $List("Cons", m$p._3, go$1(m$p._6, z$p)));
      }
      fail();
    };
    return go$1(x2, Nil);
  })());
};
var mapMaybe2 = (dictOrd) => (f) => foldableSet.foldr((a) => (acc) => {
  const $0 = f(a);
  if ($0.tag === "Nothing") {
    return acc;
  }
  if ($0.tag === "Just") {
    return insert3(dictOrd)($0._1)()(acc);
  }
  fail();
})(Leaf);
var monoidSet = (dictOrd) => {
  const semigroupSet1 = {
    append: (() => {
      const compare2 = dictOrd.compare;
      return (m1) => (m2) => unsafeUnionWith(compare2, $$const, m1, m2);
    })()
  };
  return { mempty: Leaf, Semigroup0: () => semigroupSet1 };
};
var unions = (dictFoldable) => (dictOrd) => dictFoldable.foldl((() => {
  const compare2 = dictOrd.compare;
  return (m1) => (m2) => unsafeUnionWith(compare2, $$const, m1, m2);
})())(Leaf);

// output-es/Debug/foreign.js
var req = typeof module === "undefined" ? void 0 : module.require;
var util = (function() {
  try {
    return req === void 0 ? void 0 : req("util");
  } catch (e) {
    return void 0;
  }
})();
function _trace(x2, k) {
  if (util !== void 0) {
    console.log(util.inspect(x2, { depth: null, colors: true }));
  } else {
    console.log(x2);
  }
  return k({});
}
var now2 = (function() {
  var perf;
  if (typeof performance !== "undefined") {
    perf = performance;
  } else if (req) {
    try {
      perf = req("perf_hooks").performance;
    } catch (e) {
    }
  }
  return (function() {
    return (perf || Date).now();
  });
})();

// output-es/Util/index.js
var identity15 = (x2) => x2;
var isEmptySet = { isEmpty: isEmpty2 };
var isEmptyObject = { isEmpty };
var throwLeft = (dictMonadError) => {
  const $0 = dictMonadError.MonadThrow0();
  const $1 = $0.Monad0().Applicative0().pure;
  return (dictShow) => (x2) => {
    if (x2.tag === "Left") {
      return $0.throwError(error(dictShow.show(x2._1)));
    }
    if (x2.tag === "Right") {
      return $1(x2._1);
    }
    fail();
  };
};
var $$throw = (dictMonadThrow) => (x2) => dictMonadThrow.throwError(error(x2));
var withMsg = (dictMonadError) => {
  const throw2 = $$throw(dictMonadError.MonadThrow0());
  return (msg) => (m) => dictMonadError.catchError(m)((e) => throw2(message(e) + (msg === "" ? "" : "\n" + msg)));
};
var orElse = (dictMonadThrow) => (v) => (v1) => {
  if (v1.tag === "Nothing") {
    return dictMonadThrow.throwError(error(v));
  }
  if (v1.tag === "Just") {
    return dictMonadThrow.Monad0().Applicative0().pure(v1._1);
  }
  fail();
};
var mayFailEq = (dictMonadThrow) => (dictShow) => (dictEq) => (x2) => (x$p) => orElse(dictMonadThrow)(dictShow.show(x2) + " \u2260 " + dictShow.show(x$p))((() => {
  const $0 = dictEq.eq(x2)(x$p);
  if (!$0) {
    return Nothing;
  }
  if ($0) {
    return $Maybe("Just", x2);
  }
  fail();
})());
var definitely = (v) => (v1) => {
  if (v1.tag === "Just") {
    return v1._1;
  }
  if (v1.tag === "Nothing") {
    return throwException(error("definitely " + v))();
  }
  fail();
};
var unsafeArrayArray = {
  unsafeIndex: (xs) => (i) => definitely("index within bounds")(i >= 0 && i < xs.length ? $Maybe("Just", xs[i]) : Nothing),
  unsafeUpdateAt: (i) => (x2) => (x$1) => definitely("index within bounds")(_updateAt(Just, Nothing, i, x2, x$1))
};
var unsafeArrayNonEmptyArray = {
  unsafeIndex: (xs) => (i) => definitely("index within bounds")(i >= 0 && i < xs.length ? $Maybe("Just", xs[i]) : Nothing),
  unsafeUpdateAt: (i) => (x2) => (x$1) => definitely("index within bounds")(_updateAt(Just, Nothing, i, x2, x$1))
};
var nonEmptyListNonEmptyList = {
  nonEmpty: (x2) => definitely("non-empty")((() => {
    if (x2.tag === "Nil") {
      return Nothing;
    }
    if (x2.tag === "Cons") {
      return $Maybe("Just", $NonEmpty(x2._1, x2._2));
    }
    fail();
  })()),
  init: init2,
  tail
};
var defined = (x2) => {
  if (x2.tag === "Right") {
    return x2._1;
  }
  if (x2.tag === "Left") {
    return throwException(error(showErrorImpl(x2._1)))();
  }
  fail();
};
var spyWhen = (v) => (v1) => (v2) => (v3) => {
  if (v) {
    return _trace(v1 + ":", (v4) => _trace(v2(v3), (v$1) => v3));
  }
  return v3;
};
var spyFunWhenM = (dictFunctor) => (b) => (s) => (showIn) => (showOut) => (f) => (x2) => dictFunctor.map(spyWhen(b)(s + " output")(showOut))(f(spyWhen(b)(s + " input")(showIn)(x2)));
var spyFunWhen = (b) => (s) => (showIn) => (showOut) => (f) => spyFunWhenM(functorIdentity)(b)(s)(showIn)(showOut)((x2) => f(x2));
var check = (dictMonadThrow) => (v) => {
  if (!v) {
    return $$throw(dictMonadThrow);
  }
  if (v) {
    const $0 = dictMonadThrow.Monad0().Applicative0().pure();
    return (v$1) => $0;
  }
  fail();
};
var bind2Flipped = (dictMonad) => {
  const Bind1 = dictMonad.Bind1();
  const $0 = Bind1.Apply0();
  return (f) => (x2) => (y2) => Bind1.bind($0.apply($0.Functor0().map(f)(x2))(y2))(identity5);
};
var assertWith = (v) => (v1) => {
  if (v1) {
    return identity15;
  }
  return (v2) => throwException(error("Assertion failure: " + v))();
};
var assertWhen = (v) => (v1) => {
  if (!v) {
    return (v$1) => identity15;
  }
  if (v) {
    return (x2) => assertWith(v1)(x2());
  }
  fail();
};

// output-es/Util.Set/index.js
var setSet = (dictOrd) => ({
  empty: Leaf,
  filter: filter2(dictOrd),
  size: size2,
  difference: (() => {
    const compare2 = dictOrd.compare;
    return (m1) => (m2) => unsafeDifference(compare2, m1, m2);
  })(),
  member: (k) => {
    const go = (go$a0$copy) => {
      let go$a0 = go$a0$copy, go$c = true, go$r;
      while (go$c) {
        const v = go$a0;
        if (v.tag === "Leaf") {
          go$c = false;
          go$r = false;
          continue;
        }
        if (v.tag === "Node") {
          const v1 = dictOrd.compare(k)(v._3);
          if (v1 === "LT") {
            go$a0 = v._5;
            continue;
          }
          if (v1 === "GT") {
            go$a0 = v._6;
            continue;
          }
          if (v1 === "EQ") {
            go$c = false;
            go$r = true;
            continue;
          }
        }
        fail();
      }
      return go$r;
    };
    return go;
  },
  union: (() => {
    const compare2 = dictOrd.compare;
    return (m1) => (m2) => unsafeUnionWith(compare2, $$const, m1, m2);
  })(),
  IsEmpty0: () => isEmptySet
});
var setObjectString = {
  empty: empty2,
  filter: filterKeys,
  size,
  difference: (x2) => (y2) => foldlArray((b) => (a) => mutate(($0) => () => {
    delete $0[a];
    return $0;
  })(b))(x2)(Object.keys(y2)),
  member,
  union,
  IsEmpty0: () => isEmptyObject
};

// output-es/Util.Map/foreign.js
function intersectionWith_Object(f) {
  return function(m1) {
    return function(m2) {
      var m = {};
      for (var k in m1) {
        if (hasOwnProperty.call(m1, k) && hasOwnProperty.call(m2, k)) {
          m[k] = f(m1[k])(m2[k]);
        }
      }
      return m;
    };
  };
}

// output-es/Util.Map/index.js
var identity16 = (x2) => x2;
var mapObjectString = {
  maplet: singleton3,
  keys: /* @__PURE__ */ (() => {
    const $0 = foldlArray((m) => (a) => insert3(ordString)(a)()(m))(Leaf);
    return (x2) => $0(Object.keys(x2));
  })(),
  values: /* @__PURE__ */ (() => {
    const $0 = foldrArray(Cons)(Nil);
    return (x2) => $0(values(x2));
  })(),
  filterKeys,
  unionWith,
  lookup,
  delete: $$delete,
  insert: insert2,
  toUnfoldable: (dictUnfoldable) => toAscUnfoldable(dictUnfoldable),
  Set0: () => setObjectString
};
var lookup$p = (dictMonadThrow) => (dictShow) => (dictMap) => (k) => (\u03B3) => orElse(dictMonadThrow)("Key " + dictShow.show(k) + " exists in map")(dictMap.lookup(k)(\u03B3));
var $$get = (dictShow) => (dictMap) => (k) => {
  const $0 = dictMap.lookup(k);
  const $1 = definitely("Key " + dictShow.show(k) + " exists in map");
  return (x2) => $1($0(x2));
};
var disjointUnion = (dictMap) => dictMap.unionWith((v) => (v1) => throwException(error("not disjoint"))());
var mapFObjectString = {
  intersectionWith: intersectionWith_Object,
  difference: (m1) => (m2) => foldlArray((b) => (a) => mutate(($0) => () => {
    delete $0[a];
    return $0;
  })(b))(m1)(Object.keys(m2)),
  mapWithKey
};
var asMaplet = (dictMap) => {
  const toUnfoldable14 = dictMap.toUnfoldable(unfoldableList);
  return (m) => assertWith("")(dictMap.Set0().size(m) === 1)(definitely("singleton map")((() => {
    const $0 = toUnfoldable14(m);
    if ($0.tag === "Nil") {
      return Nothing;
    }
    if ($0.tag === "Cons") {
      return $Maybe("Just", $0._1);
    }
    fail();
  })()));
};
var update2 = (dictShow) => (dictMap) => (f) => (k) => {
  const $0 = definitely("Key " + dictShow.show(k) + " exists in map");
  return (m) => dictMap.insert(k)(f($0(dictMap.lookup(k)(m))))(m);
};

// output-es/Dict/index.js
var identity17 = (x2) => x2;
var isEmptyDict = { isEmpty: (v) => isEmpty(v) };
var setDictString = {
  empty: empty2,
  filter: (p) => (v) => filterWithKey((x2) => {
    const $0 = p(x2);
    return (v$1) => $0;
  })(v),
  size: (v) => size(v),
  member: (x2) => (v) => Object.hasOwn(v, x2),
  difference: (v) => (v1) => setObjectString.difference(v)(v1),
  union: (v) => (v1) => union(v)(v1),
  IsEmpty0: () => isEmptyDict
};
var mapDictString = {
  maplet: (k) => (v) => {
    const $0 = {};
    $0[k] = v;
    return $0;
  },
  keys: (v) => mapObjectString.keys(v),
  values: (v) => mapObjectString.values(v),
  filterKeys: (p) => (v) => filterWithKey((x2) => {
    const $0 = p(x2);
    return (v$1) => $0;
  })(v),
  unionWith: (f) => (v) => (v1) => unionWith(f)(v)(v1),
  lookup: (k) => (v) => _lookup(Nothing, Just, k, v),
  delete: (k) => (v) => mutate(($0) => () => {
    delete $0[k];
    return $0;
  })(v),
  insert: (k) => (v) => (v1) => mutate(($0) => () => {
    $0[k] = v;
    return $0;
  })(v1),
  toUnfoldable: (dictUnfoldable) => toAscUnfoldable(dictUnfoldable),
  Set0: () => setDictString
};
var functorDict = { map: (f) => (m) => _fmapObject(m, f) };
var foldableDict = {
  foldl: (f) => (z) => (m) => fold((z$1) => (v) => f(z$1))(z)(m),
  foldr: (f) => (z) => (m) => foldrArray(f)(z)(values(m)),
  foldMap: (dictMonoid) => {
    const foldMap1 = foldMap(dictMonoid);
    return (f) => foldMap1((v) => f);
  }
};
var traversableDict = {
  traverse: (dictApplicative) => {
    const $0 = traversableWithIndexObject.traverseWithIndex(dictApplicative);
    return (f) => (m) => dictApplicative.Apply0().Functor0().map((v1) => v1)($0((v) => f)(m));
  },
  sequence: (dictApplicative) => (v) => traversableDict.traverse(dictApplicative)(identity17)(v),
  Functor0: () => functorDict,
  Foldable1: () => foldableDict
};
var ordDict = (dictOrd) => {
  const Eq0 = dictOrd.Eq0();
  const eqDict1 = eqObject(Eq0);
  return {
    compare: (v) => (v1) => {
      if (isSubmap(Eq0)(v)(v1)) {
        if (isSubmap(Eq0)(v1)(v)) {
          return EQ;
        }
        return LT;
      }
      return GT;
    },
    Eq0: () => eqDict1
  };
};

// output-es/Control.Monad.Error.Class/index.js
var monadThrowEffect = { throwError: throwException, Monad0: () => monadEffect };
var $$try = (dictMonadError) => {
  const Monad0 = dictMonadError.MonadThrow0().Monad0();
  return (a) => dictMonadError.catchError(Monad0.Bind1().Apply0().Functor0().map(Right)(a))((x2) => Monad0.Applicative0().pure($Either("Left", x2)));
};

// output-es/Effect.Aff/foreign.js
var Aff = (function() {
  var EMPTY = {};
  var PURE = "Pure";
  var THROW = "Throw";
  var CATCH = "Catch";
  var SYNC = "Sync";
  var ASYNC = "Async";
  var BIND = "Bind";
  var BRACKET = "Bracket";
  var FORK = "Fork";
  var SEQ = "Sequential";
  var MAP = "Map";
  var APPLY = "Apply";
  var ALT = "Alt";
  var CONS = "Cons";
  var RESUME = "Resume";
  var RELEASE = "Release";
  var FINALIZER = "Finalizer";
  var FINALIZED = "Finalized";
  var FORKED = "Forked";
  var FIBER = "Fiber";
  var THUNK = "Thunk";
  function Aff2(tag, _1, _2, _3) {
    this.tag = tag;
    this._1 = _1;
    this._2 = _2;
    this._3 = _3;
  }
  function AffCtr(tag) {
    var fn = function(_1, _2, _3) {
      return new Aff2(tag, _1, _2, _3);
    };
    fn.tag = tag;
    return fn;
  }
  function nonCanceler2(error3) {
    return new Aff2(PURE, void 0);
  }
  function runEff(eff) {
    try {
      eff();
    } catch (error3) {
      setTimeout(function() {
        throw error3;
      }, 0);
    }
  }
  function runSync(left2, right2, eff) {
    try {
      return right2(eff());
    } catch (error3) {
      return left2(error3);
    }
  }
  function runAsync(left2, eff, k) {
    try {
      return eff(k)();
    } catch (error3) {
      k(left2(error3))();
      return nonCanceler2;
    }
  }
  var Scheduler = (function() {
    var limit = 1024;
    var size3 = 0;
    var ix = 0;
    var queue = new Array(limit);
    var draining = false;
    function drain() {
      var thunk;
      draining = true;
      while (size3 !== 0) {
        size3--;
        thunk = queue[ix];
        queue[ix] = void 0;
        ix = (ix + 1) % limit;
        thunk();
      }
      draining = false;
    }
    return {
      isDraining: function() {
        return draining;
      },
      enqueue: function(cb) {
        var i, tmp;
        if (size3 === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }
        queue[(ix + size3) % limit] = cb;
        size3++;
        if (!draining) {
          drain();
        }
      }
    };
  })();
  function Supervisor(util2) {
    var fibers = {};
    var fiberId = 0;
    var count = 0;
    return {
      register: function(fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function(result) {
            return function() {
              count--;
              delete fibers[fid];
            };
          }
        })();
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function() {
        return count === 0;
      },
      killAll: function(killError, cb) {
        return function() {
          if (count === 0) {
            return cb();
          }
          var killCount = 0;
          var kills = {};
          function kill(fid) {
            kills[fid] = fibers[fid].kill(killError, function(result) {
              return function() {
                delete kills[fid];
                killCount--;
                if (util2.isLeft(result) && util2.fromLeft(result)) {
                  setTimeout(function() {
                    throw util2.fromLeft(result);
                  }, 0);
                }
                if (killCount === 0) {
                  cb();
                }
              };
            })();
          }
          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill(k);
            }
          }
          fibers = {};
          fiberId = 0;
          count = 0;
          return function(error3) {
            return new Aff2(SYNC, function() {
              for (var k2 in kills) {
                if (kills.hasOwnProperty(k2)) {
                  kills[k2]();
                }
              }
            });
          };
        };
      }
    };
  }
  var SUSPENDED = 0;
  var CONTINUE = 1;
  var STEP_BIND = 2;
  var STEP_RESULT = 3;
  var PENDING = 4;
  var RETURN = 5;
  var COMPLETED = 6;
  function Fiber(util2, supervisor, aff) {
    var runTick = 0;
    var status = SUSPENDED;
    var step = aff;
    var fail3 = null;
    var interrupt = null;
    var bhead = null;
    var btail = null;
    var attempts = null;
    var bracketCount = 0;
    var joinId = 0;
    var joins = null;
    var rethrow = true;
    function run2(localRunTick) {
      var tmp, result, attempt;
      while (true) {
        tmp = null;
        result = null;
        attempt = null;
        switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail3 = util2.left(e);
              step = null;
            }
            break;
          case STEP_RESULT:
            if (util2.isLeft(step)) {
              status = RETURN;
              fail3 = step;
              step = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step = util2.fromRight(step);
            }
            break;
          case CONTINUE:
            switch (step.tag) {
              case BIND:
                if (bhead) {
                  btail = new Aff2(CONS, bhead, btail);
                }
                bhead = step._2;
                status = CONTINUE;
                step = step._1;
                break;
              case PURE:
                if (bhead === null) {
                  status = RETURN;
                  step = util2.right(step._1);
                } else {
                  status = STEP_BIND;
                  step = step._1;
                }
                break;
              case SYNC:
                status = STEP_RESULT;
                step = runSync(util2.left, util2.right, step._1);
                break;
              case ASYNC:
                status = PENDING;
                step = runAsync(util2.left, step._1, function(result2) {
                  return function() {
                    if (runTick !== localRunTick) {
                      return;
                    }
                    runTick++;
                    Scheduler.enqueue(function() {
                      if (runTick !== localRunTick + 1) {
                        return;
                      }
                      status = STEP_RESULT;
                      step = result2;
                      run2(runTick);
                    });
                  };
                });
                return;
              case THROW:
                status = RETURN;
                fail3 = util2.left(step._1);
                step = null;
                break;
              // Enqueue the Catch so that we can call the error handler later on
              // in case of an exception.
              case CATCH:
                if (bhead === null) {
                  attempts = new Aff2(CONS, step, attempts, interrupt);
                } else {
                  attempts = new Aff2(CONS, step, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }
                bhead = null;
                btail = null;
                status = CONTINUE;
                step = step._1;
                break;
              // Enqueue the Bracket so that we can call the appropriate handlers
              // after resource acquisition.
              case BRACKET:
                bracketCount++;
                if (bhead === null) {
                  attempts = new Aff2(CONS, step, attempts, interrupt);
                } else {
                  attempts = new Aff2(CONS, step, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }
                bhead = null;
                btail = null;
                status = CONTINUE;
                step = step._1;
                break;
              case FORK:
                status = STEP_RESULT;
                tmp = Fiber(util2, supervisor, step._2);
                if (supervisor) {
                  supervisor.register(tmp);
                }
                if (step._1) {
                  tmp.run();
                }
                step = util2.right(tmp);
                break;
              case SEQ:
                status = CONTINUE;
                step = sequential(util2, supervisor, step._1);
                break;
            }
            break;
          case RETURN:
            bhead = null;
            btail = null;
            if (attempts === null) {
              status = COMPLETED;
              step = interrupt || fail3 || step;
            } else {
              tmp = attempts._3;
              attempt = attempts._1;
              attempts = attempts._2;
              switch (attempt.tag) {
                // We cannot recover from an unmasked interrupt. Otherwise we should
                // continue stepping, or run the exception handler if an exception
                // was raised.
                case CATCH:
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    status = RETURN;
                  } else if (fail3) {
                    status = CONTINUE;
                    step = attempt._2(util2.fromLeft(fail3));
                    fail3 = null;
                  }
                  break;
                // We cannot resume from an unmasked interrupt or exception.
                case RESUME:
                  if (interrupt && interrupt !== tmp && bracketCount === 0 || fail3) {
                    status = RETURN;
                  } else {
                    bhead = attempt._1;
                    btail = attempt._2;
                    status = STEP_BIND;
                    step = util2.fromRight(step);
                  }
                  break;
                // If we have a bracket, we should enqueue the handlers,
                // and continue with the success branch only if the fiber has
                // not been interrupted. If the bracket acquisition failed, we
                // should not run either.
                case BRACKET:
                  bracketCount--;
                  if (fail3 === null) {
                    result = util2.fromRight(step);
                    attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                    if (interrupt === tmp || bracketCount > 0) {
                      status = CONTINUE;
                      step = attempt._3(result);
                    }
                  }
                  break;
                // Enqueue the appropriate handler. We increase the bracket count
                // because it should not be cancelled.
                case RELEASE:
                  attempts = new Aff2(CONS, new Aff2(FINALIZED, step, fail3), attempts, interrupt);
                  status = CONTINUE;
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    step = attempt._1.killed(util2.fromLeft(interrupt))(attempt._2);
                  } else if (fail3) {
                    step = attempt._1.failed(util2.fromLeft(fail3))(attempt._2);
                  } else {
                    step = attempt._1.completed(util2.fromRight(step))(attempt._2);
                  }
                  fail3 = null;
                  bracketCount++;
                  break;
                case FINALIZER:
                  bracketCount++;
                  attempts = new Aff2(CONS, new Aff2(FINALIZED, step, fail3), attempts, interrupt);
                  status = CONTINUE;
                  step = attempt._1;
                  break;
                case FINALIZED:
                  bracketCount--;
                  status = RETURN;
                  step = attempt._1;
                  fail3 = attempt._2;
                  break;
              }
            }
            break;
          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            if (interrupt && fail3) {
              setTimeout(function() {
                throw util2.fromLeft(fail3);
              }, 0);
            } else if (util2.isLeft(step) && rethrow) {
              setTimeout(function() {
                if (rethrow) {
                  throw util2.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING:
            return;
        }
      }
    }
    function onComplete(join5) {
      return function() {
        if (status === COMPLETED) {
          rethrow = rethrow && join5.rethrow;
          join5.handler(step)();
          return function() {
          };
        }
        var jid = joinId++;
        joins = joins || {};
        joins[jid] = join5;
        return function() {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }
    function kill(error3, cb) {
      return function() {
        if (status === COMPLETED) {
          cb(util2.right(void 0))();
          return function() {
          };
        }
        var canceler = onComplete({
          rethrow: false,
          handler: function() {
            return cb(util2.right(void 0));
          }
        })();
        switch (status) {
          case SUSPENDED:
            interrupt = util2.left(error3);
            status = COMPLETED;
            step = interrupt;
            run2(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util2.left(error3);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff2(CONS, new Aff2(FINALIZER, step(error3)), attempts, interrupt);
              }
              status = RETURN;
              step = null;
              fail3 = null;
              run2(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util2.left(error3);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step = null;
              fail3 = null;
            }
        }
        return canceler;
      };
    }
    function join4(cb) {
      return function() {
        var canceler = onComplete({
          rethrow: false,
          handler: cb
        })();
        if (status === SUSPENDED) {
          run2(runTick);
        }
        return canceler;
      };
    }
    return {
      kill,
      join: join4,
      onComplete,
      isSuspended: function() {
        return status === SUSPENDED;
      },
      run: function() {
        if (status === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function() {
              run2(runTick);
            });
          } else {
            run2(runTick);
          }
        }
      }
    };
  }
  function runPar(util2, supervisor, par, cb) {
    var fiberId = 0;
    var fibers = {};
    var killId = 0;
    var kills = {};
    var early = new Error("[ParAff] Early exit");
    var interrupt = null;
    var root2 = EMPTY;
    function kill(error3, par2, cb2) {
      var step = par2;
      var head = null;
      var tail3 = null;
      var count = 0;
      var kills2 = {};
      var tmp, kid;
      loop: while (true) {
        tmp = null;
        switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills2[count++] = tmp.kill(error3, function(result) {
                return function() {
                  count--;
                  if (count === 0) {
                    cb2(result)();
                  }
                };
              });
            }
            if (head === null) {
              break loop;
            }
            step = head._2;
            if (tail3 === null) {
              head = null;
            } else {
              head = tail3._1;
              tail3 = tail3._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail3 = new Aff2(CONS, head, tail3);
            }
            head = step;
            step = step._1;
            break;
        }
      }
      if (count === 0) {
        cb2(util2.right(void 0))();
      } else {
        kid = 0;
        tmp = count;
        for (; kid < tmp; kid++) {
          kills2[kid] = kills2[kid]();
        }
      }
      return kills2;
    }
    function join4(result, head, tail3) {
      var fail3, step, lhs, rhs, tmp, kid;
      if (util2.isLeft(result)) {
        fail3 = result;
        step = null;
      } else {
        step = result;
        fail3 = null;
      }
      loop: while (true) {
        lhs = null;
        rhs = null;
        tmp = null;
        kid = null;
        if (interrupt !== null) {
          return;
        }
        if (head === null) {
          cb(fail3 || step)();
          return;
        }
        if (head._3 !== EMPTY) {
          return;
        }
        switch (head.tag) {
          case MAP:
            if (fail3 === null) {
              head._3 = util2.right(head._1(util2.fromRight(step)));
              step = head._3;
            } else {
              head._3 = fail3;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            if (fail3) {
              head._3 = fail3;
              tmp = true;
              kid = killId++;
              kills[kid] = kill(early, fail3 === lhs ? head._2 : head._1, function() {
                return function() {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail3 === null) {
                    join4(fail3, null, null);
                  } else {
                    join4(fail3, tail3._1, tail3._2);
                  }
                };
              });
              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              return;
            } else {
              step = util2.right(util2.fromRight(lhs)(util2.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            if (lhs === EMPTY && util2.isLeft(rhs) || rhs === EMPTY && util2.isLeft(lhs)) {
              return;
            }
            if (lhs !== EMPTY && util2.isLeft(lhs) && rhs !== EMPTY && util2.isLeft(rhs)) {
              fail3 = step === lhs ? rhs : lhs;
              step = null;
              head._3 = fail3;
            } else {
              head._3 = step;
              tmp = true;
              kid = killId++;
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function() {
                return function() {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail3 === null) {
                    join4(step, null, null);
                  } else {
                    join4(step, tail3._1, tail3._2);
                  }
                };
              });
              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
        }
        if (tail3 === null) {
          head = null;
        } else {
          head = tail3._1;
          tail3 = tail3._2;
        }
      }
    }
    function resolve(fiber) {
      return function(result) {
        return function() {
          delete fibers[fiber._1];
          fiber._3 = result;
          join4(result, fiber._2._1, fiber._2._2);
        };
      };
    }
    function run2() {
      var status = CONTINUE;
      var step = par;
      var head = null;
      var tail3 = null;
      var tmp, fid;
      loop: while (true) {
        tmp = null;
        fid = null;
        switch (status) {
          case CONTINUE:
            switch (step.tag) {
              case MAP:
                if (head) {
                  tail3 = new Aff2(CONS, head, tail3);
                }
                head = new Aff2(MAP, step._1, EMPTY, EMPTY);
                step = step._2;
                break;
              case APPLY:
                if (head) {
                  tail3 = new Aff2(CONS, head, tail3);
                }
                head = new Aff2(APPLY, EMPTY, step._2, EMPTY);
                step = step._1;
                break;
              case ALT:
                if (head) {
                  tail3 = new Aff2(CONS, head, tail3);
                }
                head = new Aff2(ALT, EMPTY, step._2, EMPTY);
                step = step._1;
                break;
              default:
                fid = fiberId++;
                status = RETURN;
                tmp = step;
                step = new Aff2(FORKED, fid, new Aff2(CONS, head, tail3), EMPTY);
                tmp = Fiber(util2, supervisor, tmp);
                tmp.onComplete({
                  rethrow: false,
                  handler: resolve(step)
                })();
                fibers[fid] = tmp;
                if (supervisor) {
                  supervisor.register(tmp);
                }
            }
            break;
          case RETURN:
            if (head === null) {
              break loop;
            }
            if (head._1 === EMPTY) {
              head._1 = step;
              status = CONTINUE;
              step = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step = head;
              if (tail3 === null) {
                head = null;
              } else {
                head = tail3._1;
                tail3 = tail3._2;
              }
            }
        }
      }
      root2 = step;
      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    }
    function cancel(error3, cb2) {
      interrupt = util2.left(error3);
      var innerKills;
      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];
          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }
      kills = null;
      var newKills = kill(error3, root2, cb2);
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            for (var kid2 in newKills) {
              if (newKills.hasOwnProperty(kid2)) {
                newKills[kid2]();
              }
            }
            return nonCanceler2;
          };
        });
      };
    }
    run2();
    return function(killError) {
      return new Aff2(ASYNC, function(killCb) {
        return function() {
          return cancel(killError, killCb);
        };
      });
    };
  }
  function sequential(util2, supervisor, par) {
    return new Aff2(ASYNC, function(cb) {
      return function() {
        return runPar(util2, supervisor, par, cb);
      };
    });
  }
  Aff2.EMPTY = EMPTY;
  Aff2.Pure = AffCtr(PURE);
  Aff2.Throw = AffCtr(THROW);
  Aff2.Catch = AffCtr(CATCH);
  Aff2.Sync = AffCtr(SYNC);
  Aff2.Async = AffCtr(ASYNC);
  Aff2.Bind = AffCtr(BIND);
  Aff2.Bracket = AffCtr(BRACKET);
  Aff2.Fork = AffCtr(FORK);
  Aff2.Seq = AffCtr(SEQ);
  Aff2.ParMap = AffCtr(MAP);
  Aff2.ParApply = AffCtr(APPLY);
  Aff2.ParAlt = AffCtr(ALT);
  Aff2.Fiber = Fiber;
  Aff2.Supervisor = Supervisor;
  Aff2.Scheduler = Scheduler;
  Aff2.nonCanceler = nonCanceler2;
  return Aff2;
})();
var _pure = Aff.Pure;
var _throwError = Aff.Throw;
function _catchError(aff) {
  return function(k) {
    return Aff.Catch(aff, k);
  };
}
function _map(f) {
  return function(aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function(value) {
        return Aff.Pure(f(value));
      });
    }
  };
}
function _bind(aff) {
  return function(k) {
    return Aff.Bind(aff, k);
  };
}
var _liftEffect = Aff.Sync;
var makeAff = Aff.Async;
function _makeFiber(util2, aff) {
  return function() {
    return Aff.Fiber(util2, null, aff);
  };
}
var _sequential = Aff.Seq;

// output-es/Effect.Aff/index.js
var functorAff = { map: _map };
var ffiUtil = {
  isLeft: (v) => {
    if (v.tag === "Left") {
      return true;
    }
    if (v.tag === "Right") {
      return false;
    }
    fail();
  },
  fromLeft: (v) => {
    if (v.tag === "Left") {
      return v._1;
    }
    if (v.tag === "Right") {
      return _crashWith("unsafeFromLeft: Right");
    }
    fail();
  },
  fromRight: (v) => {
    if (v.tag === "Right") {
      return v._1;
    }
    if (v.tag === "Left") {
      return _crashWith("unsafeFromRight: Left");
    }
    fail();
  },
  left: Left,
  right: Right
};
var monadAff = { Applicative0: () => applicativeAff, Bind1: () => bindAff };
var bindAff = { bind: _bind, Apply0: () => applyAff };
var applyAff = { apply: (f) => (a) => _bind(f)((f$p) => _bind(a)((a$p) => applicativeAff.pure(f$p(a$p)))), Functor0: () => functorAff };
var applicativeAff = { pure: _pure, Apply0: () => applyAff };
var monadEffectAff = { liftEffect: _liftEffect, Monad0: () => monadAff };
var monadThrowAff = { throwError: _throwError, Monad0: () => monadAff };
var monadErrorAff = { catchError: _catchError, MonadThrow0: () => monadThrowAff };
var $$try2 = /* @__PURE__ */ $$try(monadErrorAff);
var runAff = (k) => (aff) => {
  const $0 = _makeFiber(ffiUtil, _bind($$try2(aff))((x2) => _liftEffect(k(x2))));
  return () => {
    const fiber = $0();
    fiber.run();
    return fiber;
  };
};
var nonCanceler = /* @__PURE__ */ (() => {
  const $0 = _pure();
  return (v) => $0;
})();

// output-es/Effect.Console/foreign.js
var log2 = function(s) {
  return function() {
    console.log(s);
  };
};

// output-es/Data.HeytingAlgebra/foreign.js
var boolConj = function(b1) {
  return function(b2) {
    return b1 && b2;
  };
};
var boolDisj = function(b1) {
  return function(b2) {
    return b1 || b2;
  };
};
var boolNot = function(b) {
  return !b;
};

// output-es/Util.Pair/index.js
var $Pair = (_1, _2) => ({ tag: "Pair", _1, _2 });
var Pair = (value0) => (value1) => $Pair(value0, value1);
var functorPair = { map: (f) => (v) => $Pair(f(v._1), f(v._2)) };
var foldablePair = {
  foldl: (f) => (z) => (v) => f(f(z)(v._1))(v._2),
  foldr: (f) => foldrDefault(foldablePair)(f),
  foldMap: (dictMonoid) => (f) => foldablePair.foldl((acc) => (x2) => dictMonoid.Semigroup0().append(acc)(f(x2)))(dictMonoid.mempty)
};
var traversablePair = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (f) => (v) => Apply0.apply(Apply0.Functor0().map(Pair)(f(v._1)))(f(v._2));
  },
  sequence: (dictApplicative) => traversablePair.traverse(dictApplicative)(identity7),
  Functor0: () => functorPair,
  Foldable1: () => foldablePair
};
var toTuple = (v) => $Tuple(v._1, v._2);
var unzip3 = (xys) => unzip2(listMap(toTuple)(xys));

// output-es/Lattice/index.js
var identity19 = (x2) => x2;
var meetSemilatticeUnit = { meet: (v) => identity19 };
var meetSemilatticeBoolean = { meet: boolConj };
var joinSemilatticeUnit = { join: (v) => identity19 };
var joinSemilatticeBoolean = { join: boolDisj };
var boundedMeetSemilatticeUni = { top: void 0, MeetSemilattice0: () => meetSemilatticeUnit };
var boundedMeetSemilatticeBoo = { top: true, MeetSemilattice0: () => meetSemilatticeBoolean };
var boundedJoinSemilatticeUni = { bot: void 0, JoinSemilattice0: () => joinSemilatticeUnit };

// output-es/Pretty.Doc/index.js
var $Doc = (tag, _1, _2) => ({ tag, _1, _2 });
var $Format = (tag) => tag;
var $Mode = (tag) => tag;
var Stmt = /* @__PURE__ */ $Mode("Stmt");
var Inline = /* @__PURE__ */ $Format("Inline");
var Multiline = /* @__PURE__ */ $Format("Multiline");
var Empty = /* @__PURE__ */ $Doc("Empty");
var Line2 = /* @__PURE__ */ $Doc("Line");
var width = (m) => (doc2) => {
  if (doc2.tag === "Empty") {
    return 0;
  }
  if (doc2.tag === "Line") {
    return 0;
  }
  if (doc2.tag === "Text") {
    return toCodePointArray(doc2._1).length;
  }
  if (doc2.tag === "Indent") {
    return width(m)(doc2._1);
  }
  if (doc2.tag === "Concat") {
    return width(m)(doc2._1) + width(m)(doc2._2) | 0;
  }
  if (doc2.tag === "Mode") {
    return width(doc2._1)(doc2._2);
  }
  if (doc2.tag === "StmtOrExpr") {
    if (m === "Stmt") {
      return width(m)(doc2._1);
    }
    if (m === "Expr") {
      return width(m)(doc2._2);
    }
    fail();
  }
  if (doc2.tag === "InlOrMul") {
    return width(m)(doc2._1);
  }
  fail();
};
var spaces = (n) => {
  if (n <= 0) {
    return "";
  }
  return " " + spaces(n - 1 | 0);
};
var inlinable = (m) => (doc2) => {
  if (doc2.tag === "Empty") {
    return true;
  }
  if (doc2.tag === "Line") {
    return false;
  }
  if (doc2.tag === "Text") {
    return true;
  }
  if (doc2.tag === "Indent") {
    return false;
  }
  if (doc2.tag === "Concat") {
    return inlinable(m)(doc2._1) && inlinable(m)(doc2._2);
  }
  if (doc2.tag === "Mode") {
    return inlinable(doc2._1)(doc2._2);
  }
  if (doc2.tag === "StmtOrExpr") {
    if (m === "Stmt") {
      return false;
    }
    if (m === "Expr") {
      return inlinable(m)(doc2._2);
    }
    fail();
  }
  if (doc2.tag === "InlOrMul") {
    return inlinable(m)(doc2._1);
  }
  fail();
};
var format2 = (m) => (w) => (doc2) => {
  if (inlinable(m)(doc2) && width(m)(doc2) < (80 - w | 0)) {
    return Inline;
  }
  return Multiline;
};
var renderWithIndent = (m) => (i) => (w) => (doc2) => {
  const indentation2 = i * 2 | 0;
  const fmt = format2(m)(w)(doc2);
  const $0 = (d1, d2) => {
    const v = renderWithIndent(m)(i)(w)(d1);
    const v1 = renderWithIndent(m)(i)(v._2)(d2);
    return $Tuple(v._1 + v1._1, v1._2);
  };
  if (doc2.tag === "Empty") {
    return $Tuple("", w);
  }
  if (doc2.tag === "Line") {
    return $Tuple(indentation2 <= 0 ? "\n" : "\n " + spaces(indentation2 - 1 | 0), indentation2);
  }
  if (doc2.tag === "Concat") {
    if (doc2._1.tag === "Line") {
      if (doc2._2.tag === "Empty") {
        return $Tuple("\n", 0);
      }
      if (doc2._2.tag === "Line") {
        return $Tuple(indentation2 <= 0 ? "\n\n" : "\n\n " + spaces(indentation2 - 1 | 0), indentation2);
      }
    }
    return $0(doc2._1, doc2._2);
  }
  if (doc2.tag === "Text") {
    return $Tuple(doc2._1, w + toCodePointArray(doc2._1).length | 0);
  }
  if (doc2.tag === "Indent") {
    return renderWithIndent(m)(i + 1 | 0)(w)(doc2._1);
  }
  if (doc2.tag === "Mode") {
    return renderWithIndent(doc2._1)(i)(w)(doc2._2);
  }
  if (doc2.tag === "StmtOrExpr") {
    if (m === "Stmt") {
      return renderWithIndent(m)(i)(w)(doc2._1);
    }
    if (m === "Expr") {
      return renderWithIndent(m)(i)(w)(doc2._2);
    }
    fail();
  }
  if (doc2.tag === "InlOrMul") {
    if (fmt === "Inline") {
      return renderWithIndent(m)(i)(w)(doc2._1);
    }
    if (fmt === "Multiline") {
      return renderWithIndent(m)(i)(w)(doc2._2);
    }
  }
  fail();
};

// output-es/Pretty.Util/index.js
var sep$p = (v) => (v1) => {
  if (v1.tag === "Nil") {
    return Empty;
  }
  if (v1.tag === "Cons") {
    if (v1._2.tag === "Nil") {
      return v1._1;
    }
    return $Doc("Concat", v1._1, $Doc("Concat", v, sep$p(v)(v1._2)));
  }
  fail();
};
var record = (ds) => $Doc(
  "InlOrMul",
  $Doc(
    "Concat",
    $Doc("Text", "{"),
    $Doc(
      "Concat",
      $Doc("Text", " "),
      $Doc("Concat", sep$p($Doc("Text", ", "))(ds), $Doc("Concat", $Doc("Text", " "), $Doc("Text", "}")))
    )
  ),
  $Doc(
    "Concat",
    $Doc("Text", "{"),
    $Doc(
      "Concat",
      $Doc("Indent", $Doc("Concat", Line2, sep$p($Doc("Concat", $Doc("Text", ","), Line2))(ds))),
      $Doc("Concat", Line2, $Doc("Text", "}"))
    )
  )
);

// output-es/Data.Lazy/foreign.js
var defer = function(thunk) {
  var v = null;
  return function() {
    if (thunk === void 0) return v;
    v = thunk();
    thunk = void 0;
    return v;
  };
};
var force = function(l) {
  return l();
};

// output-es/Parsing/index.js
var $ParseError = (_1, _2) => ({ tag: "ParseError", _1, _2 });
var $ParseState = (_1, _2, _3) => ({ tag: "ParseState", _1, _2, _3 });
var $RunParser = (tag, _1, _2) => ({ tag, _1, _2 });
var More = (value0) => $RunParser("More", value0);
var Lift = (value0) => $RunParser("Lift", value0);
var lazyParserT = {
  defer: (f) => {
    const m = defer(f);
    return (state1, more, lift12, $$throw2, done) => force(m)(state1, more, lift12, $$throw2, done);
  }
};
var functorParserT = { map: (f) => (v) => (state1, more, lift12, $$throw2, done) => more((v1) => v(state1, more, lift12, $$throw2, (state2, a) => more((v2) => done(state2, f(a))))) };
var altParserT = {
  alt: (v) => (v1) => (v2, $0, $1, $2, $3) => {
    const $4 = v2._1;
    const $5 = v2._2;
    return $0((v3) => v(
      $ParseState($4, $5, false),
      $0,
      $1,
      (v4, $6) => {
        const $7 = v4._3;
        return $0((v5) => {
          if ($7) {
            return $2(v4, $6);
          }
          return v1(v2, $0, $1, $2, $3);
        });
      },
      $3
    ));
  },
  Functor0: () => functorParserT
};
var runParserT$p = (dictMonadRec) => {
  const Monad0 = dictMonadRec.Monad0();
  return (state1) => (v) => {
    const go = (go$a0$copy) => {
      let go$a0 = go$a0$copy, go$c = true, go$r;
      while (go$c) {
        const step = go$a0;
        const v1 = step();
        if (v1.tag === "More") {
          go$a0 = v1._1;
          continue;
        }
        if (v1.tag === "Lift") {
          go$c = false;
          go$r = Monad0.Bind1().Apply0().Functor0().map(Loop)(v1._1);
          continue;
        }
        if (v1.tag === "Stop") {
          go$c = false;
          go$r = Monad0.Applicative0().pure($Step("Done", $Tuple(v1._2, v1._1)));
          continue;
        }
        fail();
      }
      return go$r;
    };
    return dictMonadRec.tailRecM(go)((v1) => v(
      state1,
      More,
      Lift,
      (state2, err) => $RunParser("Stop", state2, $Either("Left", err)),
      (state2, res) => $RunParser("Stop", state2, $Either("Right", res))
    ));
  };
};
var position = (state1, v, v1, v2, done) => done(state1, state1._2);
var initialPos = { index: 0, line: 1, column: 1 };
var runParserT = (dictMonadRec) => {
  const runParserT$p1 = runParserT$p(dictMonadRec);
  return (s) => (p) => dictMonadRec.Monad0().Bind1().Apply0().Functor0().map(fst)(runParserT$p1($ParseState(s, initialPos, false))(p));
};
var consume = (state1, v, v1, v2, done) => done($ParseState(state1._1, state1._2, true), void 0);
var applyParserT = {
  apply: (v) => (v1) => (state1, more, lift12, $$throw2, done) => more((v2) => v(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, f) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return v1(state2$p, more, lift12, $$throw2, (state3, a) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, f(a))));
    })
  )),
  Functor0: () => functorParserT
};
var applicativeParserT = { pure: (a) => (state1, v, v1, v2, done) => done(state1, a), Apply0: () => applyParserT };
var bindParserT = {
  bind: (v) => (next) => (state1, more, lift12, $$throw2, done) => more((v1) => v(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => next(a)(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, more, lift12, $$throw2, done))
  )),
  Apply0: () => applyParserT
};
var monadParserT = { Applicative0: () => applicativeParserT, Bind1: () => bindParserT };
var fail2 = (message2) => (state1, more, lift12, $$throw2, done) => more((v1) => position(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => $$throw2(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, $ParseError(message2, a)))
));
var plusParserT = { empty: /* @__PURE__ */ fail2("No alternative"), Alt0: () => altParserT };
var alternativeParserT = { Applicative0: () => applicativeParserT, Plus1: () => plusParserT };
var monadRecParserT = {
  tailRecM: (next) => (initArg) => (state1, more, lift12, $$throw2, done) => {
    const loop = (state2, arg, gas) => next(arg)(
      state2,
      more,
      lift12,
      $$throw2,
      (state3, step) => {
        const state3$p = state2._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
        if (step.tag === "Loop") {
          if (gas === 0) {
            return more((v1) => loop(state3$p, step._1, 30));
          }
          return loop(state3$p, step._1, gas - 1 | 0);
        }
        if (step.tag === "Done") {
          return done(state3$p, step._1);
        }
        fail();
      }
    );
    return loop(state1, initArg, 30);
  },
  Monad0: () => monadParserT
};

// output-es/Parsing.Combinators/index.js
var manyRec2 = /* @__PURE__ */ manyRec(monadRecParserT)(alternativeParserT);
var withLazyErrorMessage = (p) => (msg) => {
  const $0 = lazyParserT.defer((v) => fail2("Expected " + msg()));
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => p(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $0(v2, $1, $2, $3, $4);
        });
      },
      $4
    ));
  };
};
var withErrorMessage = (p) => (msg) => {
  const $0 = fail2("Expected " + msg);
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => p(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $0(v2, $1, $2, $3, $4);
        });
      },
      $4
    ));
  };
};
var skipMany1 = (p) => {
  const $0 = monadRecParserT.tailRecM((v) => (v2, $02, $1, $2, $3) => {
    const $4 = v2._1;
    const $5 = v2._2;
    return $02((v3) => $02((v1) => p(
      $ParseState($4, $5, false),
      $02,
      $1,
      (v4, $6) => {
        const $7 = v4._3;
        return $02((v5) => {
          if ($7) {
            return $2(v4, $6);
          }
          return $3(v2, $Step("Done", void 0));
        });
      },
      (state2, a) => $02((v2$1) => $3(state2, $Step("Loop", void 0)))
    )));
  })();
  return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => p(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2$1) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return $0(state2$p, more, lift12, $$throw2, (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$1)));
    }))
  )));
};
var skipMany = (p) => {
  const $0 = skipMany1(p);
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => $0(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $4(v2, void 0);
        });
      },
      $4
    ));
  };
};
var sepEndBy1 = (p) => (sep) => (state1, more, lift12, $$throw2, done) => more((v1) => p(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = monadRecParserT.tailRecM((acc) => {
      const done$1 = lazyParserT.defer((v) => {
        const $02 = $Step(
          "Done",
          (() => {
            const go = (go$a0$copy) => (go$a1$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0, v1$1 = go$a1;
                if (v1$1.tag === "Nil") {
                  go$c = false;
                  go$r = v$1;
                  continue;
                }
                if (v1$1.tag === "Cons") {
                  go$a0 = $List("Cons", v1$1._1, v$1);
                  go$a1 = v1$1._2;
                  continue;
                }
                fail();
              }
              return go$r;
            };
            return go(Nil)(acc);
          })()
        );
        return (state1$1, v$1, v1$1, v2$1, done$12) => done$12(state1$1, $02);
      });
      return (v2$1, $02, $12, $22, $32) => {
        const $4 = v2$1._1;
        const $5 = v2$1._2;
        return $02((v3) => {
          const $6 = (v4, $62) => {
            const $7 = v4._3;
            return $02((v5) => {
              if ($7) {
                return $22(v4, $62);
              }
              return done$1(v2$1, $02, $12, $22, $32);
            });
          };
          return $02((v1$1) => sep(
            $ParseState($4, $5, false),
            $02,
            $12,
            $6,
            (state2$1, a$1) => $02((v2$2) => {
              const $7 = state2$1._1;
              const $8 = state2$1._2;
              return $02((v3$1) => $02((v1$2) => p(
                $ParseState($7, $8, false),
                $02,
                $12,
                (v4, $9) => {
                  const $10 = v4._3;
                  return $02((v5) => {
                    if ($10) {
                      return $6(v4, $9);
                    }
                    return done$1(state2$1, $02, $12, $6, $32);
                  });
                },
                (state2$2, a$2) => $02((v2$3) => $32(state2$2, $Step("Loop", $List("Cons", a$2, acc))))
              )));
            })
          ));
        });
      };
    })(Nil);
    const $1 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    const $2 = $1._1;
    const $3 = $1._2;
    return more((v3) => more((v1$1) => $0(
      $ParseState($2, $3, false),
      more,
      lift12,
      (v4, $4) => {
        const $5 = v4._3;
        return more((v5) => {
          if ($5) {
            return $$throw2(v4, $4);
          }
          return done($1, $NonEmpty(a, Nil));
        });
      },
      (state2$1, a$1) => more((v2$1) => done(state2$1, $NonEmpty(a, a$1)))
    )));
  })
));
var sepEndBy = (p) => (sep) => (v2, $0, $1, $2, $3) => {
  const $4 = v2._1;
  const $5 = v2._2;
  return $0((v3) => $0((v1) => sepEndBy1(p)(sep)(
    $ParseState($4, $5, false),
    $0,
    $1,
    (v4, $6) => {
      const $7 = v4._3;
      return $0((v5) => {
        if ($7) {
          return $2(v4, $6);
        }
        return $3(v2, Nil);
      });
    },
    (state2, a) => $0((v2$1) => $3(state2, $List("Cons", a._1, a._2)))
  )));
};
var sepBy1 = (p) => (sep) => (state1, more, lift12, $$throw2, done) => more((v1) => p(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = manyRec2((state1$1, more$1, lift1$1, throw$1, done$1) => more$1((v2$1) => more$1((v1$1) => sep(
      state1$1,
      more$1,
      lift1$1,
      throw$1,
      (state2$1, a$1) => more$1((v2$2) => more$1((v3) => {
        const state2$p = state1$1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
        return p(
          state2$p,
          more$1,
          lift1$1,
          throw$1,
          (state3, a$2) => more$1((v4) => done$1(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$2))
        );
      }))
    ))));
    const $1 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => $0(
      $1,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => done($1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, $NonEmpty(a, a$1)))
    ));
  })
));
var sepBy = (p) => (sep) => (v2, $0, $1, $2, $3) => {
  const $4 = v2._1;
  const $5 = v2._2;
  return $0((v3) => $0((v1) => sepBy1(p)(sep)(
    $ParseState($4, $5, false),
    $0,
    $1,
    (v4, $6) => {
      const $7 = v4._3;
      return $0((v5) => {
        if ($7) {
          return $2(v4, $6);
        }
        return $3(v2, Nil);
      });
    },
    (state2, a) => $0((v2$1) => $3(state2, $List("Cons", a._1, a._2)))
  )));
};
var many1 = (p) => {
  const $0 = manyRec2(p);
  return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => p(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2$1) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return $0(
        state2$p,
        more,
        lift12,
        $$throw2,
        (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, $NonEmpty(a, a$1)))
      );
    }))
  )));
};
var choice = (dictFoldable) => {
  const $0 = dictFoldable.foldr((p1) => (v) => {
    if (v.tag === "Nothing") {
      return $Maybe("Just", p1);
    }
    if (v.tag === "Just") {
      return $Maybe(
        "Just",
        (v2, $02, $1, $2, $3) => {
          const $4 = v2._1;
          const $5 = v2._2;
          return $02((v3) => p1(
            $ParseState($4, $5, false),
            $02,
            $1,
            (v4, $6) => {
              const $7 = v4._3;
              return $02((v5) => {
                if ($7) {
                  return $2(v4, $6);
                }
                return v._1(v2, $02, $1, $2, $3);
              });
            },
            $3
          ));
        }
      );
    }
    fail();
  })(Nothing);
  return (x2) => {
    const $1 = $0(x2);
    if ($1.tag === "Nothing") {
      return fail2("No alternative");
    }
    if ($1.tag === "Just") {
      return $1._1;
    }
    fail();
  };
};
var between = (open) => (close2) => (p) => (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => more((v2$1) => more((v1$1) => open(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2$2) => more((v3) => {
    const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return p(
      state2$p,
      more,
      lift12,
      $$throw2,
      (state3, a$1) => more((v4) => {
        const $0 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
        return more((v2$3) => more((v3$1) => {
          const state2$p$1 = state1._3 && !$0._3 ? $ParseState($0._1, $0._2, true) : $0;
          return close2(
            state2$p$1,
            more,
            lift12,
            $$throw2,
            (state3$1, a$2) => more((v4$1) => done(state2$p$1._3 && !state3$1._3 ? $ParseState(state3$1._1, state3$1._2, true) : state3$1, a$1))
          );
        }));
      })
    );
  }))
)))));

// output-es/Parsing.Expr/index.js
var $Assoc = (tag) => tag;
var $Operator = (tag, _1, _2) => ({ tag, _1, _2 });
var choice2 = /* @__PURE__ */ choice(foldableList);
var identity20 = (x2) => x2;
var AssocNone = /* @__PURE__ */ $Assoc("AssocNone");
var AssocLeft = /* @__PURE__ */ $Assoc("AssocLeft");
var AssocRight = /* @__PURE__ */ $Assoc("AssocRight");
var termP = (prefixP) => (term) => (postfixP) => (state1, more, lift12, $$throw2, done) => more((v1) => prefixP(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => term(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => {
        const $1 = $0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
        return more((v1$2) => postfixP(
          $1,
          more,
          lift12,
          $$throw2,
          (state2$2, a$2) => more((v2$2) => done($1._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, a$2(a(a$1))))
        ));
      })
    ));
  })
));
var splitOp = (v) => (v1) => {
  if (v.tag === "Infix") {
    if (v._2 === "AssocNone") {
      return { rassoc: v1.rassoc, lassoc: v1.lassoc, nassoc: $List("Cons", v._1, v1.nassoc), prefix: v1.prefix, postfix: v1.postfix };
    }
    if (v._2 === "AssocLeft") {
      return { rassoc: v1.rassoc, lassoc: $List("Cons", v._1, v1.lassoc), nassoc: v1.nassoc, prefix: v1.prefix, postfix: v1.postfix };
    }
    if (v._2 === "AssocRight") {
      return { rassoc: $List("Cons", v._1, v1.rassoc), lassoc: v1.lassoc, nassoc: v1.nassoc, prefix: v1.prefix, postfix: v1.postfix };
    }
    fail();
  }
  if (v.tag === "Prefix") {
    return { rassoc: v1.rassoc, lassoc: v1.lassoc, nassoc: v1.nassoc, prefix: $List("Cons", v._1, v1.prefix), postfix: v1.postfix };
  }
  if (v.tag === "Postfix") {
    return { rassoc: v1.rassoc, lassoc: v1.lassoc, nassoc: v1.nassoc, prefix: v1.prefix, postfix: $List("Cons", v._1, v1.postfix) };
  }
  fail();
};
var rassocP1 = (x2) => (rassocOp) => (prefixP) => (term) => (postfixP) => {
  const $0 = rassocP(x2)(rassocOp)(prefixP)(term)(postfixP);
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => $0(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $4(v2, x2);
        });
      },
      $4
    ));
  };
};
var rassocP = (x2) => (rassocOp) => (prefixP) => (term) => (postfixP) => (state1, more, lift12, $$throw2, done) => more((v1) => rassocOp(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => more((v1$2) => termP(prefixP)(term)(postfixP)(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => rassocP1(a$1)(rassocOp)(prefixP)(term)(postfixP)(
        $0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
        more,
        lift12,
        $$throw2,
        (state2$2, a$2) => more((v2$2) => done($0._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, a(x2)(a$2)))
      ))
    )));
  })
));
var nassocP = (x2) => (nassocOp) => (prefixP) => (term) => (postfixP) => (state1, more, lift12, $$throw2, done) => more((v1) => nassocOp(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => termP(prefixP)(term)(postfixP)(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => done($0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, a(x2)(a$1)))
    ));
  })
));
var lassocP1 = (x2) => (lassocOp) => (prefixP) => (term) => (postfixP) => {
  const $0 = lassocP(x2)(lassocOp)(prefixP)(term)(postfixP);
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => $0(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $4(v2, x2);
        });
      },
      $4
    ));
  };
};
var lassocP = (x2) => (lassocOp) => (prefixP) => (term) => (postfixP) => (state1, more, lift12, $$throw2, done) => more((v1) => lassocOp(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => termP(prefixP)(term)(postfixP)(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => lassocP1(a(x2)(a$1))(lassocOp)(prefixP)(term)(postfixP)(
        $0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
        more,
        lift12,
        $$throw2,
        done
      ))
    ));
  })
));
var makeParser = (term) => (ops) => {
  const accum = foldrArray(splitOp)({
    rassoc: Nil,
    lassoc: Nil,
    nassoc: Nil,
    prefix: Nil,
    postfix: Nil
  })(ops);
  const lassocOp = choice2(accum.lassoc);
  const nassocOp = choice2(accum.nassoc);
  const postfixOp = withErrorMessage(choice2(accum.postfix))("");
  const prefixOp = withErrorMessage(choice2(accum.prefix))("");
  const rassocOp = choice2(accum.rassoc);
  const $0 = termP((v2, $02, $1, $2, $3) => {
    const $4 = v2._1;
    const $5 = v2._2;
    return $02((v3) => prefixOp(
      $ParseState($4, $5, false),
      $02,
      $1,
      (v4, $6) => {
        const $7 = v4._3;
        return $02((v5) => {
          if ($7) {
            return $2(v4, $6);
          }
          return $3(v2, identity20);
        });
      },
      $3
    ));
  })(term)((v2, $02, $1, $2, $3) => {
    const $4 = v2._1;
    const $5 = v2._2;
    return $02((v3) => postfixOp(
      $ParseState($4, $5, false),
      $02,
      $1,
      (v4, $6) => {
        const $7 = v4._3;
        return $02((v5) => {
          if ($7) {
            return $2(v4, $6);
          }
          return $3(v2, identity20);
        });
      },
      $3
    ));
  });
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => {
      const $1 = rassocP(a)(rassocOp)((v2$1, $12, $22, $32, $42) => {
        const $52 = v2$1._1;
        const $62 = v2$1._2;
        return $12((v3) => prefixOp(
          $ParseState($52, $62, false),
          $12,
          $22,
          (v4, $72) => {
            const $8 = v4._3;
            return $12((v5) => {
              if ($8) {
                return $32(v4, $72);
              }
              return $42(v2$1, identity20);
            });
          },
          $42
        ));
      })(term)((v2$1, $12, $22, $32, $42) => {
        const $52 = v2$1._1;
        const $62 = v2$1._2;
        return $12((v3) => postfixOp(
          $ParseState($52, $62, false),
          $12,
          $22,
          (v4, $72) => {
            const $8 = v4._3;
            return $12((v5) => {
              if ($8) {
                return $32(v4, $72);
              }
              return $42(v2$1, identity20);
            });
          },
          $42
        ));
      });
      const $2 = lassocP(a)(lassocOp)((v2$1, $22, $32, $42, $52) => {
        const $62 = v2$1._1;
        const $72 = v2$1._2;
        return $22((v3) => prefixOp(
          $ParseState($62, $72, false),
          $22,
          $32,
          (v4, $8) => {
            const $9 = v4._3;
            return $22((v5) => {
              if ($9) {
                return $42(v4, $8);
              }
              return $52(v2$1, identity20);
            });
          },
          $52
        ));
      })(term)((v2$1, $22, $32, $42, $52) => {
        const $62 = v2$1._1;
        const $72 = v2$1._2;
        return $22((v3) => postfixOp(
          $ParseState($62, $72, false),
          $22,
          $32,
          (v4, $8) => {
            const $9 = v4._3;
            return $22((v5) => {
              if ($9) {
                return $42(v4, $8);
              }
              return $52(v2$1, identity20);
            });
          },
          $52
        ));
      });
      const $3 = nassocP(a)(nassocOp)((v2$1, $32, $42, $52, $62) => {
        const $72 = v2$1._1;
        const $8 = v2$1._2;
        return $32((v3) => prefixOp(
          $ParseState($72, $8, false),
          $32,
          $42,
          (v4, $9) => {
            const $10 = v4._3;
            return $32((v5) => {
              if ($10) {
                return $52(v4, $9);
              }
              return $62(v2$1, identity20);
            });
          },
          $62
        ));
      })(term)((v2$1, $32, $42, $52, $62) => {
        const $72 = v2$1._1;
        const $8 = v2$1._2;
        return $32((v3) => postfixOp(
          $ParseState($72, $8, false),
          $32,
          $42,
          (v4, $9) => {
            const $10 = v4._3;
            return $32((v5) => {
              if ($10) {
                return $52(v4, $9);
              }
              return $62(v2$1, identity20);
            });
          },
          $62
        ));
      });
      const $4 = withErrorMessage((state1$1, v, v1$1, v2$1, done$1) => done$1(state1$1, a))("operator");
      const $5 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      const $6 = $5._1;
      const $7 = $5._2;
      return more((v3) => $1(
        $ParseState($6, $7, false),
        more,
        lift12,
        (v4, $8) => {
          const $9 = v4._3;
          return more((v5) => {
            if ($9) {
              return $$throw2(v4, $8);
            }
            const $10 = $5._1;
            const $11 = $5._2;
            return more((v3$1) => $2(
              $ParseState($10, $11, false),
              more,
              lift12,
              (v4$1, $12) => {
                const $13 = v4$1._3;
                return more((v5$1) => {
                  if ($13) {
                    return $$throw2(v4$1, $12);
                  }
                  const $14 = $5._1;
                  const $15 = $5._2;
                  return more((v3$2) => $3(
                    $ParseState($14, $15, false),
                    more,
                    lift12,
                    (v4$2, $16) => {
                      const $17 = v4$2._3;
                      return more((v5$2) => {
                        if ($17) {
                          return $$throw2(v4$2, $16);
                        }
                        return $4($5, more, lift12, $$throw2, done);
                      });
                    },
                    done
                  ));
                });
              },
              done
            ));
          });
        },
        done
      ));
    })
  ));
};

// output-es/Primitive.Parse/index.js
var opDefs = /* @__PURE__ */ fromFoldable2(ordString)(foldableArray)([
  /* @__PURE__ */ $Tuple(".", { op: ".", prec: 8, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple("!", { op: "!", prec: 8, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple("**", { op: "**", prec: 8, assoc: AssocRight }),
  /* @__PURE__ */ $Tuple("*", { op: "*", prec: 7, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple("/", { op: "/", prec: 7, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple("+", { op: "+", prec: 6, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple("-", { op: "-", prec: 6, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple(":", { op: ":", prec: 6, assoc: AssocRight }),
  /* @__PURE__ */ $Tuple("++", { op: "++", prec: 5, assoc: AssocRight }),
  /* @__PURE__ */ $Tuple("==", { op: "==", prec: 4, assoc: AssocNone }),
  /* @__PURE__ */ $Tuple("/=", { op: "/=", prec: 4, assoc: AssocNone }),
  /* @__PURE__ */ $Tuple("<", { op: "<", prec: 4, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple(">", { op: ">", prec: 4, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple("<=", { op: "<=", prec: 4, assoc: AssocLeft }),
  /* @__PURE__ */ $Tuple(">=", { op: ">=", prec: 4, assoc: AssocLeft })
]);

// output-es/Bind/index.js
var union3 = /* @__PURE__ */ (() => setSet(ordString).union)();
var keys2 = (v) => {
  if (v.tag === "Nil") {
    return Leaf;
  }
  if (v.tag === "Cons") {
    return union3($$$Map("Node", 1, 1, v._1._1, void 0, Leaf, Leaf))(keys2(v._2));
  }
  fail();
};

// output-es/Data.Bifoldable/index.js
var bifoldableTuple = {
  bifoldMap: (dictMonoid) => (f) => (g) => (v) => dictMonoid.Semigroup0().append(f(v._1))(g(v._2)),
  bifoldr: (f) => (g) => (z) => (v) => f(v._1)(g(v._2)(z)),
  bifoldl: (f) => (g) => (z) => (v) => g(f(z)(v._1))(v._2)
};

// output-es/Data.Bifunctor/index.js
var bifunctorTuple = { bimap: (f) => (g) => (v) => $Tuple(f(v._1), g(v._2)) };

// output-es/Data.Bitraversable/index.js
var bitraversableTuple = {
  bitraverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (f) => (g) => (v) => Apply0.apply(Apply0.Functor0().map(Tuple)(f(v._1)))(g(v._2));
  },
  bisequence: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (v) => Apply0.apply(Apply0.Functor0().map(Tuple)(v._1))(v._2);
  },
  Bifunctor0: () => bifunctorTuple,
  Bifoldable1: () => bifoldableTuple
};

// output-es/Data.CodePoint.Unicode.Internal/index.js
var $UnicodeCategory = (tag) => tag;
var NUMCAT_LU = /* @__PURE__ */ $UnicodeCategory("NUMCAT_LU");
var NUMCAT_LL = /* @__PURE__ */ $UnicodeCategory("NUMCAT_LL");
var NUMCAT_LT = /* @__PURE__ */ $UnicodeCategory("NUMCAT_LT");
var NUMCAT_LM = /* @__PURE__ */ $UnicodeCategory("NUMCAT_LM");
var NUMCAT_LO = /* @__PURE__ */ $UnicodeCategory("NUMCAT_LO");
var NUMCAT_MN = /* @__PURE__ */ $UnicodeCategory("NUMCAT_MN");
var NUMCAT_MC = /* @__PURE__ */ $UnicodeCategory("NUMCAT_MC");
var NUMCAT_ME = /* @__PURE__ */ $UnicodeCategory("NUMCAT_ME");
var NUMCAT_ND = /* @__PURE__ */ $UnicodeCategory("NUMCAT_ND");
var NUMCAT_NL = /* @__PURE__ */ $UnicodeCategory("NUMCAT_NL");
var NUMCAT_NO = /* @__PURE__ */ $UnicodeCategory("NUMCAT_NO");
var NUMCAT_PC = /* @__PURE__ */ $UnicodeCategory("NUMCAT_PC");
var NUMCAT_PD = /* @__PURE__ */ $UnicodeCategory("NUMCAT_PD");
var NUMCAT_PS = /* @__PURE__ */ $UnicodeCategory("NUMCAT_PS");
var NUMCAT_PE = /* @__PURE__ */ $UnicodeCategory("NUMCAT_PE");
var NUMCAT_PI = /* @__PURE__ */ $UnicodeCategory("NUMCAT_PI");
var NUMCAT_PF = /* @__PURE__ */ $UnicodeCategory("NUMCAT_PF");
var NUMCAT_PO = /* @__PURE__ */ $UnicodeCategory("NUMCAT_PO");
var NUMCAT_SM = /* @__PURE__ */ $UnicodeCategory("NUMCAT_SM");
var NUMCAT_SC = /* @__PURE__ */ $UnicodeCategory("NUMCAT_SC");
var NUMCAT_SK = /* @__PURE__ */ $UnicodeCategory("NUMCAT_SK");
var NUMCAT_SO = /* @__PURE__ */ $UnicodeCategory("NUMCAT_SO");
var NUMCAT_ZS = /* @__PURE__ */ $UnicodeCategory("NUMCAT_ZS");
var NUMCAT_ZL = /* @__PURE__ */ $UnicodeCategory("NUMCAT_ZL");
var NUMCAT_ZP = /* @__PURE__ */ $UnicodeCategory("NUMCAT_ZP");
var NUMCAT_CC = /* @__PURE__ */ $UnicodeCategory("NUMCAT_CC");
var NUMCAT_CF = /* @__PURE__ */ $UnicodeCategory("NUMCAT_CF");
var NUMCAT_CS = /* @__PURE__ */ $UnicodeCategory("NUMCAT_CS");
var NUMCAT_CO = /* @__PURE__ */ $UnicodeCategory("NUMCAT_CO");
var NUMCAT_CN = /* @__PURE__ */ $UnicodeCategory("NUMCAT_CN");
var rule1 = { category: 2, unicodeCat: NUMCAT_ZS, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var spacechars = [
  { start: 32, length: 1, convRule: rule1 },
  { start: 160, length: 1, convRule: rule1 },
  { start: 5760, length: 1, convRule: rule1 },
  { start: 8192, length: 11, convRule: rule1 },
  { start: 8239, length: 1, convRule: rule1 },
  { start: 8287, length: 1, convRule: rule1 },
  { start: 12288, length: 1, convRule: rule1 }
];
var rule162 = { category: 67108864, unicodeCat: NUMCAT_ZP, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule161 = { category: 33554432, unicodeCat: NUMCAT_ZL, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule13 = { category: 8192, unicodeCat: NUMCAT_SO, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule170 = { category: 8192, unicodeCat: NUMCAT_SO, possible: 1, updist: 0, lowdist: 26, titledist: 0 };
var rule171 = { category: 8192, unicodeCat: NUMCAT_SO, possible: 1, updist: -26, lowdist: 0, titledist: -26 };
var rule6 = { category: 64, unicodeCat: NUMCAT_SM, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule10 = { category: 1024, unicodeCat: NUMCAT_SK, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule3 = { category: 8, unicodeCat: NUMCAT_SC, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule4 = { category: 16, unicodeCat: NUMCAT_PS, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule2 = { category: 4, unicodeCat: NUMCAT_PO, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule15 = { category: 32768, unicodeCat: NUMCAT_PI, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule19 = { category: 262144, unicodeCat: NUMCAT_PF, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule5 = { category: 32, unicodeCat: NUMCAT_PE, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule7 = { category: 128, unicodeCat: NUMCAT_PD, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule11 = { category: 2048, unicodeCat: NUMCAT_PC, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule17 = { category: 131072, unicodeCat: NUMCAT_NO, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule128 = { category: 16777216, unicodeCat: NUMCAT_NL, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule168 = { category: 16777216, unicodeCat: NUMCAT_NL, possible: 1, updist: 0, lowdist: 16, titledist: 0 };
var rule169 = { category: 16777216, unicodeCat: NUMCAT_NL, possible: 1, updist: -16, lowdist: 0, titledist: -16 };
var rule8 = { category: 256, unicodeCat: NUMCAT_ND, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule92 = { category: 2097152, unicodeCat: NUMCAT_MN, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule93 = { category: 2097152, unicodeCat: NUMCAT_MN, possible: 1, updist: 84, lowdist: 0, titledist: 84 };
var rule119 = { category: 4194304, unicodeCat: NUMCAT_ME, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule124 = { category: 8388608, unicodeCat: NUMCAT_MC, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var nullrule = { category: 512, unicodeCat: NUMCAT_CN, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule104 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 8, titledist: 0 };
var rule107 = { category: 512, unicodeCat: NUMCAT_LU, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule115 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -60, titledist: 0 };
var rule117 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -7, titledist: 0 };
var rule118 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 80, titledist: 0 };
var rule120 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 15, titledist: 0 };
var rule122 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 48, titledist: 0 };
var rule125 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 7264, titledist: 0 };
var rule127 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 38864, titledist: 0 };
var rule137 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -3008, titledist: 0 };
var rule142 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -7615, titledist: 0 };
var rule144 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -8, titledist: 0 };
var rule153 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -74, titledist: 0 };
var rule156 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -86, titledist: 0 };
var rule157 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -100, titledist: 0 };
var rule158 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -112, titledist: 0 };
var rule159 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -128, titledist: 0 };
var rule160 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -126, titledist: 0 };
var rule163 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -7517, titledist: 0 };
var rule164 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -8383, titledist: 0 };
var rule165 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -8262, titledist: 0 };
var rule166 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 28, titledist: 0 };
var rule172 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -10743, titledist: 0 };
var rule173 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -3814, titledist: 0 };
var rule174 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -10727, titledist: 0 };
var rule177 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -10780, titledist: 0 };
var rule178 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -10749, titledist: 0 };
var rule179 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -10783, titledist: 0 };
var rule180 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -10782, titledist: 0 };
var rule181 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -10815, titledist: 0 };
var rule183 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -35332, titledist: 0 };
var rule184 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42280, titledist: 0 };
var rule186 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42308, titledist: 0 };
var rule187 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42319, titledist: 0 };
var rule188 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42315, titledist: 0 };
var rule189 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42305, titledist: 0 };
var rule190 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42258, titledist: 0 };
var rule191 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42282, titledist: 0 };
var rule192 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42261, titledist: 0 };
var rule193 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 928, titledist: 0 };
var rule194 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -48, titledist: 0 };
var rule195 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -42307, titledist: 0 };
var rule196 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -35384, titledist: 0 };
var rule201 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 40, titledist: 0 };
var rule203 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 34, titledist: 0 };
var rule22 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 1, titledist: 0 };
var rule24 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -199, titledist: 0 };
var rule26 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -121, titledist: 0 };
var rule29 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 210, titledist: 0 };
var rule30 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 206, titledist: 0 };
var rule31 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 205, titledist: 0 };
var rule32 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 79, titledist: 0 };
var rule33 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 202, titledist: 0 };
var rule34 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 203, titledist: 0 };
var rule35 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 207, titledist: 0 };
var rule37 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 211, titledist: 0 };
var rule38 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 209, titledist: 0 };
var rule40 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 213, titledist: 0 };
var rule42 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 214, titledist: 0 };
var rule43 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 218, titledist: 0 };
var rule44 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 217, titledist: 0 };
var rule45 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 219, titledist: 0 };
var rule47 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 2, titledist: 1 };
var rule51 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -97, titledist: 0 };
var rule52 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -56, titledist: 0 };
var rule53 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -130, titledist: 0 };
var rule54 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 10795, titledist: 0 };
var rule55 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -163, titledist: 0 };
var rule56 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 10792, titledist: 0 };
var rule58 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: -195, titledist: 0 };
var rule59 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 69, titledist: 0 };
var rule60 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 71, titledist: 0 };
var rule9 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 32, titledist: 0 };
var rule94 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 116, titledist: 0 };
var rule95 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 38, titledist: 0 };
var rule96 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 37, titledist: 0 };
var rule97 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 64, titledist: 0 };
var rule98 = { category: 512, unicodeCat: NUMCAT_LU, possible: 1, updist: 0, lowdist: 63, titledist: 0 };
var rule151 = { category: 524288, unicodeCat: NUMCAT_LT, possible: 1, updist: 0, lowdist: -8, titledist: 0 };
var rule154 = { category: 524288, unicodeCat: NUMCAT_LT, possible: 1, updist: 0, lowdist: -9, titledist: 0 };
var rule48 = { category: 524288, unicodeCat: NUMCAT_LT, possible: 1, updist: -1, lowdist: 1, titledist: 0 };
var rule14 = { category: 16384, unicodeCat: NUMCAT_LO, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule91 = { category: 1048576, unicodeCat: NUMCAT_LM, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule100 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -37, lowdist: 0, titledist: -37 };
var rule101 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -31, lowdist: 0, titledist: -31 };
var rule102 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -64, lowdist: 0, titledist: -64 };
var rule103 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -63, lowdist: 0, titledist: -63 };
var rule105 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -62, lowdist: 0, titledist: -62 };
var rule106 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -57, lowdist: 0, titledist: -57 };
var rule108 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -47, lowdist: 0, titledist: -47 };
var rule109 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -54, lowdist: 0, titledist: -54 };
var rule110 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -8, lowdist: 0, titledist: -8 };
var rule111 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -86, lowdist: 0, titledist: -86 };
var rule112 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -80, lowdist: 0, titledist: -80 };
var rule113 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 7, lowdist: 0, titledist: 7 };
var rule114 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -116, lowdist: 0, titledist: -116 };
var rule116 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -96, lowdist: 0, titledist: -96 };
var rule12 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -32, lowdist: 0, titledist: -32 };
var rule121 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -15, lowdist: 0, titledist: -15 };
var rule123 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -48, lowdist: 0, titledist: -48 };
var rule126 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 3008, lowdist: 0, titledist: 0 };
var rule129 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -6254, lowdist: 0, titledist: -6254 };
var rule130 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -6253, lowdist: 0, titledist: -6253 };
var rule131 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -6244, lowdist: 0, titledist: -6244 };
var rule132 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -6242, lowdist: 0, titledist: -6242 };
var rule133 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -6243, lowdist: 0, titledist: -6243 };
var rule134 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -6236, lowdist: 0, titledist: -6236 };
var rule135 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -6181, lowdist: 0, titledist: -6181 };
var rule136 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 35266, lowdist: 0, titledist: 35266 };
var rule138 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 35332, lowdist: 0, titledist: 35332 };
var rule139 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 3814, lowdist: 0, titledist: 3814 };
var rule140 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 35384, lowdist: 0, titledist: 35384 };
var rule141 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -59, lowdist: 0, titledist: -59 };
var rule143 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 8, lowdist: 0, titledist: 8 };
var rule145 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 74, lowdist: 0, titledist: 74 };
var rule146 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 86, lowdist: 0, titledist: 86 };
var rule147 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 100, lowdist: 0, titledist: 100 };
var rule148 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 128, lowdist: 0, titledist: 128 };
var rule149 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 112, lowdist: 0, titledist: 112 };
var rule150 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 126, lowdist: 0, titledist: 126 };
var rule152 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 9, lowdist: 0, titledist: 9 };
var rule155 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -7205, lowdist: 0, titledist: -7205 };
var rule167 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -28, lowdist: 0, titledist: -28 };
var rule175 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -10795, lowdist: 0, titledist: -10795 };
var rule176 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -10792, lowdist: 0, titledist: -10792 };
var rule18 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 743, lowdist: 0, titledist: 743 };
var rule182 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -7264, lowdist: 0, titledist: -7264 };
var rule185 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 48, lowdist: 0, titledist: 48 };
var rule197 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -928, lowdist: 0, titledist: -928 };
var rule198 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -38864, lowdist: 0, titledist: -38864 };
var rule20 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule202 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -40, lowdist: 0, titledist: -40 };
var rule204 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -34, lowdist: 0, titledist: -34 };
var rule21 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 121, lowdist: 0, titledist: 121 };
var rule23 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -1, lowdist: 0, titledist: -1 };
var rule25 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -232, lowdist: 0, titledist: -232 };
var rule27 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -300, lowdist: 0, titledist: -300 };
var rule28 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 195, lowdist: 0, titledist: 195 };
var rule36 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 97, lowdist: 0, titledist: 97 };
var rule39 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 163, lowdist: 0, titledist: 163 };
var rule41 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 130, lowdist: 0, titledist: 130 };
var rule46 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 56, lowdist: 0, titledist: 56 };
var rule49 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -2, lowdist: 0, titledist: -1 };
var rule50 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -79, lowdist: 0, titledist: -79 };
var rule57 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 10815, lowdist: 0, titledist: 10815 };
var rule61 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 10783, lowdist: 0, titledist: 10783 };
var rule62 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 10780, lowdist: 0, titledist: 10780 };
var rule63 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 10782, lowdist: 0, titledist: 10782 };
var rule64 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -210, lowdist: 0, titledist: -210 };
var rule65 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -206, lowdist: 0, titledist: -206 };
var rule66 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -205, lowdist: 0, titledist: -205 };
var rule67 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -202, lowdist: 0, titledist: -202 };
var rule68 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -203, lowdist: 0, titledist: -203 };
var rule69 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42319, lowdist: 0, titledist: 42319 };
var rule70 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42315, lowdist: 0, titledist: 42315 };
var rule71 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -207, lowdist: 0, titledist: -207 };
var rule72 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42280, lowdist: 0, titledist: 42280 };
var rule73 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42308, lowdist: 0, titledist: 42308 };
var rule74 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -209, lowdist: 0, titledist: -209 };
var rule75 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -211, lowdist: 0, titledist: -211 };
var rule76 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 10743, lowdist: 0, titledist: 10743 };
var rule77 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42305, lowdist: 0, titledist: 42305 };
var rule78 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 10749, lowdist: 0, titledist: 10749 };
var rule79 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -213, lowdist: 0, titledist: -213 };
var rule80 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -214, lowdist: 0, titledist: -214 };
var rule81 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 10727, lowdist: 0, titledist: 10727 };
var rule82 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -218, lowdist: 0, titledist: -218 };
var rule83 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42307, lowdist: 0, titledist: 42307 };
var rule84 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42282, lowdist: 0, titledist: 42282 };
var rule85 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -69, lowdist: 0, titledist: -69 };
var rule86 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -217, lowdist: 0, titledist: -217 };
var rule87 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -71, lowdist: 0, titledist: -71 };
var rule88 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -219, lowdist: 0, titledist: -219 };
var rule89 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42261, lowdist: 0, titledist: 42261 };
var rule90 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: 42258, lowdist: 0, titledist: 42258 };
var rule99 = { category: 4096, unicodeCat: NUMCAT_LL, possible: 1, updist: -38, lowdist: 0, titledist: -38 };
var rule199 = { category: 134217728, unicodeCat: NUMCAT_CS, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule200 = { category: 268435456, unicodeCat: NUMCAT_CO, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule16 = { category: 65536, unicodeCat: NUMCAT_CF, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var rule0 = { category: 1, unicodeCat: NUMCAT_CC, possible: 0, updist: 0, lowdist: 0, titledist: 0 };
var bsearch = (a) => (array2) => (size3) => (compare2) => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const i = go$a0, k = go$a1;
      if (i > k || i >= array2.length) {
        go$c = false;
        go$r = Nothing;
        continue;
      }
      const j = unsafeClamp(floor(toNumber(i + k | 0) / 2));
      const b = array2[j];
      const v = compare2(a)(b);
      if (v === "EQ") {
        go$c = false;
        go$r = $Maybe("Just", b);
        continue;
      }
      if (v === "GT") {
        go$a0 = j + 1 | 0;
        go$a1 = k;
        continue;
      }
      go$a0 = i;
      go$a1 = j - 1 | 0;
    }
    return go$r;
  };
  return go(0)(size3);
};
var blkCmp = (v) => (v1) => {
  if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
    return EQ;
  }
  if (v.start > v1.start) {
    return GT;
  }
  return LT;
};
var getRule = (blocks) => (unichar) => (size3) => {
  const maybeCharBlock = bsearch({ start: unichar, length: 1, convRule: nullrule })(blocks)(size3)(blkCmp);
  if (maybeCharBlock.tag === "Nothing") {
    return Nothing;
  }
  if (maybeCharBlock.tag === "Just") {
    return $Maybe("Just", maybeCharBlock._1.convRule);
  }
  fail();
};
var checkAttrS = (categories) => ($$char2) => {
  const maybeConversionRule = getRule(spacechars)($$char2)(7);
  if (maybeConversionRule.tag === "Nothing") {
    return false;
  }
  if (maybeConversionRule.tag === "Just") {
    const $0 = maybeConversionRule._1.category;
    const $1 = findIndexImpl(Just, Nothing, (v) => v === $0, categories);
    if ($1.tag === "Nothing") {
      return false;
    }
    if ($1.tag === "Just") {
      return true;
    }
  }
  fail();
};
var allchars = [
  { start: 0, length: 32, convRule: rule0 },
  { start: 32, length: 1, convRule: rule1 },
  { start: 33, length: 3, convRule: rule2 },
  { start: 36, length: 1, convRule: rule3 },
  { start: 37, length: 3, convRule: rule2 },
  { start: 40, length: 1, convRule: rule4 },
  { start: 41, length: 1, convRule: rule5 },
  { start: 42, length: 1, convRule: rule2 },
  { start: 43, length: 1, convRule: rule6 },
  { start: 44, length: 1, convRule: rule2 },
  { start: 45, length: 1, convRule: rule7 },
  { start: 46, length: 2, convRule: rule2 },
  { start: 48, length: 10, convRule: rule8 },
  { start: 58, length: 2, convRule: rule2 },
  { start: 60, length: 3, convRule: rule6 },
  { start: 63, length: 2, convRule: rule2 },
  { start: 65, length: 26, convRule: rule9 },
  { start: 91, length: 1, convRule: rule4 },
  { start: 92, length: 1, convRule: rule2 },
  { start: 93, length: 1, convRule: rule5 },
  { start: 94, length: 1, convRule: rule10 },
  { start: 95, length: 1, convRule: rule11 },
  { start: 96, length: 1, convRule: rule10 },
  { start: 97, length: 26, convRule: rule12 },
  { start: 123, length: 1, convRule: rule4 },
  { start: 124, length: 1, convRule: rule6 },
  { start: 125, length: 1, convRule: rule5 },
  { start: 126, length: 1, convRule: rule6 },
  { start: 127, length: 33, convRule: rule0 },
  { start: 160, length: 1, convRule: rule1 },
  { start: 161, length: 1, convRule: rule2 },
  { start: 162, length: 4, convRule: rule3 },
  { start: 166, length: 1, convRule: rule13 },
  { start: 167, length: 1, convRule: rule2 },
  { start: 168, length: 1, convRule: rule10 },
  { start: 169, length: 1, convRule: rule13 },
  { start: 170, length: 1, convRule: rule14 },
  { start: 171, length: 1, convRule: rule15 },
  { start: 172, length: 1, convRule: rule6 },
  { start: 173, length: 1, convRule: rule16 },
  { start: 174, length: 1, convRule: rule13 },
  { start: 175, length: 1, convRule: rule10 },
  { start: 176, length: 1, convRule: rule13 },
  { start: 177, length: 1, convRule: rule6 },
  { start: 178, length: 2, convRule: rule17 },
  { start: 180, length: 1, convRule: rule10 },
  { start: 181, length: 1, convRule: rule18 },
  { start: 182, length: 2, convRule: rule2 },
  { start: 184, length: 1, convRule: rule10 },
  { start: 185, length: 1, convRule: rule17 },
  { start: 186, length: 1, convRule: rule14 },
  { start: 187, length: 1, convRule: rule19 },
  { start: 188, length: 3, convRule: rule17 },
  { start: 191, length: 1, convRule: rule2 },
  { start: 192, length: 23, convRule: rule9 },
  { start: 215, length: 1, convRule: rule6 },
  { start: 216, length: 7, convRule: rule9 },
  { start: 223, length: 1, convRule: rule20 },
  { start: 224, length: 23, convRule: rule12 },
  { start: 247, length: 1, convRule: rule6 },
  { start: 248, length: 7, convRule: rule12 },
  { start: 255, length: 1, convRule: rule21 },
  { start: 256, length: 1, convRule: rule22 },
  { start: 257, length: 1, convRule: rule23 },
  { start: 258, length: 1, convRule: rule22 },
  { start: 259, length: 1, convRule: rule23 },
  { start: 260, length: 1, convRule: rule22 },
  { start: 261, length: 1, convRule: rule23 },
  { start: 262, length: 1, convRule: rule22 },
  { start: 263, length: 1, convRule: rule23 },
  { start: 264, length: 1, convRule: rule22 },
  { start: 265, length: 1, convRule: rule23 },
  { start: 266, length: 1, convRule: rule22 },
  { start: 267, length: 1, convRule: rule23 },
  { start: 268, length: 1, convRule: rule22 },
  { start: 269, length: 1, convRule: rule23 },
  { start: 270, length: 1, convRule: rule22 },
  { start: 271, length: 1, convRule: rule23 },
  { start: 272, length: 1, convRule: rule22 },
  { start: 273, length: 1, convRule: rule23 },
  { start: 274, length: 1, convRule: rule22 },
  { start: 275, length: 1, convRule: rule23 },
  { start: 276, length: 1, convRule: rule22 },
  { start: 277, length: 1, convRule: rule23 },
  { start: 278, length: 1, convRule: rule22 },
  { start: 279, length: 1, convRule: rule23 },
  { start: 280, length: 1, convRule: rule22 },
  { start: 281, length: 1, convRule: rule23 },
  { start: 282, length: 1, convRule: rule22 },
  { start: 283, length: 1, convRule: rule23 },
  { start: 284, length: 1, convRule: rule22 },
  { start: 285, length: 1, convRule: rule23 },
  { start: 286, length: 1, convRule: rule22 },
  { start: 287, length: 1, convRule: rule23 },
  { start: 288, length: 1, convRule: rule22 },
  { start: 289, length: 1, convRule: rule23 },
  { start: 290, length: 1, convRule: rule22 },
  { start: 291, length: 1, convRule: rule23 },
  { start: 292, length: 1, convRule: rule22 },
  { start: 293, length: 1, convRule: rule23 },
  { start: 294, length: 1, convRule: rule22 },
  { start: 295, length: 1, convRule: rule23 },
  { start: 296, length: 1, convRule: rule22 },
  { start: 297, length: 1, convRule: rule23 },
  { start: 298, length: 1, convRule: rule22 },
  { start: 299, length: 1, convRule: rule23 },
  { start: 300, length: 1, convRule: rule22 },
  { start: 301, length: 1, convRule: rule23 },
  { start: 302, length: 1, convRule: rule22 },
  { start: 303, length: 1, convRule: rule23 },
  { start: 304, length: 1, convRule: rule24 },
  { start: 305, length: 1, convRule: rule25 },
  { start: 306, length: 1, convRule: rule22 },
  { start: 307, length: 1, convRule: rule23 },
  { start: 308, length: 1, convRule: rule22 },
  { start: 309, length: 1, convRule: rule23 },
  { start: 310, length: 1, convRule: rule22 },
  { start: 311, length: 1, convRule: rule23 },
  { start: 312, length: 1, convRule: rule20 },
  { start: 313, length: 1, convRule: rule22 },
  { start: 314, length: 1, convRule: rule23 },
  { start: 315, length: 1, convRule: rule22 },
  { start: 316, length: 1, convRule: rule23 },
  { start: 317, length: 1, convRule: rule22 },
  { start: 318, length: 1, convRule: rule23 },
  { start: 319, length: 1, convRule: rule22 },
  { start: 320, length: 1, convRule: rule23 },
  { start: 321, length: 1, convRule: rule22 },
  { start: 322, length: 1, convRule: rule23 },
  { start: 323, length: 1, convRule: rule22 },
  { start: 324, length: 1, convRule: rule23 },
  { start: 325, length: 1, convRule: rule22 },
  { start: 326, length: 1, convRule: rule23 },
  { start: 327, length: 1, convRule: rule22 },
  { start: 328, length: 1, convRule: rule23 },
  { start: 329, length: 1, convRule: rule20 },
  { start: 330, length: 1, convRule: rule22 },
  { start: 331, length: 1, convRule: rule23 },
  { start: 332, length: 1, convRule: rule22 },
  { start: 333, length: 1, convRule: rule23 },
  { start: 334, length: 1, convRule: rule22 },
  { start: 335, length: 1, convRule: rule23 },
  { start: 336, length: 1, convRule: rule22 },
  { start: 337, length: 1, convRule: rule23 },
  { start: 338, length: 1, convRule: rule22 },
  { start: 339, length: 1, convRule: rule23 },
  { start: 340, length: 1, convRule: rule22 },
  { start: 341, length: 1, convRule: rule23 },
  { start: 342, length: 1, convRule: rule22 },
  { start: 343, length: 1, convRule: rule23 },
  { start: 344, length: 1, convRule: rule22 },
  { start: 345, length: 1, convRule: rule23 },
  { start: 346, length: 1, convRule: rule22 },
  { start: 347, length: 1, convRule: rule23 },
  { start: 348, length: 1, convRule: rule22 },
  { start: 349, length: 1, convRule: rule23 },
  { start: 350, length: 1, convRule: rule22 },
  { start: 351, length: 1, convRule: rule23 },
  { start: 352, length: 1, convRule: rule22 },
  { start: 353, length: 1, convRule: rule23 },
  { start: 354, length: 1, convRule: rule22 },
  { start: 355, length: 1, convRule: rule23 },
  { start: 356, length: 1, convRule: rule22 },
  { start: 357, length: 1, convRule: rule23 },
  { start: 358, length: 1, convRule: rule22 },
  { start: 359, length: 1, convRule: rule23 },
  { start: 360, length: 1, convRule: rule22 },
  { start: 361, length: 1, convRule: rule23 },
  { start: 362, length: 1, convRule: rule22 },
  { start: 363, length: 1, convRule: rule23 },
  { start: 364, length: 1, convRule: rule22 },
  { start: 365, length: 1, convRule: rule23 },
  { start: 366, length: 1, convRule: rule22 },
  { start: 367, length: 1, convRule: rule23 },
  { start: 368, length: 1, convRule: rule22 },
  { start: 369, length: 1, convRule: rule23 },
  { start: 370, length: 1, convRule: rule22 },
  { start: 371, length: 1, convRule: rule23 },
  { start: 372, length: 1, convRule: rule22 },
  { start: 373, length: 1, convRule: rule23 },
  { start: 374, length: 1, convRule: rule22 },
  { start: 375, length: 1, convRule: rule23 },
  { start: 376, length: 1, convRule: rule26 },
  { start: 377, length: 1, convRule: rule22 },
  { start: 378, length: 1, convRule: rule23 },
  { start: 379, length: 1, convRule: rule22 },
  { start: 380, length: 1, convRule: rule23 },
  { start: 381, length: 1, convRule: rule22 },
  { start: 382, length: 1, convRule: rule23 },
  { start: 383, length: 1, convRule: rule27 },
  { start: 384, length: 1, convRule: rule28 },
  { start: 385, length: 1, convRule: rule29 },
  { start: 386, length: 1, convRule: rule22 },
  { start: 387, length: 1, convRule: rule23 },
  { start: 388, length: 1, convRule: rule22 },
  { start: 389, length: 1, convRule: rule23 },
  { start: 390, length: 1, convRule: rule30 },
  { start: 391, length: 1, convRule: rule22 },
  { start: 392, length: 1, convRule: rule23 },
  { start: 393, length: 2, convRule: rule31 },
  { start: 395, length: 1, convRule: rule22 },
  { start: 396, length: 1, convRule: rule23 },
  { start: 397, length: 1, convRule: rule20 },
  { start: 398, length: 1, convRule: rule32 },
  { start: 399, length: 1, convRule: rule33 },
  { start: 400, length: 1, convRule: rule34 },
  { start: 401, length: 1, convRule: rule22 },
  { start: 402, length: 1, convRule: rule23 },
  { start: 403, length: 1, convRule: rule31 },
  { start: 404, length: 1, convRule: rule35 },
  { start: 405, length: 1, convRule: rule36 },
  { start: 406, length: 1, convRule: rule37 },
  { start: 407, length: 1, convRule: rule38 },
  { start: 408, length: 1, convRule: rule22 },
  { start: 409, length: 1, convRule: rule23 },
  { start: 410, length: 1, convRule: rule39 },
  { start: 411, length: 1, convRule: rule20 },
  { start: 412, length: 1, convRule: rule37 },
  { start: 413, length: 1, convRule: rule40 },
  { start: 414, length: 1, convRule: rule41 },
  { start: 415, length: 1, convRule: rule42 },
  { start: 416, length: 1, convRule: rule22 },
  { start: 417, length: 1, convRule: rule23 },
  { start: 418, length: 1, convRule: rule22 },
  { start: 419, length: 1, convRule: rule23 },
  { start: 420, length: 1, convRule: rule22 },
  { start: 421, length: 1, convRule: rule23 },
  { start: 422, length: 1, convRule: rule43 },
  { start: 423, length: 1, convRule: rule22 },
  { start: 424, length: 1, convRule: rule23 },
  { start: 425, length: 1, convRule: rule43 },
  { start: 426, length: 2, convRule: rule20 },
  { start: 428, length: 1, convRule: rule22 },
  { start: 429, length: 1, convRule: rule23 },
  { start: 430, length: 1, convRule: rule43 },
  { start: 431, length: 1, convRule: rule22 },
  { start: 432, length: 1, convRule: rule23 },
  { start: 433, length: 2, convRule: rule44 },
  { start: 435, length: 1, convRule: rule22 },
  { start: 436, length: 1, convRule: rule23 },
  { start: 437, length: 1, convRule: rule22 },
  { start: 438, length: 1, convRule: rule23 },
  { start: 439, length: 1, convRule: rule45 },
  { start: 440, length: 1, convRule: rule22 },
  { start: 441, length: 1, convRule: rule23 },
  { start: 442, length: 1, convRule: rule20 },
  { start: 443, length: 1, convRule: rule14 },
  { start: 444, length: 1, convRule: rule22 },
  { start: 445, length: 1, convRule: rule23 },
  { start: 446, length: 1, convRule: rule20 },
  { start: 447, length: 1, convRule: rule46 },
  { start: 448, length: 4, convRule: rule14 },
  { start: 452, length: 1, convRule: rule47 },
  { start: 453, length: 1, convRule: rule48 },
  { start: 454, length: 1, convRule: rule49 },
  { start: 455, length: 1, convRule: rule47 },
  { start: 456, length: 1, convRule: rule48 },
  { start: 457, length: 1, convRule: rule49 },
  { start: 458, length: 1, convRule: rule47 },
  { start: 459, length: 1, convRule: rule48 },
  { start: 460, length: 1, convRule: rule49 },
  { start: 461, length: 1, convRule: rule22 },
  { start: 462, length: 1, convRule: rule23 },
  { start: 463, length: 1, convRule: rule22 },
  { start: 464, length: 1, convRule: rule23 },
  { start: 465, length: 1, convRule: rule22 },
  { start: 466, length: 1, convRule: rule23 },
  { start: 467, length: 1, convRule: rule22 },
  { start: 468, length: 1, convRule: rule23 },
  { start: 469, length: 1, convRule: rule22 },
  { start: 470, length: 1, convRule: rule23 },
  { start: 471, length: 1, convRule: rule22 },
  { start: 472, length: 1, convRule: rule23 },
  { start: 473, length: 1, convRule: rule22 },
  { start: 474, length: 1, convRule: rule23 },
  { start: 475, length: 1, convRule: rule22 },
  { start: 476, length: 1, convRule: rule23 },
  { start: 477, length: 1, convRule: rule50 },
  { start: 478, length: 1, convRule: rule22 },
  { start: 479, length: 1, convRule: rule23 },
  { start: 480, length: 1, convRule: rule22 },
  { start: 481, length: 1, convRule: rule23 },
  { start: 482, length: 1, convRule: rule22 },
  { start: 483, length: 1, convRule: rule23 },
  { start: 484, length: 1, convRule: rule22 },
  { start: 485, length: 1, convRule: rule23 },
  { start: 486, length: 1, convRule: rule22 },
  { start: 487, length: 1, convRule: rule23 },
  { start: 488, length: 1, convRule: rule22 },
  { start: 489, length: 1, convRule: rule23 },
  { start: 490, length: 1, convRule: rule22 },
  { start: 491, length: 1, convRule: rule23 },
  { start: 492, length: 1, convRule: rule22 },
  { start: 493, length: 1, convRule: rule23 },
  { start: 494, length: 1, convRule: rule22 },
  { start: 495, length: 1, convRule: rule23 },
  { start: 496, length: 1, convRule: rule20 },
  { start: 497, length: 1, convRule: rule47 },
  { start: 498, length: 1, convRule: rule48 },
  { start: 499, length: 1, convRule: rule49 },
  { start: 500, length: 1, convRule: rule22 },
  { start: 501, length: 1, convRule: rule23 },
  { start: 502, length: 1, convRule: rule51 },
  { start: 503, length: 1, convRule: rule52 },
  { start: 504, length: 1, convRule: rule22 },
  { start: 505, length: 1, convRule: rule23 },
  { start: 506, length: 1, convRule: rule22 },
  { start: 507, length: 1, convRule: rule23 },
  { start: 508, length: 1, convRule: rule22 },
  { start: 509, length: 1, convRule: rule23 },
  { start: 510, length: 1, convRule: rule22 },
  { start: 511, length: 1, convRule: rule23 },
  { start: 512, length: 1, convRule: rule22 },
  { start: 513, length: 1, convRule: rule23 },
  { start: 514, length: 1, convRule: rule22 },
  { start: 515, length: 1, convRule: rule23 },
  { start: 516, length: 1, convRule: rule22 },
  { start: 517, length: 1, convRule: rule23 },
  { start: 518, length: 1, convRule: rule22 },
  { start: 519, length: 1, convRule: rule23 },
  { start: 520, length: 1, convRule: rule22 },
  { start: 521, length: 1, convRule: rule23 },
  { start: 522, length: 1, convRule: rule22 },
  { start: 523, length: 1, convRule: rule23 },
  { start: 524, length: 1, convRule: rule22 },
  { start: 525, length: 1, convRule: rule23 },
  { start: 526, length: 1, convRule: rule22 },
  { start: 527, length: 1, convRule: rule23 },
  { start: 528, length: 1, convRule: rule22 },
  { start: 529, length: 1, convRule: rule23 },
  { start: 530, length: 1, convRule: rule22 },
  { start: 531, length: 1, convRule: rule23 },
  { start: 532, length: 1, convRule: rule22 },
  { start: 533, length: 1, convRule: rule23 },
  { start: 534, length: 1, convRule: rule22 },
  { start: 535, length: 1, convRule: rule23 },
  { start: 536, length: 1, convRule: rule22 },
  { start: 537, length: 1, convRule: rule23 },
  { start: 538, length: 1, convRule: rule22 },
  { start: 539, length: 1, convRule: rule23 },
  { start: 540, length: 1, convRule: rule22 },
  { start: 541, length: 1, convRule: rule23 },
  { start: 542, length: 1, convRule: rule22 },
  { start: 543, length: 1, convRule: rule23 },
  { start: 544, length: 1, convRule: rule53 },
  { start: 545, length: 1, convRule: rule20 },
  { start: 546, length: 1, convRule: rule22 },
  { start: 547, length: 1, convRule: rule23 },
  { start: 548, length: 1, convRule: rule22 },
  { start: 549, length: 1, convRule: rule23 },
  { start: 550, length: 1, convRule: rule22 },
  { start: 551, length: 1, convRule: rule23 },
  { start: 552, length: 1, convRule: rule22 },
  { start: 553, length: 1, convRule: rule23 },
  { start: 554, length: 1, convRule: rule22 },
  { start: 555, length: 1, convRule: rule23 },
  { start: 556, length: 1, convRule: rule22 },
  { start: 557, length: 1, convRule: rule23 },
  { start: 558, length: 1, convRule: rule22 },
  { start: 559, length: 1, convRule: rule23 },
  { start: 560, length: 1, convRule: rule22 },
  { start: 561, length: 1, convRule: rule23 },
  { start: 562, length: 1, convRule: rule22 },
  { start: 563, length: 1, convRule: rule23 },
  { start: 564, length: 6, convRule: rule20 },
  { start: 570, length: 1, convRule: rule54 },
  { start: 571, length: 1, convRule: rule22 },
  { start: 572, length: 1, convRule: rule23 },
  { start: 573, length: 1, convRule: rule55 },
  { start: 574, length: 1, convRule: rule56 },
  { start: 575, length: 2, convRule: rule57 },
  { start: 577, length: 1, convRule: rule22 },
  { start: 578, length: 1, convRule: rule23 },
  { start: 579, length: 1, convRule: rule58 },
  { start: 580, length: 1, convRule: rule59 },
  { start: 581, length: 1, convRule: rule60 },
  { start: 582, length: 1, convRule: rule22 },
  { start: 583, length: 1, convRule: rule23 },
  { start: 584, length: 1, convRule: rule22 },
  { start: 585, length: 1, convRule: rule23 },
  { start: 586, length: 1, convRule: rule22 },
  { start: 587, length: 1, convRule: rule23 },
  { start: 588, length: 1, convRule: rule22 },
  { start: 589, length: 1, convRule: rule23 },
  { start: 590, length: 1, convRule: rule22 },
  { start: 591, length: 1, convRule: rule23 },
  { start: 592, length: 1, convRule: rule61 },
  { start: 593, length: 1, convRule: rule62 },
  { start: 594, length: 1, convRule: rule63 },
  { start: 595, length: 1, convRule: rule64 },
  { start: 596, length: 1, convRule: rule65 },
  { start: 597, length: 1, convRule: rule20 },
  { start: 598, length: 2, convRule: rule66 },
  { start: 600, length: 1, convRule: rule20 },
  { start: 601, length: 1, convRule: rule67 },
  { start: 602, length: 1, convRule: rule20 },
  { start: 603, length: 1, convRule: rule68 },
  { start: 604, length: 1, convRule: rule69 },
  { start: 605, length: 3, convRule: rule20 },
  { start: 608, length: 1, convRule: rule66 },
  { start: 609, length: 1, convRule: rule70 },
  { start: 610, length: 1, convRule: rule20 },
  { start: 611, length: 1, convRule: rule71 },
  { start: 612, length: 1, convRule: rule20 },
  { start: 613, length: 1, convRule: rule72 },
  { start: 614, length: 1, convRule: rule73 },
  { start: 615, length: 1, convRule: rule20 },
  { start: 616, length: 1, convRule: rule74 },
  { start: 617, length: 1, convRule: rule75 },
  { start: 618, length: 1, convRule: rule73 },
  { start: 619, length: 1, convRule: rule76 },
  { start: 620, length: 1, convRule: rule77 },
  { start: 621, length: 2, convRule: rule20 },
  { start: 623, length: 1, convRule: rule75 },
  { start: 624, length: 1, convRule: rule20 },
  { start: 625, length: 1, convRule: rule78 },
  { start: 626, length: 1, convRule: rule79 },
  { start: 627, length: 2, convRule: rule20 },
  { start: 629, length: 1, convRule: rule80 },
  { start: 630, length: 7, convRule: rule20 },
  { start: 637, length: 1, convRule: rule81 },
  { start: 638, length: 2, convRule: rule20 },
  { start: 640, length: 1, convRule: rule82 },
  { start: 641, length: 1, convRule: rule20 },
  { start: 642, length: 1, convRule: rule83 },
  { start: 643, length: 1, convRule: rule82 },
  { start: 644, length: 3, convRule: rule20 },
  { start: 647, length: 1, convRule: rule84 },
  { start: 648, length: 1, convRule: rule82 },
  { start: 649, length: 1, convRule: rule85 },
  { start: 650, length: 2, convRule: rule86 },
  { start: 652, length: 1, convRule: rule87 },
  { start: 653, length: 5, convRule: rule20 },
  { start: 658, length: 1, convRule: rule88 },
  { start: 659, length: 1, convRule: rule20 },
  { start: 660, length: 1, convRule: rule14 },
  { start: 661, length: 8, convRule: rule20 },
  { start: 669, length: 1, convRule: rule89 },
  { start: 670, length: 1, convRule: rule90 },
  { start: 671, length: 17, convRule: rule20 },
  { start: 688, length: 18, convRule: rule91 },
  { start: 706, length: 4, convRule: rule10 },
  { start: 710, length: 12, convRule: rule91 },
  { start: 722, length: 14, convRule: rule10 },
  { start: 736, length: 5, convRule: rule91 },
  { start: 741, length: 7, convRule: rule10 },
  { start: 748, length: 1, convRule: rule91 },
  { start: 749, length: 1, convRule: rule10 },
  { start: 750, length: 1, convRule: rule91 },
  { start: 751, length: 17, convRule: rule10 },
  { start: 768, length: 69, convRule: rule92 },
  { start: 837, length: 1, convRule: rule93 },
  { start: 838, length: 42, convRule: rule92 },
  { start: 880, length: 1, convRule: rule22 },
  { start: 881, length: 1, convRule: rule23 },
  { start: 882, length: 1, convRule: rule22 },
  { start: 883, length: 1, convRule: rule23 },
  { start: 884, length: 1, convRule: rule91 },
  { start: 885, length: 1, convRule: rule10 },
  { start: 886, length: 1, convRule: rule22 },
  { start: 887, length: 1, convRule: rule23 },
  { start: 890, length: 1, convRule: rule91 },
  { start: 891, length: 3, convRule: rule41 },
  { start: 894, length: 1, convRule: rule2 },
  { start: 895, length: 1, convRule: rule94 },
  { start: 900, length: 2, convRule: rule10 },
  { start: 902, length: 1, convRule: rule95 },
  { start: 903, length: 1, convRule: rule2 },
  { start: 904, length: 3, convRule: rule96 },
  { start: 908, length: 1, convRule: rule97 },
  { start: 910, length: 2, convRule: rule98 },
  { start: 912, length: 1, convRule: rule20 },
  { start: 913, length: 17, convRule: rule9 },
  { start: 931, length: 9, convRule: rule9 },
  { start: 940, length: 1, convRule: rule99 },
  { start: 941, length: 3, convRule: rule100 },
  { start: 944, length: 1, convRule: rule20 },
  { start: 945, length: 17, convRule: rule12 },
  { start: 962, length: 1, convRule: rule101 },
  { start: 963, length: 9, convRule: rule12 },
  { start: 972, length: 1, convRule: rule102 },
  { start: 973, length: 2, convRule: rule103 },
  { start: 975, length: 1, convRule: rule104 },
  { start: 976, length: 1, convRule: rule105 },
  { start: 977, length: 1, convRule: rule106 },
  { start: 978, length: 3, convRule: rule107 },
  { start: 981, length: 1, convRule: rule108 },
  { start: 982, length: 1, convRule: rule109 },
  { start: 983, length: 1, convRule: rule110 },
  { start: 984, length: 1, convRule: rule22 },
  { start: 985, length: 1, convRule: rule23 },
  { start: 986, length: 1, convRule: rule22 },
  { start: 987, length: 1, convRule: rule23 },
  { start: 988, length: 1, convRule: rule22 },
  { start: 989, length: 1, convRule: rule23 },
  { start: 990, length: 1, convRule: rule22 },
  { start: 991, length: 1, convRule: rule23 },
  { start: 992, length: 1, convRule: rule22 },
  { start: 993, length: 1, convRule: rule23 },
  { start: 994, length: 1, convRule: rule22 },
  { start: 995, length: 1, convRule: rule23 },
  { start: 996, length: 1, convRule: rule22 },
  { start: 997, length: 1, convRule: rule23 },
  { start: 998, length: 1, convRule: rule22 },
  { start: 999, length: 1, convRule: rule23 },
  { start: 1e3, length: 1, convRule: rule22 },
  { start: 1001, length: 1, convRule: rule23 },
  { start: 1002, length: 1, convRule: rule22 },
  { start: 1003, length: 1, convRule: rule23 },
  { start: 1004, length: 1, convRule: rule22 },
  { start: 1005, length: 1, convRule: rule23 },
  { start: 1006, length: 1, convRule: rule22 },
  { start: 1007, length: 1, convRule: rule23 },
  { start: 1008, length: 1, convRule: rule111 },
  { start: 1009, length: 1, convRule: rule112 },
  { start: 1010, length: 1, convRule: rule113 },
  { start: 1011, length: 1, convRule: rule114 },
  { start: 1012, length: 1, convRule: rule115 },
  { start: 1013, length: 1, convRule: rule116 },
  { start: 1014, length: 1, convRule: rule6 },
  { start: 1015, length: 1, convRule: rule22 },
  { start: 1016, length: 1, convRule: rule23 },
  { start: 1017, length: 1, convRule: rule117 },
  { start: 1018, length: 1, convRule: rule22 },
  { start: 1019, length: 1, convRule: rule23 },
  { start: 1020, length: 1, convRule: rule20 },
  { start: 1021, length: 3, convRule: rule53 },
  { start: 1024, length: 16, convRule: rule118 },
  { start: 1040, length: 32, convRule: rule9 },
  { start: 1072, length: 32, convRule: rule12 },
  { start: 1104, length: 16, convRule: rule112 },
  { start: 1120, length: 1, convRule: rule22 },
  { start: 1121, length: 1, convRule: rule23 },
  { start: 1122, length: 1, convRule: rule22 },
  { start: 1123, length: 1, convRule: rule23 },
  { start: 1124, length: 1, convRule: rule22 },
  { start: 1125, length: 1, convRule: rule23 },
  { start: 1126, length: 1, convRule: rule22 },
  { start: 1127, length: 1, convRule: rule23 },
  { start: 1128, length: 1, convRule: rule22 },
  { start: 1129, length: 1, convRule: rule23 },
  { start: 1130, length: 1, convRule: rule22 },
  { start: 1131, length: 1, convRule: rule23 },
  { start: 1132, length: 1, convRule: rule22 },
  { start: 1133, length: 1, convRule: rule23 },
  { start: 1134, length: 1, convRule: rule22 },
  { start: 1135, length: 1, convRule: rule23 },
  { start: 1136, length: 1, convRule: rule22 },
  { start: 1137, length: 1, convRule: rule23 },
  { start: 1138, length: 1, convRule: rule22 },
  { start: 1139, length: 1, convRule: rule23 },
  { start: 1140, length: 1, convRule: rule22 },
  { start: 1141, length: 1, convRule: rule23 },
  { start: 1142, length: 1, convRule: rule22 },
  { start: 1143, length: 1, convRule: rule23 },
  { start: 1144, length: 1, convRule: rule22 },
  { start: 1145, length: 1, convRule: rule23 },
  { start: 1146, length: 1, convRule: rule22 },
  { start: 1147, length: 1, convRule: rule23 },
  { start: 1148, length: 1, convRule: rule22 },
  { start: 1149, length: 1, convRule: rule23 },
  { start: 1150, length: 1, convRule: rule22 },
  { start: 1151, length: 1, convRule: rule23 },
  { start: 1152, length: 1, convRule: rule22 },
  { start: 1153, length: 1, convRule: rule23 },
  { start: 1154, length: 1, convRule: rule13 },
  { start: 1155, length: 5, convRule: rule92 },
  { start: 1160, length: 2, convRule: rule119 },
  { start: 1162, length: 1, convRule: rule22 },
  { start: 1163, length: 1, convRule: rule23 },
  { start: 1164, length: 1, convRule: rule22 },
  { start: 1165, length: 1, convRule: rule23 },
  { start: 1166, length: 1, convRule: rule22 },
  { start: 1167, length: 1, convRule: rule23 },
  { start: 1168, length: 1, convRule: rule22 },
  { start: 1169, length: 1, convRule: rule23 },
  { start: 1170, length: 1, convRule: rule22 },
  { start: 1171, length: 1, convRule: rule23 },
  { start: 1172, length: 1, convRule: rule22 },
  { start: 1173, length: 1, convRule: rule23 },
  { start: 1174, length: 1, convRule: rule22 },
  { start: 1175, length: 1, convRule: rule23 },
  { start: 1176, length: 1, convRule: rule22 },
  { start: 1177, length: 1, convRule: rule23 },
  { start: 1178, length: 1, convRule: rule22 },
  { start: 1179, length: 1, convRule: rule23 },
  { start: 1180, length: 1, convRule: rule22 },
  { start: 1181, length: 1, convRule: rule23 },
  { start: 1182, length: 1, convRule: rule22 },
  { start: 1183, length: 1, convRule: rule23 },
  { start: 1184, length: 1, convRule: rule22 },
  { start: 1185, length: 1, convRule: rule23 },
  { start: 1186, length: 1, convRule: rule22 },
  { start: 1187, length: 1, convRule: rule23 },
  { start: 1188, length: 1, convRule: rule22 },
  { start: 1189, length: 1, convRule: rule23 },
  { start: 1190, length: 1, convRule: rule22 },
  { start: 1191, length: 1, convRule: rule23 },
  { start: 1192, length: 1, convRule: rule22 },
  { start: 1193, length: 1, convRule: rule23 },
  { start: 1194, length: 1, convRule: rule22 },
  { start: 1195, length: 1, convRule: rule23 },
  { start: 1196, length: 1, convRule: rule22 },
  { start: 1197, length: 1, convRule: rule23 },
  { start: 1198, length: 1, convRule: rule22 },
  { start: 1199, length: 1, convRule: rule23 },
  { start: 1200, length: 1, convRule: rule22 },
  { start: 1201, length: 1, convRule: rule23 },
  { start: 1202, length: 1, convRule: rule22 },
  { start: 1203, length: 1, convRule: rule23 },
  { start: 1204, length: 1, convRule: rule22 },
  { start: 1205, length: 1, convRule: rule23 },
  { start: 1206, length: 1, convRule: rule22 },
  { start: 1207, length: 1, convRule: rule23 },
  { start: 1208, length: 1, convRule: rule22 },
  { start: 1209, length: 1, convRule: rule23 },
  { start: 1210, length: 1, convRule: rule22 },
  { start: 1211, length: 1, convRule: rule23 },
  { start: 1212, length: 1, convRule: rule22 },
  { start: 1213, length: 1, convRule: rule23 },
  { start: 1214, length: 1, convRule: rule22 },
  { start: 1215, length: 1, convRule: rule23 },
  { start: 1216, length: 1, convRule: rule120 },
  { start: 1217, length: 1, convRule: rule22 },
  { start: 1218, length: 1, convRule: rule23 },
  { start: 1219, length: 1, convRule: rule22 },
  { start: 1220, length: 1, convRule: rule23 },
  { start: 1221, length: 1, convRule: rule22 },
  { start: 1222, length: 1, convRule: rule23 },
  { start: 1223, length: 1, convRule: rule22 },
  { start: 1224, length: 1, convRule: rule23 },
  { start: 1225, length: 1, convRule: rule22 },
  { start: 1226, length: 1, convRule: rule23 },
  { start: 1227, length: 1, convRule: rule22 },
  { start: 1228, length: 1, convRule: rule23 },
  { start: 1229, length: 1, convRule: rule22 },
  { start: 1230, length: 1, convRule: rule23 },
  { start: 1231, length: 1, convRule: rule121 },
  { start: 1232, length: 1, convRule: rule22 },
  { start: 1233, length: 1, convRule: rule23 },
  { start: 1234, length: 1, convRule: rule22 },
  { start: 1235, length: 1, convRule: rule23 },
  { start: 1236, length: 1, convRule: rule22 },
  { start: 1237, length: 1, convRule: rule23 },
  { start: 1238, length: 1, convRule: rule22 },
  { start: 1239, length: 1, convRule: rule23 },
  { start: 1240, length: 1, convRule: rule22 },
  { start: 1241, length: 1, convRule: rule23 },
  { start: 1242, length: 1, convRule: rule22 },
  { start: 1243, length: 1, convRule: rule23 },
  { start: 1244, length: 1, convRule: rule22 },
  { start: 1245, length: 1, convRule: rule23 },
  { start: 1246, length: 1, convRule: rule22 },
  { start: 1247, length: 1, convRule: rule23 },
  { start: 1248, length: 1, convRule: rule22 },
  { start: 1249, length: 1, convRule: rule23 },
  { start: 1250, length: 1, convRule: rule22 },
  { start: 1251, length: 1, convRule: rule23 },
  { start: 1252, length: 1, convRule: rule22 },
  { start: 1253, length: 1, convRule: rule23 },
  { start: 1254, length: 1, convRule: rule22 },
  { start: 1255, length: 1, convRule: rule23 },
  { start: 1256, length: 1, convRule: rule22 },
  { start: 1257, length: 1, convRule: rule23 },
  { start: 1258, length: 1, convRule: rule22 },
  { start: 1259, length: 1, convRule: rule23 },
  { start: 1260, length: 1, convRule: rule22 },
  { start: 1261, length: 1, convRule: rule23 },
  { start: 1262, length: 1, convRule: rule22 },
  { start: 1263, length: 1, convRule: rule23 },
  { start: 1264, length: 1, convRule: rule22 },
  { start: 1265, length: 1, convRule: rule23 },
  { start: 1266, length: 1, convRule: rule22 },
  { start: 1267, length: 1, convRule: rule23 },
  { start: 1268, length: 1, convRule: rule22 },
  { start: 1269, length: 1, convRule: rule23 },
  { start: 1270, length: 1, convRule: rule22 },
  { start: 1271, length: 1, convRule: rule23 },
  { start: 1272, length: 1, convRule: rule22 },
  { start: 1273, length: 1, convRule: rule23 },
  { start: 1274, length: 1, convRule: rule22 },
  { start: 1275, length: 1, convRule: rule23 },
  { start: 1276, length: 1, convRule: rule22 },
  { start: 1277, length: 1, convRule: rule23 },
  { start: 1278, length: 1, convRule: rule22 },
  { start: 1279, length: 1, convRule: rule23 },
  { start: 1280, length: 1, convRule: rule22 },
  { start: 1281, length: 1, convRule: rule23 },
  { start: 1282, length: 1, convRule: rule22 },
  { start: 1283, length: 1, convRule: rule23 },
  { start: 1284, length: 1, convRule: rule22 },
  { start: 1285, length: 1, convRule: rule23 },
  { start: 1286, length: 1, convRule: rule22 },
  { start: 1287, length: 1, convRule: rule23 },
  { start: 1288, length: 1, convRule: rule22 },
  { start: 1289, length: 1, convRule: rule23 },
  { start: 1290, length: 1, convRule: rule22 },
  { start: 1291, length: 1, convRule: rule23 },
  { start: 1292, length: 1, convRule: rule22 },
  { start: 1293, length: 1, convRule: rule23 },
  { start: 1294, length: 1, convRule: rule22 },
  { start: 1295, length: 1, convRule: rule23 },
  { start: 1296, length: 1, convRule: rule22 },
  { start: 1297, length: 1, convRule: rule23 },
  { start: 1298, length: 1, convRule: rule22 },
  { start: 1299, length: 1, convRule: rule23 },
  { start: 1300, length: 1, convRule: rule22 },
  { start: 1301, length: 1, convRule: rule23 },
  { start: 1302, length: 1, convRule: rule22 },
  { start: 1303, length: 1, convRule: rule23 },
  { start: 1304, length: 1, convRule: rule22 },
  { start: 1305, length: 1, convRule: rule23 },
  { start: 1306, length: 1, convRule: rule22 },
  { start: 1307, length: 1, convRule: rule23 },
  { start: 1308, length: 1, convRule: rule22 },
  { start: 1309, length: 1, convRule: rule23 },
  { start: 1310, length: 1, convRule: rule22 },
  { start: 1311, length: 1, convRule: rule23 },
  { start: 1312, length: 1, convRule: rule22 },
  { start: 1313, length: 1, convRule: rule23 },
  { start: 1314, length: 1, convRule: rule22 },
  { start: 1315, length: 1, convRule: rule23 },
  { start: 1316, length: 1, convRule: rule22 },
  { start: 1317, length: 1, convRule: rule23 },
  { start: 1318, length: 1, convRule: rule22 },
  { start: 1319, length: 1, convRule: rule23 },
  { start: 1320, length: 1, convRule: rule22 },
  { start: 1321, length: 1, convRule: rule23 },
  { start: 1322, length: 1, convRule: rule22 },
  { start: 1323, length: 1, convRule: rule23 },
  { start: 1324, length: 1, convRule: rule22 },
  { start: 1325, length: 1, convRule: rule23 },
  { start: 1326, length: 1, convRule: rule22 },
  { start: 1327, length: 1, convRule: rule23 },
  { start: 1329, length: 38, convRule: rule122 },
  { start: 1369, length: 1, convRule: rule91 },
  { start: 1370, length: 6, convRule: rule2 },
  { start: 1376, length: 1, convRule: rule20 },
  { start: 1377, length: 38, convRule: rule123 },
  { start: 1415, length: 2, convRule: rule20 },
  { start: 1417, length: 1, convRule: rule2 },
  { start: 1418, length: 1, convRule: rule7 },
  { start: 1421, length: 2, convRule: rule13 },
  { start: 1423, length: 1, convRule: rule3 },
  { start: 1425, length: 45, convRule: rule92 },
  { start: 1470, length: 1, convRule: rule7 },
  { start: 1471, length: 1, convRule: rule92 },
  { start: 1472, length: 1, convRule: rule2 },
  { start: 1473, length: 2, convRule: rule92 },
  { start: 1475, length: 1, convRule: rule2 },
  { start: 1476, length: 2, convRule: rule92 },
  { start: 1478, length: 1, convRule: rule2 },
  { start: 1479, length: 1, convRule: rule92 },
  { start: 1488, length: 27, convRule: rule14 },
  { start: 1519, length: 4, convRule: rule14 },
  { start: 1523, length: 2, convRule: rule2 },
  { start: 1536, length: 6, convRule: rule16 },
  { start: 1542, length: 3, convRule: rule6 },
  { start: 1545, length: 2, convRule: rule2 },
  { start: 1547, length: 1, convRule: rule3 },
  { start: 1548, length: 2, convRule: rule2 },
  { start: 1550, length: 2, convRule: rule13 },
  { start: 1552, length: 11, convRule: rule92 },
  { start: 1563, length: 1, convRule: rule2 },
  { start: 1564, length: 1, convRule: rule16 },
  { start: 1566, length: 2, convRule: rule2 },
  { start: 1568, length: 32, convRule: rule14 },
  { start: 1600, length: 1, convRule: rule91 },
  { start: 1601, length: 10, convRule: rule14 },
  { start: 1611, length: 21, convRule: rule92 },
  { start: 1632, length: 10, convRule: rule8 },
  { start: 1642, length: 4, convRule: rule2 },
  { start: 1646, length: 2, convRule: rule14 },
  { start: 1648, length: 1, convRule: rule92 },
  { start: 1649, length: 99, convRule: rule14 },
  { start: 1748, length: 1, convRule: rule2 },
  { start: 1749, length: 1, convRule: rule14 },
  { start: 1750, length: 7, convRule: rule92 },
  { start: 1757, length: 1, convRule: rule16 },
  { start: 1758, length: 1, convRule: rule13 },
  { start: 1759, length: 6, convRule: rule92 },
  { start: 1765, length: 2, convRule: rule91 },
  { start: 1767, length: 2, convRule: rule92 },
  { start: 1769, length: 1, convRule: rule13 },
  { start: 1770, length: 4, convRule: rule92 },
  { start: 1774, length: 2, convRule: rule14 },
  { start: 1776, length: 10, convRule: rule8 },
  { start: 1786, length: 3, convRule: rule14 },
  { start: 1789, length: 2, convRule: rule13 },
  { start: 1791, length: 1, convRule: rule14 },
  { start: 1792, length: 14, convRule: rule2 },
  { start: 1807, length: 1, convRule: rule16 },
  { start: 1808, length: 1, convRule: rule14 },
  { start: 1809, length: 1, convRule: rule92 },
  { start: 1810, length: 30, convRule: rule14 },
  { start: 1840, length: 27, convRule: rule92 },
  { start: 1869, length: 89, convRule: rule14 },
  { start: 1958, length: 11, convRule: rule92 },
  { start: 1969, length: 1, convRule: rule14 },
  { start: 1984, length: 10, convRule: rule8 },
  { start: 1994, length: 33, convRule: rule14 },
  { start: 2027, length: 9, convRule: rule92 },
  { start: 2036, length: 2, convRule: rule91 },
  { start: 2038, length: 1, convRule: rule13 },
  { start: 2039, length: 3, convRule: rule2 },
  { start: 2042, length: 1, convRule: rule91 },
  { start: 2045, length: 1, convRule: rule92 },
  { start: 2046, length: 2, convRule: rule3 },
  { start: 2048, length: 22, convRule: rule14 },
  { start: 2070, length: 4, convRule: rule92 },
  { start: 2074, length: 1, convRule: rule91 },
  { start: 2075, length: 9, convRule: rule92 },
  { start: 2084, length: 1, convRule: rule91 },
  { start: 2085, length: 3, convRule: rule92 },
  { start: 2088, length: 1, convRule: rule91 },
  { start: 2089, length: 5, convRule: rule92 },
  { start: 2096, length: 15, convRule: rule2 },
  { start: 2112, length: 25, convRule: rule14 },
  { start: 2137, length: 3, convRule: rule92 },
  { start: 2142, length: 1, convRule: rule2 },
  { start: 2144, length: 11, convRule: rule14 },
  { start: 2208, length: 21, convRule: rule14 },
  { start: 2230, length: 18, convRule: rule14 },
  { start: 2259, length: 15, convRule: rule92 },
  { start: 2274, length: 1, convRule: rule16 },
  { start: 2275, length: 32, convRule: rule92 },
  { start: 2307, length: 1, convRule: rule124 },
  { start: 2308, length: 54, convRule: rule14 },
  { start: 2362, length: 1, convRule: rule92 },
  { start: 2363, length: 1, convRule: rule124 },
  { start: 2364, length: 1, convRule: rule92 },
  { start: 2365, length: 1, convRule: rule14 },
  { start: 2366, length: 3, convRule: rule124 },
  { start: 2369, length: 8, convRule: rule92 },
  { start: 2377, length: 4, convRule: rule124 },
  { start: 2381, length: 1, convRule: rule92 },
  { start: 2382, length: 2, convRule: rule124 },
  { start: 2384, length: 1, convRule: rule14 },
  { start: 2385, length: 7, convRule: rule92 },
  { start: 2392, length: 10, convRule: rule14 },
  { start: 2402, length: 2, convRule: rule92 },
  { start: 2404, length: 2, convRule: rule2 },
  { start: 2406, length: 10, convRule: rule8 },
  { start: 2416, length: 1, convRule: rule2 },
  { start: 2417, length: 1, convRule: rule91 },
  { start: 2418, length: 15, convRule: rule14 },
  { start: 2433, length: 1, convRule: rule92 },
  { start: 2434, length: 2, convRule: rule124 },
  { start: 2437, length: 8, convRule: rule14 },
  { start: 2447, length: 2, convRule: rule14 },
  { start: 2451, length: 22, convRule: rule14 },
  { start: 2474, length: 7, convRule: rule14 },
  { start: 2482, length: 1, convRule: rule14 },
  { start: 2486, length: 4, convRule: rule14 },
  { start: 2492, length: 1, convRule: rule92 },
  { start: 2493, length: 1, convRule: rule14 },
  { start: 2494, length: 3, convRule: rule124 },
  { start: 2497, length: 4, convRule: rule92 },
  { start: 2503, length: 2, convRule: rule124 },
  { start: 2507, length: 2, convRule: rule124 },
  { start: 2509, length: 1, convRule: rule92 },
  { start: 2510, length: 1, convRule: rule14 },
  { start: 2519, length: 1, convRule: rule124 },
  { start: 2524, length: 2, convRule: rule14 },
  { start: 2527, length: 3, convRule: rule14 },
  { start: 2530, length: 2, convRule: rule92 },
  { start: 2534, length: 10, convRule: rule8 },
  { start: 2544, length: 2, convRule: rule14 },
  { start: 2546, length: 2, convRule: rule3 },
  { start: 2548, length: 6, convRule: rule17 },
  { start: 2554, length: 1, convRule: rule13 },
  { start: 2555, length: 1, convRule: rule3 },
  { start: 2556, length: 1, convRule: rule14 },
  { start: 2557, length: 1, convRule: rule2 },
  { start: 2558, length: 1, convRule: rule92 },
  { start: 2561, length: 2, convRule: rule92 },
  { start: 2563, length: 1, convRule: rule124 },
  { start: 2565, length: 6, convRule: rule14 },
  { start: 2575, length: 2, convRule: rule14 },
  { start: 2579, length: 22, convRule: rule14 },
  { start: 2602, length: 7, convRule: rule14 },
  { start: 2610, length: 2, convRule: rule14 },
  { start: 2613, length: 2, convRule: rule14 },
  { start: 2616, length: 2, convRule: rule14 },
  { start: 2620, length: 1, convRule: rule92 },
  { start: 2622, length: 3, convRule: rule124 },
  { start: 2625, length: 2, convRule: rule92 },
  { start: 2631, length: 2, convRule: rule92 },
  { start: 2635, length: 3, convRule: rule92 },
  { start: 2641, length: 1, convRule: rule92 },
  { start: 2649, length: 4, convRule: rule14 },
  { start: 2654, length: 1, convRule: rule14 },
  { start: 2662, length: 10, convRule: rule8 },
  { start: 2672, length: 2, convRule: rule92 },
  { start: 2674, length: 3, convRule: rule14 },
  { start: 2677, length: 1, convRule: rule92 },
  { start: 2678, length: 1, convRule: rule2 },
  { start: 2689, length: 2, convRule: rule92 },
  { start: 2691, length: 1, convRule: rule124 },
  { start: 2693, length: 9, convRule: rule14 },
  { start: 2703, length: 3, convRule: rule14 },
  { start: 2707, length: 22, convRule: rule14 },
  { start: 2730, length: 7, convRule: rule14 },
  { start: 2738, length: 2, convRule: rule14 },
  { start: 2741, length: 5, convRule: rule14 },
  { start: 2748, length: 1, convRule: rule92 },
  { start: 2749, length: 1, convRule: rule14 },
  { start: 2750, length: 3, convRule: rule124 },
  { start: 2753, length: 5, convRule: rule92 },
  { start: 2759, length: 2, convRule: rule92 },
  { start: 2761, length: 1, convRule: rule124 },
  { start: 2763, length: 2, convRule: rule124 },
  { start: 2765, length: 1, convRule: rule92 },
  { start: 2768, length: 1, convRule: rule14 },
  { start: 2784, length: 2, convRule: rule14 },
  { start: 2786, length: 2, convRule: rule92 },
  { start: 2790, length: 10, convRule: rule8 },
  { start: 2800, length: 1, convRule: rule2 },
  { start: 2801, length: 1, convRule: rule3 },
  { start: 2809, length: 1, convRule: rule14 },
  { start: 2810, length: 6, convRule: rule92 },
  { start: 2817, length: 1, convRule: rule92 },
  { start: 2818, length: 2, convRule: rule124 },
  { start: 2821, length: 8, convRule: rule14 },
  { start: 2831, length: 2, convRule: rule14 },
  { start: 2835, length: 22, convRule: rule14 },
  { start: 2858, length: 7, convRule: rule14 },
  { start: 2866, length: 2, convRule: rule14 },
  { start: 2869, length: 5, convRule: rule14 },
  { start: 2876, length: 1, convRule: rule92 },
  { start: 2877, length: 1, convRule: rule14 },
  { start: 2878, length: 1, convRule: rule124 },
  { start: 2879, length: 1, convRule: rule92 },
  { start: 2880, length: 1, convRule: rule124 },
  { start: 2881, length: 4, convRule: rule92 },
  { start: 2887, length: 2, convRule: rule124 },
  { start: 2891, length: 2, convRule: rule124 },
  { start: 2893, length: 1, convRule: rule92 },
  { start: 2901, length: 2, convRule: rule92 },
  { start: 2903, length: 1, convRule: rule124 },
  { start: 2908, length: 2, convRule: rule14 },
  { start: 2911, length: 3, convRule: rule14 },
  { start: 2914, length: 2, convRule: rule92 },
  { start: 2918, length: 10, convRule: rule8 },
  { start: 2928, length: 1, convRule: rule13 },
  { start: 2929, length: 1, convRule: rule14 },
  { start: 2930, length: 6, convRule: rule17 },
  { start: 2946, length: 1, convRule: rule92 },
  { start: 2947, length: 1, convRule: rule14 },
  { start: 2949, length: 6, convRule: rule14 },
  { start: 2958, length: 3, convRule: rule14 },
  { start: 2962, length: 4, convRule: rule14 },
  { start: 2969, length: 2, convRule: rule14 },
  { start: 2972, length: 1, convRule: rule14 },
  { start: 2974, length: 2, convRule: rule14 },
  { start: 2979, length: 2, convRule: rule14 },
  { start: 2984, length: 3, convRule: rule14 },
  { start: 2990, length: 12, convRule: rule14 },
  { start: 3006, length: 2, convRule: rule124 },
  { start: 3008, length: 1, convRule: rule92 },
  { start: 3009, length: 2, convRule: rule124 },
  { start: 3014, length: 3, convRule: rule124 },
  { start: 3018, length: 3, convRule: rule124 },
  { start: 3021, length: 1, convRule: rule92 },
  { start: 3024, length: 1, convRule: rule14 },
  { start: 3031, length: 1, convRule: rule124 },
  { start: 3046, length: 10, convRule: rule8 },
  { start: 3056, length: 3, convRule: rule17 },
  { start: 3059, length: 6, convRule: rule13 },
  { start: 3065, length: 1, convRule: rule3 },
  { start: 3066, length: 1, convRule: rule13 },
  { start: 3072, length: 1, convRule: rule92 },
  { start: 3073, length: 3, convRule: rule124 },
  { start: 3076, length: 1, convRule: rule92 },
  { start: 3077, length: 8, convRule: rule14 },
  { start: 3086, length: 3, convRule: rule14 },
  { start: 3090, length: 23, convRule: rule14 },
  { start: 3114, length: 16, convRule: rule14 },
  { start: 3133, length: 1, convRule: rule14 },
  { start: 3134, length: 3, convRule: rule92 },
  { start: 3137, length: 4, convRule: rule124 },
  { start: 3142, length: 3, convRule: rule92 },
  { start: 3146, length: 4, convRule: rule92 },
  { start: 3157, length: 2, convRule: rule92 },
  { start: 3160, length: 3, convRule: rule14 },
  { start: 3168, length: 2, convRule: rule14 },
  { start: 3170, length: 2, convRule: rule92 },
  { start: 3174, length: 10, convRule: rule8 },
  { start: 3191, length: 1, convRule: rule2 },
  { start: 3192, length: 7, convRule: rule17 },
  { start: 3199, length: 1, convRule: rule13 },
  { start: 3200, length: 1, convRule: rule14 },
  { start: 3201, length: 1, convRule: rule92 },
  { start: 3202, length: 2, convRule: rule124 },
  { start: 3204, length: 1, convRule: rule2 },
  { start: 3205, length: 8, convRule: rule14 },
  { start: 3214, length: 3, convRule: rule14 },
  { start: 3218, length: 23, convRule: rule14 },
  { start: 3242, length: 10, convRule: rule14 },
  { start: 3253, length: 5, convRule: rule14 },
  { start: 3260, length: 1, convRule: rule92 },
  { start: 3261, length: 1, convRule: rule14 },
  { start: 3262, length: 1, convRule: rule124 },
  { start: 3263, length: 1, convRule: rule92 },
  { start: 3264, length: 5, convRule: rule124 },
  { start: 3270, length: 1, convRule: rule92 },
  { start: 3271, length: 2, convRule: rule124 },
  { start: 3274, length: 2, convRule: rule124 },
  { start: 3276, length: 2, convRule: rule92 },
  { start: 3285, length: 2, convRule: rule124 },
  { start: 3294, length: 1, convRule: rule14 },
  { start: 3296, length: 2, convRule: rule14 },
  { start: 3298, length: 2, convRule: rule92 },
  { start: 3302, length: 10, convRule: rule8 },
  { start: 3313, length: 2, convRule: rule14 },
  { start: 3328, length: 2, convRule: rule92 },
  { start: 3330, length: 2, convRule: rule124 },
  { start: 3332, length: 9, convRule: rule14 },
  { start: 3342, length: 3, convRule: rule14 },
  { start: 3346, length: 41, convRule: rule14 },
  { start: 3387, length: 2, convRule: rule92 },
  { start: 3389, length: 1, convRule: rule14 },
  { start: 3390, length: 3, convRule: rule124 },
  { start: 3393, length: 4, convRule: rule92 },
  { start: 3398, length: 3, convRule: rule124 },
  { start: 3402, length: 3, convRule: rule124 },
  { start: 3405, length: 1, convRule: rule92 },
  { start: 3406, length: 1, convRule: rule14 },
  { start: 3407, length: 1, convRule: rule13 },
  { start: 3412, length: 3, convRule: rule14 },
  { start: 3415, length: 1, convRule: rule124 },
  { start: 3416, length: 7, convRule: rule17 },
  { start: 3423, length: 3, convRule: rule14 },
  { start: 3426, length: 2, convRule: rule92 },
  { start: 3430, length: 10, convRule: rule8 },
  { start: 3440, length: 9, convRule: rule17 },
  { start: 3449, length: 1, convRule: rule13 },
  { start: 3450, length: 6, convRule: rule14 },
  { start: 3457, length: 1, convRule: rule92 },
  { start: 3458, length: 2, convRule: rule124 },
  { start: 3461, length: 18, convRule: rule14 },
  { start: 3482, length: 24, convRule: rule14 },
  { start: 3507, length: 9, convRule: rule14 },
  { start: 3517, length: 1, convRule: rule14 },
  { start: 3520, length: 7, convRule: rule14 },
  { start: 3530, length: 1, convRule: rule92 },
  { start: 3535, length: 3, convRule: rule124 },
  { start: 3538, length: 3, convRule: rule92 },
  { start: 3542, length: 1, convRule: rule92 },
  { start: 3544, length: 8, convRule: rule124 },
  { start: 3558, length: 10, convRule: rule8 },
  { start: 3570, length: 2, convRule: rule124 },
  { start: 3572, length: 1, convRule: rule2 },
  { start: 3585, length: 48, convRule: rule14 },
  { start: 3633, length: 1, convRule: rule92 },
  { start: 3634, length: 2, convRule: rule14 },
  { start: 3636, length: 7, convRule: rule92 },
  { start: 3647, length: 1, convRule: rule3 },
  { start: 3648, length: 6, convRule: rule14 },
  { start: 3654, length: 1, convRule: rule91 },
  { start: 3655, length: 8, convRule: rule92 },
  { start: 3663, length: 1, convRule: rule2 },
  { start: 3664, length: 10, convRule: rule8 },
  { start: 3674, length: 2, convRule: rule2 },
  { start: 3713, length: 2, convRule: rule14 },
  { start: 3716, length: 1, convRule: rule14 },
  { start: 3718, length: 5, convRule: rule14 },
  { start: 3724, length: 24, convRule: rule14 },
  { start: 3749, length: 1, convRule: rule14 },
  { start: 3751, length: 10, convRule: rule14 },
  { start: 3761, length: 1, convRule: rule92 },
  { start: 3762, length: 2, convRule: rule14 },
  { start: 3764, length: 9, convRule: rule92 },
  { start: 3773, length: 1, convRule: rule14 },
  { start: 3776, length: 5, convRule: rule14 },
  { start: 3782, length: 1, convRule: rule91 },
  { start: 3784, length: 6, convRule: rule92 },
  { start: 3792, length: 10, convRule: rule8 },
  { start: 3804, length: 4, convRule: rule14 },
  { start: 3840, length: 1, convRule: rule14 },
  { start: 3841, length: 3, convRule: rule13 },
  { start: 3844, length: 15, convRule: rule2 },
  { start: 3859, length: 1, convRule: rule13 },
  { start: 3860, length: 1, convRule: rule2 },
  { start: 3861, length: 3, convRule: rule13 },
  { start: 3864, length: 2, convRule: rule92 },
  { start: 3866, length: 6, convRule: rule13 },
  { start: 3872, length: 10, convRule: rule8 },
  { start: 3882, length: 10, convRule: rule17 },
  { start: 3892, length: 1, convRule: rule13 },
  { start: 3893, length: 1, convRule: rule92 },
  { start: 3894, length: 1, convRule: rule13 },
  { start: 3895, length: 1, convRule: rule92 },
  { start: 3896, length: 1, convRule: rule13 },
  { start: 3897, length: 1, convRule: rule92 },
  { start: 3898, length: 1, convRule: rule4 },
  { start: 3899, length: 1, convRule: rule5 },
  { start: 3900, length: 1, convRule: rule4 },
  { start: 3901, length: 1, convRule: rule5 },
  { start: 3902, length: 2, convRule: rule124 },
  { start: 3904, length: 8, convRule: rule14 },
  { start: 3913, length: 36, convRule: rule14 },
  { start: 3953, length: 14, convRule: rule92 },
  { start: 3967, length: 1, convRule: rule124 },
  { start: 3968, length: 5, convRule: rule92 },
  { start: 3973, length: 1, convRule: rule2 },
  { start: 3974, length: 2, convRule: rule92 },
  { start: 3976, length: 5, convRule: rule14 },
  { start: 3981, length: 11, convRule: rule92 },
  { start: 3993, length: 36, convRule: rule92 },
  { start: 4030, length: 8, convRule: rule13 },
  { start: 4038, length: 1, convRule: rule92 },
  { start: 4039, length: 6, convRule: rule13 },
  { start: 4046, length: 2, convRule: rule13 },
  { start: 4048, length: 5, convRule: rule2 },
  { start: 4053, length: 4, convRule: rule13 },
  { start: 4057, length: 2, convRule: rule2 },
  { start: 4096, length: 43, convRule: rule14 },
  { start: 4139, length: 2, convRule: rule124 },
  { start: 4141, length: 4, convRule: rule92 },
  { start: 4145, length: 1, convRule: rule124 },
  { start: 4146, length: 6, convRule: rule92 },
  { start: 4152, length: 1, convRule: rule124 },
  { start: 4153, length: 2, convRule: rule92 },
  { start: 4155, length: 2, convRule: rule124 },
  { start: 4157, length: 2, convRule: rule92 },
  { start: 4159, length: 1, convRule: rule14 },
  { start: 4160, length: 10, convRule: rule8 },
  { start: 4170, length: 6, convRule: rule2 },
  { start: 4176, length: 6, convRule: rule14 },
  { start: 4182, length: 2, convRule: rule124 },
  { start: 4184, length: 2, convRule: rule92 },
  { start: 4186, length: 4, convRule: rule14 },
  { start: 4190, length: 3, convRule: rule92 },
  { start: 4193, length: 1, convRule: rule14 },
  { start: 4194, length: 3, convRule: rule124 },
  { start: 4197, length: 2, convRule: rule14 },
  { start: 4199, length: 7, convRule: rule124 },
  { start: 4206, length: 3, convRule: rule14 },
  { start: 4209, length: 4, convRule: rule92 },
  { start: 4213, length: 13, convRule: rule14 },
  { start: 4226, length: 1, convRule: rule92 },
  { start: 4227, length: 2, convRule: rule124 },
  { start: 4229, length: 2, convRule: rule92 },
  { start: 4231, length: 6, convRule: rule124 },
  { start: 4237, length: 1, convRule: rule92 },
  { start: 4238, length: 1, convRule: rule14 },
  { start: 4239, length: 1, convRule: rule124 },
  { start: 4240, length: 10, convRule: rule8 },
  { start: 4250, length: 3, convRule: rule124 },
  { start: 4253, length: 1, convRule: rule92 },
  { start: 4254, length: 2, convRule: rule13 },
  { start: 4256, length: 38, convRule: rule125 },
  { start: 4295, length: 1, convRule: rule125 },
  { start: 4301, length: 1, convRule: rule125 },
  { start: 4304, length: 43, convRule: rule126 },
  { start: 4347, length: 1, convRule: rule2 },
  { start: 4348, length: 1, convRule: rule91 },
  { start: 4349, length: 3, convRule: rule126 },
  { start: 4352, length: 329, convRule: rule14 },
  { start: 4682, length: 4, convRule: rule14 },
  { start: 4688, length: 7, convRule: rule14 },
  { start: 4696, length: 1, convRule: rule14 },
  { start: 4698, length: 4, convRule: rule14 },
  { start: 4704, length: 41, convRule: rule14 },
  { start: 4746, length: 4, convRule: rule14 },
  { start: 4752, length: 33, convRule: rule14 },
  { start: 4786, length: 4, convRule: rule14 },
  { start: 4792, length: 7, convRule: rule14 },
  { start: 4800, length: 1, convRule: rule14 },
  { start: 4802, length: 4, convRule: rule14 },
  { start: 4808, length: 15, convRule: rule14 },
  { start: 4824, length: 57, convRule: rule14 },
  { start: 4882, length: 4, convRule: rule14 },
  { start: 4888, length: 67, convRule: rule14 },
  { start: 4957, length: 3, convRule: rule92 },
  { start: 4960, length: 9, convRule: rule2 },
  { start: 4969, length: 20, convRule: rule17 },
  { start: 4992, length: 16, convRule: rule14 },
  { start: 5008, length: 10, convRule: rule13 },
  { start: 5024, length: 80, convRule: rule127 },
  { start: 5104, length: 6, convRule: rule104 },
  { start: 5112, length: 6, convRule: rule110 },
  { start: 5120, length: 1, convRule: rule7 },
  { start: 5121, length: 620, convRule: rule14 },
  { start: 5741, length: 1, convRule: rule13 },
  { start: 5742, length: 1, convRule: rule2 },
  { start: 5743, length: 17, convRule: rule14 },
  { start: 5760, length: 1, convRule: rule1 },
  { start: 5761, length: 26, convRule: rule14 },
  { start: 5787, length: 1, convRule: rule4 },
  { start: 5788, length: 1, convRule: rule5 },
  { start: 5792, length: 75, convRule: rule14 },
  { start: 5867, length: 3, convRule: rule2 },
  { start: 5870, length: 3, convRule: rule128 },
  { start: 5873, length: 8, convRule: rule14 },
  { start: 5888, length: 13, convRule: rule14 },
  { start: 5902, length: 4, convRule: rule14 },
  { start: 5906, length: 3, convRule: rule92 },
  { start: 5920, length: 18, convRule: rule14 },
  { start: 5938, length: 3, convRule: rule92 },
  { start: 5941, length: 2, convRule: rule2 },
  { start: 5952, length: 18, convRule: rule14 },
  { start: 5970, length: 2, convRule: rule92 },
  { start: 5984, length: 13, convRule: rule14 },
  { start: 5998, length: 3, convRule: rule14 },
  { start: 6002, length: 2, convRule: rule92 },
  { start: 6016, length: 52, convRule: rule14 },
  { start: 6068, length: 2, convRule: rule92 },
  { start: 6070, length: 1, convRule: rule124 },
  { start: 6071, length: 7, convRule: rule92 },
  { start: 6078, length: 8, convRule: rule124 },
  { start: 6086, length: 1, convRule: rule92 },
  { start: 6087, length: 2, convRule: rule124 },
  { start: 6089, length: 11, convRule: rule92 },
  { start: 6100, length: 3, convRule: rule2 },
  { start: 6103, length: 1, convRule: rule91 },
  { start: 6104, length: 3, convRule: rule2 },
  { start: 6107, length: 1, convRule: rule3 },
  { start: 6108, length: 1, convRule: rule14 },
  { start: 6109, length: 1, convRule: rule92 },
  { start: 6112, length: 10, convRule: rule8 },
  { start: 6128, length: 10, convRule: rule17 },
  { start: 6144, length: 6, convRule: rule2 },
  { start: 6150, length: 1, convRule: rule7 },
  { start: 6151, length: 4, convRule: rule2 },
  { start: 6155, length: 3, convRule: rule92 },
  { start: 6158, length: 1, convRule: rule16 },
  { start: 6160, length: 10, convRule: rule8 },
  { start: 6176, length: 35, convRule: rule14 },
  { start: 6211, length: 1, convRule: rule91 },
  { start: 6212, length: 53, convRule: rule14 },
  { start: 6272, length: 5, convRule: rule14 },
  { start: 6277, length: 2, convRule: rule92 },
  { start: 6279, length: 34, convRule: rule14 },
  { start: 6313, length: 1, convRule: rule92 },
  { start: 6314, length: 1, convRule: rule14 },
  { start: 6320, length: 70, convRule: rule14 },
  { start: 6400, length: 31, convRule: rule14 },
  { start: 6432, length: 3, convRule: rule92 },
  { start: 6435, length: 4, convRule: rule124 },
  { start: 6439, length: 2, convRule: rule92 },
  { start: 6441, length: 3, convRule: rule124 },
  { start: 6448, length: 2, convRule: rule124 },
  { start: 6450, length: 1, convRule: rule92 },
  { start: 6451, length: 6, convRule: rule124 },
  { start: 6457, length: 3, convRule: rule92 },
  { start: 6464, length: 1, convRule: rule13 },
  { start: 6468, length: 2, convRule: rule2 },
  { start: 6470, length: 10, convRule: rule8 },
  { start: 6480, length: 30, convRule: rule14 },
  { start: 6512, length: 5, convRule: rule14 },
  { start: 6528, length: 44, convRule: rule14 },
  { start: 6576, length: 26, convRule: rule14 },
  { start: 6608, length: 10, convRule: rule8 },
  { start: 6618, length: 1, convRule: rule17 },
  { start: 6622, length: 34, convRule: rule13 },
  { start: 6656, length: 23, convRule: rule14 },
  { start: 6679, length: 2, convRule: rule92 },
  { start: 6681, length: 2, convRule: rule124 },
  { start: 6683, length: 1, convRule: rule92 },
  { start: 6686, length: 2, convRule: rule2 },
  { start: 6688, length: 53, convRule: rule14 },
  { start: 6741, length: 1, convRule: rule124 },
  { start: 6742, length: 1, convRule: rule92 },
  { start: 6743, length: 1, convRule: rule124 },
  { start: 6744, length: 7, convRule: rule92 },
  { start: 6752, length: 1, convRule: rule92 },
  { start: 6753, length: 1, convRule: rule124 },
  { start: 6754, length: 1, convRule: rule92 },
  { start: 6755, length: 2, convRule: rule124 },
  { start: 6757, length: 8, convRule: rule92 },
  { start: 6765, length: 6, convRule: rule124 },
  { start: 6771, length: 10, convRule: rule92 },
  { start: 6783, length: 1, convRule: rule92 },
  { start: 6784, length: 10, convRule: rule8 },
  { start: 6800, length: 10, convRule: rule8 },
  { start: 6816, length: 7, convRule: rule2 },
  { start: 6823, length: 1, convRule: rule91 },
  { start: 6824, length: 6, convRule: rule2 },
  { start: 6832, length: 14, convRule: rule92 },
  { start: 6846, length: 1, convRule: rule119 },
  { start: 6847, length: 2, convRule: rule92 },
  { start: 6912, length: 4, convRule: rule92 },
  { start: 6916, length: 1, convRule: rule124 },
  { start: 6917, length: 47, convRule: rule14 },
  { start: 6964, length: 1, convRule: rule92 },
  { start: 6965, length: 1, convRule: rule124 },
  { start: 6966, length: 5, convRule: rule92 },
  { start: 6971, length: 1, convRule: rule124 },
  { start: 6972, length: 1, convRule: rule92 },
  { start: 6973, length: 5, convRule: rule124 },
  { start: 6978, length: 1, convRule: rule92 },
  { start: 6979, length: 2, convRule: rule124 },
  { start: 6981, length: 7, convRule: rule14 },
  { start: 6992, length: 10, convRule: rule8 },
  { start: 7002, length: 7, convRule: rule2 },
  { start: 7009, length: 10, convRule: rule13 },
  { start: 7019, length: 9, convRule: rule92 },
  { start: 7028, length: 9, convRule: rule13 },
  { start: 7040, length: 2, convRule: rule92 },
  { start: 7042, length: 1, convRule: rule124 },
  { start: 7043, length: 30, convRule: rule14 },
  { start: 7073, length: 1, convRule: rule124 },
  { start: 7074, length: 4, convRule: rule92 },
  { start: 7078, length: 2, convRule: rule124 },
  { start: 7080, length: 2, convRule: rule92 },
  { start: 7082, length: 1, convRule: rule124 },
  { start: 7083, length: 3, convRule: rule92 },
  { start: 7086, length: 2, convRule: rule14 },
  { start: 7088, length: 10, convRule: rule8 },
  { start: 7098, length: 44, convRule: rule14 },
  { start: 7142, length: 1, convRule: rule92 },
  { start: 7143, length: 1, convRule: rule124 },
  { start: 7144, length: 2, convRule: rule92 },
  { start: 7146, length: 3, convRule: rule124 },
  { start: 7149, length: 1, convRule: rule92 },
  { start: 7150, length: 1, convRule: rule124 },
  { start: 7151, length: 3, convRule: rule92 },
  { start: 7154, length: 2, convRule: rule124 },
  { start: 7164, length: 4, convRule: rule2 },
  { start: 7168, length: 36, convRule: rule14 },
  { start: 7204, length: 8, convRule: rule124 },
  { start: 7212, length: 8, convRule: rule92 },
  { start: 7220, length: 2, convRule: rule124 },
  { start: 7222, length: 2, convRule: rule92 },
  { start: 7227, length: 5, convRule: rule2 },
  { start: 7232, length: 10, convRule: rule8 },
  { start: 7245, length: 3, convRule: rule14 },
  { start: 7248, length: 10, convRule: rule8 },
  { start: 7258, length: 30, convRule: rule14 },
  { start: 7288, length: 6, convRule: rule91 },
  { start: 7294, length: 2, convRule: rule2 },
  { start: 7296, length: 1, convRule: rule129 },
  { start: 7297, length: 1, convRule: rule130 },
  { start: 7298, length: 1, convRule: rule131 },
  { start: 7299, length: 2, convRule: rule132 },
  { start: 7301, length: 1, convRule: rule133 },
  { start: 7302, length: 1, convRule: rule134 },
  { start: 7303, length: 1, convRule: rule135 },
  { start: 7304, length: 1, convRule: rule136 },
  { start: 7312, length: 43, convRule: rule137 },
  { start: 7357, length: 3, convRule: rule137 },
  { start: 7360, length: 8, convRule: rule2 },
  { start: 7376, length: 3, convRule: rule92 },
  { start: 7379, length: 1, convRule: rule2 },
  { start: 7380, length: 13, convRule: rule92 },
  { start: 7393, length: 1, convRule: rule124 },
  { start: 7394, length: 7, convRule: rule92 },
  { start: 7401, length: 4, convRule: rule14 },
  { start: 7405, length: 1, convRule: rule92 },
  { start: 7406, length: 6, convRule: rule14 },
  { start: 7412, length: 1, convRule: rule92 },
  { start: 7413, length: 2, convRule: rule14 },
  { start: 7415, length: 1, convRule: rule124 },
  { start: 7416, length: 2, convRule: rule92 },
  { start: 7418, length: 1, convRule: rule14 },
  { start: 7424, length: 44, convRule: rule20 },
  { start: 7468, length: 63, convRule: rule91 },
  { start: 7531, length: 13, convRule: rule20 },
  { start: 7544, length: 1, convRule: rule91 },
  { start: 7545, length: 1, convRule: rule138 },
  { start: 7546, length: 3, convRule: rule20 },
  { start: 7549, length: 1, convRule: rule139 },
  { start: 7550, length: 16, convRule: rule20 },
  { start: 7566, length: 1, convRule: rule140 },
  { start: 7567, length: 12, convRule: rule20 },
  { start: 7579, length: 37, convRule: rule91 },
  { start: 7616, length: 58, convRule: rule92 },
  { start: 7675, length: 5, convRule: rule92 },
  { start: 7680, length: 1, convRule: rule22 },
  { start: 7681, length: 1, convRule: rule23 },
  { start: 7682, length: 1, convRule: rule22 },
  { start: 7683, length: 1, convRule: rule23 },
  { start: 7684, length: 1, convRule: rule22 },
  { start: 7685, length: 1, convRule: rule23 },
  { start: 7686, length: 1, convRule: rule22 },
  { start: 7687, length: 1, convRule: rule23 },
  { start: 7688, length: 1, convRule: rule22 },
  { start: 7689, length: 1, convRule: rule23 },
  { start: 7690, length: 1, convRule: rule22 },
  { start: 7691, length: 1, convRule: rule23 },
  { start: 7692, length: 1, convRule: rule22 },
  { start: 7693, length: 1, convRule: rule23 },
  { start: 7694, length: 1, convRule: rule22 },
  { start: 7695, length: 1, convRule: rule23 },
  { start: 7696, length: 1, convRule: rule22 },
  { start: 7697, length: 1, convRule: rule23 },
  { start: 7698, length: 1, convRule: rule22 },
  { start: 7699, length: 1, convRule: rule23 },
  { start: 7700, length: 1, convRule: rule22 },
  { start: 7701, length: 1, convRule: rule23 },
  { start: 7702, length: 1, convRule: rule22 },
  { start: 7703, length: 1, convRule: rule23 },
  { start: 7704, length: 1, convRule: rule22 },
  { start: 7705, length: 1, convRule: rule23 },
  { start: 7706, length: 1, convRule: rule22 },
  { start: 7707, length: 1, convRule: rule23 },
  { start: 7708, length: 1, convRule: rule22 },
  { start: 7709, length: 1, convRule: rule23 },
  { start: 7710, length: 1, convRule: rule22 },
  { start: 7711, length: 1, convRule: rule23 },
  { start: 7712, length: 1, convRule: rule22 },
  { start: 7713, length: 1, convRule: rule23 },
  { start: 7714, length: 1, convRule: rule22 },
  { start: 7715, length: 1, convRule: rule23 },
  { start: 7716, length: 1, convRule: rule22 },
  { start: 7717, length: 1, convRule: rule23 },
  { start: 7718, length: 1, convRule: rule22 },
  { start: 7719, length: 1, convRule: rule23 },
  { start: 7720, length: 1, convRule: rule22 },
  { start: 7721, length: 1, convRule: rule23 },
  { start: 7722, length: 1, convRule: rule22 },
  { start: 7723, length: 1, convRule: rule23 },
  { start: 7724, length: 1, convRule: rule22 },
  { start: 7725, length: 1, convRule: rule23 },
  { start: 7726, length: 1, convRule: rule22 },
  { start: 7727, length: 1, convRule: rule23 },
  { start: 7728, length: 1, convRule: rule22 },
  { start: 7729, length: 1, convRule: rule23 },
  { start: 7730, length: 1, convRule: rule22 },
  { start: 7731, length: 1, convRule: rule23 },
  { start: 7732, length: 1, convRule: rule22 },
  { start: 7733, length: 1, convRule: rule23 },
  { start: 7734, length: 1, convRule: rule22 },
  { start: 7735, length: 1, convRule: rule23 },
  { start: 7736, length: 1, convRule: rule22 },
  { start: 7737, length: 1, convRule: rule23 },
  { start: 7738, length: 1, convRule: rule22 },
  { start: 7739, length: 1, convRule: rule23 },
  { start: 7740, length: 1, convRule: rule22 },
  { start: 7741, length: 1, convRule: rule23 },
  { start: 7742, length: 1, convRule: rule22 },
  { start: 7743, length: 1, convRule: rule23 },
  { start: 7744, length: 1, convRule: rule22 },
  { start: 7745, length: 1, convRule: rule23 },
  { start: 7746, length: 1, convRule: rule22 },
  { start: 7747, length: 1, convRule: rule23 },
  { start: 7748, length: 1, convRule: rule22 },
  { start: 7749, length: 1, convRule: rule23 },
  { start: 7750, length: 1, convRule: rule22 },
  { start: 7751, length: 1, convRule: rule23 },
  { start: 7752, length: 1, convRule: rule22 },
  { start: 7753, length: 1, convRule: rule23 },
  { start: 7754, length: 1, convRule: rule22 },
  { start: 7755, length: 1, convRule: rule23 },
  { start: 7756, length: 1, convRule: rule22 },
  { start: 7757, length: 1, convRule: rule23 },
  { start: 7758, length: 1, convRule: rule22 },
  { start: 7759, length: 1, convRule: rule23 },
  { start: 7760, length: 1, convRule: rule22 },
  { start: 7761, length: 1, convRule: rule23 },
  { start: 7762, length: 1, convRule: rule22 },
  { start: 7763, length: 1, convRule: rule23 },
  { start: 7764, length: 1, convRule: rule22 },
  { start: 7765, length: 1, convRule: rule23 },
  { start: 7766, length: 1, convRule: rule22 },
  { start: 7767, length: 1, convRule: rule23 },
  { start: 7768, length: 1, convRule: rule22 },
  { start: 7769, length: 1, convRule: rule23 },
  { start: 7770, length: 1, convRule: rule22 },
  { start: 7771, length: 1, convRule: rule23 },
  { start: 7772, length: 1, convRule: rule22 },
  { start: 7773, length: 1, convRule: rule23 },
  { start: 7774, length: 1, convRule: rule22 },
  { start: 7775, length: 1, convRule: rule23 },
  { start: 7776, length: 1, convRule: rule22 },
  { start: 7777, length: 1, convRule: rule23 },
  { start: 7778, length: 1, convRule: rule22 },
  { start: 7779, length: 1, convRule: rule23 },
  { start: 7780, length: 1, convRule: rule22 },
  { start: 7781, length: 1, convRule: rule23 },
  { start: 7782, length: 1, convRule: rule22 },
  { start: 7783, length: 1, convRule: rule23 },
  { start: 7784, length: 1, convRule: rule22 },
  { start: 7785, length: 1, convRule: rule23 },
  { start: 7786, length: 1, convRule: rule22 },
  { start: 7787, length: 1, convRule: rule23 },
  { start: 7788, length: 1, convRule: rule22 },
  { start: 7789, length: 1, convRule: rule23 },
  { start: 7790, length: 1, convRule: rule22 },
  { start: 7791, length: 1, convRule: rule23 },
  { start: 7792, length: 1, convRule: rule22 },
  { start: 7793, length: 1, convRule: rule23 },
  { start: 7794, length: 1, convRule: rule22 },
  { start: 7795, length: 1, convRule: rule23 },
  { start: 7796, length: 1, convRule: rule22 },
  { start: 7797, length: 1, convRule: rule23 },
  { start: 7798, length: 1, convRule: rule22 },
  { start: 7799, length: 1, convRule: rule23 },
  { start: 7800, length: 1, convRule: rule22 },
  { start: 7801, length: 1, convRule: rule23 },
  { start: 7802, length: 1, convRule: rule22 },
  { start: 7803, length: 1, convRule: rule23 },
  { start: 7804, length: 1, convRule: rule22 },
  { start: 7805, length: 1, convRule: rule23 },
  { start: 7806, length: 1, convRule: rule22 },
  { start: 7807, length: 1, convRule: rule23 },
  { start: 7808, length: 1, convRule: rule22 },
  { start: 7809, length: 1, convRule: rule23 },
  { start: 7810, length: 1, convRule: rule22 },
  { start: 7811, length: 1, convRule: rule23 },
  { start: 7812, length: 1, convRule: rule22 },
  { start: 7813, length: 1, convRule: rule23 },
  { start: 7814, length: 1, convRule: rule22 },
  { start: 7815, length: 1, convRule: rule23 },
  { start: 7816, length: 1, convRule: rule22 },
  { start: 7817, length: 1, convRule: rule23 },
  { start: 7818, length: 1, convRule: rule22 },
  { start: 7819, length: 1, convRule: rule23 },
  { start: 7820, length: 1, convRule: rule22 },
  { start: 7821, length: 1, convRule: rule23 },
  { start: 7822, length: 1, convRule: rule22 },
  { start: 7823, length: 1, convRule: rule23 },
  { start: 7824, length: 1, convRule: rule22 },
  { start: 7825, length: 1, convRule: rule23 },
  { start: 7826, length: 1, convRule: rule22 },
  { start: 7827, length: 1, convRule: rule23 },
  { start: 7828, length: 1, convRule: rule22 },
  { start: 7829, length: 1, convRule: rule23 },
  { start: 7830, length: 5, convRule: rule20 },
  { start: 7835, length: 1, convRule: rule141 },
  { start: 7836, length: 2, convRule: rule20 },
  { start: 7838, length: 1, convRule: rule142 },
  { start: 7839, length: 1, convRule: rule20 },
  { start: 7840, length: 1, convRule: rule22 },
  { start: 7841, length: 1, convRule: rule23 },
  { start: 7842, length: 1, convRule: rule22 },
  { start: 7843, length: 1, convRule: rule23 },
  { start: 7844, length: 1, convRule: rule22 },
  { start: 7845, length: 1, convRule: rule23 },
  { start: 7846, length: 1, convRule: rule22 },
  { start: 7847, length: 1, convRule: rule23 },
  { start: 7848, length: 1, convRule: rule22 },
  { start: 7849, length: 1, convRule: rule23 },
  { start: 7850, length: 1, convRule: rule22 },
  { start: 7851, length: 1, convRule: rule23 },
  { start: 7852, length: 1, convRule: rule22 },
  { start: 7853, length: 1, convRule: rule23 },
  { start: 7854, length: 1, convRule: rule22 },
  { start: 7855, length: 1, convRule: rule23 },
  { start: 7856, length: 1, convRule: rule22 },
  { start: 7857, length: 1, convRule: rule23 },
  { start: 7858, length: 1, convRule: rule22 },
  { start: 7859, length: 1, convRule: rule23 },
  { start: 7860, length: 1, convRule: rule22 },
  { start: 7861, length: 1, convRule: rule23 },
  { start: 7862, length: 1, convRule: rule22 },
  { start: 7863, length: 1, convRule: rule23 },
  { start: 7864, length: 1, convRule: rule22 },
  { start: 7865, length: 1, convRule: rule23 },
  { start: 7866, length: 1, convRule: rule22 },
  { start: 7867, length: 1, convRule: rule23 },
  { start: 7868, length: 1, convRule: rule22 },
  { start: 7869, length: 1, convRule: rule23 },
  { start: 7870, length: 1, convRule: rule22 },
  { start: 7871, length: 1, convRule: rule23 },
  { start: 7872, length: 1, convRule: rule22 },
  { start: 7873, length: 1, convRule: rule23 },
  { start: 7874, length: 1, convRule: rule22 },
  { start: 7875, length: 1, convRule: rule23 },
  { start: 7876, length: 1, convRule: rule22 },
  { start: 7877, length: 1, convRule: rule23 },
  { start: 7878, length: 1, convRule: rule22 },
  { start: 7879, length: 1, convRule: rule23 },
  { start: 7880, length: 1, convRule: rule22 },
  { start: 7881, length: 1, convRule: rule23 },
  { start: 7882, length: 1, convRule: rule22 },
  { start: 7883, length: 1, convRule: rule23 },
  { start: 7884, length: 1, convRule: rule22 },
  { start: 7885, length: 1, convRule: rule23 },
  { start: 7886, length: 1, convRule: rule22 },
  { start: 7887, length: 1, convRule: rule23 },
  { start: 7888, length: 1, convRule: rule22 },
  { start: 7889, length: 1, convRule: rule23 },
  { start: 7890, length: 1, convRule: rule22 },
  { start: 7891, length: 1, convRule: rule23 },
  { start: 7892, length: 1, convRule: rule22 },
  { start: 7893, length: 1, convRule: rule23 },
  { start: 7894, length: 1, convRule: rule22 },
  { start: 7895, length: 1, convRule: rule23 },
  { start: 7896, length: 1, convRule: rule22 },
  { start: 7897, length: 1, convRule: rule23 },
  { start: 7898, length: 1, convRule: rule22 },
  { start: 7899, length: 1, convRule: rule23 },
  { start: 7900, length: 1, convRule: rule22 },
  { start: 7901, length: 1, convRule: rule23 },
  { start: 7902, length: 1, convRule: rule22 },
  { start: 7903, length: 1, convRule: rule23 },
  { start: 7904, length: 1, convRule: rule22 },
  { start: 7905, length: 1, convRule: rule23 },
  { start: 7906, length: 1, convRule: rule22 },
  { start: 7907, length: 1, convRule: rule23 },
  { start: 7908, length: 1, convRule: rule22 },
  { start: 7909, length: 1, convRule: rule23 },
  { start: 7910, length: 1, convRule: rule22 },
  { start: 7911, length: 1, convRule: rule23 },
  { start: 7912, length: 1, convRule: rule22 },
  { start: 7913, length: 1, convRule: rule23 },
  { start: 7914, length: 1, convRule: rule22 },
  { start: 7915, length: 1, convRule: rule23 },
  { start: 7916, length: 1, convRule: rule22 },
  { start: 7917, length: 1, convRule: rule23 },
  { start: 7918, length: 1, convRule: rule22 },
  { start: 7919, length: 1, convRule: rule23 },
  { start: 7920, length: 1, convRule: rule22 },
  { start: 7921, length: 1, convRule: rule23 },
  { start: 7922, length: 1, convRule: rule22 },
  { start: 7923, length: 1, convRule: rule23 },
  { start: 7924, length: 1, convRule: rule22 },
  { start: 7925, length: 1, convRule: rule23 },
  { start: 7926, length: 1, convRule: rule22 },
  { start: 7927, length: 1, convRule: rule23 },
  { start: 7928, length: 1, convRule: rule22 },
  { start: 7929, length: 1, convRule: rule23 },
  { start: 7930, length: 1, convRule: rule22 },
  { start: 7931, length: 1, convRule: rule23 },
  { start: 7932, length: 1, convRule: rule22 },
  { start: 7933, length: 1, convRule: rule23 },
  { start: 7934, length: 1, convRule: rule22 },
  { start: 7935, length: 1, convRule: rule23 },
  { start: 7936, length: 8, convRule: rule143 },
  { start: 7944, length: 8, convRule: rule144 },
  { start: 7952, length: 6, convRule: rule143 },
  { start: 7960, length: 6, convRule: rule144 },
  { start: 7968, length: 8, convRule: rule143 },
  { start: 7976, length: 8, convRule: rule144 },
  { start: 7984, length: 8, convRule: rule143 },
  { start: 7992, length: 8, convRule: rule144 },
  { start: 8e3, length: 6, convRule: rule143 },
  { start: 8008, length: 6, convRule: rule144 },
  { start: 8016, length: 1, convRule: rule20 },
  { start: 8017, length: 1, convRule: rule143 },
  { start: 8018, length: 1, convRule: rule20 },
  { start: 8019, length: 1, convRule: rule143 },
  { start: 8020, length: 1, convRule: rule20 },
  { start: 8021, length: 1, convRule: rule143 },
  { start: 8022, length: 1, convRule: rule20 },
  { start: 8023, length: 1, convRule: rule143 },
  { start: 8025, length: 1, convRule: rule144 },
  { start: 8027, length: 1, convRule: rule144 },
  { start: 8029, length: 1, convRule: rule144 },
  { start: 8031, length: 1, convRule: rule144 },
  { start: 8032, length: 8, convRule: rule143 },
  { start: 8040, length: 8, convRule: rule144 },
  { start: 8048, length: 2, convRule: rule145 },
  { start: 8050, length: 4, convRule: rule146 },
  { start: 8054, length: 2, convRule: rule147 },
  { start: 8056, length: 2, convRule: rule148 },
  { start: 8058, length: 2, convRule: rule149 },
  { start: 8060, length: 2, convRule: rule150 },
  { start: 8064, length: 8, convRule: rule143 },
  { start: 8072, length: 8, convRule: rule151 },
  { start: 8080, length: 8, convRule: rule143 },
  { start: 8088, length: 8, convRule: rule151 },
  { start: 8096, length: 8, convRule: rule143 },
  { start: 8104, length: 8, convRule: rule151 },
  { start: 8112, length: 2, convRule: rule143 },
  { start: 8114, length: 1, convRule: rule20 },
  { start: 8115, length: 1, convRule: rule152 },
  { start: 8116, length: 1, convRule: rule20 },
  { start: 8118, length: 2, convRule: rule20 },
  { start: 8120, length: 2, convRule: rule144 },
  { start: 8122, length: 2, convRule: rule153 },
  { start: 8124, length: 1, convRule: rule154 },
  { start: 8125, length: 1, convRule: rule10 },
  { start: 8126, length: 1, convRule: rule155 },
  { start: 8127, length: 3, convRule: rule10 },
  { start: 8130, length: 1, convRule: rule20 },
  { start: 8131, length: 1, convRule: rule152 },
  { start: 8132, length: 1, convRule: rule20 },
  { start: 8134, length: 2, convRule: rule20 },
  { start: 8136, length: 4, convRule: rule156 },
  { start: 8140, length: 1, convRule: rule154 },
  { start: 8141, length: 3, convRule: rule10 },
  { start: 8144, length: 2, convRule: rule143 },
  { start: 8146, length: 2, convRule: rule20 },
  { start: 8150, length: 2, convRule: rule20 },
  { start: 8152, length: 2, convRule: rule144 },
  { start: 8154, length: 2, convRule: rule157 },
  { start: 8157, length: 3, convRule: rule10 },
  { start: 8160, length: 2, convRule: rule143 },
  { start: 8162, length: 3, convRule: rule20 },
  { start: 8165, length: 1, convRule: rule113 },
  { start: 8166, length: 2, convRule: rule20 },
  { start: 8168, length: 2, convRule: rule144 },
  { start: 8170, length: 2, convRule: rule158 },
  { start: 8172, length: 1, convRule: rule117 },
  { start: 8173, length: 3, convRule: rule10 },
  { start: 8178, length: 1, convRule: rule20 },
  { start: 8179, length: 1, convRule: rule152 },
  { start: 8180, length: 1, convRule: rule20 },
  { start: 8182, length: 2, convRule: rule20 },
  { start: 8184, length: 2, convRule: rule159 },
  { start: 8186, length: 2, convRule: rule160 },
  { start: 8188, length: 1, convRule: rule154 },
  { start: 8189, length: 2, convRule: rule10 },
  { start: 8192, length: 11, convRule: rule1 },
  { start: 8203, length: 5, convRule: rule16 },
  { start: 8208, length: 6, convRule: rule7 },
  { start: 8214, length: 2, convRule: rule2 },
  { start: 8216, length: 1, convRule: rule15 },
  { start: 8217, length: 1, convRule: rule19 },
  { start: 8218, length: 1, convRule: rule4 },
  { start: 8219, length: 2, convRule: rule15 },
  { start: 8221, length: 1, convRule: rule19 },
  { start: 8222, length: 1, convRule: rule4 },
  { start: 8223, length: 1, convRule: rule15 },
  { start: 8224, length: 8, convRule: rule2 },
  { start: 8232, length: 1, convRule: rule161 },
  { start: 8233, length: 1, convRule: rule162 },
  { start: 8234, length: 5, convRule: rule16 },
  { start: 8239, length: 1, convRule: rule1 },
  { start: 8240, length: 9, convRule: rule2 },
  { start: 8249, length: 1, convRule: rule15 },
  { start: 8250, length: 1, convRule: rule19 },
  { start: 8251, length: 4, convRule: rule2 },
  { start: 8255, length: 2, convRule: rule11 },
  { start: 8257, length: 3, convRule: rule2 },
  { start: 8260, length: 1, convRule: rule6 },
  { start: 8261, length: 1, convRule: rule4 },
  { start: 8262, length: 1, convRule: rule5 },
  { start: 8263, length: 11, convRule: rule2 },
  { start: 8274, length: 1, convRule: rule6 },
  { start: 8275, length: 1, convRule: rule2 },
  { start: 8276, length: 1, convRule: rule11 },
  { start: 8277, length: 10, convRule: rule2 },
  { start: 8287, length: 1, convRule: rule1 },
  { start: 8288, length: 5, convRule: rule16 },
  { start: 8294, length: 10, convRule: rule16 },
  { start: 8304, length: 1, convRule: rule17 },
  { start: 8305, length: 1, convRule: rule91 },
  { start: 8308, length: 6, convRule: rule17 },
  { start: 8314, length: 3, convRule: rule6 },
  { start: 8317, length: 1, convRule: rule4 },
  { start: 8318, length: 1, convRule: rule5 },
  { start: 8319, length: 1, convRule: rule91 },
  { start: 8320, length: 10, convRule: rule17 },
  { start: 8330, length: 3, convRule: rule6 },
  { start: 8333, length: 1, convRule: rule4 },
  { start: 8334, length: 1, convRule: rule5 },
  { start: 8336, length: 13, convRule: rule91 },
  { start: 8352, length: 32, convRule: rule3 },
  { start: 8400, length: 13, convRule: rule92 },
  { start: 8413, length: 4, convRule: rule119 },
  { start: 8417, length: 1, convRule: rule92 },
  { start: 8418, length: 3, convRule: rule119 },
  { start: 8421, length: 12, convRule: rule92 },
  { start: 8448, length: 2, convRule: rule13 },
  { start: 8450, length: 1, convRule: rule107 },
  { start: 8451, length: 4, convRule: rule13 },
  { start: 8455, length: 1, convRule: rule107 },
  { start: 8456, length: 2, convRule: rule13 },
  { start: 8458, length: 1, convRule: rule20 },
  { start: 8459, length: 3, convRule: rule107 },
  { start: 8462, length: 2, convRule: rule20 },
  { start: 8464, length: 3, convRule: rule107 },
  { start: 8467, length: 1, convRule: rule20 },
  { start: 8468, length: 1, convRule: rule13 },
  { start: 8469, length: 1, convRule: rule107 },
  { start: 8470, length: 2, convRule: rule13 },
  { start: 8472, length: 1, convRule: rule6 },
  { start: 8473, length: 5, convRule: rule107 },
  { start: 8478, length: 6, convRule: rule13 },
  { start: 8484, length: 1, convRule: rule107 },
  { start: 8485, length: 1, convRule: rule13 },
  { start: 8486, length: 1, convRule: rule163 },
  { start: 8487, length: 1, convRule: rule13 },
  { start: 8488, length: 1, convRule: rule107 },
  { start: 8489, length: 1, convRule: rule13 },
  { start: 8490, length: 1, convRule: rule164 },
  { start: 8491, length: 1, convRule: rule165 },
  { start: 8492, length: 2, convRule: rule107 },
  { start: 8494, length: 1, convRule: rule13 },
  { start: 8495, length: 1, convRule: rule20 },
  { start: 8496, length: 2, convRule: rule107 },
  { start: 8498, length: 1, convRule: rule166 },
  { start: 8499, length: 1, convRule: rule107 },
  { start: 8500, length: 1, convRule: rule20 },
  { start: 8501, length: 4, convRule: rule14 },
  { start: 8505, length: 1, convRule: rule20 },
  { start: 8506, length: 2, convRule: rule13 },
  { start: 8508, length: 2, convRule: rule20 },
  { start: 8510, length: 2, convRule: rule107 },
  { start: 8512, length: 5, convRule: rule6 },
  { start: 8517, length: 1, convRule: rule107 },
  { start: 8518, length: 4, convRule: rule20 },
  { start: 8522, length: 1, convRule: rule13 },
  { start: 8523, length: 1, convRule: rule6 },
  { start: 8524, length: 2, convRule: rule13 },
  { start: 8526, length: 1, convRule: rule167 },
  { start: 8527, length: 1, convRule: rule13 },
  { start: 8528, length: 16, convRule: rule17 },
  { start: 8544, length: 16, convRule: rule168 },
  { start: 8560, length: 16, convRule: rule169 },
  { start: 8576, length: 3, convRule: rule128 },
  { start: 8579, length: 1, convRule: rule22 },
  { start: 8580, length: 1, convRule: rule23 },
  { start: 8581, length: 4, convRule: rule128 },
  { start: 8585, length: 1, convRule: rule17 },
  { start: 8586, length: 2, convRule: rule13 },
  { start: 8592, length: 5, convRule: rule6 },
  { start: 8597, length: 5, convRule: rule13 },
  { start: 8602, length: 2, convRule: rule6 },
  { start: 8604, length: 4, convRule: rule13 },
  { start: 8608, length: 1, convRule: rule6 },
  { start: 8609, length: 2, convRule: rule13 },
  { start: 8611, length: 1, convRule: rule6 },
  { start: 8612, length: 2, convRule: rule13 },
  { start: 8614, length: 1, convRule: rule6 },
  { start: 8615, length: 7, convRule: rule13 },
  { start: 8622, length: 1, convRule: rule6 },
  { start: 8623, length: 31, convRule: rule13 },
  { start: 8654, length: 2, convRule: rule6 },
  { start: 8656, length: 2, convRule: rule13 },
  { start: 8658, length: 1, convRule: rule6 },
  { start: 8659, length: 1, convRule: rule13 },
  { start: 8660, length: 1, convRule: rule6 },
  { start: 8661, length: 31, convRule: rule13 },
  { start: 8692, length: 268, convRule: rule6 },
  { start: 8960, length: 8, convRule: rule13 },
  { start: 8968, length: 1, convRule: rule4 },
  { start: 8969, length: 1, convRule: rule5 },
  { start: 8970, length: 1, convRule: rule4 },
  { start: 8971, length: 1, convRule: rule5 },
  { start: 8972, length: 20, convRule: rule13 },
  { start: 8992, length: 2, convRule: rule6 },
  { start: 8994, length: 7, convRule: rule13 },
  { start: 9001, length: 1, convRule: rule4 },
  { start: 9002, length: 1, convRule: rule5 },
  { start: 9003, length: 81, convRule: rule13 },
  { start: 9084, length: 1, convRule: rule6 },
  { start: 9085, length: 30, convRule: rule13 },
  { start: 9115, length: 25, convRule: rule6 },
  { start: 9140, length: 40, convRule: rule13 },
  { start: 9180, length: 6, convRule: rule6 },
  { start: 9186, length: 69, convRule: rule13 },
  { start: 9280, length: 11, convRule: rule13 },
  { start: 9312, length: 60, convRule: rule17 },
  { start: 9372, length: 26, convRule: rule13 },
  { start: 9398, length: 26, convRule: rule170 },
  { start: 9424, length: 26, convRule: rule171 },
  { start: 9450, length: 22, convRule: rule17 },
  { start: 9472, length: 183, convRule: rule13 },
  { start: 9655, length: 1, convRule: rule6 },
  { start: 9656, length: 9, convRule: rule13 },
  { start: 9665, length: 1, convRule: rule6 },
  { start: 9666, length: 54, convRule: rule13 },
  { start: 9720, length: 8, convRule: rule6 },
  { start: 9728, length: 111, convRule: rule13 },
  { start: 9839, length: 1, convRule: rule6 },
  { start: 9840, length: 248, convRule: rule13 },
  { start: 10088, length: 1, convRule: rule4 },
  { start: 10089, length: 1, convRule: rule5 },
  { start: 10090, length: 1, convRule: rule4 },
  { start: 10091, length: 1, convRule: rule5 },
  { start: 10092, length: 1, convRule: rule4 },
  { start: 10093, length: 1, convRule: rule5 },
  { start: 10094, length: 1, convRule: rule4 },
  { start: 10095, length: 1, convRule: rule5 },
  { start: 10096, length: 1, convRule: rule4 },
  { start: 10097, length: 1, convRule: rule5 },
  { start: 10098, length: 1, convRule: rule4 },
  { start: 10099, length: 1, convRule: rule5 },
  { start: 10100, length: 1, convRule: rule4 },
  { start: 10101, length: 1, convRule: rule5 },
  { start: 10102, length: 30, convRule: rule17 },
  { start: 10132, length: 44, convRule: rule13 },
  { start: 10176, length: 5, convRule: rule6 },
  { start: 10181, length: 1, convRule: rule4 },
  { start: 10182, length: 1, convRule: rule5 },
  { start: 10183, length: 31, convRule: rule6 },
  { start: 10214, length: 1, convRule: rule4 },
  { start: 10215, length: 1, convRule: rule5 },
  { start: 10216, length: 1, convRule: rule4 },
  { start: 10217, length: 1, convRule: rule5 },
  { start: 10218, length: 1, convRule: rule4 },
  { start: 10219, length: 1, convRule: rule5 },
  { start: 10220, length: 1, convRule: rule4 },
  { start: 10221, length: 1, convRule: rule5 },
  { start: 10222, length: 1, convRule: rule4 },
  { start: 10223, length: 1, convRule: rule5 },
  { start: 10224, length: 16, convRule: rule6 },
  { start: 10240, length: 256, convRule: rule13 },
  { start: 10496, length: 131, convRule: rule6 },
  { start: 10627, length: 1, convRule: rule4 },
  { start: 10628, length: 1, convRule: rule5 },
  { start: 10629, length: 1, convRule: rule4 },
  { start: 10630, length: 1, convRule: rule5 },
  { start: 10631, length: 1, convRule: rule4 },
  { start: 10632, length: 1, convRule: rule5 },
  { start: 10633, length: 1, convRule: rule4 },
  { start: 10634, length: 1, convRule: rule5 },
  { start: 10635, length: 1, convRule: rule4 },
  { start: 10636, length: 1, convRule: rule5 },
  { start: 10637, length: 1, convRule: rule4 },
  { start: 10638, length: 1, convRule: rule5 },
  { start: 10639, length: 1, convRule: rule4 },
  { start: 10640, length: 1, convRule: rule5 },
  { start: 10641, length: 1, convRule: rule4 },
  { start: 10642, length: 1, convRule: rule5 },
  { start: 10643, length: 1, convRule: rule4 },
  { start: 10644, length: 1, convRule: rule5 },
  { start: 10645, length: 1, convRule: rule4 },
  { start: 10646, length: 1, convRule: rule5 },
  { start: 10647, length: 1, convRule: rule4 },
  { start: 10648, length: 1, convRule: rule5 },
  { start: 10649, length: 63, convRule: rule6 },
  { start: 10712, length: 1, convRule: rule4 },
  { start: 10713, length: 1, convRule: rule5 },
  { start: 10714, length: 1, convRule: rule4 },
  { start: 10715, length: 1, convRule: rule5 },
  { start: 10716, length: 32, convRule: rule6 },
  { start: 10748, length: 1, convRule: rule4 },
  { start: 10749, length: 1, convRule: rule5 },
  { start: 10750, length: 258, convRule: rule6 },
  { start: 11008, length: 48, convRule: rule13 },
  { start: 11056, length: 21, convRule: rule6 },
  { start: 11077, length: 2, convRule: rule13 },
  { start: 11079, length: 6, convRule: rule6 },
  { start: 11085, length: 39, convRule: rule13 },
  { start: 11126, length: 32, convRule: rule13 },
  { start: 11159, length: 105, convRule: rule13 },
  { start: 11264, length: 47, convRule: rule122 },
  { start: 11312, length: 47, convRule: rule123 },
  { start: 11360, length: 1, convRule: rule22 },
  { start: 11361, length: 1, convRule: rule23 },
  { start: 11362, length: 1, convRule: rule172 },
  { start: 11363, length: 1, convRule: rule173 },
  { start: 11364, length: 1, convRule: rule174 },
  { start: 11365, length: 1, convRule: rule175 },
  { start: 11366, length: 1, convRule: rule176 },
  { start: 11367, length: 1, convRule: rule22 },
  { start: 11368, length: 1, convRule: rule23 },
  { start: 11369, length: 1, convRule: rule22 },
  { start: 11370, length: 1, convRule: rule23 },
  { start: 11371, length: 1, convRule: rule22 },
  { start: 11372, length: 1, convRule: rule23 },
  { start: 11373, length: 1, convRule: rule177 },
  { start: 11374, length: 1, convRule: rule178 },
  { start: 11375, length: 1, convRule: rule179 },
  { start: 11376, length: 1, convRule: rule180 },
  { start: 11377, length: 1, convRule: rule20 },
  { start: 11378, length: 1, convRule: rule22 },
  { start: 11379, length: 1, convRule: rule23 },
  { start: 11380, length: 1, convRule: rule20 },
  { start: 11381, length: 1, convRule: rule22 },
  { start: 11382, length: 1, convRule: rule23 },
  { start: 11383, length: 5, convRule: rule20 },
  { start: 11388, length: 2, convRule: rule91 },
  { start: 11390, length: 2, convRule: rule181 },
  { start: 11392, length: 1, convRule: rule22 },
  { start: 11393, length: 1, convRule: rule23 },
  { start: 11394, length: 1, convRule: rule22 },
  { start: 11395, length: 1, convRule: rule23 },
  { start: 11396, length: 1, convRule: rule22 },
  { start: 11397, length: 1, convRule: rule23 },
  { start: 11398, length: 1, convRule: rule22 },
  { start: 11399, length: 1, convRule: rule23 },
  { start: 11400, length: 1, convRule: rule22 },
  { start: 11401, length: 1, convRule: rule23 },
  { start: 11402, length: 1, convRule: rule22 },
  { start: 11403, length: 1, convRule: rule23 },
  { start: 11404, length: 1, convRule: rule22 },
  { start: 11405, length: 1, convRule: rule23 },
  { start: 11406, length: 1, convRule: rule22 },
  { start: 11407, length: 1, convRule: rule23 },
  { start: 11408, length: 1, convRule: rule22 },
  { start: 11409, length: 1, convRule: rule23 },
  { start: 11410, length: 1, convRule: rule22 },
  { start: 11411, length: 1, convRule: rule23 },
  { start: 11412, length: 1, convRule: rule22 },
  { start: 11413, length: 1, convRule: rule23 },
  { start: 11414, length: 1, convRule: rule22 },
  { start: 11415, length: 1, convRule: rule23 },
  { start: 11416, length: 1, convRule: rule22 },
  { start: 11417, length: 1, convRule: rule23 },
  { start: 11418, length: 1, convRule: rule22 },
  { start: 11419, length: 1, convRule: rule23 },
  { start: 11420, length: 1, convRule: rule22 },
  { start: 11421, length: 1, convRule: rule23 },
  { start: 11422, length: 1, convRule: rule22 },
  { start: 11423, length: 1, convRule: rule23 },
  { start: 11424, length: 1, convRule: rule22 },
  { start: 11425, length: 1, convRule: rule23 },
  { start: 11426, length: 1, convRule: rule22 },
  { start: 11427, length: 1, convRule: rule23 },
  { start: 11428, length: 1, convRule: rule22 },
  { start: 11429, length: 1, convRule: rule23 },
  { start: 11430, length: 1, convRule: rule22 },
  { start: 11431, length: 1, convRule: rule23 },
  { start: 11432, length: 1, convRule: rule22 },
  { start: 11433, length: 1, convRule: rule23 },
  { start: 11434, length: 1, convRule: rule22 },
  { start: 11435, length: 1, convRule: rule23 },
  { start: 11436, length: 1, convRule: rule22 },
  { start: 11437, length: 1, convRule: rule23 },
  { start: 11438, length: 1, convRule: rule22 },
  { start: 11439, length: 1, convRule: rule23 },
  { start: 11440, length: 1, convRule: rule22 },
  { start: 11441, length: 1, convRule: rule23 },
  { start: 11442, length: 1, convRule: rule22 },
  { start: 11443, length: 1, convRule: rule23 },
  { start: 11444, length: 1, convRule: rule22 },
  { start: 11445, length: 1, convRule: rule23 },
  { start: 11446, length: 1, convRule: rule22 },
  { start: 11447, length: 1, convRule: rule23 },
  { start: 11448, length: 1, convRule: rule22 },
  { start: 11449, length: 1, convRule: rule23 },
  { start: 11450, length: 1, convRule: rule22 },
  { start: 11451, length: 1, convRule: rule23 },
  { start: 11452, length: 1, convRule: rule22 },
  { start: 11453, length: 1, convRule: rule23 },
  { start: 11454, length: 1, convRule: rule22 },
  { start: 11455, length: 1, convRule: rule23 },
  { start: 11456, length: 1, convRule: rule22 },
  { start: 11457, length: 1, convRule: rule23 },
  { start: 11458, length: 1, convRule: rule22 },
  { start: 11459, length: 1, convRule: rule23 },
  { start: 11460, length: 1, convRule: rule22 },
  { start: 11461, length: 1, convRule: rule23 },
  { start: 11462, length: 1, convRule: rule22 },
  { start: 11463, length: 1, convRule: rule23 },
  { start: 11464, length: 1, convRule: rule22 },
  { start: 11465, length: 1, convRule: rule23 },
  { start: 11466, length: 1, convRule: rule22 },
  { start: 11467, length: 1, convRule: rule23 },
  { start: 11468, length: 1, convRule: rule22 },
  { start: 11469, length: 1, convRule: rule23 },
  { start: 11470, length: 1, convRule: rule22 },
  { start: 11471, length: 1, convRule: rule23 },
  { start: 11472, length: 1, convRule: rule22 },
  { start: 11473, length: 1, convRule: rule23 },
  { start: 11474, length: 1, convRule: rule22 },
  { start: 11475, length: 1, convRule: rule23 },
  { start: 11476, length: 1, convRule: rule22 },
  { start: 11477, length: 1, convRule: rule23 },
  { start: 11478, length: 1, convRule: rule22 },
  { start: 11479, length: 1, convRule: rule23 },
  { start: 11480, length: 1, convRule: rule22 },
  { start: 11481, length: 1, convRule: rule23 },
  { start: 11482, length: 1, convRule: rule22 },
  { start: 11483, length: 1, convRule: rule23 },
  { start: 11484, length: 1, convRule: rule22 },
  { start: 11485, length: 1, convRule: rule23 },
  { start: 11486, length: 1, convRule: rule22 },
  { start: 11487, length: 1, convRule: rule23 },
  { start: 11488, length: 1, convRule: rule22 },
  { start: 11489, length: 1, convRule: rule23 },
  { start: 11490, length: 1, convRule: rule22 },
  { start: 11491, length: 1, convRule: rule23 },
  { start: 11492, length: 1, convRule: rule20 },
  { start: 11493, length: 6, convRule: rule13 },
  { start: 11499, length: 1, convRule: rule22 },
  { start: 11500, length: 1, convRule: rule23 },
  { start: 11501, length: 1, convRule: rule22 },
  { start: 11502, length: 1, convRule: rule23 },
  { start: 11503, length: 3, convRule: rule92 },
  { start: 11506, length: 1, convRule: rule22 },
  { start: 11507, length: 1, convRule: rule23 },
  { start: 11513, length: 4, convRule: rule2 },
  { start: 11517, length: 1, convRule: rule17 },
  { start: 11518, length: 2, convRule: rule2 },
  { start: 11520, length: 38, convRule: rule182 },
  { start: 11559, length: 1, convRule: rule182 },
  { start: 11565, length: 1, convRule: rule182 },
  { start: 11568, length: 56, convRule: rule14 },
  { start: 11631, length: 1, convRule: rule91 },
  { start: 11632, length: 1, convRule: rule2 },
  { start: 11647, length: 1, convRule: rule92 },
  { start: 11648, length: 23, convRule: rule14 },
  { start: 11680, length: 7, convRule: rule14 },
  { start: 11688, length: 7, convRule: rule14 },
  { start: 11696, length: 7, convRule: rule14 },
  { start: 11704, length: 7, convRule: rule14 },
  { start: 11712, length: 7, convRule: rule14 },
  { start: 11720, length: 7, convRule: rule14 },
  { start: 11728, length: 7, convRule: rule14 },
  { start: 11736, length: 7, convRule: rule14 },
  { start: 11744, length: 32, convRule: rule92 },
  { start: 11776, length: 2, convRule: rule2 },
  { start: 11778, length: 1, convRule: rule15 },
  { start: 11779, length: 1, convRule: rule19 },
  { start: 11780, length: 1, convRule: rule15 },
  { start: 11781, length: 1, convRule: rule19 },
  { start: 11782, length: 3, convRule: rule2 },
  { start: 11785, length: 1, convRule: rule15 },
  { start: 11786, length: 1, convRule: rule19 },
  { start: 11787, length: 1, convRule: rule2 },
  { start: 11788, length: 1, convRule: rule15 },
  { start: 11789, length: 1, convRule: rule19 },
  { start: 11790, length: 9, convRule: rule2 },
  { start: 11799, length: 1, convRule: rule7 },
  { start: 11800, length: 2, convRule: rule2 },
  { start: 11802, length: 1, convRule: rule7 },
  { start: 11803, length: 1, convRule: rule2 },
  { start: 11804, length: 1, convRule: rule15 },
  { start: 11805, length: 1, convRule: rule19 },
  { start: 11806, length: 2, convRule: rule2 },
  { start: 11808, length: 1, convRule: rule15 },
  { start: 11809, length: 1, convRule: rule19 },
  { start: 11810, length: 1, convRule: rule4 },
  { start: 11811, length: 1, convRule: rule5 },
  { start: 11812, length: 1, convRule: rule4 },
  { start: 11813, length: 1, convRule: rule5 },
  { start: 11814, length: 1, convRule: rule4 },
  { start: 11815, length: 1, convRule: rule5 },
  { start: 11816, length: 1, convRule: rule4 },
  { start: 11817, length: 1, convRule: rule5 },
  { start: 11818, length: 5, convRule: rule2 },
  { start: 11823, length: 1, convRule: rule91 },
  { start: 11824, length: 10, convRule: rule2 },
  { start: 11834, length: 2, convRule: rule7 },
  { start: 11836, length: 4, convRule: rule2 },
  { start: 11840, length: 1, convRule: rule7 },
  { start: 11841, length: 1, convRule: rule2 },
  { start: 11842, length: 1, convRule: rule4 },
  { start: 11843, length: 13, convRule: rule2 },
  { start: 11856, length: 2, convRule: rule13 },
  { start: 11858, length: 1, convRule: rule2 },
  { start: 11904, length: 26, convRule: rule13 },
  { start: 11931, length: 89, convRule: rule13 },
  { start: 12032, length: 214, convRule: rule13 },
  { start: 12272, length: 12, convRule: rule13 },
  { start: 12288, length: 1, convRule: rule1 },
  { start: 12289, length: 3, convRule: rule2 },
  { start: 12292, length: 1, convRule: rule13 },
  { start: 12293, length: 1, convRule: rule91 },
  { start: 12294, length: 1, convRule: rule14 },
  { start: 12295, length: 1, convRule: rule128 },
  { start: 12296, length: 1, convRule: rule4 },
  { start: 12297, length: 1, convRule: rule5 },
  { start: 12298, length: 1, convRule: rule4 },
  { start: 12299, length: 1, convRule: rule5 },
  { start: 12300, length: 1, convRule: rule4 },
  { start: 12301, length: 1, convRule: rule5 },
  { start: 12302, length: 1, convRule: rule4 },
  { start: 12303, length: 1, convRule: rule5 },
  { start: 12304, length: 1, convRule: rule4 },
  { start: 12305, length: 1, convRule: rule5 },
  { start: 12306, length: 2, convRule: rule13 },
  { start: 12308, length: 1, convRule: rule4 },
  { start: 12309, length: 1, convRule: rule5 },
  { start: 12310, length: 1, convRule: rule4 },
  { start: 12311, length: 1, convRule: rule5 },
  { start: 12312, length: 1, convRule: rule4 },
  { start: 12313, length: 1, convRule: rule5 },
  { start: 12314, length: 1, convRule: rule4 },
  { start: 12315, length: 1, convRule: rule5 },
  { start: 12316, length: 1, convRule: rule7 },
  { start: 12317, length: 1, convRule: rule4 },
  { start: 12318, length: 2, convRule: rule5 },
  { start: 12320, length: 1, convRule: rule13 },
  { start: 12321, length: 9, convRule: rule128 },
  { start: 12330, length: 4, convRule: rule92 },
  { start: 12334, length: 2, convRule: rule124 },
  { start: 12336, length: 1, convRule: rule7 },
  { start: 12337, length: 5, convRule: rule91 },
  { start: 12342, length: 2, convRule: rule13 },
  { start: 12344, length: 3, convRule: rule128 },
  { start: 12347, length: 1, convRule: rule91 },
  { start: 12348, length: 1, convRule: rule14 },
  { start: 12349, length: 1, convRule: rule2 },
  { start: 12350, length: 2, convRule: rule13 },
  { start: 12353, length: 86, convRule: rule14 },
  { start: 12441, length: 2, convRule: rule92 },
  { start: 12443, length: 2, convRule: rule10 },
  { start: 12445, length: 2, convRule: rule91 },
  { start: 12447, length: 1, convRule: rule14 },
  { start: 12448, length: 1, convRule: rule7 },
  { start: 12449, length: 90, convRule: rule14 },
  { start: 12539, length: 1, convRule: rule2 },
  { start: 12540, length: 3, convRule: rule91 },
  { start: 12543, length: 1, convRule: rule14 },
  { start: 12549, length: 43, convRule: rule14 },
  { start: 12593, length: 94, convRule: rule14 },
  { start: 12688, length: 2, convRule: rule13 },
  { start: 12690, length: 4, convRule: rule17 },
  { start: 12694, length: 10, convRule: rule13 },
  { start: 12704, length: 32, convRule: rule14 },
  { start: 12736, length: 36, convRule: rule13 },
  { start: 12784, length: 16, convRule: rule14 },
  { start: 12800, length: 31, convRule: rule13 },
  { start: 12832, length: 10, convRule: rule17 },
  { start: 12842, length: 30, convRule: rule13 },
  { start: 12872, length: 8, convRule: rule17 },
  { start: 12880, length: 1, convRule: rule13 },
  { start: 12881, length: 15, convRule: rule17 },
  { start: 12896, length: 32, convRule: rule13 },
  { start: 12928, length: 10, convRule: rule17 },
  { start: 12938, length: 39, convRule: rule13 },
  { start: 12977, length: 15, convRule: rule17 },
  { start: 12992, length: 320, convRule: rule13 },
  { start: 13312, length: 6592, convRule: rule14 },
  { start: 19904, length: 64, convRule: rule13 },
  { start: 19968, length: 20989, convRule: rule14 },
  { start: 40960, length: 21, convRule: rule14 },
  { start: 40981, length: 1, convRule: rule91 },
  { start: 40982, length: 1143, convRule: rule14 },
  { start: 42128, length: 55, convRule: rule13 },
  { start: 42192, length: 40, convRule: rule14 },
  { start: 42232, length: 6, convRule: rule91 },
  { start: 42238, length: 2, convRule: rule2 },
  { start: 42240, length: 268, convRule: rule14 },
  { start: 42508, length: 1, convRule: rule91 },
  { start: 42509, length: 3, convRule: rule2 },
  { start: 42512, length: 16, convRule: rule14 },
  { start: 42528, length: 10, convRule: rule8 },
  { start: 42538, length: 2, convRule: rule14 },
  { start: 42560, length: 1, convRule: rule22 },
  { start: 42561, length: 1, convRule: rule23 },
  { start: 42562, length: 1, convRule: rule22 },
  { start: 42563, length: 1, convRule: rule23 },
  { start: 42564, length: 1, convRule: rule22 },
  { start: 42565, length: 1, convRule: rule23 },
  { start: 42566, length: 1, convRule: rule22 },
  { start: 42567, length: 1, convRule: rule23 },
  { start: 42568, length: 1, convRule: rule22 },
  { start: 42569, length: 1, convRule: rule23 },
  { start: 42570, length: 1, convRule: rule22 },
  { start: 42571, length: 1, convRule: rule23 },
  { start: 42572, length: 1, convRule: rule22 },
  { start: 42573, length: 1, convRule: rule23 },
  { start: 42574, length: 1, convRule: rule22 },
  { start: 42575, length: 1, convRule: rule23 },
  { start: 42576, length: 1, convRule: rule22 },
  { start: 42577, length: 1, convRule: rule23 },
  { start: 42578, length: 1, convRule: rule22 },
  { start: 42579, length: 1, convRule: rule23 },
  { start: 42580, length: 1, convRule: rule22 },
  { start: 42581, length: 1, convRule: rule23 },
  { start: 42582, length: 1, convRule: rule22 },
  { start: 42583, length: 1, convRule: rule23 },
  { start: 42584, length: 1, convRule: rule22 },
  { start: 42585, length: 1, convRule: rule23 },
  { start: 42586, length: 1, convRule: rule22 },
  { start: 42587, length: 1, convRule: rule23 },
  { start: 42588, length: 1, convRule: rule22 },
  { start: 42589, length: 1, convRule: rule23 },
  { start: 42590, length: 1, convRule: rule22 },
  { start: 42591, length: 1, convRule: rule23 },
  { start: 42592, length: 1, convRule: rule22 },
  { start: 42593, length: 1, convRule: rule23 },
  { start: 42594, length: 1, convRule: rule22 },
  { start: 42595, length: 1, convRule: rule23 },
  { start: 42596, length: 1, convRule: rule22 },
  { start: 42597, length: 1, convRule: rule23 },
  { start: 42598, length: 1, convRule: rule22 },
  { start: 42599, length: 1, convRule: rule23 },
  { start: 42600, length: 1, convRule: rule22 },
  { start: 42601, length: 1, convRule: rule23 },
  { start: 42602, length: 1, convRule: rule22 },
  { start: 42603, length: 1, convRule: rule23 },
  { start: 42604, length: 1, convRule: rule22 },
  { start: 42605, length: 1, convRule: rule23 },
  { start: 42606, length: 1, convRule: rule14 },
  { start: 42607, length: 1, convRule: rule92 },
  { start: 42608, length: 3, convRule: rule119 },
  { start: 42611, length: 1, convRule: rule2 },
  { start: 42612, length: 10, convRule: rule92 },
  { start: 42622, length: 1, convRule: rule2 },
  { start: 42623, length: 1, convRule: rule91 },
  { start: 42624, length: 1, convRule: rule22 },
  { start: 42625, length: 1, convRule: rule23 },
  { start: 42626, length: 1, convRule: rule22 },
  { start: 42627, length: 1, convRule: rule23 },
  { start: 42628, length: 1, convRule: rule22 },
  { start: 42629, length: 1, convRule: rule23 },
  { start: 42630, length: 1, convRule: rule22 },
  { start: 42631, length: 1, convRule: rule23 },
  { start: 42632, length: 1, convRule: rule22 },
  { start: 42633, length: 1, convRule: rule23 },
  { start: 42634, length: 1, convRule: rule22 },
  { start: 42635, length: 1, convRule: rule23 },
  { start: 42636, length: 1, convRule: rule22 },
  { start: 42637, length: 1, convRule: rule23 },
  { start: 42638, length: 1, convRule: rule22 },
  { start: 42639, length: 1, convRule: rule23 },
  { start: 42640, length: 1, convRule: rule22 },
  { start: 42641, length: 1, convRule: rule23 },
  { start: 42642, length: 1, convRule: rule22 },
  { start: 42643, length: 1, convRule: rule23 },
  { start: 42644, length: 1, convRule: rule22 },
  { start: 42645, length: 1, convRule: rule23 },
  { start: 42646, length: 1, convRule: rule22 },
  { start: 42647, length: 1, convRule: rule23 },
  { start: 42648, length: 1, convRule: rule22 },
  { start: 42649, length: 1, convRule: rule23 },
  { start: 42650, length: 1, convRule: rule22 },
  { start: 42651, length: 1, convRule: rule23 },
  { start: 42652, length: 2, convRule: rule91 },
  { start: 42654, length: 2, convRule: rule92 },
  { start: 42656, length: 70, convRule: rule14 },
  { start: 42726, length: 10, convRule: rule128 },
  { start: 42736, length: 2, convRule: rule92 },
  { start: 42738, length: 6, convRule: rule2 },
  { start: 42752, length: 23, convRule: rule10 },
  { start: 42775, length: 9, convRule: rule91 },
  { start: 42784, length: 2, convRule: rule10 },
  { start: 42786, length: 1, convRule: rule22 },
  { start: 42787, length: 1, convRule: rule23 },
  { start: 42788, length: 1, convRule: rule22 },
  { start: 42789, length: 1, convRule: rule23 },
  { start: 42790, length: 1, convRule: rule22 },
  { start: 42791, length: 1, convRule: rule23 },
  { start: 42792, length: 1, convRule: rule22 },
  { start: 42793, length: 1, convRule: rule23 },
  { start: 42794, length: 1, convRule: rule22 },
  { start: 42795, length: 1, convRule: rule23 },
  { start: 42796, length: 1, convRule: rule22 },
  { start: 42797, length: 1, convRule: rule23 },
  { start: 42798, length: 1, convRule: rule22 },
  { start: 42799, length: 1, convRule: rule23 },
  { start: 42800, length: 2, convRule: rule20 },
  { start: 42802, length: 1, convRule: rule22 },
  { start: 42803, length: 1, convRule: rule23 },
  { start: 42804, length: 1, convRule: rule22 },
  { start: 42805, length: 1, convRule: rule23 },
  { start: 42806, length: 1, convRule: rule22 },
  { start: 42807, length: 1, convRule: rule23 },
  { start: 42808, length: 1, convRule: rule22 },
  { start: 42809, length: 1, convRule: rule23 },
  { start: 42810, length: 1, convRule: rule22 },
  { start: 42811, length: 1, convRule: rule23 },
  { start: 42812, length: 1, convRule: rule22 },
  { start: 42813, length: 1, convRule: rule23 },
  { start: 42814, length: 1, convRule: rule22 },
  { start: 42815, length: 1, convRule: rule23 },
  { start: 42816, length: 1, convRule: rule22 },
  { start: 42817, length: 1, convRule: rule23 },
  { start: 42818, length: 1, convRule: rule22 },
  { start: 42819, length: 1, convRule: rule23 },
  { start: 42820, length: 1, convRule: rule22 },
  { start: 42821, length: 1, convRule: rule23 },
  { start: 42822, length: 1, convRule: rule22 },
  { start: 42823, length: 1, convRule: rule23 },
  { start: 42824, length: 1, convRule: rule22 },
  { start: 42825, length: 1, convRule: rule23 },
  { start: 42826, length: 1, convRule: rule22 },
  { start: 42827, length: 1, convRule: rule23 },
  { start: 42828, length: 1, convRule: rule22 },
  { start: 42829, length: 1, convRule: rule23 },
  { start: 42830, length: 1, convRule: rule22 },
  { start: 42831, length: 1, convRule: rule23 },
  { start: 42832, length: 1, convRule: rule22 },
  { start: 42833, length: 1, convRule: rule23 },
  { start: 42834, length: 1, convRule: rule22 },
  { start: 42835, length: 1, convRule: rule23 },
  { start: 42836, length: 1, convRule: rule22 },
  { start: 42837, length: 1, convRule: rule23 },
  { start: 42838, length: 1, convRule: rule22 },
  { start: 42839, length: 1, convRule: rule23 },
  { start: 42840, length: 1, convRule: rule22 },
  { start: 42841, length: 1, convRule: rule23 },
  { start: 42842, length: 1, convRule: rule22 },
  { start: 42843, length: 1, convRule: rule23 },
  { start: 42844, length: 1, convRule: rule22 },
  { start: 42845, length: 1, convRule: rule23 },
  { start: 42846, length: 1, convRule: rule22 },
  { start: 42847, length: 1, convRule: rule23 },
  { start: 42848, length: 1, convRule: rule22 },
  { start: 42849, length: 1, convRule: rule23 },
  { start: 42850, length: 1, convRule: rule22 },
  { start: 42851, length: 1, convRule: rule23 },
  { start: 42852, length: 1, convRule: rule22 },
  { start: 42853, length: 1, convRule: rule23 },
  { start: 42854, length: 1, convRule: rule22 },
  { start: 42855, length: 1, convRule: rule23 },
  { start: 42856, length: 1, convRule: rule22 },
  { start: 42857, length: 1, convRule: rule23 },
  { start: 42858, length: 1, convRule: rule22 },
  { start: 42859, length: 1, convRule: rule23 },
  { start: 42860, length: 1, convRule: rule22 },
  { start: 42861, length: 1, convRule: rule23 },
  { start: 42862, length: 1, convRule: rule22 },
  { start: 42863, length: 1, convRule: rule23 },
  { start: 42864, length: 1, convRule: rule91 },
  { start: 42865, length: 8, convRule: rule20 },
  { start: 42873, length: 1, convRule: rule22 },
  { start: 42874, length: 1, convRule: rule23 },
  { start: 42875, length: 1, convRule: rule22 },
  { start: 42876, length: 1, convRule: rule23 },
  { start: 42877, length: 1, convRule: rule183 },
  { start: 42878, length: 1, convRule: rule22 },
  { start: 42879, length: 1, convRule: rule23 },
  { start: 42880, length: 1, convRule: rule22 },
  { start: 42881, length: 1, convRule: rule23 },
  { start: 42882, length: 1, convRule: rule22 },
  { start: 42883, length: 1, convRule: rule23 },
  { start: 42884, length: 1, convRule: rule22 },
  { start: 42885, length: 1, convRule: rule23 },
  { start: 42886, length: 1, convRule: rule22 },
  { start: 42887, length: 1, convRule: rule23 },
  { start: 42888, length: 1, convRule: rule91 },
  { start: 42889, length: 2, convRule: rule10 },
  { start: 42891, length: 1, convRule: rule22 },
  { start: 42892, length: 1, convRule: rule23 },
  { start: 42893, length: 1, convRule: rule184 },
  { start: 42894, length: 1, convRule: rule20 },
  { start: 42895, length: 1, convRule: rule14 },
  { start: 42896, length: 1, convRule: rule22 },
  { start: 42897, length: 1, convRule: rule23 },
  { start: 42898, length: 1, convRule: rule22 },
  { start: 42899, length: 1, convRule: rule23 },
  { start: 42900, length: 1, convRule: rule185 },
  { start: 42901, length: 1, convRule: rule20 },
  { start: 42902, length: 1, convRule: rule22 },
  { start: 42903, length: 1, convRule: rule23 },
  { start: 42904, length: 1, convRule: rule22 },
  { start: 42905, length: 1, convRule: rule23 },
  { start: 42906, length: 1, convRule: rule22 },
  { start: 42907, length: 1, convRule: rule23 },
  { start: 42908, length: 1, convRule: rule22 },
  { start: 42909, length: 1, convRule: rule23 },
  { start: 42910, length: 1, convRule: rule22 },
  { start: 42911, length: 1, convRule: rule23 },
  { start: 42912, length: 1, convRule: rule22 },
  { start: 42913, length: 1, convRule: rule23 },
  { start: 42914, length: 1, convRule: rule22 },
  { start: 42915, length: 1, convRule: rule23 },
  { start: 42916, length: 1, convRule: rule22 },
  { start: 42917, length: 1, convRule: rule23 },
  { start: 42918, length: 1, convRule: rule22 },
  { start: 42919, length: 1, convRule: rule23 },
  { start: 42920, length: 1, convRule: rule22 },
  { start: 42921, length: 1, convRule: rule23 },
  { start: 42922, length: 1, convRule: rule186 },
  { start: 42923, length: 1, convRule: rule187 },
  { start: 42924, length: 1, convRule: rule188 },
  { start: 42925, length: 1, convRule: rule189 },
  { start: 42926, length: 1, convRule: rule186 },
  { start: 42927, length: 1, convRule: rule20 },
  { start: 42928, length: 1, convRule: rule190 },
  { start: 42929, length: 1, convRule: rule191 },
  { start: 42930, length: 1, convRule: rule192 },
  { start: 42931, length: 1, convRule: rule193 },
  { start: 42932, length: 1, convRule: rule22 },
  { start: 42933, length: 1, convRule: rule23 },
  { start: 42934, length: 1, convRule: rule22 },
  { start: 42935, length: 1, convRule: rule23 },
  { start: 42936, length: 1, convRule: rule22 },
  { start: 42937, length: 1, convRule: rule23 },
  { start: 42938, length: 1, convRule: rule22 },
  { start: 42939, length: 1, convRule: rule23 },
  { start: 42940, length: 1, convRule: rule22 },
  { start: 42941, length: 1, convRule: rule23 },
  { start: 42942, length: 1, convRule: rule22 },
  { start: 42943, length: 1, convRule: rule23 },
  { start: 42946, length: 1, convRule: rule22 },
  { start: 42947, length: 1, convRule: rule23 },
  { start: 42948, length: 1, convRule: rule194 },
  { start: 42949, length: 1, convRule: rule195 },
  { start: 42950, length: 1, convRule: rule196 },
  { start: 42951, length: 1, convRule: rule22 },
  { start: 42952, length: 1, convRule: rule23 },
  { start: 42953, length: 1, convRule: rule22 },
  { start: 42954, length: 1, convRule: rule23 },
  { start: 42997, length: 1, convRule: rule22 },
  { start: 42998, length: 1, convRule: rule23 },
  { start: 42999, length: 1, convRule: rule14 },
  { start: 43e3, length: 2, convRule: rule91 },
  { start: 43002, length: 1, convRule: rule20 },
  { start: 43003, length: 7, convRule: rule14 },
  { start: 43010, length: 1, convRule: rule92 },
  { start: 43011, length: 3, convRule: rule14 },
  { start: 43014, length: 1, convRule: rule92 },
  { start: 43015, length: 4, convRule: rule14 },
  { start: 43019, length: 1, convRule: rule92 },
  { start: 43020, length: 23, convRule: rule14 },
  { start: 43043, length: 2, convRule: rule124 },
  { start: 43045, length: 2, convRule: rule92 },
  { start: 43047, length: 1, convRule: rule124 },
  { start: 43048, length: 4, convRule: rule13 },
  { start: 43052, length: 1, convRule: rule92 },
  { start: 43056, length: 6, convRule: rule17 },
  { start: 43062, length: 2, convRule: rule13 },
  { start: 43064, length: 1, convRule: rule3 },
  { start: 43065, length: 1, convRule: rule13 },
  { start: 43072, length: 52, convRule: rule14 },
  { start: 43124, length: 4, convRule: rule2 },
  { start: 43136, length: 2, convRule: rule124 },
  { start: 43138, length: 50, convRule: rule14 },
  { start: 43188, length: 16, convRule: rule124 },
  { start: 43204, length: 2, convRule: rule92 },
  { start: 43214, length: 2, convRule: rule2 },
  { start: 43216, length: 10, convRule: rule8 },
  { start: 43232, length: 18, convRule: rule92 },
  { start: 43250, length: 6, convRule: rule14 },
  { start: 43256, length: 3, convRule: rule2 },
  { start: 43259, length: 1, convRule: rule14 },
  { start: 43260, length: 1, convRule: rule2 },
  { start: 43261, length: 2, convRule: rule14 },
  { start: 43263, length: 1, convRule: rule92 },
  { start: 43264, length: 10, convRule: rule8 },
  { start: 43274, length: 28, convRule: rule14 },
  { start: 43302, length: 8, convRule: rule92 },
  { start: 43310, length: 2, convRule: rule2 },
  { start: 43312, length: 23, convRule: rule14 },
  { start: 43335, length: 11, convRule: rule92 },
  { start: 43346, length: 2, convRule: rule124 },
  { start: 43359, length: 1, convRule: rule2 },
  { start: 43360, length: 29, convRule: rule14 },
  { start: 43392, length: 3, convRule: rule92 },
  { start: 43395, length: 1, convRule: rule124 },
  { start: 43396, length: 47, convRule: rule14 },
  { start: 43443, length: 1, convRule: rule92 },
  { start: 43444, length: 2, convRule: rule124 },
  { start: 43446, length: 4, convRule: rule92 },
  { start: 43450, length: 2, convRule: rule124 },
  { start: 43452, length: 2, convRule: rule92 },
  { start: 43454, length: 3, convRule: rule124 },
  { start: 43457, length: 13, convRule: rule2 },
  { start: 43471, length: 1, convRule: rule91 },
  { start: 43472, length: 10, convRule: rule8 },
  { start: 43486, length: 2, convRule: rule2 },
  { start: 43488, length: 5, convRule: rule14 },
  { start: 43493, length: 1, convRule: rule92 },
  { start: 43494, length: 1, convRule: rule91 },
  { start: 43495, length: 9, convRule: rule14 },
  { start: 43504, length: 10, convRule: rule8 },
  { start: 43514, length: 5, convRule: rule14 },
  { start: 43520, length: 41, convRule: rule14 },
  { start: 43561, length: 6, convRule: rule92 },
  { start: 43567, length: 2, convRule: rule124 },
  { start: 43569, length: 2, convRule: rule92 },
  { start: 43571, length: 2, convRule: rule124 },
  { start: 43573, length: 2, convRule: rule92 },
  { start: 43584, length: 3, convRule: rule14 },
  { start: 43587, length: 1, convRule: rule92 },
  { start: 43588, length: 8, convRule: rule14 },
  { start: 43596, length: 1, convRule: rule92 },
  { start: 43597, length: 1, convRule: rule124 },
  { start: 43600, length: 10, convRule: rule8 },
  { start: 43612, length: 4, convRule: rule2 },
  { start: 43616, length: 16, convRule: rule14 },
  { start: 43632, length: 1, convRule: rule91 },
  { start: 43633, length: 6, convRule: rule14 },
  { start: 43639, length: 3, convRule: rule13 },
  { start: 43642, length: 1, convRule: rule14 },
  { start: 43643, length: 1, convRule: rule124 },
  { start: 43644, length: 1, convRule: rule92 },
  { start: 43645, length: 1, convRule: rule124 },
  { start: 43646, length: 50, convRule: rule14 },
  { start: 43696, length: 1, convRule: rule92 },
  { start: 43697, length: 1, convRule: rule14 },
  { start: 43698, length: 3, convRule: rule92 },
  { start: 43701, length: 2, convRule: rule14 },
  { start: 43703, length: 2, convRule: rule92 },
  { start: 43705, length: 5, convRule: rule14 },
  { start: 43710, length: 2, convRule: rule92 },
  { start: 43712, length: 1, convRule: rule14 },
  { start: 43713, length: 1, convRule: rule92 },
  { start: 43714, length: 1, convRule: rule14 },
  { start: 43739, length: 2, convRule: rule14 },
  { start: 43741, length: 1, convRule: rule91 },
  { start: 43742, length: 2, convRule: rule2 },
  { start: 43744, length: 11, convRule: rule14 },
  { start: 43755, length: 1, convRule: rule124 },
  { start: 43756, length: 2, convRule: rule92 },
  { start: 43758, length: 2, convRule: rule124 },
  { start: 43760, length: 2, convRule: rule2 },
  { start: 43762, length: 1, convRule: rule14 },
  { start: 43763, length: 2, convRule: rule91 },
  { start: 43765, length: 1, convRule: rule124 },
  { start: 43766, length: 1, convRule: rule92 },
  { start: 43777, length: 6, convRule: rule14 },
  { start: 43785, length: 6, convRule: rule14 },
  { start: 43793, length: 6, convRule: rule14 },
  { start: 43808, length: 7, convRule: rule14 },
  { start: 43816, length: 7, convRule: rule14 },
  { start: 43824, length: 35, convRule: rule20 },
  { start: 43859, length: 1, convRule: rule197 },
  { start: 43860, length: 7, convRule: rule20 },
  { start: 43867, length: 1, convRule: rule10 },
  { start: 43868, length: 4, convRule: rule91 },
  { start: 43872, length: 9, convRule: rule20 },
  { start: 43881, length: 1, convRule: rule91 },
  { start: 43882, length: 2, convRule: rule10 },
  { start: 43888, length: 80, convRule: rule198 },
  { start: 43968, length: 35, convRule: rule14 },
  { start: 44003, length: 2, convRule: rule124 },
  { start: 44005, length: 1, convRule: rule92 },
  { start: 44006, length: 2, convRule: rule124 },
  { start: 44008, length: 1, convRule: rule92 },
  { start: 44009, length: 2, convRule: rule124 },
  { start: 44011, length: 1, convRule: rule2 },
  { start: 44012, length: 1, convRule: rule124 },
  { start: 44013, length: 1, convRule: rule92 },
  { start: 44016, length: 10, convRule: rule8 },
  { start: 44032, length: 11172, convRule: rule14 },
  { start: 55216, length: 23, convRule: rule14 },
  { start: 55243, length: 49, convRule: rule14 },
  { start: 55296, length: 896, convRule: rule199 },
  { start: 56192, length: 128, convRule: rule199 },
  { start: 56320, length: 1024, convRule: rule199 },
  { start: 57344, length: 6400, convRule: rule200 },
  { start: 63744, length: 366, convRule: rule14 },
  { start: 64112, length: 106, convRule: rule14 },
  { start: 64256, length: 7, convRule: rule20 },
  { start: 64275, length: 5, convRule: rule20 },
  { start: 64285, length: 1, convRule: rule14 },
  { start: 64286, length: 1, convRule: rule92 },
  { start: 64287, length: 10, convRule: rule14 },
  { start: 64297, length: 1, convRule: rule6 },
  { start: 64298, length: 13, convRule: rule14 },
  { start: 64312, length: 5, convRule: rule14 },
  { start: 64318, length: 1, convRule: rule14 },
  { start: 64320, length: 2, convRule: rule14 },
  { start: 64323, length: 2, convRule: rule14 },
  { start: 64326, length: 108, convRule: rule14 },
  { start: 64434, length: 16, convRule: rule10 },
  { start: 64467, length: 363, convRule: rule14 },
  { start: 64830, length: 1, convRule: rule5 },
  { start: 64831, length: 1, convRule: rule4 },
  { start: 64848, length: 64, convRule: rule14 },
  { start: 64914, length: 54, convRule: rule14 },
  { start: 65008, length: 12, convRule: rule14 },
  { start: 65020, length: 1, convRule: rule3 },
  { start: 65021, length: 1, convRule: rule13 },
  { start: 65024, length: 16, convRule: rule92 },
  { start: 65040, length: 7, convRule: rule2 },
  { start: 65047, length: 1, convRule: rule4 },
  { start: 65048, length: 1, convRule: rule5 },
  { start: 65049, length: 1, convRule: rule2 },
  { start: 65056, length: 16, convRule: rule92 },
  { start: 65072, length: 1, convRule: rule2 },
  { start: 65073, length: 2, convRule: rule7 },
  { start: 65075, length: 2, convRule: rule11 },
  { start: 65077, length: 1, convRule: rule4 },
  { start: 65078, length: 1, convRule: rule5 },
  { start: 65079, length: 1, convRule: rule4 },
  { start: 65080, length: 1, convRule: rule5 },
  { start: 65081, length: 1, convRule: rule4 },
  { start: 65082, length: 1, convRule: rule5 },
  { start: 65083, length: 1, convRule: rule4 },
  { start: 65084, length: 1, convRule: rule5 },
  { start: 65085, length: 1, convRule: rule4 },
  { start: 65086, length: 1, convRule: rule5 },
  { start: 65087, length: 1, convRule: rule4 },
  { start: 65088, length: 1, convRule: rule5 },
  { start: 65089, length: 1, convRule: rule4 },
  { start: 65090, length: 1, convRule: rule5 },
  { start: 65091, length: 1, convRule: rule4 },
  { start: 65092, length: 1, convRule: rule5 },
  { start: 65093, length: 2, convRule: rule2 },
  { start: 65095, length: 1, convRule: rule4 },
  { start: 65096, length: 1, convRule: rule5 },
  { start: 65097, length: 4, convRule: rule2 },
  { start: 65101, length: 3, convRule: rule11 },
  { start: 65104, length: 3, convRule: rule2 },
  { start: 65108, length: 4, convRule: rule2 },
  { start: 65112, length: 1, convRule: rule7 },
  { start: 65113, length: 1, convRule: rule4 },
  { start: 65114, length: 1, convRule: rule5 },
  { start: 65115, length: 1, convRule: rule4 },
  { start: 65116, length: 1, convRule: rule5 },
  { start: 65117, length: 1, convRule: rule4 },
  { start: 65118, length: 1, convRule: rule5 },
  { start: 65119, length: 3, convRule: rule2 },
  { start: 65122, length: 1, convRule: rule6 },
  { start: 65123, length: 1, convRule: rule7 },
  { start: 65124, length: 3, convRule: rule6 },
  { start: 65128, length: 1, convRule: rule2 },
  { start: 65129, length: 1, convRule: rule3 },
  { start: 65130, length: 2, convRule: rule2 },
  { start: 65136, length: 5, convRule: rule14 },
  { start: 65142, length: 135, convRule: rule14 },
  { start: 65279, length: 1, convRule: rule16 },
  { start: 65281, length: 3, convRule: rule2 },
  { start: 65284, length: 1, convRule: rule3 },
  { start: 65285, length: 3, convRule: rule2 },
  { start: 65288, length: 1, convRule: rule4 },
  { start: 65289, length: 1, convRule: rule5 },
  { start: 65290, length: 1, convRule: rule2 },
  { start: 65291, length: 1, convRule: rule6 },
  { start: 65292, length: 1, convRule: rule2 },
  { start: 65293, length: 1, convRule: rule7 },
  { start: 65294, length: 2, convRule: rule2 },
  { start: 65296, length: 10, convRule: rule8 },
  { start: 65306, length: 2, convRule: rule2 },
  { start: 65308, length: 3, convRule: rule6 },
  { start: 65311, length: 2, convRule: rule2 },
  { start: 65313, length: 26, convRule: rule9 },
  { start: 65339, length: 1, convRule: rule4 },
  { start: 65340, length: 1, convRule: rule2 },
  { start: 65341, length: 1, convRule: rule5 },
  { start: 65342, length: 1, convRule: rule10 },
  { start: 65343, length: 1, convRule: rule11 },
  { start: 65344, length: 1, convRule: rule10 },
  { start: 65345, length: 26, convRule: rule12 },
  { start: 65371, length: 1, convRule: rule4 },
  { start: 65372, length: 1, convRule: rule6 },
  { start: 65373, length: 1, convRule: rule5 },
  { start: 65374, length: 1, convRule: rule6 },
  { start: 65375, length: 1, convRule: rule4 },
  { start: 65376, length: 1, convRule: rule5 },
  { start: 65377, length: 1, convRule: rule2 },
  { start: 65378, length: 1, convRule: rule4 },
  { start: 65379, length: 1, convRule: rule5 },
  { start: 65380, length: 2, convRule: rule2 },
  { start: 65382, length: 10, convRule: rule14 },
  { start: 65392, length: 1, convRule: rule91 },
  { start: 65393, length: 45, convRule: rule14 },
  { start: 65438, length: 2, convRule: rule91 },
  { start: 65440, length: 31, convRule: rule14 },
  { start: 65474, length: 6, convRule: rule14 },
  { start: 65482, length: 6, convRule: rule14 },
  { start: 65490, length: 6, convRule: rule14 },
  { start: 65498, length: 3, convRule: rule14 },
  { start: 65504, length: 2, convRule: rule3 },
  { start: 65506, length: 1, convRule: rule6 },
  { start: 65507, length: 1, convRule: rule10 },
  { start: 65508, length: 1, convRule: rule13 },
  { start: 65509, length: 2, convRule: rule3 },
  { start: 65512, length: 1, convRule: rule13 },
  { start: 65513, length: 4, convRule: rule6 },
  { start: 65517, length: 2, convRule: rule13 },
  { start: 65529, length: 3, convRule: rule16 },
  { start: 65532, length: 2, convRule: rule13 },
  { start: 65536, length: 12, convRule: rule14 },
  { start: 65549, length: 26, convRule: rule14 },
  { start: 65576, length: 19, convRule: rule14 },
  { start: 65596, length: 2, convRule: rule14 },
  { start: 65599, length: 15, convRule: rule14 },
  { start: 65616, length: 14, convRule: rule14 },
  { start: 65664, length: 123, convRule: rule14 },
  { start: 65792, length: 3, convRule: rule2 },
  { start: 65799, length: 45, convRule: rule17 },
  { start: 65847, length: 9, convRule: rule13 },
  { start: 65856, length: 53, convRule: rule128 },
  { start: 65909, length: 4, convRule: rule17 },
  { start: 65913, length: 17, convRule: rule13 },
  { start: 65930, length: 2, convRule: rule17 },
  { start: 65932, length: 3, convRule: rule13 },
  { start: 65936, length: 13, convRule: rule13 },
  { start: 65952, length: 1, convRule: rule13 },
  { start: 66e3, length: 45, convRule: rule13 },
  { start: 66045, length: 1, convRule: rule92 },
  { start: 66176, length: 29, convRule: rule14 },
  { start: 66208, length: 49, convRule: rule14 },
  { start: 66272, length: 1, convRule: rule92 },
  { start: 66273, length: 27, convRule: rule17 },
  { start: 66304, length: 32, convRule: rule14 },
  { start: 66336, length: 4, convRule: rule17 },
  { start: 66349, length: 20, convRule: rule14 },
  { start: 66369, length: 1, convRule: rule128 },
  { start: 66370, length: 8, convRule: rule14 },
  { start: 66378, length: 1, convRule: rule128 },
  { start: 66384, length: 38, convRule: rule14 },
  { start: 66422, length: 5, convRule: rule92 },
  { start: 66432, length: 30, convRule: rule14 },
  { start: 66463, length: 1, convRule: rule2 },
  { start: 66464, length: 36, convRule: rule14 },
  { start: 66504, length: 8, convRule: rule14 },
  { start: 66512, length: 1, convRule: rule2 },
  { start: 66513, length: 5, convRule: rule128 },
  { start: 66560, length: 40, convRule: rule201 },
  { start: 66600, length: 40, convRule: rule202 },
  { start: 66640, length: 78, convRule: rule14 },
  { start: 66720, length: 10, convRule: rule8 },
  { start: 66736, length: 36, convRule: rule201 },
  { start: 66776, length: 36, convRule: rule202 },
  { start: 66816, length: 40, convRule: rule14 },
  { start: 66864, length: 52, convRule: rule14 },
  { start: 66927, length: 1, convRule: rule2 },
  { start: 67072, length: 311, convRule: rule14 },
  { start: 67392, length: 22, convRule: rule14 },
  { start: 67424, length: 8, convRule: rule14 },
  { start: 67584, length: 6, convRule: rule14 },
  { start: 67592, length: 1, convRule: rule14 },
  { start: 67594, length: 44, convRule: rule14 },
  { start: 67639, length: 2, convRule: rule14 },
  { start: 67644, length: 1, convRule: rule14 },
  { start: 67647, length: 23, convRule: rule14 },
  { start: 67671, length: 1, convRule: rule2 },
  { start: 67672, length: 8, convRule: rule17 },
  { start: 67680, length: 23, convRule: rule14 },
  { start: 67703, length: 2, convRule: rule13 },
  { start: 67705, length: 7, convRule: rule17 },
  { start: 67712, length: 31, convRule: rule14 },
  { start: 67751, length: 9, convRule: rule17 },
  { start: 67808, length: 19, convRule: rule14 },
  { start: 67828, length: 2, convRule: rule14 },
  { start: 67835, length: 5, convRule: rule17 },
  { start: 67840, length: 22, convRule: rule14 },
  { start: 67862, length: 6, convRule: rule17 },
  { start: 67871, length: 1, convRule: rule2 },
  { start: 67872, length: 26, convRule: rule14 },
  { start: 67903, length: 1, convRule: rule2 },
  { start: 67968, length: 56, convRule: rule14 },
  { start: 68028, length: 2, convRule: rule17 },
  { start: 68030, length: 2, convRule: rule14 },
  { start: 68032, length: 16, convRule: rule17 },
  { start: 68050, length: 46, convRule: rule17 },
  { start: 68096, length: 1, convRule: rule14 },
  { start: 68097, length: 3, convRule: rule92 },
  { start: 68101, length: 2, convRule: rule92 },
  { start: 68108, length: 4, convRule: rule92 },
  { start: 68112, length: 4, convRule: rule14 },
  { start: 68117, length: 3, convRule: rule14 },
  { start: 68121, length: 29, convRule: rule14 },
  { start: 68152, length: 3, convRule: rule92 },
  { start: 68159, length: 1, convRule: rule92 },
  { start: 68160, length: 9, convRule: rule17 },
  { start: 68176, length: 9, convRule: rule2 },
  { start: 68192, length: 29, convRule: rule14 },
  { start: 68221, length: 2, convRule: rule17 },
  { start: 68223, length: 1, convRule: rule2 },
  { start: 68224, length: 29, convRule: rule14 },
  { start: 68253, length: 3, convRule: rule17 },
  { start: 68288, length: 8, convRule: rule14 },
  { start: 68296, length: 1, convRule: rule13 },
  { start: 68297, length: 28, convRule: rule14 },
  { start: 68325, length: 2, convRule: rule92 },
  { start: 68331, length: 5, convRule: rule17 },
  { start: 68336, length: 7, convRule: rule2 },
  { start: 68352, length: 54, convRule: rule14 },
  { start: 68409, length: 7, convRule: rule2 },
  { start: 68416, length: 22, convRule: rule14 },
  { start: 68440, length: 8, convRule: rule17 },
  { start: 68448, length: 19, convRule: rule14 },
  { start: 68472, length: 8, convRule: rule17 },
  { start: 68480, length: 18, convRule: rule14 },
  { start: 68505, length: 4, convRule: rule2 },
  { start: 68521, length: 7, convRule: rule17 },
  { start: 68608, length: 73, convRule: rule14 },
  { start: 68736, length: 51, convRule: rule97 },
  { start: 68800, length: 51, convRule: rule102 },
  { start: 68858, length: 6, convRule: rule17 },
  { start: 68864, length: 36, convRule: rule14 },
  { start: 68900, length: 4, convRule: rule92 },
  { start: 68912, length: 10, convRule: rule8 },
  { start: 69216, length: 31, convRule: rule17 },
  { start: 69248, length: 42, convRule: rule14 },
  { start: 69291, length: 2, convRule: rule92 },
  { start: 69293, length: 1, convRule: rule7 },
  { start: 69296, length: 2, convRule: rule14 },
  { start: 69376, length: 29, convRule: rule14 },
  { start: 69405, length: 10, convRule: rule17 },
  { start: 69415, length: 1, convRule: rule14 },
  { start: 69424, length: 22, convRule: rule14 },
  { start: 69446, length: 11, convRule: rule92 },
  { start: 69457, length: 4, convRule: rule17 },
  { start: 69461, length: 5, convRule: rule2 },
  { start: 69552, length: 21, convRule: rule14 },
  { start: 69573, length: 7, convRule: rule17 },
  { start: 69600, length: 23, convRule: rule14 },
  { start: 69632, length: 1, convRule: rule124 },
  { start: 69633, length: 1, convRule: rule92 },
  { start: 69634, length: 1, convRule: rule124 },
  { start: 69635, length: 53, convRule: rule14 },
  { start: 69688, length: 15, convRule: rule92 },
  { start: 69703, length: 7, convRule: rule2 },
  { start: 69714, length: 20, convRule: rule17 },
  { start: 69734, length: 10, convRule: rule8 },
  { start: 69759, length: 3, convRule: rule92 },
  { start: 69762, length: 1, convRule: rule124 },
  { start: 69763, length: 45, convRule: rule14 },
  { start: 69808, length: 3, convRule: rule124 },
  { start: 69811, length: 4, convRule: rule92 },
  { start: 69815, length: 2, convRule: rule124 },
  { start: 69817, length: 2, convRule: rule92 },
  { start: 69819, length: 2, convRule: rule2 },
  { start: 69821, length: 1, convRule: rule16 },
  { start: 69822, length: 4, convRule: rule2 },
  { start: 69837, length: 1, convRule: rule16 },
  { start: 69840, length: 25, convRule: rule14 },
  { start: 69872, length: 10, convRule: rule8 },
  { start: 69888, length: 3, convRule: rule92 },
  { start: 69891, length: 36, convRule: rule14 },
  { start: 69927, length: 5, convRule: rule92 },
  { start: 69932, length: 1, convRule: rule124 },
  { start: 69933, length: 8, convRule: rule92 },
  { start: 69942, length: 10, convRule: rule8 },
  { start: 69952, length: 4, convRule: rule2 },
  { start: 69956, length: 1, convRule: rule14 },
  { start: 69957, length: 2, convRule: rule124 },
  { start: 69959, length: 1, convRule: rule14 },
  { start: 69968, length: 35, convRule: rule14 },
  { start: 70003, length: 1, convRule: rule92 },
  { start: 70004, length: 2, convRule: rule2 },
  { start: 70006, length: 1, convRule: rule14 },
  { start: 70016, length: 2, convRule: rule92 },
  { start: 70018, length: 1, convRule: rule124 },
  { start: 70019, length: 48, convRule: rule14 },
  { start: 70067, length: 3, convRule: rule124 },
  { start: 70070, length: 9, convRule: rule92 },
  { start: 70079, length: 2, convRule: rule124 },
  { start: 70081, length: 4, convRule: rule14 },
  { start: 70085, length: 4, convRule: rule2 },
  { start: 70089, length: 4, convRule: rule92 },
  { start: 70093, length: 1, convRule: rule2 },
  { start: 70094, length: 1, convRule: rule124 },
  { start: 70095, length: 1, convRule: rule92 },
  { start: 70096, length: 10, convRule: rule8 },
  { start: 70106, length: 1, convRule: rule14 },
  { start: 70107, length: 1, convRule: rule2 },
  { start: 70108, length: 1, convRule: rule14 },
  { start: 70109, length: 3, convRule: rule2 },
  { start: 70113, length: 20, convRule: rule17 },
  { start: 70144, length: 18, convRule: rule14 },
  { start: 70163, length: 25, convRule: rule14 },
  { start: 70188, length: 3, convRule: rule124 },
  { start: 70191, length: 3, convRule: rule92 },
  { start: 70194, length: 2, convRule: rule124 },
  { start: 70196, length: 1, convRule: rule92 },
  { start: 70197, length: 1, convRule: rule124 },
  { start: 70198, length: 2, convRule: rule92 },
  { start: 70200, length: 6, convRule: rule2 },
  { start: 70206, length: 1, convRule: rule92 },
  { start: 70272, length: 7, convRule: rule14 },
  { start: 70280, length: 1, convRule: rule14 },
  { start: 70282, length: 4, convRule: rule14 },
  { start: 70287, length: 15, convRule: rule14 },
  { start: 70303, length: 10, convRule: rule14 },
  { start: 70313, length: 1, convRule: rule2 },
  { start: 70320, length: 47, convRule: rule14 },
  { start: 70367, length: 1, convRule: rule92 },
  { start: 70368, length: 3, convRule: rule124 },
  { start: 70371, length: 8, convRule: rule92 },
  { start: 70384, length: 10, convRule: rule8 },
  { start: 70400, length: 2, convRule: rule92 },
  { start: 70402, length: 2, convRule: rule124 },
  { start: 70405, length: 8, convRule: rule14 },
  { start: 70415, length: 2, convRule: rule14 },
  { start: 70419, length: 22, convRule: rule14 },
  { start: 70442, length: 7, convRule: rule14 },
  { start: 70450, length: 2, convRule: rule14 },
  { start: 70453, length: 5, convRule: rule14 },
  { start: 70459, length: 2, convRule: rule92 },
  { start: 70461, length: 1, convRule: rule14 },
  { start: 70462, length: 2, convRule: rule124 },
  { start: 70464, length: 1, convRule: rule92 },
  { start: 70465, length: 4, convRule: rule124 },
  { start: 70471, length: 2, convRule: rule124 },
  { start: 70475, length: 3, convRule: rule124 },
  { start: 70480, length: 1, convRule: rule14 },
  { start: 70487, length: 1, convRule: rule124 },
  { start: 70493, length: 5, convRule: rule14 },
  { start: 70498, length: 2, convRule: rule124 },
  { start: 70502, length: 7, convRule: rule92 },
  { start: 70512, length: 5, convRule: rule92 },
  { start: 70656, length: 53, convRule: rule14 },
  { start: 70709, length: 3, convRule: rule124 },
  { start: 70712, length: 8, convRule: rule92 },
  { start: 70720, length: 2, convRule: rule124 },
  { start: 70722, length: 3, convRule: rule92 },
  { start: 70725, length: 1, convRule: rule124 },
  { start: 70726, length: 1, convRule: rule92 },
  { start: 70727, length: 4, convRule: rule14 },
  { start: 70731, length: 5, convRule: rule2 },
  { start: 70736, length: 10, convRule: rule8 },
  { start: 70746, length: 2, convRule: rule2 },
  { start: 70749, length: 1, convRule: rule2 },
  { start: 70750, length: 1, convRule: rule92 },
  { start: 70751, length: 3, convRule: rule14 },
  { start: 70784, length: 48, convRule: rule14 },
  { start: 70832, length: 3, convRule: rule124 },
  { start: 70835, length: 6, convRule: rule92 },
  { start: 70841, length: 1, convRule: rule124 },
  { start: 70842, length: 1, convRule: rule92 },
  { start: 70843, length: 4, convRule: rule124 },
  { start: 70847, length: 2, convRule: rule92 },
  { start: 70849, length: 1, convRule: rule124 },
  { start: 70850, length: 2, convRule: rule92 },
  { start: 70852, length: 2, convRule: rule14 },
  { start: 70854, length: 1, convRule: rule2 },
  { start: 70855, length: 1, convRule: rule14 },
  { start: 70864, length: 10, convRule: rule8 },
  { start: 71040, length: 47, convRule: rule14 },
  { start: 71087, length: 3, convRule: rule124 },
  { start: 71090, length: 4, convRule: rule92 },
  { start: 71096, length: 4, convRule: rule124 },
  { start: 71100, length: 2, convRule: rule92 },
  { start: 71102, length: 1, convRule: rule124 },
  { start: 71103, length: 2, convRule: rule92 },
  { start: 71105, length: 23, convRule: rule2 },
  { start: 71128, length: 4, convRule: rule14 },
  { start: 71132, length: 2, convRule: rule92 },
  { start: 71168, length: 48, convRule: rule14 },
  { start: 71216, length: 3, convRule: rule124 },
  { start: 71219, length: 8, convRule: rule92 },
  { start: 71227, length: 2, convRule: rule124 },
  { start: 71229, length: 1, convRule: rule92 },
  { start: 71230, length: 1, convRule: rule124 },
  { start: 71231, length: 2, convRule: rule92 },
  { start: 71233, length: 3, convRule: rule2 },
  { start: 71236, length: 1, convRule: rule14 },
  { start: 71248, length: 10, convRule: rule8 },
  { start: 71264, length: 13, convRule: rule2 },
  { start: 71296, length: 43, convRule: rule14 },
  { start: 71339, length: 1, convRule: rule92 },
  { start: 71340, length: 1, convRule: rule124 },
  { start: 71341, length: 1, convRule: rule92 },
  { start: 71342, length: 2, convRule: rule124 },
  { start: 71344, length: 6, convRule: rule92 },
  { start: 71350, length: 1, convRule: rule124 },
  { start: 71351, length: 1, convRule: rule92 },
  { start: 71352, length: 1, convRule: rule14 },
  { start: 71360, length: 10, convRule: rule8 },
  { start: 71424, length: 27, convRule: rule14 },
  { start: 71453, length: 3, convRule: rule92 },
  { start: 71456, length: 2, convRule: rule124 },
  { start: 71458, length: 4, convRule: rule92 },
  { start: 71462, length: 1, convRule: rule124 },
  { start: 71463, length: 5, convRule: rule92 },
  { start: 71472, length: 10, convRule: rule8 },
  { start: 71482, length: 2, convRule: rule17 },
  { start: 71484, length: 3, convRule: rule2 },
  { start: 71487, length: 1, convRule: rule13 },
  { start: 71680, length: 44, convRule: rule14 },
  { start: 71724, length: 3, convRule: rule124 },
  { start: 71727, length: 9, convRule: rule92 },
  { start: 71736, length: 1, convRule: rule124 },
  { start: 71737, length: 2, convRule: rule92 },
  { start: 71739, length: 1, convRule: rule2 },
  { start: 71840, length: 32, convRule: rule9 },
  { start: 71872, length: 32, convRule: rule12 },
  { start: 71904, length: 10, convRule: rule8 },
  { start: 71914, length: 9, convRule: rule17 },
  { start: 71935, length: 8, convRule: rule14 },
  { start: 71945, length: 1, convRule: rule14 },
  { start: 71948, length: 8, convRule: rule14 },
  { start: 71957, length: 2, convRule: rule14 },
  { start: 71960, length: 24, convRule: rule14 },
  { start: 71984, length: 6, convRule: rule124 },
  { start: 71991, length: 2, convRule: rule124 },
  { start: 71995, length: 2, convRule: rule92 },
  { start: 71997, length: 1, convRule: rule124 },
  { start: 71998, length: 1, convRule: rule92 },
  { start: 71999, length: 1, convRule: rule14 },
  { start: 72e3, length: 1, convRule: rule124 },
  { start: 72001, length: 1, convRule: rule14 },
  { start: 72002, length: 1, convRule: rule124 },
  { start: 72003, length: 1, convRule: rule92 },
  { start: 72004, length: 3, convRule: rule2 },
  { start: 72016, length: 10, convRule: rule8 },
  { start: 72096, length: 8, convRule: rule14 },
  { start: 72106, length: 39, convRule: rule14 },
  { start: 72145, length: 3, convRule: rule124 },
  { start: 72148, length: 4, convRule: rule92 },
  { start: 72154, length: 2, convRule: rule92 },
  { start: 72156, length: 4, convRule: rule124 },
  { start: 72160, length: 1, convRule: rule92 },
  { start: 72161, length: 1, convRule: rule14 },
  { start: 72162, length: 1, convRule: rule2 },
  { start: 72163, length: 1, convRule: rule14 },
  { start: 72164, length: 1, convRule: rule124 },
  { start: 72192, length: 1, convRule: rule14 },
  { start: 72193, length: 10, convRule: rule92 },
  { start: 72203, length: 40, convRule: rule14 },
  { start: 72243, length: 6, convRule: rule92 },
  { start: 72249, length: 1, convRule: rule124 },
  { start: 72250, length: 1, convRule: rule14 },
  { start: 72251, length: 4, convRule: rule92 },
  { start: 72255, length: 8, convRule: rule2 },
  { start: 72263, length: 1, convRule: rule92 },
  { start: 72272, length: 1, convRule: rule14 },
  { start: 72273, length: 6, convRule: rule92 },
  { start: 72279, length: 2, convRule: rule124 },
  { start: 72281, length: 3, convRule: rule92 },
  { start: 72284, length: 46, convRule: rule14 },
  { start: 72330, length: 13, convRule: rule92 },
  { start: 72343, length: 1, convRule: rule124 },
  { start: 72344, length: 2, convRule: rule92 },
  { start: 72346, length: 3, convRule: rule2 },
  { start: 72349, length: 1, convRule: rule14 },
  { start: 72350, length: 5, convRule: rule2 },
  { start: 72384, length: 57, convRule: rule14 },
  { start: 72704, length: 9, convRule: rule14 },
  { start: 72714, length: 37, convRule: rule14 },
  { start: 72751, length: 1, convRule: rule124 },
  { start: 72752, length: 7, convRule: rule92 },
  { start: 72760, length: 6, convRule: rule92 },
  { start: 72766, length: 1, convRule: rule124 },
  { start: 72767, length: 1, convRule: rule92 },
  { start: 72768, length: 1, convRule: rule14 },
  { start: 72769, length: 5, convRule: rule2 },
  { start: 72784, length: 10, convRule: rule8 },
  { start: 72794, length: 19, convRule: rule17 },
  { start: 72816, length: 2, convRule: rule2 },
  { start: 72818, length: 30, convRule: rule14 },
  { start: 72850, length: 22, convRule: rule92 },
  { start: 72873, length: 1, convRule: rule124 },
  { start: 72874, length: 7, convRule: rule92 },
  { start: 72881, length: 1, convRule: rule124 },
  { start: 72882, length: 2, convRule: rule92 },
  { start: 72884, length: 1, convRule: rule124 },
  { start: 72885, length: 2, convRule: rule92 },
  { start: 72960, length: 7, convRule: rule14 },
  { start: 72968, length: 2, convRule: rule14 },
  { start: 72971, length: 38, convRule: rule14 },
  { start: 73009, length: 6, convRule: rule92 },
  { start: 73018, length: 1, convRule: rule92 },
  { start: 73020, length: 2, convRule: rule92 },
  { start: 73023, length: 7, convRule: rule92 },
  { start: 73030, length: 1, convRule: rule14 },
  { start: 73031, length: 1, convRule: rule92 },
  { start: 73040, length: 10, convRule: rule8 },
  { start: 73056, length: 6, convRule: rule14 },
  { start: 73063, length: 2, convRule: rule14 },
  { start: 73066, length: 32, convRule: rule14 },
  { start: 73098, length: 5, convRule: rule124 },
  { start: 73104, length: 2, convRule: rule92 },
  { start: 73107, length: 2, convRule: rule124 },
  { start: 73109, length: 1, convRule: rule92 },
  { start: 73110, length: 1, convRule: rule124 },
  { start: 73111, length: 1, convRule: rule92 },
  { start: 73112, length: 1, convRule: rule14 },
  { start: 73120, length: 10, convRule: rule8 },
  { start: 73440, length: 19, convRule: rule14 },
  { start: 73459, length: 2, convRule: rule92 },
  { start: 73461, length: 2, convRule: rule124 },
  { start: 73463, length: 2, convRule: rule2 },
  { start: 73648, length: 1, convRule: rule14 },
  { start: 73664, length: 21, convRule: rule17 },
  { start: 73685, length: 8, convRule: rule13 },
  { start: 73693, length: 4, convRule: rule3 },
  { start: 73697, length: 17, convRule: rule13 },
  { start: 73727, length: 1, convRule: rule2 },
  { start: 73728, length: 922, convRule: rule14 },
  { start: 74752, length: 111, convRule: rule128 },
  { start: 74864, length: 5, convRule: rule2 },
  { start: 74880, length: 196, convRule: rule14 },
  { start: 77824, length: 1071, convRule: rule14 },
  { start: 78896, length: 9, convRule: rule16 },
  { start: 82944, length: 583, convRule: rule14 },
  { start: 92160, length: 569, convRule: rule14 },
  { start: 92736, length: 31, convRule: rule14 },
  { start: 92768, length: 10, convRule: rule8 },
  { start: 92782, length: 2, convRule: rule2 },
  { start: 92880, length: 30, convRule: rule14 },
  { start: 92912, length: 5, convRule: rule92 },
  { start: 92917, length: 1, convRule: rule2 },
  { start: 92928, length: 48, convRule: rule14 },
  { start: 92976, length: 7, convRule: rule92 },
  { start: 92983, length: 5, convRule: rule2 },
  { start: 92988, length: 4, convRule: rule13 },
  { start: 92992, length: 4, convRule: rule91 },
  { start: 92996, length: 1, convRule: rule2 },
  { start: 92997, length: 1, convRule: rule13 },
  { start: 93008, length: 10, convRule: rule8 },
  { start: 93019, length: 7, convRule: rule17 },
  { start: 93027, length: 21, convRule: rule14 },
  { start: 93053, length: 19, convRule: rule14 },
  { start: 93760, length: 32, convRule: rule9 },
  { start: 93792, length: 32, convRule: rule12 },
  { start: 93824, length: 23, convRule: rule17 },
  { start: 93847, length: 4, convRule: rule2 },
  { start: 93952, length: 75, convRule: rule14 },
  { start: 94031, length: 1, convRule: rule92 },
  { start: 94032, length: 1, convRule: rule14 },
  { start: 94033, length: 55, convRule: rule124 },
  { start: 94095, length: 4, convRule: rule92 },
  { start: 94099, length: 13, convRule: rule91 },
  { start: 94176, length: 2, convRule: rule91 },
  { start: 94178, length: 1, convRule: rule2 },
  { start: 94179, length: 1, convRule: rule91 },
  { start: 94180, length: 1, convRule: rule92 },
  { start: 94192, length: 2, convRule: rule124 },
  { start: 94208, length: 6136, convRule: rule14 },
  { start: 100352, length: 1238, convRule: rule14 },
  { start: 101632, length: 9, convRule: rule14 },
  { start: 110592, length: 287, convRule: rule14 },
  { start: 110928, length: 3, convRule: rule14 },
  { start: 110948, length: 4, convRule: rule14 },
  { start: 110960, length: 396, convRule: rule14 },
  { start: 113664, length: 107, convRule: rule14 },
  { start: 113776, length: 13, convRule: rule14 },
  { start: 113792, length: 9, convRule: rule14 },
  { start: 113808, length: 10, convRule: rule14 },
  { start: 113820, length: 1, convRule: rule13 },
  { start: 113821, length: 2, convRule: rule92 },
  { start: 113823, length: 1, convRule: rule2 },
  { start: 113824, length: 4, convRule: rule16 },
  { start: 118784, length: 246, convRule: rule13 },
  { start: 119040, length: 39, convRule: rule13 },
  { start: 119081, length: 60, convRule: rule13 },
  { start: 119141, length: 2, convRule: rule124 },
  { start: 119143, length: 3, convRule: rule92 },
  { start: 119146, length: 3, convRule: rule13 },
  { start: 119149, length: 6, convRule: rule124 },
  { start: 119155, length: 8, convRule: rule16 },
  { start: 119163, length: 8, convRule: rule92 },
  { start: 119171, length: 2, convRule: rule13 },
  { start: 119173, length: 7, convRule: rule92 },
  { start: 119180, length: 30, convRule: rule13 },
  { start: 119210, length: 4, convRule: rule92 },
  { start: 119214, length: 59, convRule: rule13 },
  { start: 119296, length: 66, convRule: rule13 },
  { start: 119362, length: 3, convRule: rule92 },
  { start: 119365, length: 1, convRule: rule13 },
  { start: 119520, length: 20, convRule: rule17 },
  { start: 119552, length: 87, convRule: rule13 },
  { start: 119648, length: 25, convRule: rule17 },
  { start: 119808, length: 26, convRule: rule107 },
  { start: 119834, length: 26, convRule: rule20 },
  { start: 119860, length: 26, convRule: rule107 },
  { start: 119886, length: 7, convRule: rule20 },
  { start: 119894, length: 18, convRule: rule20 },
  { start: 119912, length: 26, convRule: rule107 },
  { start: 119938, length: 26, convRule: rule20 },
  { start: 119964, length: 1, convRule: rule107 },
  { start: 119966, length: 2, convRule: rule107 },
  { start: 119970, length: 1, convRule: rule107 },
  { start: 119973, length: 2, convRule: rule107 },
  { start: 119977, length: 4, convRule: rule107 },
  { start: 119982, length: 8, convRule: rule107 },
  { start: 119990, length: 4, convRule: rule20 },
  { start: 119995, length: 1, convRule: rule20 },
  { start: 119997, length: 7, convRule: rule20 },
  { start: 120005, length: 11, convRule: rule20 },
  { start: 120016, length: 26, convRule: rule107 },
  { start: 120042, length: 26, convRule: rule20 },
  { start: 120068, length: 2, convRule: rule107 },
  { start: 120071, length: 4, convRule: rule107 },
  { start: 120077, length: 8, convRule: rule107 },
  { start: 120086, length: 7, convRule: rule107 },
  { start: 120094, length: 26, convRule: rule20 },
  { start: 120120, length: 2, convRule: rule107 },
  { start: 120123, length: 4, convRule: rule107 },
  { start: 120128, length: 5, convRule: rule107 },
  { start: 120134, length: 1, convRule: rule107 },
  { start: 120138, length: 7, convRule: rule107 },
  { start: 120146, length: 26, convRule: rule20 },
  { start: 120172, length: 26, convRule: rule107 },
  { start: 120198, length: 26, convRule: rule20 },
  { start: 120224, length: 26, convRule: rule107 },
  { start: 120250, length: 26, convRule: rule20 },
  { start: 120276, length: 26, convRule: rule107 },
  { start: 120302, length: 26, convRule: rule20 },
  { start: 120328, length: 26, convRule: rule107 },
  { start: 120354, length: 26, convRule: rule20 },
  { start: 120380, length: 26, convRule: rule107 },
  { start: 120406, length: 26, convRule: rule20 },
  { start: 120432, length: 26, convRule: rule107 },
  { start: 120458, length: 28, convRule: rule20 },
  { start: 120488, length: 25, convRule: rule107 },
  { start: 120513, length: 1, convRule: rule6 },
  { start: 120514, length: 25, convRule: rule20 },
  { start: 120539, length: 1, convRule: rule6 },
  { start: 120540, length: 6, convRule: rule20 },
  { start: 120546, length: 25, convRule: rule107 },
  { start: 120571, length: 1, convRule: rule6 },
  { start: 120572, length: 25, convRule: rule20 },
  { start: 120597, length: 1, convRule: rule6 },
  { start: 120598, length: 6, convRule: rule20 },
  { start: 120604, length: 25, convRule: rule107 },
  { start: 120629, length: 1, convRule: rule6 },
  { start: 120630, length: 25, convRule: rule20 },
  { start: 120655, length: 1, convRule: rule6 },
  { start: 120656, length: 6, convRule: rule20 },
  { start: 120662, length: 25, convRule: rule107 },
  { start: 120687, length: 1, convRule: rule6 },
  { start: 120688, length: 25, convRule: rule20 },
  { start: 120713, length: 1, convRule: rule6 },
  { start: 120714, length: 6, convRule: rule20 },
  { start: 120720, length: 25, convRule: rule107 },
  { start: 120745, length: 1, convRule: rule6 },
  { start: 120746, length: 25, convRule: rule20 },
  { start: 120771, length: 1, convRule: rule6 },
  { start: 120772, length: 6, convRule: rule20 },
  { start: 120778, length: 1, convRule: rule107 },
  { start: 120779, length: 1, convRule: rule20 },
  { start: 120782, length: 50, convRule: rule8 },
  { start: 120832, length: 512, convRule: rule13 },
  { start: 121344, length: 55, convRule: rule92 },
  { start: 121399, length: 4, convRule: rule13 },
  { start: 121403, length: 50, convRule: rule92 },
  { start: 121453, length: 8, convRule: rule13 },
  { start: 121461, length: 1, convRule: rule92 },
  { start: 121462, length: 14, convRule: rule13 },
  { start: 121476, length: 1, convRule: rule92 },
  { start: 121477, length: 2, convRule: rule13 },
  { start: 121479, length: 5, convRule: rule2 },
  { start: 121499, length: 5, convRule: rule92 },
  { start: 121505, length: 15, convRule: rule92 },
  { start: 122880, length: 7, convRule: rule92 },
  { start: 122888, length: 17, convRule: rule92 },
  { start: 122907, length: 7, convRule: rule92 },
  { start: 122915, length: 2, convRule: rule92 },
  { start: 122918, length: 5, convRule: rule92 },
  { start: 123136, length: 45, convRule: rule14 },
  { start: 123184, length: 7, convRule: rule92 },
  { start: 123191, length: 7, convRule: rule91 },
  { start: 123200, length: 10, convRule: rule8 },
  { start: 123214, length: 1, convRule: rule14 },
  { start: 123215, length: 1, convRule: rule13 },
  { start: 123584, length: 44, convRule: rule14 },
  { start: 123628, length: 4, convRule: rule92 },
  { start: 123632, length: 10, convRule: rule8 },
  { start: 123647, length: 1, convRule: rule3 },
  { start: 124928, length: 197, convRule: rule14 },
  { start: 125127, length: 9, convRule: rule17 },
  { start: 125136, length: 7, convRule: rule92 },
  { start: 125184, length: 34, convRule: rule203 },
  { start: 125218, length: 34, convRule: rule204 },
  { start: 125252, length: 7, convRule: rule92 },
  { start: 125259, length: 1, convRule: rule91 },
  { start: 125264, length: 10, convRule: rule8 },
  { start: 125278, length: 2, convRule: rule2 },
  { start: 126065, length: 59, convRule: rule17 },
  { start: 126124, length: 1, convRule: rule13 },
  { start: 126125, length: 3, convRule: rule17 },
  { start: 126128, length: 1, convRule: rule3 },
  { start: 126129, length: 4, convRule: rule17 },
  { start: 126209, length: 45, convRule: rule17 },
  { start: 126254, length: 1, convRule: rule13 },
  { start: 126255, length: 15, convRule: rule17 },
  { start: 126464, length: 4, convRule: rule14 },
  { start: 126469, length: 27, convRule: rule14 },
  { start: 126497, length: 2, convRule: rule14 },
  { start: 126500, length: 1, convRule: rule14 },
  { start: 126503, length: 1, convRule: rule14 },
  { start: 126505, length: 10, convRule: rule14 },
  { start: 126516, length: 4, convRule: rule14 },
  { start: 126521, length: 1, convRule: rule14 },
  { start: 126523, length: 1, convRule: rule14 },
  { start: 126530, length: 1, convRule: rule14 },
  { start: 126535, length: 1, convRule: rule14 },
  { start: 126537, length: 1, convRule: rule14 },
  { start: 126539, length: 1, convRule: rule14 },
  { start: 126541, length: 3, convRule: rule14 },
  { start: 126545, length: 2, convRule: rule14 },
  { start: 126548, length: 1, convRule: rule14 },
  { start: 126551, length: 1, convRule: rule14 },
  { start: 126553, length: 1, convRule: rule14 },
  { start: 126555, length: 1, convRule: rule14 },
  { start: 126557, length: 1, convRule: rule14 },
  { start: 126559, length: 1, convRule: rule14 },
  { start: 126561, length: 2, convRule: rule14 },
  { start: 126564, length: 1, convRule: rule14 },
  { start: 126567, length: 4, convRule: rule14 },
  { start: 126572, length: 7, convRule: rule14 },
  { start: 126580, length: 4, convRule: rule14 },
  { start: 126585, length: 4, convRule: rule14 },
  { start: 126590, length: 1, convRule: rule14 },
  { start: 126592, length: 10, convRule: rule14 },
  { start: 126603, length: 17, convRule: rule14 },
  { start: 126625, length: 3, convRule: rule14 },
  { start: 126629, length: 5, convRule: rule14 },
  { start: 126635, length: 17, convRule: rule14 },
  { start: 126704, length: 2, convRule: rule6 },
  { start: 126976, length: 44, convRule: rule13 },
  { start: 127024, length: 100, convRule: rule13 },
  { start: 127136, length: 15, convRule: rule13 },
  { start: 127153, length: 15, convRule: rule13 },
  { start: 127169, length: 15, convRule: rule13 },
  { start: 127185, length: 37, convRule: rule13 },
  { start: 127232, length: 13, convRule: rule17 },
  { start: 127245, length: 161, convRule: rule13 },
  { start: 127462, length: 29, convRule: rule13 },
  { start: 127504, length: 44, convRule: rule13 },
  { start: 127552, length: 9, convRule: rule13 },
  { start: 127568, length: 2, convRule: rule13 },
  { start: 127584, length: 6, convRule: rule13 },
  { start: 127744, length: 251, convRule: rule13 },
  { start: 127995, length: 5, convRule: rule10 },
  { start: 128e3, length: 728, convRule: rule13 },
  { start: 128736, length: 13, convRule: rule13 },
  { start: 128752, length: 13, convRule: rule13 },
  { start: 128768, length: 116, convRule: rule13 },
  { start: 128896, length: 89, convRule: rule13 },
  { start: 128992, length: 12, convRule: rule13 },
  { start: 129024, length: 12, convRule: rule13 },
  { start: 129040, length: 56, convRule: rule13 },
  { start: 129104, length: 10, convRule: rule13 },
  { start: 129120, length: 40, convRule: rule13 },
  { start: 129168, length: 30, convRule: rule13 },
  { start: 129200, length: 2, convRule: rule13 },
  { start: 129280, length: 121, convRule: rule13 },
  { start: 129402, length: 82, convRule: rule13 },
  { start: 129485, length: 135, convRule: rule13 },
  { start: 129632, length: 14, convRule: rule13 },
  { start: 129648, length: 5, convRule: rule13 },
  { start: 129656, length: 3, convRule: rule13 },
  { start: 129664, length: 7, convRule: rule13 },
  { start: 129680, length: 25, convRule: rule13 },
  { start: 129712, length: 7, convRule: rule13 },
  { start: 129728, length: 3, convRule: rule13 },
  { start: 129744, length: 7, convRule: rule13 },
  { start: 129792, length: 147, convRule: rule13 },
  { start: 129940, length: 55, convRule: rule13 },
  { start: 130032, length: 10, convRule: rule8 },
  { start: 131072, length: 42718, convRule: rule14 },
  { start: 173824, length: 4149, convRule: rule14 },
  { start: 177984, length: 222, convRule: rule14 },
  { start: 178208, length: 5762, convRule: rule14 },
  { start: 183984, length: 7473, convRule: rule14 },
  { start: 194560, length: 542, convRule: rule14 },
  { start: 196608, length: 4939, convRule: rule14 },
  { start: 917505, length: 1, convRule: rule16 },
  { start: 917536, length: 96, convRule: rule16 },
  { start: 917760, length: 240, convRule: rule92 },
  { start: 983040, length: 65534, convRule: rule200 },
  { start: 1048576, length: 65534, convRule: rule200 }
];
var checkAttr = (categories) => ($$char2) => {
  const maybeConversionRule = getRule(allchars)($$char2)($$char2 < 256 ? 63 : 3396);
  if (maybeConversionRule.tag === "Nothing") {
    return false;
  }
  if (maybeConversionRule.tag === "Just") {
    const $0 = maybeConversionRule._1.category;
    const $1 = findIndexImpl(Just, Nothing, (v) => v === $0, categories);
    if ($1.tag === "Nothing") {
      return false;
    }
    if ($1.tag === "Just") {
      return true;
    }
  }
  fail();
};

// output-es/DataType/index.js
var $DataType = (_1, _2) => ({ tag: "DataType", _1, _2 });
var fromFoldable3 = /* @__PURE__ */ fromFoldable(foldableArray);
var fromFoldable1 = /* @__PURE__ */ (() => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const b = go$a0, v = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = b;
        continue;
      }
      if (v.tag === "Cons") {
        go$a0 = insert3(ordString)(v._1)()(b);
        go$a1 = v._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  const $0 = go(Leaf);
  return (x2) => $0((() => {
    const go$1 = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go$1(m$p._5, $List("Cons", m$p._3, go$1(m$p._6, z$p)));
      }
      fail();
    };
    return go$1(x2, Nil);
  })());
})();
var toUnfoldable2 = (x2) => {
  const go = (m$p, z$p) => {
    if (m$p.tag === "Leaf") {
      return z$p;
    }
    if (m$p.tag === "Node") {
      return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
    }
    fail();
  };
  const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
    let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
    while (go$1$c) {
      const source2 = go$1$a0, memo = go$1$a1;
      if (source2.tag === "Nil") {
        const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => {
          let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$c = true, go$2$r;
          while (go$2$c) {
            const b = go$2$a0, v = go$2$a1;
            if (v.tag === "Nil") {
              go$2$c = false;
              go$2$r = b;
              continue;
            }
            if (v.tag === "Cons") {
              go$2$a0 = $List("Cons", v._1, b);
              go$2$a1 = v._2;
              continue;
            }
            fail();
          }
          return go$2$r;
        };
        go$1$c = false;
        go$1$r = go$2(Nil)(memo);
        continue;
      }
      if (source2.tag === "Cons") {
        go$1$a0 = source2._2;
        go$1$a1 = $List("Cons", source2._1, memo);
        continue;
      }
      fail();
    }
    return go$1$r;
  };
  return go$1(go(x2, Nil))(Nil);
};
var show = /* @__PURE__ */ (() => showSet(showString).show)();
var DataType = (value0) => (value1) => $DataType(value0, value1);
var typeName2 = (v) => v._1;
var eqDataType = { eq: (x2) => (y2) => x2._1 === y2._1 };
var showDataType = { show: typeName2 };
var isCtrName = (str) => checkAttr([512, 524288])(toCharCode(definitely("absurd")(charAt2(0)(str))));
var showCtr = (c) => {
  if (isCtrName(c)) {
    return c;
  }
  if (":" === definitely("absurd")(charAt2(0)(c))) {
    return "(" + c + ")";
  }
  return throwException(error("absurd"))();
};
var dataType = (name3) => {
  const $0 = arrayMap((v) => $Tuple(v._1, v._2));
  const $1 = DataType(name3);
  return (x2) => $1(fromFoldable3($0(x2)));
};
var dataTypes = /* @__PURE__ */ foldrArray(Cons)(Nil)([
  /* @__PURE__ */ dataType("Bool")([/* @__PURE__ */ $Tuple("True", 0), /* @__PURE__ */ $Tuple("False", 0)]),
  /* @__PURE__ */ dataType("InfNum")([/* @__PURE__ */ $Tuple("FNum", 1), /* @__PURE__ */ $Tuple("Infty", 0)]),
  /* @__PURE__ */ dataType("List")([/* @__PURE__ */ $Tuple("Nil", 0), /* @__PURE__ */ $Tuple(":", 2)]),
  /* @__PURE__ */ dataType("Option")([/* @__PURE__ */ $Tuple("None", 0), /* @__PURE__ */ $Tuple("Some", 1)]),
  /* @__PURE__ */ dataType("Ordering")([/* @__PURE__ */ $Tuple("GT", 0), /* @__PURE__ */ $Tuple("LT", 0), /* @__PURE__ */ $Tuple("EQ", 0)]),
  /* @__PURE__ */ dataType("Pair")([/* @__PURE__ */ $Tuple("Pair", 2)]),
  /* @__PURE__ */ dataType("Tree")([/* @__PURE__ */ $Tuple("Empty", 0), /* @__PURE__ */ $Tuple("NonEmpty", 3)]),
  /* @__PURE__ */ dataType("LinePlot")([/* @__PURE__ */ $Tuple("LinePlot", 1)]),
  /* @__PURE__ */ dataType("Orientation")([/* @__PURE__ */ $Tuple("Default", 0), /* @__PURE__ */ $Tuple("Rotated", 0)]),
  /* @__PURE__ */ dataType("View")([
    /* @__PURE__ */ $Tuple("BarChart", 1),
    /* @__PURE__ */ $Tuple("LineChart", 1),
    /* @__PURE__ */ $Tuple("MultiView", 1),
    /* @__PURE__ */ $Tuple("Paragraph", 1),
    /* @__PURE__ */ $Tuple("ScatterPlot", 1)
  ]),
  /* @__PURE__ */ dataType("Point")([/* @__PURE__ */ $Tuple("Point", 2)]),
  /* @__PURE__ */ dataType("Orient")([/* @__PURE__ */ $Tuple("Horiz", 0), /* @__PURE__ */ $Tuple("Vert", 0)]),
  /* @__PURE__ */ dataType("GraphicsElement")([
    /* @__PURE__ */ $Tuple("Circle", 4),
    /* @__PURE__ */ $Tuple("Group", 1),
    /* @__PURE__ */ $Tuple("Line", 4),
    /* @__PURE__ */ $Tuple("Polyline", 3),
    /* @__PURE__ */ $Tuple("Polymarkers", 2),
    /* @__PURE__ */ $Tuple("Rect", 5),
    /* @__PURE__ */ $Tuple("String", 5),
    /* @__PURE__ */ $Tuple("Viewport", 9)
  ]),
  /* @__PURE__ */ dataType("Transform")([/* @__PURE__ */ $Tuple("Scale", 2), /* @__PURE__ */ $Tuple("Translate", 2)]),
  /* @__PURE__ */ dataType("Marker")([/* @__PURE__ */ $Tuple("Arrowhead", 0)]),
  /* @__PURE__ */ dataType("ParaFragment")([/* @__PURE__ */ $Tuple("Text", 1), /* @__PURE__ */ $Tuple("Link", 2)])
]);
var ctrToDataType = /* @__PURE__ */ (() => fromFoldable(foldableList)(bindList.bind(listMap((d) => listMap((v) => $Tuple(
  v,
  d
))(toUnfoldable2(fromFoldable1(mapObjectString.keys(d._2)))))(dataTypes))(identity14)))();
var dataTypeForCtr = {
  dataTypeFor: (dictMonadThrow) => (c) => orElse(dictMonadThrow)("Unknown constructor " + showCtr(c))(_lookup(
    Nothing,
    Just,
    c,
    ctrToDataType
  ))
};
var dataTypeForSetCtr = {
  dataTypeFor: (dictMonadThrow) => (cs) => {
    const v = toUnfoldable2(cs);
    if (v.tag === "Cons") {
      return dataTypeForCtr.dataTypeFor(dictMonadThrow)(v._1);
    }
    fail();
  }
};
var consistentWith = (dictMonadError) => {
  const MonadThrow0 = dictMonadError.MonadThrow0();
  const Bind1 = MonadThrow0.Monad0().Bind1();
  const $$void = Bind1.Apply0().Functor0().map((v) => {
  });
  const withMsg2 = withMsg(dictMonadError);
  return (cs) => (cs$p) => $$void(Bind1.bind(dataTypeForSetCtr.dataTypeFor(MonadThrow0)(cs$p))((d) => Bind1.bind(dataTypeForSetCtr.dataTypeFor(MonadThrow0)(cs$p))((d$p) => withMsg2("constructors of " + d$p._1 + " do not include " + show(map2(ordString)(showCtr)(cs)))(mayFailEq(MonadThrow0)(showDataType)(eqDataType)(d)(d$p)))));
};
var arity = (dictMonadThrow) => (c) => dictMonadThrow.Monad0().Bind1().bind(dataTypeForCtr.dataTypeFor(dictMonadThrow)(c))((v) => orElse(dictMonadThrow)("absurd")(_lookup(
  Nothing,
  Just,
  c,
  v._2
)));
var checkArity = (dictMonadError) => {
  const MonadThrow0 = dictMonadError.MonadThrow0();
  const Monad0 = MonadThrow0.Monad0();
  const $$void = Monad0.Bind1().Apply0().Functor0().map((v) => {
  });
  const withMsg2 = withMsg(dictMonadError);
  const bind2Flipped2 = bind2Flipped(Monad0);
  return (c) => (n) => $$void(withMsg2("Checking arity of " + showCtr(c))(bind2Flipped2(mayFailEq(MonadThrow0)(showInt)(eqInt))(arity(MonadThrow0)(c))(Monad0.Applicative0().pure(n))));
};

// output-es/Graph/index.js
var fromFoldable22 = /* @__PURE__ */ fromFoldable(foldableSet);
var ordTuple = (dictOrd1) => {
  const $0 = dictOrd1.Eq0();
  const eqTuple2 = { eq: (x2) => (y2) => x2._1 === y2._1 && $0.eq(x2._2)(y2._2) };
  return {
    compare: (x2) => (y2) => {
      const v = ordString.compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      return dictOrd1.compare(x2._2)(y2._2);
    },
    Eq0: () => eqTuple2
  };
};
var fromFoldable32 = /* @__PURE__ */ (() => foldableSet.foldr(Cons)(Nil))();
var Vertex = (x2) => x2;
var typeNameUnit = { typeName: (v) => "Unit" };
var eqVertex = { eq: (x2) => (y2) => x2 === y2 };
var ordVertex = { compare: (x2) => (y2) => ordString.compare(x2)(y2), Eq0: () => eqVertex };
var mempty = /* @__PURE__ */ (() => monoidSet(ordVertex).mempty)();
var map3 = /* @__PURE__ */ map2(/* @__PURE__ */ (() => {
  const eqTuple2 = { eq: (x2) => (y2) => x2._1 === y2._1 && x2._2 === y2._2 };
  return {
    compare: (x2) => (y2) => {
      const v = ordString.compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      return ordString.compare(x2._2)(y2._2);
    },
    Eq0: () => eqTuple2
  };
})());
var eqDVertex$p = { eq: (v) => (v1) => v._1 === v1._1 };
var ordDVertex$p = { compare: (v) => (v1) => ordString.compare(v._1)(v1._1), Eq0: () => eqDVertex$p };
var unions1 = /* @__PURE__ */ unions(foldableArray)(ordDVertex$p);
var member2 = /* @__PURE__ */ (() => setSet(ordDVertex$p).member)();
var verticesDict = (dictVertices) => {
  const vertices1 = dictVertices.vertices;
  return { vertices: (d) => unions1(arrayMap(vertices1)(values(d))) };
};
var showVertices = (\u03B1s) => "{" + joinWith(", ")(fromFoldableImpl(
  foldableSet.foldr,
  map2(ordString)(unsafeCoerce)(\u03B1s)
)) + "}";
var showEdgeList = (es) => joinWith("\n")([
  "digraph G {",
  ...arrayMap((v) => "   " + v)([
    "rankdir = RL",
    ...arrayMap((v) => v._1._1 + " -> {" + joinWith(", ")(fromFoldableImpl(
      foldableSet.foldr,
      map2(ordString)(unsafeCoerce)(v._2)
    )) + "}")((() => {
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const v = go$a0, v1 = go$a1;
          if (v1.tag === "Nil") {
            go$c = false;
            go$r = v;
            continue;
          }
          if (v1.tag === "Cons") {
            go$a0 = $List("Cons", v1._1, v);
            go$a1 = v1._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return fromFoldableImpl(foldableList.foldr, go(Nil)(es));
    })())
  ]),
  "}"
]);
var runQuery = (dictOrd) => {
  const mapMaybe4 = mapMaybe2(ordTuple(dictOrd));
  return (query) => (\u03B1s) => fromFoldable22(mapMaybe4((v) => {
    const $0 = query(v._2);
    if ($0.tag === "Just") {
      return $Maybe("Just", $Tuple(v._1, $0._1._2));
    }
    if ($0.tag === "Nothing") {
      return Nothing;
    }
    fail();
  })(\u03B1s));
};
var pack1 = (x2) => (k) => k(typeNameUnit)(x2);
var select\u03B1s\u{1D539}Vertex = (dictApply) => {
  const $0 = dictApply.Functor0();
  return (dictFoldable) => {
    const unions22 = unions(dictFoldable)(ordVertex);
    return {
      "select\u03B1s": (v\u{1D539}) => (v\u03B1) => unions22(dictApply.apply($0.map((v) => {
        if (v) {
          return singleton4;
        }
        return (v$1) => mempty;
      })(v\u{1D539}))(v\u03B1)),
      "select\u{1D539}s": (v\u03B1) => (\u03B1s) => $0.map((\u03B1) => member2($Tuple(\u03B1, pack1()))(\u03B1s))(v\u03B1)
    };
  };
};
var toEdgeList = (dictGraph) => (g) => {
  const $0 = (v) => {
    if (v._1.tag === "Nil") {
      return $Step("Done", v._2);
    }
    if (v._1.tag === "Cons") {
      return $Step(
        "Loop",
        $Tuple(
          v._1._2,
          $List("Cons", $Tuple($Tuple(v._1._1, dictGraph.vertexData(g)(v._1._1)), dictGraph.outN(g)(v._1._1)), v._2)
        )
      );
    }
    fail();
  };
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "Loop") {
        go$a0 = $0(v._1);
        continue;
      }
      if (v.tag === "Done") {
        go$c = false;
        go$r = v._1;
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go($0($Tuple(dictGraph.topologicalSort(g), Nil)));
};
var showGraph = (dictGraph) => (x2) => showEdgeList(toEdgeList(dictGraph)(x2));
var inEdges$p = (dictGraph) => (g) => (\u03B1) => fromFoldable32(map3((v) => $Tuple(v, \u03B1))(dictGraph.inN(g)(\u03B1)));
var inEdges = (dictGraph) => (g) => (\u03B1s) => {
  const $0 = (v) => {
    if (v._1.tag === "Nil") {
      return $Step("Done", v._2);
    }
    if (v._1.tag === "Cons") {
      return $Step(
        "Loop",
        $Tuple(v._1._2, foldableList.foldr(Cons)(v._2)(inEdges$p(dictGraph)(g)(v._1._1)))
      );
    }
    fail();
  };
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "Loop") {
        go$a0 = $0(v._1);
        continue;
      }
      if (v.tag === "Done") {
        go$c = false;
        go$r = v._1;
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go($0($Tuple(fromFoldable32(\u03B1s), Nil)));
};
var addresses = (dictVertices) => {
  const $0 = map2(ordVertex)((x2) => x2._1);
  return (x2) => $0(dictVertices.vertices(x2));
};

// output-es/Expr/index.js
var $Cont = (tag, _1) => ({ tag, _1 });
var $Elim = (tag, _1, _2) => ({ tag, _1, _2 });
var $Expr = (tag, _1, _2, _3, _4) => ({ tag, _1, _2, _3, _4 });
var $RecDefs = (_1, _2) => ({ tag: "RecDefs", _1, _2 });
var $VarDef = (_1, _2) => ({ tag: "VarDef", _1, _2 });
var union4 = /* @__PURE__ */ (() => setSet(ordDVertex$p).union)();
var unions12 = /* @__PURE__ */ unions(foldableList)(ordDVertex$p);
var identity23 = (x2) => x2;
var compare3 = (x2) => (y2) => {
  const v = ordString.compare(x2._1)(y2._1);
  if (v === "LT") {
    return LT;
  }
  if (v === "GT") {
    return GT;
  }
  return ordString.compare(x2._2)(y2._2);
};
var compare4 = /* @__PURE__ */ (() => ordSet(ordString).compare)();
var setSet2 = /* @__PURE__ */ setSet(ordString);
var unions2 = /* @__PURE__ */ unions(foldableDict)(ordString);
var fromFoldable4 = /* @__PURE__ */ (() => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const b = go$a0, v = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = b;
        continue;
      }
      if (v.tag === "Cons") {
        go$a0 = insert3(ordString)(v._1)()(b);
        go$a1 = v._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  const $0 = go(Leaf);
  return (x2) => $0((() => {
    const go$1 = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go$1(m$p._5, $List("Cons", m$p._3, go$1(m$p._6, z$p)));
      }
      fail();
    };
    return go$1(x2, Nil);
  })());
})();
var unions3 = /* @__PURE__ */ unions(foldableList)(ordString);
var asMaplet2 = /* @__PURE__ */ asMaplet(mapDictString);
var ContExpr = (value0) => $Cont("ContExpr", value0);
var Dictionary = (value0) => (value1) => $Expr("Dictionary", value0, value1);
var Constr = (value0) => (value1) => (value2) => $Expr("Constr", value0, value1, value2);
var Matrix = (value0) => (value1) => (value2) => (value3) => $Expr("Matrix", value0, value1, value2, value3);
var Lambda = (value0) => (value1) => $Expr("Lambda", value0, value1);
var Project = (value0) => (value1) => $Expr("Project", value0, value1);
var DProject = (value0) => (value1) => $Expr("DProject", value0, value1);
var App2 = (value0) => (value1) => $Expr("App", value0, value1);
var Let = (value0) => (value1) => $Expr("Let", value0, value1);
var LetRec = (value0) => (value1) => $Expr("LetRec", value0, value1);
var ElimVar = (value0) => (value1) => $Elim("ElimVar", value0, value1);
var ElimDict = (value0) => (value1) => $Elim("ElimDict", value0, value1);
var VarDef = (value0) => (value1) => $VarDef(value0, value1);
var RecDefs = (value0) => (value1) => $RecDefs(value0, value1);
var Module = (x2) => x2;
var typeNameRecDefs = { typeName: (v) => "RecDefs" };
var pack = (x2) => (k) => k(typeNameRecDefs)(x2);
var typeNameExpr = { typeName: (v) => "Expr" };
var pack12 = (x2) => (k) => k(typeNameExpr)(x2);
var verticesVarDefVertex = { vertices: (v) => union4(verticesElimVertex.vertices(v._1))(verticesExprVertex.vertices(v._2)) };
var verticesRecDefsVertex = {
  vertices: (v) => union4($$$Map("Node", 1, 1, $Tuple(v._1, pack(v)), void 0, Leaf, Leaf))(verticesDict(verticesElimVertex).vertices(v._2))
};
var verticesExprVertex = {
  vertices: (v) => {
    if (v.tag === "Var") {
      return Leaf;
    }
    if (v.tag === "Op") {
      return Leaf;
    }
    if (v.tag === "Int") {
      return $$$Map("Node", 1, 1, $Tuple(v._1, pack12(v)), void 0, Leaf, Leaf);
    }
    if (v.tag === "Float") {
      return $$$Map("Node", 1, 1, $Tuple(v._1, pack12(v)), void 0, Leaf, Leaf);
    }
    if (v.tag === "Str") {
      return $$$Map("Node", 1, 1, $Tuple(v._1, pack12(v)), void 0, Leaf, Leaf);
    }
    if (v.tag === "Dictionary") {
      return union4($$$Map("Node", 1, 1, $Tuple(v._1, pack12(v)), void 0, Leaf, Leaf))(unions12(listMap((v1) => union4(verticesExprVertex.vertices(v1._1))(verticesExprVertex.vertices(v1._2)))(v._2)));
    }
    if (v.tag === "Constr") {
      return union4($$$Map("Node", 1, 1, $Tuple(v._1, pack12(v)), void 0, Leaf, Leaf))(unions12(listMap(verticesExprVertex.vertices)(v._3)));
    }
    if (v.tag === "Matrix") {
      return union4($$$Map("Node", 1, 1, $Tuple(v._1, pack12(v)), void 0, Leaf, Leaf))(union4(verticesExprVertex.vertices(v._2))(verticesExprVertex.vertices(v._4)));
    }
    if (v.tag === "Lambda") {
      return union4($$$Map("Node", 1, 1, $Tuple(v._1, pack12(v)), void 0, Leaf, Leaf))(verticesElimVertex.vertices(v._2));
    }
    if (v.tag === "Project") {
      return verticesExprVertex.vertices(v._1);
    }
    if (v.tag === "DProject") {
      return union4(verticesExprVertex.vertices(v._1))(verticesExprVertex.vertices(v._2));
    }
    if (v.tag === "App") {
      return union4(verticesExprVertex.vertices(v._1))(verticesExprVertex.vertices(v._2));
    }
    if (v.tag === "Let") {
      return union4(verticesVarDefVertex.vertices(v._1))(verticesExprVertex.vertices(v._2));
    }
    if (v.tag === "LetRec") {
      return union4(verticesRecDefsVertex.vertices(v._1))(verticesExprVertex.vertices(v._2));
    }
    if (v.tag === "DocExpr") {
      return union4(verticesExprVertex.vertices(v._1))(verticesExprVertex.vertices(v._2));
    }
    fail();
  }
};
var verticesElimVertex = {
  vertices: (v) => {
    if (v.tag === "ElimVar") {
      return verticesContVertex.vertices(v._2);
    }
    if (v.tag === "ElimConstr") {
      return verticesDict(verticesContVertex).vertices(v._1);
    }
    if (v.tag === "ElimDict") {
      return verticesContVertex.vertices(v._2);
    }
    fail();
  }
};
var verticesContVertex = {
  vertices: (v) => {
    if (v.tag === "ContExpr") {
      return verticesExprVertex.vertices(v._1);
    }
    if (v.tag === "ContElim") {
      return verticesElimVertex.vertices(v._1);
    }
    fail();
  }
};
var verticesModuleVertex = {
  vertices: (v) => unions12(listMap((v1) => {
    if (v1.tag === "Left") {
      return verticesVarDefVertex.vertices(v1._1);
    }
    if (v1.tag === "Right") {
      return verticesRecDefsVertex.vertices(v1._1);
    }
    fail();
  })(v))
};
var functorVarDef = { map: (f) => (m) => $VarDef(functorElim.map(f)(m._1), functorExpr.map(f)(m._2)) };
var functorRecDefs = { map: (f) => (m) => $RecDefs(f(m._1), _fmapObject(m._2, functorElim.map(f))) };
var functorExpr = {
  map: (f) => (m) => {
    if (m.tag === "Var") {
      return $Expr("Var", m._1);
    }
    if (m.tag === "Op") {
      return $Expr("Op", m._1);
    }
    if (m.tag === "Int") {
      return $Expr("Int", f(m._1), m._2);
    }
    if (m.tag === "Float") {
      return $Expr("Float", f(m._1), m._2);
    }
    if (m.tag === "Str") {
      return $Expr("Str", f(m._1), m._2);
    }
    if (m.tag === "Dictionary") {
      return $Expr(
        "Dictionary",
        f(m._1),
        listMap((() => {
          const $0 = functorExpr.map(f);
          return (v) => $Pair($0(v._1), $0(v._2));
        })())(m._2)
      );
    }
    if (m.tag === "Constr") {
      return $Expr("Constr", f(m._1), m._2, listMap(functorExpr.map(f))(m._3));
    }
    if (m.tag === "Matrix") {
      return $Expr("Matrix", f(m._1), functorExpr.map(f)(m._2), m._3, functorExpr.map(f)(m._4));
    }
    if (m.tag === "Lambda") {
      return $Expr("Lambda", f(m._1), functorElim.map(f)(m._2));
    }
    if (m.tag === "Project") {
      return $Expr("Project", functorExpr.map(f)(m._1), m._2);
    }
    if (m.tag === "DProject") {
      return $Expr("DProject", functorExpr.map(f)(m._1), functorExpr.map(f)(m._2));
    }
    if (m.tag === "App") {
      return $Expr("App", functorExpr.map(f)(m._1), functorExpr.map(f)(m._2));
    }
    if (m.tag === "Let") {
      return $Expr("Let", functorVarDef.map(f)(m._1), functorExpr.map(f)(m._2));
    }
    if (m.tag === "LetRec") {
      return $Expr("LetRec", functorRecDefs.map(f)(m._1), functorExpr.map(f)(m._2));
    }
    if (m.tag === "DocExpr") {
      return $Expr("DocExpr", functorExpr.map(f)(m._1), functorExpr.map(f)(m._2));
    }
    fail();
  }
};
var functorElim = {
  map: (f) => (m) => {
    if (m.tag === "ElimVar") {
      return $Elim("ElimVar", m._1, functorCont.map(f)(m._2));
    }
    if (m.tag === "ElimConstr") {
      return $Elim("ElimConstr", _fmapObject(m._1, functorCont.map(f)));
    }
    if (m.tag === "ElimDict") {
      return $Elim("ElimDict", m._1, functorCont.map(f)(m._2));
    }
    fail();
  }
};
var functorCont = {
  map: (f) => (m) => {
    if (m.tag === "ContExpr") {
      return $Cont("ContExpr", functorExpr.map(f)(m._1));
    }
    if (m.tag === "ContElim") {
      return $Cont("ContElim", functorElim.map(f)(m._1));
    }
    fail();
  }
};
var functorModule = {
  map: (f) => (m) => listMap((v2) => {
    if (v2.tag === "Left") {
      return $Either("Left", functorVarDef.map(f)(v2._1));
    }
    if (v2.tag === "Right") {
      return $Either("Right", functorRecDefs.map(f)(v2._1));
    }
    fail();
  })(m)
};
var foldableVarDef = {
  foldl: (f) => (z) => (m) => foldableExpr.foldl(f)(foldableElim.foldl(f)(z)(m._1))(m._2),
  foldr: (f) => (z) => (m) => foldableElim.foldr(f)(foldableExpr.foldr(f)(z)(m._2))(m._1),
  foldMap: (dictMonoid) => (f) => (m) => dictMonoid.Semigroup0().append(foldableElim.foldMap(dictMonoid)(f)(m._1))(foldableExpr.foldMap(dictMonoid)(f)(m._2))
};
var foldableRecDefs = {
  foldl: (f) => (z) => (m) => {
    const $0 = foldableElim.foldl(f);
    return fold((z$1) => (v) => $0(z$1))(f(z)(m._1))(m._2);
  },
  foldr: (f) => (z) => (m) => f(m._1)((() => {
    const $0 = foldableElim.foldr(f);
    return foldrArray((b) => (a) => $0(a)(b))(z)(values(m._2));
  })()),
  foldMap: (dictMonoid) => {
    const foldMap1 = foldMap(dictMonoid);
    return (f) => (m) => dictMonoid.Semigroup0().append(f(m._1))((() => {
      const $0 = foldableElim.foldMap(dictMonoid)(f);
      return foldMap1((v) => $0)(m._2);
    })());
  }
};
var foldableExpr = {
  foldl: (f) => (z) => (m) => {
    if (m.tag === "Var") {
      return z;
    }
    if (m.tag === "Op") {
      return z;
    }
    if (m.tag === "Int") {
      return f(z)(m._1);
    }
    if (m.tag === "Float") {
      return f(z)(m._1);
    }
    if (m.tag === "Str") {
      return f(z)(m._1);
    }
    if (m.tag === "Dictionary") {
      const $0 = foldableExpr.foldl(f);
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const b = go$a0, v = go$a1;
          if (v.tag === "Nil") {
            go$c = false;
            go$r = b;
            continue;
          }
          if (v.tag === "Cons") {
            go$a0 = $0($0(b)(v._1._1))(v._1._2);
            go$a1 = v._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return go(f(z)(m._1))(m._2);
    }
    if (m.tag === "Constr") {
      const $0 = foldableExpr.foldl(f);
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const b = go$a0, v = go$a1;
          if (v.tag === "Nil") {
            go$c = false;
            go$r = b;
            continue;
          }
          if (v.tag === "Cons") {
            go$a0 = $0(b)(v._1);
            go$a1 = v._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return go(f(z)(m._1))(m._3);
    }
    if (m.tag === "Matrix") {
      return foldableExpr.foldl(f)(foldableExpr.foldl(f)(f(z)(m._1))(m._2))(m._4);
    }
    if (m.tag === "Lambda") {
      return foldableElim.foldl(f)(f(z)(m._1))(m._2);
    }
    if (m.tag === "Project") {
      return foldableExpr.foldl(f)(z)(m._1);
    }
    if (m.tag === "DProject") {
      return foldableExpr.foldl(f)(foldableExpr.foldl(f)(z)(m._1))(m._2);
    }
    if (m.tag === "App") {
      return foldableExpr.foldl(f)(foldableExpr.foldl(f)(z)(m._1))(m._2);
    }
    if (m.tag === "Let") {
      return foldableExpr.foldl(f)(foldableVarDef.foldl(f)(z)(m._1))(m._2);
    }
    if (m.tag === "LetRec") {
      return foldableExpr.foldl(f)(foldableRecDefs.foldl(f)(z)(m._1))(m._2);
    }
    if (m.tag === "DocExpr") {
      return foldableExpr.foldl(f)(foldableExpr.foldl(f)(z)(m._1))(m._2);
    }
    fail();
  },
  foldr: (f) => (z) => (m) => {
    if (m.tag === "Var") {
      return z;
    }
    if (m.tag === "Op") {
      return z;
    }
    if (m.tag === "Int") {
      return f(m._1)(z);
    }
    if (m.tag === "Float") {
      return f(m._1)(z);
    }
    if (m.tag === "Str") {
      return f(m._1)(z);
    }
    if (m.tag === "Dictionary") {
      return f(m._1)(foldableList.foldr((() => {
        const $0 = foldableExpr.foldr(f);
        const $1 = foldrDefault(foldablePair)((b) => (a) => $0(a)(b));
        return (b) => (a) => $1(a)(b);
      })())(z)(m._2));
    }
    if (m.tag === "Constr") {
      return f(m._1)(foldableList.foldr((() => {
        const $0 = foldableExpr.foldr(f);
        return (b) => (a) => $0(a)(b);
      })())(z)(m._3));
    }
    if (m.tag === "Matrix") {
      return f(m._1)(foldableExpr.foldr(f)(foldableExpr.foldr(f)(z)(m._4))(m._2));
    }
    if (m.tag === "Lambda") {
      return f(m._1)(foldableElim.foldr(f)(z)(m._2));
    }
    if (m.tag === "Project") {
      return foldableExpr.foldr(f)(z)(m._1);
    }
    if (m.tag === "DProject") {
      return foldableExpr.foldr(f)(foldableExpr.foldr(f)(z)(m._2))(m._1);
    }
    if (m.tag === "App") {
      return foldableExpr.foldr(f)(foldableExpr.foldr(f)(z)(m._2))(m._1);
    }
    if (m.tag === "Let") {
      return foldableVarDef.foldr(f)(foldableExpr.foldr(f)(z)(m._2))(m._1);
    }
    if (m.tag === "LetRec") {
      return foldableRecDefs.foldr(f)(foldableExpr.foldr(f)(z)(m._2))(m._1);
    }
    if (m.tag === "DocExpr") {
      return foldableExpr.foldr(f)(foldableExpr.foldr(f)(z)(m._2))(m._1);
    }
    fail();
  },
  foldMap: (dictMonoid) => {
    const mempty5 = dictMonoid.mempty;
    const $0 = dictMonoid.Semigroup0();
    const foldMap3 = foldableList.foldMap(dictMonoid);
    return (f) => (m) => {
      if (m.tag === "Var") {
        return mempty5;
      }
      if (m.tag === "Op") {
        return mempty5;
      }
      if (m.tag === "Int") {
        return f(m._1);
      }
      if (m.tag === "Float") {
        return f(m._1);
      }
      if (m.tag === "Str") {
        return f(m._1);
      }
      if (m.tag === "Dictionary") {
        return $0.append(f(m._1))(foldMap3(foldablePair.foldMap(dictMonoid)(foldableExpr.foldMap(dictMonoid)(f)))(m._2));
      }
      if (m.tag === "Constr") {
        return $0.append(f(m._1))(foldMap3(foldableExpr.foldMap(dictMonoid)(f))(m._3));
      }
      if (m.tag === "Matrix") {
        return $0.append(f(m._1))($0.append(foldableExpr.foldMap(dictMonoid)(f)(m._2))(foldableExpr.foldMap(dictMonoid)(f)(m._4)));
      }
      if (m.tag === "Lambda") {
        return $0.append(f(m._1))(foldableElim.foldMap(dictMonoid)(f)(m._2));
      }
      if (m.tag === "Project") {
        return foldableExpr.foldMap(dictMonoid)(f)(m._1);
      }
      if (m.tag === "DProject") {
        return $0.append(foldableExpr.foldMap(dictMonoid)(f)(m._1))(foldableExpr.foldMap(dictMonoid)(f)(m._2));
      }
      if (m.tag === "App") {
        return $0.append(foldableExpr.foldMap(dictMonoid)(f)(m._1))(foldableExpr.foldMap(dictMonoid)(f)(m._2));
      }
      if (m.tag === "Let") {
        return $0.append(foldableVarDef.foldMap(dictMonoid)(f)(m._1))(foldableExpr.foldMap(dictMonoid)(f)(m._2));
      }
      if (m.tag === "LetRec") {
        return $0.append(foldableRecDefs.foldMap(dictMonoid)(f)(m._1))(foldableExpr.foldMap(dictMonoid)(f)(m._2));
      }
      if (m.tag === "DocExpr") {
        return $0.append(foldableExpr.foldMap(dictMonoid)(f)(m._1))(foldableExpr.foldMap(dictMonoid)(f)(m._2));
      }
      fail();
    };
  }
};
var foldableElim = {
  foldl: (f) => (z) => (m) => {
    if (m.tag === "ElimVar") {
      return foldableCont.foldl(f)(z)(m._2);
    }
    if (m.tag === "ElimConstr") {
      const $0 = foldableCont.foldl(f);
      return fold((z$1) => (v) => $0(z$1))(z)(m._1);
    }
    if (m.tag === "ElimDict") {
      return foldableCont.foldl(f)(z)(m._2);
    }
    fail();
  },
  foldr: (f) => (z) => (m) => {
    if (m.tag === "ElimVar") {
      return foldableCont.foldr(f)(z)(m._2);
    }
    if (m.tag === "ElimConstr") {
      const $0 = foldableCont.foldr(f);
      return foldrArray((b) => (a) => $0(a)(b))(z)(values(m._1));
    }
    if (m.tag === "ElimDict") {
      return foldableCont.foldr(f)(z)(m._2);
    }
    fail();
  },
  foldMap: (dictMonoid) => {
    const foldMap1 = foldMap(dictMonoid);
    return (f) => (m) => {
      if (m.tag === "ElimVar") {
        return foldableCont.foldMap(dictMonoid)(f)(m._2);
      }
      if (m.tag === "ElimConstr") {
        const $0 = foldableCont.foldMap(dictMonoid)(f);
        return foldMap1((v) => $0)(m._1);
      }
      if (m.tag === "ElimDict") {
        return foldableCont.foldMap(dictMonoid)(f)(m._2);
      }
      fail();
    };
  }
};
var foldableCont = {
  foldl: (f) => (z) => (m) => {
    if (m.tag === "ContExpr") {
      return foldableExpr.foldl(f)(z)(m._1);
    }
    if (m.tag === "ContElim") {
      return foldableElim.foldl(f)(z)(m._1);
    }
    fail();
  },
  foldr: (f) => (z) => (m) => {
    if (m.tag === "ContExpr") {
      return foldableExpr.foldr(f)(z)(m._1);
    }
    if (m.tag === "ContElim") {
      return foldableElim.foldr(f)(z)(m._1);
    }
    fail();
  },
  foldMap: (dictMonoid) => (f) => (m) => {
    if (m.tag === "ContExpr") {
      return foldableExpr.foldMap(dictMonoid)(f)(m._1);
    }
    if (m.tag === "ContElim") {
      return foldableElim.foldMap(dictMonoid)(f)(m._1);
    }
    fail();
  }
};
var traversableVarDef = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (f) => (m) => Apply0.apply(Apply0.Functor0().map((v2) => (v3) => $VarDef(v2, v3))(traversableElim.traverse(dictApplicative)(f)(m._1)))(traversableExpr.traverse(dictApplicative)(f)(m._2));
  },
  sequence: (dictApplicative) => (v) => traversableVarDef.traverse(dictApplicative)(identity23)(v),
  Functor0: () => functorVarDef,
  Foldable1: () => foldableVarDef
};
var traversableRecDefs = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    const traverse5 = traversableDict.traverse(dictApplicative);
    return (f) => (m) => Apply0.apply(Apply0.Functor0().map((v2) => (v3) => $RecDefs(v2, v3))(f(m._1)))(traverse5(traversableElim.traverse(dictApplicative)(f))(m._2));
  },
  sequence: (dictApplicative) => (v) => traversableRecDefs.traverse(dictApplicative)(identity23)(v),
  Functor0: () => functorRecDefs,
  Foldable1: () => foldableRecDefs
};
var traversableExpr = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    const $0 = Apply0.Functor0();
    const traverse5 = traversableList.traverse(dictApplicative);
    const traverse6 = traversablePair.traverse(dictApplicative);
    return (f) => (m) => {
      if (m.tag === "Var") {
        return dictApplicative.pure($Expr("Var", m._1));
      }
      if (m.tag === "Op") {
        return dictApplicative.pure($Expr("Op", m._1));
      }
      if (m.tag === "Int") {
        const $1 = m._2;
        return $0.map((v2) => $Expr("Int", v2, $1))(f(m._1));
      }
      if (m.tag === "Float") {
        const $1 = m._2;
        return $0.map((v2) => $Expr("Float", v2, $1))(f(m._1));
      }
      if (m.tag === "Str") {
        const $1 = m._2;
        return $0.map((v2) => $Expr("Str", v2, $1))(f(m._1));
      }
      if (m.tag === "Dictionary") {
        return Apply0.apply($0.map((v2) => (v3) => $Expr("Dictionary", v2, v3))(f(m._1)))(traverse5(traverse6(traversableExpr.traverse(dictApplicative)(f)))(m._2));
      }
      if (m.tag === "Constr") {
        const $1 = m._2;
        return Apply0.apply($0.map((v3) => (v4) => $Expr("Constr", v3, $1, v4))(f(m._1)))(traverse5(traversableExpr.traverse(dictApplicative)(f))(m._3));
      }
      if (m.tag === "Matrix") {
        const $1 = m._3;
        return Apply0.apply(Apply0.apply($0.map((v4) => (v5) => (v6) => $Expr("Matrix", v4, v5, $1, v6))(f(m._1)))(traversableExpr.traverse(dictApplicative)(f)(m._2)))(traversableExpr.traverse(dictApplicative)(f)(m._4));
      }
      if (m.tag === "Lambda") {
        return Apply0.apply($0.map((v2) => (v3) => $Expr("Lambda", v2, v3))(f(m._1)))(traversableElim.traverse(dictApplicative)(f)(m._2));
      }
      if (m.tag === "Project") {
        const $1 = m._2;
        return $0.map((v2) => $Expr("Project", v2, $1))(traversableExpr.traverse(dictApplicative)(f)(m._1));
      }
      if (m.tag === "DProject") {
        return Apply0.apply($0.map((v2) => (v3) => $Expr("DProject", v2, v3))(traversableExpr.traverse(dictApplicative)(f)(m._1)))(traversableExpr.traverse(dictApplicative)(f)(m._2));
      }
      if (m.tag === "App") {
        return Apply0.apply($0.map((v2) => (v3) => $Expr("App", v2, v3))(traversableExpr.traverse(dictApplicative)(f)(m._1)))(traversableExpr.traverse(dictApplicative)(f)(m._2));
      }
      if (m.tag === "Let") {
        return Apply0.apply($0.map((v2) => (v3) => $Expr("Let", v2, v3))(traversableVarDef.traverse(dictApplicative)(f)(m._1)))(traversableExpr.traverse(dictApplicative)(f)(m._2));
      }
      if (m.tag === "LetRec") {
        return Apply0.apply($0.map((v2) => (v3) => $Expr("LetRec", v2, v3))(traversableRecDefs.traverse(dictApplicative)(f)(m._1)))(traversableExpr.traverse(dictApplicative)(f)(m._2));
      }
      if (m.tag === "DocExpr") {
        return Apply0.apply($0.map((v2) => (v3) => $Expr("DocExpr", v2, v3))(traversableExpr.traverse(dictApplicative)(f)(m._1)))(traversableExpr.traverse(dictApplicative)(f)(m._2));
      }
      fail();
    };
  },
  sequence: (dictApplicative) => (v) => traversableExpr.traverse(dictApplicative)(identity23)(v),
  Functor0: () => functorExpr,
  Foldable1: () => foldableExpr
};
var traversableElim = {
  traverse: (dictApplicative) => {
    const $0 = dictApplicative.Apply0().Functor0();
    const traverse5 = traversableDict.traverse(dictApplicative);
    return (f) => (m) => {
      if (m.tag === "ElimVar") {
        const $1 = m._1;
        return $0.map((v2) => $Elim("ElimVar", $1, v2))(traversableCont.traverse(dictApplicative)(f)(m._2));
      }
      if (m.tag === "ElimConstr") {
        return $0.map((v1) => $Elim("ElimConstr", v1))(traverse5(traversableCont.traverse(dictApplicative)(f))(m._1));
      }
      if (m.tag === "ElimDict") {
        const $1 = m._1;
        return $0.map((v2) => $Elim("ElimDict", $1, v2))(traversableCont.traverse(dictApplicative)(f)(m._2));
      }
      fail();
    };
  },
  sequence: (dictApplicative) => (v) => traversableElim.traverse(dictApplicative)(identity23)(v),
  Functor0: () => functorElim,
  Foldable1: () => foldableElim
};
var traversableCont = {
  traverse: (dictApplicative) => {
    const $0 = dictApplicative.Apply0().Functor0();
    return (f) => (m) => {
      if (m.tag === "ContExpr") {
        return $0.map((v1) => $Cont("ContExpr", v1))(traversableExpr.traverse(dictApplicative)(f)(m._1));
      }
      if (m.tag === "ContElim") {
        return $0.map((v1) => $Cont("ContElim", v1))(traversableElim.traverse(dictApplicative)(f)(m._1));
      }
      fail();
    };
  },
  sequence: (dictApplicative) => (v) => traversableCont.traverse(dictApplicative)(identity23)(v),
  Functor0: () => functorCont,
  Foldable1: () => foldableCont
};
var eqVarDef = (dictEq) => ({ eq: (x2) => (y2) => eqElim(dictEq).eq(x2._1)(y2._1) && eqExpr(dictEq).eq(x2._2)(y2._2) });
var eqRecDefs = (dictEq) => ({ eq: (x2) => (y2) => dictEq.eq(x2._1)(y2._1) && eqObject(eqElim(dictEq)).eq(x2._2)(y2._2) });
var eqExpr = (dictEq) => ({
  eq: (x2) => (y2) => {
    if (x2.tag === "Var") {
      return y2.tag === "Var" && x2._1 === y2._1;
    }
    if (x2.tag === "Op") {
      return y2.tag === "Op" && x2._1 === y2._1;
    }
    if (x2.tag === "Int") {
      return y2.tag === "Int" && dictEq.eq(x2._1)(y2._1) && x2._2 === y2._2;
    }
    if (x2.tag === "Float") {
      return y2.tag === "Float" && dictEq.eq(x2._1)(y2._1) && x2._2 === y2._2;
    }
    if (x2.tag === "Str") {
      return y2.tag === "Str" && dictEq.eq(x2._1)(y2._1) && x2._2 === y2._2;
    }
    if (x2.tag === "Dictionary") {
      return y2.tag === "Dictionary" && (() => {
        const $0 = eqExpr(dictEq);
        return dictEq.eq(x2._1)(y2._1) && (() => {
          const go = (v) => (v1) => (v2) => {
            if (!v2) {
              return false;
            }
            if (v.tag === "Nil") {
              return v1.tag === "Nil" && v2;
            }
            return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && $0.eq(v1._1._1)(v._1._1) && $0.eq(v1._1._2)(v._1._2));
          };
          return go(x2._2)(y2._2)(true);
        })();
      })();
    }
    if (x2.tag === "Constr") {
      return y2.tag === "Constr" && (() => {
        const $0 = eqExpr(dictEq);
        return dictEq.eq(x2._1)(y2._1) && x2._2 === y2._2 && (() => {
          const go = (v) => (v1) => (v2) => {
            if (!v2) {
              return false;
            }
            if (v.tag === "Nil") {
              return v1.tag === "Nil" && v2;
            }
            return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && $0.eq(v1._1)(v._1));
          };
          return go(x2._3)(y2._3)(true);
        })();
      })();
    }
    if (x2.tag === "Matrix") {
      return y2.tag === "Matrix" && dictEq.eq(x2._1)(y2._1) && eqExpr(dictEq).eq(x2._2)(y2._2) && x2._3._1 === y2._3._1 && x2._3._2 === y2._3._2 && eqExpr(dictEq).eq(x2._4)(y2._4);
    }
    if (x2.tag === "Lambda") {
      return y2.tag === "Lambda" && dictEq.eq(x2._1)(y2._1) && eqElim(dictEq).eq(x2._2)(y2._2);
    }
    if (x2.tag === "Project") {
      return y2.tag === "Project" && eqExpr(dictEq).eq(x2._1)(y2._1) && x2._2 === y2._2;
    }
    if (x2.tag === "DProject") {
      return y2.tag === "DProject" && eqExpr(dictEq).eq(x2._1)(y2._1) && eqExpr(dictEq).eq(x2._2)(y2._2);
    }
    if (x2.tag === "App") {
      return y2.tag === "App" && eqExpr(dictEq).eq(x2._1)(y2._1) && eqExpr(dictEq).eq(x2._2)(y2._2);
    }
    if (x2.tag === "Let") {
      return y2.tag === "Let" && eqVarDef(dictEq).eq(x2._1)(y2._1) && eqExpr(dictEq).eq(x2._2)(y2._2);
    }
    if (x2.tag === "LetRec") {
      return y2.tag === "LetRec" && eqRecDefs(dictEq).eq(x2._1)(y2._1) && eqExpr(dictEq).eq(x2._2)(y2._2);
    }
    return x2.tag === "DocExpr" && y2.tag === "DocExpr" && eqExpr(dictEq).eq(x2._1)(y2._1) && eqExpr(dictEq).eq(x2._2)(y2._2);
  }
});
var eqElim = (dictEq) => ({
  eq: (x2) => (y2) => {
    if (x2.tag === "ElimVar") {
      return y2.tag === "ElimVar" && x2._1 === y2._1 && eqCont(dictEq).eq(x2._2)(y2._2);
    }
    if (x2.tag === "ElimConstr") {
      return y2.tag === "ElimConstr" && eqObject(eqCont(dictEq)).eq(x2._1)(y2._1);
    }
    return x2.tag === "ElimDict" && y2.tag === "ElimDict" && eqMap(eqString)(eqUnit).eq(x2._1)(y2._1) && eqCont(dictEq).eq(x2._2)(y2._2);
  }
});
var eqCont = (dictEq) => ({
  eq: (x2) => (y2) => {
    if (x2.tag === "ContExpr") {
      return y2.tag === "ContExpr" && eqExpr(dictEq).eq(x2._1)(y2._1);
    }
    return x2.tag === "ContElim" && y2.tag === "ContElim" && eqElim(dictEq).eq(x2._1)(y2._1);
  }
});
var ordVarDef = (dictOrd) => {
  const eqVarDef1 = eqVarDef(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      const v = ordElim(dictOrd).compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      return ordExpr(dictOrd).compare(x2._2)(y2._2);
    },
    Eq0: () => eqVarDef1
  };
};
var ordRecDefs = (dictOrd) => {
  const eqRecDefs1 = eqRecDefs(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      const v = dictOrd.compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      return ordDict(ordElim(dictOrd)).compare(x2._2)(y2._2);
    },
    Eq0: () => eqRecDefs1
  };
};
var ordExpr = (dictOrd) => {
  const eqExpr1 = eqExpr(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      if (x2.tag === "Var") {
        if (y2.tag === "Var") {
          return ordString.compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "Var") {
        return GT;
      }
      if (x2.tag === "Op") {
        if (y2.tag === "Op") {
          return ordString.compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "Op") {
        return GT;
      }
      if (x2.tag === "Int") {
        if (y2.tag === "Int") {
          const v = dictOrd.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordInt.compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Int") {
        return GT;
      }
      if (x2.tag === "Float") {
        if (y2.tag === "Float") {
          const v = dictOrd.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordNumber.compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Float") {
        return GT;
      }
      if (x2.tag === "Str") {
        if (y2.tag === "Str") {
          const v = dictOrd.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordString.compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Str") {
        return GT;
      }
      if (x2.tag === "Dictionary") {
        if (y2.tag === "Dictionary") {
          const v = dictOrd.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordList((() => {
            const $0 = ordExpr(dictOrd);
            const $1 = $0.Eq0();
            const eqPair1 = { eq: (x$1) => (y$1) => $1.eq(x$1._1)(y$1._1) && $1.eq(x$1._2)(y$1._2) };
            return {
              compare: (x$1) => (y$1) => {
                const v$1 = $0.compare(x$1._1)(y$1._1);
                if (v$1 === "LT") {
                  return LT;
                }
                if (v$1 === "GT") {
                  return GT;
                }
                return $0.compare(x$1._2)(y$1._2);
              },
              Eq0: () => eqPair1
            };
          })()).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Dictionary") {
        return GT;
      }
      if (x2.tag === "Constr") {
        if (y2.tag === "Constr") {
          const v = dictOrd.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          const v1 = ordString.compare(x2._2)(y2._2);
          if (v1 === "LT") {
            return LT;
          }
          if (v1 === "GT") {
            return GT;
          }
          return ordList(ordExpr(dictOrd)).compare(x2._3)(y2._3);
        }
        return LT;
      }
      if (y2.tag === "Constr") {
        return GT;
      }
      if (x2.tag === "Matrix") {
        if (y2.tag === "Matrix") {
          const v = dictOrd.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          const v1 = ordExpr(dictOrd).compare(x2._2)(y2._2);
          if (v1 === "LT") {
            return LT;
          }
          if (v1 === "GT") {
            return GT;
          }
          const v2 = compare3(x2._3)(y2._3);
          if (v2 === "LT") {
            return LT;
          }
          if (v2 === "GT") {
            return GT;
          }
          return ordExpr(dictOrd).compare(x2._4)(y2._4);
        }
        return LT;
      }
      if (y2.tag === "Matrix") {
        return GT;
      }
      if (x2.tag === "Lambda") {
        if (y2.tag === "Lambda") {
          const v = dictOrd.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordElim(dictOrd).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Lambda") {
        return GT;
      }
      if (x2.tag === "Project") {
        if (y2.tag === "Project") {
          const v = ordExpr(dictOrd).compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordString.compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Project") {
        return GT;
      }
      if (x2.tag === "DProject") {
        if (y2.tag === "DProject") {
          const v = ordExpr(dictOrd).compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordExpr(dictOrd).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "DProject") {
        return GT;
      }
      if (x2.tag === "App") {
        if (y2.tag === "App") {
          const v = ordExpr(dictOrd).compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordExpr(dictOrd).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "App") {
        return GT;
      }
      if (x2.tag === "Let") {
        if (y2.tag === "Let") {
          const v = ordVarDef(dictOrd).compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordExpr(dictOrd).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Let") {
        return GT;
      }
      if (x2.tag === "LetRec") {
        if (y2.tag === "LetRec") {
          const v = ordRecDefs(dictOrd).compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordExpr(dictOrd).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "LetRec") {
        return GT;
      }
      if (x2.tag === "DocExpr" && y2.tag === "DocExpr") {
        const v = ordExpr(dictOrd).compare(x2._1)(y2._1);
        if (v === "LT") {
          return LT;
        }
        if (v === "GT") {
          return GT;
        }
        return ordExpr(dictOrd).compare(x2._2)(y2._2);
      }
      fail();
    },
    Eq0: () => eqExpr1
  };
};
var ordElim = (dictOrd) => {
  const eqElim1 = eqElim(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      if (x2.tag === "ElimVar") {
        if (y2.tag === "ElimVar") {
          const v = ordString.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordCont(dictOrd).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "ElimVar") {
        return GT;
      }
      if (x2.tag === "ElimConstr") {
        if (y2.tag === "ElimConstr") {
          return ordDict(ordCont(dictOrd)).compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "ElimConstr") {
        return GT;
      }
      if (x2.tag === "ElimDict" && y2.tag === "ElimDict") {
        const v = compare4(x2._1)(y2._1);
        if (v === "LT") {
          return LT;
        }
        if (v === "GT") {
          return GT;
        }
        return ordCont(dictOrd).compare(x2._2)(y2._2);
      }
      fail();
    },
    Eq0: () => eqElim1
  };
};
var ordCont = (dictOrd) => {
  const eqCont1 = eqCont(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      if (x2.tag === "ContExpr") {
        if (y2.tag === "ContExpr") {
          return ordExpr(dictOrd).compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "ContExpr") {
        return GT;
      }
      if (x2.tag === "ContElim" && y2.tag === "ContElim") {
        return ordElim(dictOrd).compare(x2._1)(y2._1);
      }
      fail();
    },
    Eq0: () => eqCont1
  };
};
var applyRecDefs = {
  apply: (v) => (v1) => $RecDefs(v._1(v1._1), intersectionWith_Object(apply)(_fmapObject(v._2, applyElim.apply))(v1._2)),
  Functor0: () => functorRecDefs
};
var applyExpr = {
  apply: (v) => (v1) => {
    if (v.tag === "Var") {
      if (v1.tag === "Var") {
        const $0 = v._1;
        const $1 = v1._1;
        return $Expr("Var", assertWhen(false)("mustEq")((v$1) => $0 === $1)($0));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Op") {
      if (v1.tag === "Op") {
        return $Expr("Op", v._1);
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Int") {
      if (v1.tag === "Int") {
        const $0 = v._2;
        const $1 = v1._2;
        return $Expr("Int", v._1(v1._1), assertWhen(false)("mustEq")((v$1) => $0 === $1)($0));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Float") {
      if (v1.tag === "Float") {
        const $0 = v._2;
        const $1 = v1._2;
        return $Expr("Float", v._1(v1._1), assertWhen(false)("mustEq")((v$1) => $0 === $1)($0));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Str") {
      if (v1.tag === "Str") {
        const $0 = v._2;
        const $1 = v1._2;
        return $Expr("Str", v._1(v1._1), assertWhen(false)("mustEq")((v$1) => $0 === $1)($0));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Dictionary") {
      if (v1.tag === "Dictionary") {
        return $Expr(
          "Dictionary",
          v._1(v1._1),
          (() => {
            const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v1$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                  go$a0 = v$1._2;
                  go$a1 = v1$1._2;
                  go$a2 = $List("Cons", $Pair(applyExpr.apply(v$1._1._1)(v1$1._1._1), applyExpr.apply(v$1._1._2)(v1$1._1._2)), v2);
                  continue;
                }
                fail();
              }
              return go$r;
            };
            const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
              let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
              while (go$1$c) {
                const v$1 = go$1$a0, v1$1 = go$1$a1;
                if (v1$1.tag === "Nil") {
                  go$1$c = false;
                  go$1$r = v$1;
                  continue;
                }
                if (v1$1.tag === "Cons") {
                  go$1$a0 = $List("Cons", v1$1._1, v$1);
                  go$1$a1 = v1$1._2;
                  continue;
                }
                fail();
              }
              return go$1$r;
            };
            return go$1(Nil)(go(v._2)(v1._2)(Nil));
          })()
        );
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Constr") {
      if (v1.tag === "Constr") {
        const $0 = v._2;
        const $1 = v1._2;
        return $Expr(
          "Constr",
          v._1(v1._1),
          assertWhen(false)("mustEq")((v$1) => $0 === $1)($0),
          (() => {
            const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v1$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                  go$a0 = v$1._2;
                  go$a1 = v1$1._2;
                  go$a2 = $List("Cons", applyExpr.apply(v$1._1)(v1$1._1), v2);
                  continue;
                }
                fail();
              }
              return go$r;
            };
            const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
              let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
              while (go$1$c) {
                const v$1 = go$1$a0, v1$1 = go$1$a1;
                if (v1$1.tag === "Nil") {
                  go$1$c = false;
                  go$1$r = v$1;
                  continue;
                }
                if (v1$1.tag === "Cons") {
                  go$1$a0 = $List("Cons", v1$1._1, v$1);
                  go$1$a1 = v1$1._2;
                  continue;
                }
                fail();
              }
              return go$1$r;
            };
            return go$1(Nil)(go(v._3)(v1._3)(Nil));
          })()
        );
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Matrix") {
      if (v1.tag === "Matrix") {
        const $0 = v._3._1;
        const $1 = v1._3._1;
        const $2 = v._3._2;
        const $3 = v1._3._2;
        return $Expr(
          "Matrix",
          v._1(v1._1),
          applyExpr.apply(v._2)(v1._2),
          $Tuple(assertWhen(false)("mustEq")((v$1) => $0 === $1)($0), assertWhen(false)("mustEq")((v$1) => $2 === $3)($2)),
          applyExpr.apply(v._4)(v1._4)
        );
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Lambda") {
      if (v1.tag === "Lambda") {
        return $Expr("Lambda", v._1(v1._1), applyElim.apply(v._2)(v1._2));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Project") {
      if (v1.tag === "Project") {
        return $Expr("Project", applyExpr.apply(v._1)(v1._1), v._2);
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "DProject") {
      if (v1.tag === "DProject") {
        return $Expr("DProject", applyExpr.apply(v._1)(v1._1), applyExpr.apply(v._2)(v1._2));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "App") {
      if (v1.tag === "App") {
        return $Expr("App", applyExpr.apply(v._1)(v1._1), applyExpr.apply(v._2)(v1._2));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Let") {
      if (v1.tag === "Let") {
        return $Expr("Let", $VarDef(applyElim.apply(v._1._1)(v1._1._1), applyExpr.apply(v._1._2)(v1._1._2)), applyExpr.apply(v._2)(v1._2));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "LetRec") {
      if (v1.tag === "LetRec") {
        return $Expr("LetRec", applyRecDefs.apply(v._1)(v1._1), applyExpr.apply(v._2)(v1._2));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "DocExpr" && v1.tag === "DocExpr") {
      return $Expr("DocExpr", applyExpr.apply(v._1)(v1._1), applyExpr.apply(v._2)(v1._2));
    }
    return throwException(error("Shape mismatch"))();
  },
  Functor0: () => functorExpr
};
var applyElim = {
  apply: (v) => (v1) => {
    if (v.tag === "ElimVar") {
      if (v1.tag === "ElimVar") {
        return $Elim("ElimVar", v._1, applyCont.apply(v._2)(v1._2));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "ElimConstr") {
      if (v1.tag === "ElimConstr") {
        return $Elim("ElimConstr", intersectionWith_Object(apply)(_fmapObject(v._1, applyCont.apply))(v1._1));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "ElimDict" && v1.tag === "ElimDict") {
      return $Elim("ElimDict", v._1, applyCont.apply(v._2)(v1._2));
    }
    return throwException(error("Shape mismatch"))();
  },
  Functor0: () => functorElim
};
var applyCont = {
  apply: (v) => (v1) => {
    if (v.tag === "ContExpr") {
      if (v1.tag === "ContExpr") {
        return $Cont("ContExpr", applyExpr.apply(v._1)(v1._1));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "ContElim" && v1.tag === "ContElim") {
      return $Cont("ContElim", applyElim.apply(v._1)(v1._1));
    }
    return throwException(error("Shape mismatch"))();
  },
  Functor0: () => functorCont
};
var fVDict = (dictFV) => {
  const fv1 = dictFV.fv;
  return { fv: (\u03C1) => setSet2.difference(unions2(_fmapObject(\u03C1, fv1)))(fromFoldable4(mapObjectString.keys(\u03C1))) };
};
var foldlModuleDef = (v) => (v1) => (v2) => {
  if (v2.tag === "Left") {
    return foldableVarDef.foldl(v)(v1)(v2._1);
  }
  if (v2.tag === "Right") {
    return foldableRecDefs.foldl(v)(v1)(v2._1);
  }
  fail();
};
var foldableModule = {
  foldl: (v) => (v1) => (v2) => {
    if (v2.tag === "Nil") {
      return v1;
    }
    if (v2.tag === "Cons") {
      if (v2._1.tag === "Left") {
        const go = (go$a0$copy) => (go$a1$copy) => {
          let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
          while (go$c) {
            const b = go$a0, v$1 = go$a1;
            if (v$1.tag === "Nil") {
              go$c = false;
              go$r = b;
              continue;
            }
            if (v$1.tag === "Cons") {
              go$a0 = foldlModuleDef(v)(b)(v$1._1);
              go$a1 = v$1._2;
              continue;
            }
            fail();
          }
          return go$r;
        };
        return go(foldableVarDef.foldl(v)(v1)(v2._1._1))(v2._2);
      }
      if (v2._1.tag === "Right") {
        const go = (go$a0$copy) => (go$a1$copy) => {
          let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
          while (go$c) {
            const b = go$a0, v$1 = go$a1;
            if (v$1.tag === "Nil") {
              go$c = false;
              go$r = b;
              continue;
            }
            if (v$1.tag === "Cons") {
              go$a0 = foldlModuleDef(v)(b)(v$1._1);
              go$a1 = v$1._2;
              continue;
            }
            fail();
          }
          return go$r;
        };
        return go(foldableRecDefs.foldl(v)(v1)(v2._1._1))(v2._2);
      }
    }
    fail();
  },
  foldr: (f) => foldrDefault(foldableModule)(f),
  foldMap: (dictMonoid) => (f) => foldableModule.foldl((acc) => (x2) => dictMonoid.Semigroup0().append(acc)(f(x2)))(dictMonoid.mempty)
};
var traversableModule = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    const $0 = Apply0.Functor0();
    const traverse5 = traversableVarDef.traverse(dictApplicative);
    const traverse6 = traversableRecDefs.traverse(dictApplicative);
    return (v) => (v1) => {
      if (v1.tag === "Nil") {
        return dictApplicative.pure(Nil);
      }
      if (v1.tag === "Cons") {
        if (v1._1.tag === "Left") {
          return $0.map(Module)(Apply0.apply(Apply0.Functor0().map(Cons)($0.map(Left)(traverse5(v)(v1._1._1))))($0.map(unsafeCoerce)(traversableModule.traverse(dictApplicative)(v)(v1._2))));
        }
        if (v1._1.tag === "Right") {
          return $0.map(Module)(Apply0.apply(Apply0.Functor0().map(Cons)($0.map(Right)(traverse6(v)(v1._1._1))))($0.map(unsafeCoerce)(traversableModule.traverse(dictApplicative)(v)(v1._2))));
        }
      }
      fail();
    };
  },
  sequence: (dictApplicative) => traversableModule.traverse(dictApplicative)(identity7),
  Functor0: () => functorModule,
  Foldable1: () => foldableModule
};
var bVElim = {
  bv: (v) => {
    if (v.tag === "ElimVar") {
      return setSet2.union($$$Map("Node", 1, 1, v._1, void 0, Leaf, Leaf))(bVCont.bv(v._2));
    }
    if (v.tag === "ElimConstr") {
      return bVCont.bv(asMaplet2(v._1)._2);
    }
    if (v.tag === "ElimDict") {
      return bVCont.bv(v._2);
    }
    fail();
  }
};
var bVCont = {
  bv: (v) => {
    if (v.tag === "ContElim") {
      return bVElim.bv(v._1);
    }
    if (v.tag === "ContExpr") {
      return Leaf;
    }
    fail();
  }
};
var fVExpr = {
  fv: (v) => {
    if (v.tag === "Var") {
      return $$$Map("Node", 1, 1, v._1, void 0, Leaf, Leaf);
    }
    if (v.tag === "Op") {
      return $$$Map("Node", 1, 1, v._1, void 0, Leaf, Leaf);
    }
    if (v.tag === "Int") {
      return Leaf;
    }
    if (v.tag === "Float") {
      return Leaf;
    }
    if (v.tag === "Str") {
      return Leaf;
    }
    if (v.tag === "Dictionary") {
      return unions3(listMap((v1) => setSet2.union(fVExpr.fv(v1._1))(fVExpr.fv(v1._2)))(v._2));
    }
    if (v.tag === "Constr") {
      return unions3(listMap(fVExpr.fv)(v._3));
    }
    if (v.tag === "Matrix") {
      return setSet2.union(fVExpr.fv(v._2))(fVExpr.fv(v._4));
    }
    if (v.tag === "Lambda") {
      return fVElim.fv(v._2);
    }
    if (v.tag === "Project") {
      return fVExpr.fv(v._1);
    }
    if (v.tag === "DProject") {
      return setSet2.union(fVExpr.fv(v._1))(fVExpr.fv(v._2));
    }
    if (v.tag === "App") {
      return setSet2.union(fVExpr.fv(v._1))(fVExpr.fv(v._2));
    }
    if (v.tag === "Let") {
      return setSet2.union(fVExpr.fv(v._1._2))(setSet2.difference(fVExpr.fv(v._2))(bVElim.bv(v._1._1)));
    }
    if (v.tag === "LetRec") {
      return setSet2.union(fVDict(fVElim).fv(v._1._2))(fVExpr.fv(v._2));
    }
    if (v.tag === "DocExpr") {
      return setSet2.union(fVExpr.fv(v._1))(fVExpr.fv(v._2));
    }
    fail();
  }
};
var fVElim = {
  fv: (v) => {
    if (v.tag === "ElimVar") {
      return setSet2.difference(fVCont.fv(v._2))($$$Map("Node", 1, 1, v._1, void 0, Leaf, Leaf));
    }
    if (v.tag === "ElimConstr") {
      return unions2(_fmapObject(v._1, fVCont.fv));
    }
    if (v.tag === "ElimDict") {
      return fVCont.fv(v._2);
    }
    fail();
  }
};
var fVCont = {
  fv: (v) => {
    if (v.tag === "ContElim") {
      return fVElim.fv(v._1);
    }
    if (v.tag === "ContExpr") {
      return fVExpr.fv(v._1);
    }
    fail();
  }
};
var asElim = (v) => {
  if (v.tag === "ContElim") {
    return v._1;
  }
  return throwException(error("Eliminator expected"))();
};

// output-es/SExpr/index.js
var $DictEntry = (tag, _1, _2) => ({ tag, _1, _2 });
var $Expr2 = (tag, _1, _2, _3, _4) => ({ tag, _1, _2, _3, _4 });
var $ListRest = (tag, _1, _2, _3) => ({ tag, _1, _2, _3 });
var $ListRestPattern = (tag, _1, _2) => ({ tag, _1, _2 });
var $Module = (_1) => ({ tag: "Module", _1 });
var $ParagraphElem = (tag, _1) => ({ tag, _1 });
var $Pattern = (tag, _1, _2) => ({ tag, _1, _2 });
var $Qualifier = (tag, _1, _2) => ({ tag, _1, _2 });
var $VarDef2 = (_1, _2) => ({ tag: "VarDef", _1, _2 });
var genericShowArgsArgument = { genericShowArgs: (v) => [showStringImpl(v)] };
var genericShowSum = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsArgument)({ reflectSymbol: () => "PVar" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var PConstrIsSymbol = { reflectSymbol: () => "PConstr" };
var showTuple = (dictShow1) => ({ show: (v) => "(Tuple " + showStringImpl(v._1) + " " + dictShow1.show(v._2) + ")" });
var PRecordIsSymbol = { reflectSymbol: () => "PRecord" };
var genericShowSum1 = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "PListEmpty" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var PListNonEmptyIsSymbol = { reflectSymbol: () => "PListNonEmpty" };
var genericShowSum2 = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsArgument)({ reflectSymbol: () => "PListVar" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var genericShowSum3 = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "PListEnd" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var PListNextIsSymbol = { reflectSymbol: () => "PListNext" };
var VarDefIsSymbol = { reflectSymbol: () => "VarDef" };
var ListCompGuardIsSymbol = { reflectSymbol: () => "ListCompGuard" };
var ListCompGenIsSymbol = { reflectSymbol: () => "ListCompGen" };
var ListCompDeclIsSymbol = { reflectSymbol: () => "ListCompDecl" };
var genericShowSum4 = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsArgument)({ reflectSymbol: () => "Token" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var UnquoteIsSymbol = { reflectSymbol: () => "Unquote" };
var EndIsSymbol = { reflectSymbol: () => "End" };
var NextIsSymbol = { reflectSymbol: () => "Next" };
var genericShowSum5 = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsArgument)({ reflectSymbol: () => "Var" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var genericShowSum6 = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsArgument)({ reflectSymbol: () => "Op" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var genericShowArgsArgument1 = { genericShowArgs: (v) => [showIntImpl(v)] };
var IntIsSymbol = { reflectSymbol: () => "Int" };
var genericShowArgsArgument2 = { genericShowArgs: (v) => [showNumberImpl(v)] };
var FloatIsSymbol = { reflectSymbol: () => "Float" };
var StrIsSymbol = { reflectSymbol: () => "Str" };
var ConstrIsSymbol = { reflectSymbol: () => "Constr" };
var DictionaryIsSymbol = { reflectSymbol: () => "Dictionary" };
var genericShowArgsProduct1 = /* @__PURE__ */ genericShowArgsProduct(/* @__PURE__ */ (() => {
  const $0 = showTuple(showString);
  return { genericShowArgs: (v) => [$0.show(v)] };
})());
var MatrixIsSymbol = { reflectSymbol: () => "Matrix" };
var LambdaIsSymbol = { reflectSymbol: () => "Lambda" };
var ProjectIsSymbol = { reflectSymbol: () => "Project" };
var DProjectIsSymbol = { reflectSymbol: () => "DProject" };
var AppIsSymbol = { reflectSymbol: () => "App" };
var BinaryAppIsSymbol = { reflectSymbol: () => "BinaryApp" };
var MatchAsIsSymbol = { reflectSymbol: () => "MatchAs" };
var IfElseIsSymbol = { reflectSymbol: () => "IfElse" };
var ParagraphIsSymbol = { reflectSymbol: () => "Paragraph" };
var ListEmptyIsSymbol = { reflectSymbol: () => "ListEmpty" };
var ListNonEmptyIsSymbol = { reflectSymbol: () => "ListNonEmpty" };
var ListEnumIsSymbol = { reflectSymbol: () => "ListEnum" };
var ListCompIsSymbol = { reflectSymbol: () => "ListComp" };
var LetIsSymbol = { reflectSymbol: () => "Let" };
var LetRecIsSymbol = { reflectSymbol: () => "LetRec" };
var DocExprIsSymbol = { reflectSymbol: () => "DocExpr" };
var ExprKeyIsSymbol = { reflectSymbol: () => "ExprKey" };
var VarKeyIsSymbol = { reflectSymbol: () => "VarKey" };
var ClausesIsSymbol = { reflectSymbol: () => "Clauses" };
var ClauseIsSymbol = { reflectSymbol: () => "Clause" };
var difference2 = /* @__PURE__ */ difference(eqString);
var toUnfoldable3 = (x2) => {
  const go = (m$p, z$p) => {
    if (m$p.tag === "Leaf") {
      return z$p;
    }
    if (m$p.tag === "Node") {
      return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
    }
    fail();
  };
  const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
    let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
    while (go$1$c) {
      const source2 = go$1$a0, memo = go$1$a1;
      if (source2.tag === "Nil") {
        const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => {
          let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$c = true, go$2$r;
          while (go$2$c) {
            const b = go$2$a0, v = go$2$a1;
            if (v.tag === "Nil") {
              go$2$c = false;
              go$2$r = b;
              continue;
            }
            if (v.tag === "Cons") {
              go$2$a0 = $List("Cons", v._1, b);
              go$2$a1 = v._2;
              continue;
            }
            fail();
          }
          return go$2$r;
        };
        go$1$c = false;
        go$1$r = go$2(Nil)(memo);
        continue;
      }
      if (source2.tag === "Cons") {
        go$1$a0 = source2._2;
        go$1$a1 = $List("Cons", source2._1, memo);
        continue;
      }
      fail();
    }
    return go$1$r;
  };
  return go$1(go(x2, Nil))(Nil);
};
var monadThrowExceptT2 = /* @__PURE__ */ monadThrowExceptT(monadIdentity);
var fromFoldable5 = /* @__PURE__ */ fromFoldable(foldableArray);
var fromFoldable12 = /* @__PURE__ */ fromFoldable(foldableNonEmptyList);
var fromFoldable23 = /* @__PURE__ */ fromFoldable(foldableList);
var monadErrorExceptT2 = /* @__PURE__ */ monadErrorExceptT(monadIdentity);
var PListEnd = /* @__PURE__ */ $ListRestPattern("PListEnd");
var PListNext = (value0) => (value1) => $ListRestPattern("PListNext", value0, value1);
var PListEmpty = /* @__PURE__ */ $Pattern("PListEmpty");
var Int = (value0) => (value1) => $Expr2("Int", value0, value1);
var Float = (value0) => (value1) => $Expr2("Float", value0, value1);
var Str = (value0) => (value1) => $Expr2("Str", value0, value1);
var Constr2 = (value0) => (value1) => (value2) => $Expr2("Constr", value0, value1, value2);
var VarKey = (value0) => (value1) => $DictEntry("VarKey", value0, value1);
var Next = (value0) => (value1) => (value2) => $ListRest("Next", value0, value1, value2);
var RecDef = (x2) => x2;
var showPattern1 = {
  show: (c) => genericShowSum((() => {
    const $0 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument)((() => {
      const $02 = showList(showPattern1);
      return { genericShowArgs: (v) => [$02.show(v)] };
    })()))(PConstrIsSymbol);
    const $1 = genericShowConstructor((() => {
      const $12 = showList(showTuple(showPattern1));
      return { genericShowArgs: (v) => [$12.show(v)] };
    })())(PRecordIsSymbol);
    const $2 = genericShowSum1(genericShowConstructor(genericShowArgsProduct({ genericShowArgs: (v) => [showPattern1.show(v)] })({
      genericShowArgs: (v) => [showListRestPattern.show(v)]
    }))(PListNonEmptyIsSymbol));
    return {
      "genericShow'": (v) => {
        if (v.tag === "Inl") {
          return $0["genericShow'"](v._1);
        }
        if (v.tag === "Inr") {
          if (v._1.tag === "Inl") {
            return $1["genericShow'"](v._1._1);
          }
          if (v._1.tag === "Inr") {
            return $2["genericShow'"](v._1._1);
          }
        }
        fail();
      }
    };
  })())["genericShow'"]((() => {
    if (c.tag === "PVar") {
      return $Sum("Inl", c._1);
    }
    if (c.tag === "PConstr") {
      return $Sum("Inr", $Sum("Inl", $Product(c._1, c._2)));
    }
    if (c.tag === "PRecord") {
      return $Sum("Inr", $Sum("Inr", $Sum("Inl", c._1)));
    }
    if (c.tag === "PListEmpty") {
      return $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))));
    }
    if (c.tag === "PListNonEmpty") {
      return $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inr", $Product(c._1, c._2)))));
    }
    fail();
  })())
};
var showListRestPattern = {
  show: (c) => genericShowSum2(genericShowSum3(genericShowConstructor(genericShowArgsProduct({ genericShowArgs: (v) => [showPattern1.show(v)] })({
    genericShowArgs: (v) => [showListRestPattern.show(v)]
  }))(PListNextIsSymbol)))["genericShow'"]((() => {
    if (c.tag === "PListVar") {
      return $Sum("Inl", c._1);
    }
    if (c.tag === "PListEnd") {
      return $Sum("Inr", $Sum("Inl", NoArguments));
    }
    if (c.tag === "PListNext") {
      return $Sum("Inr", $Sum("Inr", $Product(c._1, c._2)));
    }
    fail();
  })())
};
var showTuple1 = (dictShow1) => ({ show: (v) => "(Tuple " + showPattern1.show(v._1) + " " + dictShow1.show(v._2) + ")" });
var showTuple2 = /* @__PURE__ */ (() => {
  const $0 = showNonEmptyList(showPattern1);
  return (dictShow1) => ({ show: (v) => "(Tuple " + $0.show(v._1) + " " + dictShow1.show(v._2) + ")" });
})();
var genericExpr_ = {
  to: (x2) => {
    if (x2.tag === "Inl") {
      return $Expr2("Var", x2._1);
    }
    if (x2.tag === "Inr") {
      if (x2._1.tag === "Inl") {
        return $Expr2("Op", x2._1._1);
      }
      if (x2._1.tag === "Inr") {
        if (x2._1._1.tag === "Inl") {
          return $Expr2("Int", x2._1._1._1._1, x2._1._1._1._2);
        }
        if (x2._1._1.tag === "Inr") {
          if (x2._1._1._1.tag === "Inl") {
            return $Expr2("Float", x2._1._1._1._1._1, x2._1._1._1._1._2);
          }
          if (x2._1._1._1.tag === "Inr") {
            if (x2._1._1._1._1.tag === "Inl") {
              return $Expr2("Str", x2._1._1._1._1._1._1, x2._1._1._1._1._1._2);
            }
            if (x2._1._1._1._1.tag === "Inr") {
              if (x2._1._1._1._1._1.tag === "Inl") {
                return $Expr2("Constr", x2._1._1._1._1._1._1._1, x2._1._1._1._1._1._1._2._1, x2._1._1._1._1._1._1._2._2);
              }
              if (x2._1._1._1._1._1.tag === "Inr") {
                if (x2._1._1._1._1._1._1.tag === "Inl") {
                  return $Expr2("Dictionary", x2._1._1._1._1._1._1._1._1, x2._1._1._1._1._1._1._1._2);
                }
                if (x2._1._1._1._1._1._1.tag === "Inr") {
                  if (x2._1._1._1._1._1._1._1.tag === "Inl") {
                    return $Expr2("Matrix", x2._1._1._1._1._1._1._1._1._1, x2._1._1._1._1._1._1._1._1._2._1, x2._1._1._1._1._1._1._1._1._2._2._1, x2._1._1._1._1._1._1._1._1._2._2._2);
                  }
                  if (x2._1._1._1._1._1._1._1.tag === "Inr") {
                    if (x2._1._1._1._1._1._1._1._1.tag === "Inl") {
                      return $Expr2("Lambda", x2._1._1._1._1._1._1._1._1._1);
                    }
                    if (x2._1._1._1._1._1._1._1._1.tag === "Inr") {
                      if (x2._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                        return $Expr2("Project", x2._1._1._1._1._1._1._1._1._1._1._1, x2._1._1._1._1._1._1._1._1._1._1._2);
                      }
                      if (x2._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                        if (x2._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                          return $Expr2("DProject", x2._1._1._1._1._1._1._1._1._1._1._1._1, x2._1._1._1._1._1._1._1._1._1._1._1._2);
                        }
                        if (x2._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                          if (x2._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                            return $Expr2("App", x2._1._1._1._1._1._1._1._1._1._1._1._1._1, x2._1._1._1._1._1._1._1._1._1._1._1._1._2);
                          }
                          if (x2._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                            if (x2._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                              return $Expr2(
                                "BinaryApp",
                                x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                x2._1._1._1._1._1._1._1._1._1._1._1._1._1._2._1,
                                x2._1._1._1._1._1._1._1._1._1._1._1._1._1._2._2
                              );
                            }
                            if (x2._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                              if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                return $Expr2("MatchAs", x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1, x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2);
                              }
                              if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                  return $Expr2(
                                    "IfElse",
                                    x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                    x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2._1,
                                    x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2._2
                                  );
                                }
                                if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                  if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                    return $Expr2("Paragraph", x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                  }
                                  if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                    if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                      return $Expr2("ListEmpty", x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                    }
                                    if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                      if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                        return $Expr2(
                                          "ListNonEmpty",
                                          x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                          x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2._1,
                                          x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2._2
                                        );
                                      }
                                      if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                        if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                          return $Expr2(
                                            "ListEnum",
                                            x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                            x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2
                                          );
                                        }
                                        if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                          if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                            return $Expr2(
                                              "ListComp",
                                              x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                              x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2._1,
                                              x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2._2
                                            );
                                          }
                                          if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                            if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                              return $Expr2(
                                                "Let",
                                                x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                                x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2
                                              );
                                            }
                                            if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                              if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                                return $Expr2(
                                                  "LetRec",
                                                  x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                                  x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2
                                                );
                                              }
                                              if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                                return $Expr2(
                                                  "DocExpr",
                                                  x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1,
                                                  x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._2
                                                );
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    fail();
  },
  from: (x2) => {
    if (x2.tag === "Var") {
      return $Sum("Inl", x2._1);
    }
    if (x2.tag === "Op") {
      return $Sum("Inr", $Sum("Inl", x2._1));
    }
    if (x2.tag === "Int") {
      return $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))));
    }
    if (x2.tag === "Float") {
      return $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2)))));
    }
    if (x2.tag === "Str") {
      return $Sum(
        "Inr",
        $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2)))))
      );
    }
    if (x2.tag === "Constr") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum("Inr", $Sum("Inl", $Product(x2._1, $Product(x2._2, x2._3))))
            )
          )
        )
      );
    }
    if (x2.tag === "Dictionary") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2)))))
          )
        )
      );
    }
    if (x2.tag === "Matrix") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum("Inl", $Product(x2._1, $Product(x2._2, $Product(x2._3, x2._4))))
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "Lambda") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", x2._1)))))
            )
          )
        )
      );
    }
    if (x2.tag === "Project") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))))
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "DProject") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))))
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "App") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "BinaryApp") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum("Inr", $Sum("Inl", $Product(x2._1, $Product(x2._2, x2._3))))
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "MatchAs") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))))
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "IfElse") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum("Inr", $Sum("Inl", $Product(x2._1, $Product(x2._2, x2._3))))
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "Paragraph") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", x2._1))))
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "ListEmpty") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", x2._1))))
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "ListNonEmpty") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum(
                                  "Inr",
                                  $Sum(
                                    "Inr",
                                    $Sum(
                                      "Inr",
                                      $Sum("Inr", $Sum("Inl", $Product(x2._1, $Product(x2._2, x2._3))))
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "ListEnum") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum(
                                  "Inr",
                                  $Sum(
                                    "Inr",
                                    $Sum(
                                      "Inr",
                                      $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))))
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "ListComp") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum(
                                  "Inr",
                                  $Sum(
                                    "Inr",
                                    $Sum(
                                      "Inr",
                                      $Sum(
                                        "Inr",
                                        $Sum(
                                          "Inr",
                                          $Sum("Inr", $Sum("Inl", $Product(x2._1, $Product(x2._2, x2._3))))
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "Let") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum(
                                  "Inr",
                                  $Sum(
                                    "Inr",
                                    $Sum(
                                      "Inr",
                                      $Sum(
                                        "Inr",
                                        $Sum(
                                          "Inr",
                                          $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))))
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "LetRec") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum(
                                  "Inr",
                                  $Sum(
                                    "Inr",
                                    $Sum(
                                      "Inr",
                                      $Sum(
                                        "Inr",
                                        $Sum(
                                          "Inr",
                                          $Sum(
                                            "Inr",
                                            $Sum("Inr", $Sum("Inr", $Sum("Inl", $Product(x2._1, x2._2))))
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2.tag === "DocExpr") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum(
                                  "Inr",
                                  $Sum(
                                    "Inr",
                                    $Sum(
                                      "Inr",
                                      $Sum(
                                        "Inr",
                                        $Sum(
                                          "Inr",
                                          $Sum(
                                            "Inr",
                                            $Sum("Inr", $Sum("Inr", $Sum("Inr", $Product(x2._1, x2._2))))
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    fail();
  }
};
var showVarDef = (dictShow) => ({
  show: (c) => genericShowConstructor(genericShowArgsProduct({ genericShowArgs: (v) => [showPattern1.show(v)] })((() => {
    const $0 = showExpr(dictShow);
    return { genericShowArgs: (v) => [$0.show(v)] };
  })()))(VarDefIsSymbol)["genericShow'"]($Product(c._1, c._2))
});
var showQualifier = (dictShow) => ({
  show: (c) => {
    const $0 = genericShowConstructor((() => {
      const $02 = showExpr(dictShow);
      return { genericShowArgs: (v) => [$02.show(v)] };
    })())(ListCompGuardIsSymbol);
    const $1 = genericShowConstructor(genericShowArgsProduct({ genericShowArgs: (v) => [showPattern1.show(v)] })((() => {
      const $12 = showExpr(dictShow);
      return { genericShowArgs: (v) => [$12.show(v)] };
    })()))(ListCompGenIsSymbol);
    const $2 = genericShowConstructor((() => {
      const $22 = showVarDef(dictShow);
      return { genericShowArgs: (v) => [$22.show(v)] };
    })())(ListCompDeclIsSymbol);
    if (c.tag === "ListCompGuard") {
      return $0["genericShow'"](c._1);
    }
    if (c.tag === "ListCompGen") {
      return $1["genericShow'"]($Product(c._1, c._2));
    }
    if (c.tag === "ListCompDecl") {
      return $2["genericShow'"](c._1);
    }
    fail();
  }
});
var showParagraphElem = (dictShow) => ({
  show: (c) => genericShowSum4(genericShowConstructor((() => {
    const $0 = showExpr(dictShow);
    return { genericShowArgs: (v) => [$0.show(v)] };
  })())(UnquoteIsSymbol))["genericShow'"]((() => {
    if (c.tag === "Token") {
      return $Sum("Inl", c._1);
    }
    if (c.tag === "Unquote") {
      return $Sum("Inr", c._1);
    }
    fail();
  })())
});
var showListRest = (dictShow) => {
  const genericShowArgsArgument3 = { genericShowArgs: (v) => [dictShow.show(v)] };
  const $0 = genericShowConstructor(genericShowArgsArgument3)(EndIsSymbol);
  return {
    show: (c) => {
      const $1 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsProduct((() => {
        const $12 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$12.show(v)] };
      })())((() => {
        const $12 = showListRest(dictShow);
        return { genericShowArgs: (v) => [$12.show(v)] };
      })())))(NextIsSymbol);
      if (c.tag === "End") {
        return $0["genericShow'"](c._1);
      }
      if (c.tag === "Next") {
        return $1["genericShow'"]($Product(c._1, $Product(c._2, c._3)));
      }
      fail();
    }
  };
};
var showExpr = (dictShow) => {
  const genericShowArgsArgument3 = { genericShowArgs: (v) => [dictShow.show(v)] };
  const $0 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsArgument1))(IntIsSymbol);
  const $1 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsArgument2))(FloatIsSymbol);
  const $2 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsArgument))(StrIsSymbol);
  const $3 = genericShowConstructor(genericShowArgsArgument3)(ListEmptyIsSymbol);
  return {
    show: (c) => genericShowSum5(genericShowSum6((() => {
      const $4 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsProduct(genericShowArgsArgument)((() => {
        const $42 = showList(showExpr(dictShow));
        return { genericShowArgs: (v) => [$42.show(v)] };
      })())))(ConstrIsSymbol);
      const $5 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)((() => {
        const $52 = showList((() => {
          const $53 = showDictEntry(dictShow);
          const $62 = showExpr(dictShow);
          return { show: (v) => "(Tuple " + $53.show(v._1) + " " + $62.show(v._2) + ")" };
        })());
        return { genericShowArgs: (v) => [$52.show(v)] };
      })()))(DictionaryIsSymbol);
      const $6 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsProduct((() => {
        const $62 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$62.show(v)] };
      })())(genericShowArgsProduct1((() => {
        const $62 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$62.show(v)] };
      })()))))(MatrixIsSymbol);
      const $7 = genericShowConstructor((() => {
        const $72 = showClauses(dictShow);
        return { genericShowArgs: (v) => [$72.show(v)] };
      })())(LambdaIsSymbol);
      const $8 = genericShowConstructor(genericShowArgsProduct((() => {
        const $82 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$82.show(v)] };
      })())(genericShowArgsArgument))(ProjectIsSymbol);
      const $9 = genericShowConstructor(genericShowArgsProduct((() => {
        const $92 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$92.show(v)] };
      })())((() => {
        const $92 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$92.show(v)] };
      })()))(DProjectIsSymbol);
      const $10 = genericShowConstructor(genericShowArgsProduct((() => {
        const $102 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$102.show(v)] };
      })())((() => {
        const $102 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$102.show(v)] };
      })()))(AppIsSymbol);
      const $11 = genericShowConstructor(genericShowArgsProduct((() => {
        const $112 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$112.show(v)] };
      })())(genericShowArgsProduct(genericShowArgsArgument)((() => {
        const $112 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$112.show(v)] };
      })())))(BinaryAppIsSymbol);
      const $12 = genericShowConstructor(genericShowArgsProduct((() => {
        const $122 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$122.show(v)] };
      })())((() => {
        const $122 = showNonEmptyList(showTuple1(showExpr(dictShow)));
        return { genericShowArgs: (v) => [$122.show(v)] };
      })()))(MatchAsIsSymbol);
      const $13 = genericShowConstructor(genericShowArgsProduct((() => {
        const $132 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$132.show(v)] };
      })())(genericShowArgsProduct((() => {
        const $132 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$132.show(v)] };
      })())((() => {
        const $132 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$132.show(v)] };
      })())))(IfElseIsSymbol);
      const $14 = genericShowConstructor((() => {
        const $142 = showList(showParagraphElem(dictShow));
        return { genericShowArgs: (v) => [$142.show(v)] };
      })())(ParagraphIsSymbol);
      const $15 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsProduct((() => {
        const $152 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$152.show(v)] };
      })())((() => {
        const $152 = showListRest(dictShow);
        return { genericShowArgs: (v) => [$152.show(v)] };
      })())))(ListNonEmptyIsSymbol);
      const $16 = genericShowConstructor(genericShowArgsProduct((() => {
        const $162 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$162.show(v)] };
      })())((() => {
        const $162 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$162.show(v)] };
      })()))(ListEnumIsSymbol);
      const $17 = genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument3)(genericShowArgsProduct((() => {
        const $172 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$172.show(v)] };
      })())((() => {
        const $172 = showList(showQualifier(dictShow));
        return { genericShowArgs: (v) => [$172.show(v)] };
      })())))(ListCompIsSymbol);
      const $18 = genericShowConstructor(genericShowArgsProduct((() => {
        const $182 = showNonEmptyList(showVarDef(dictShow));
        return { genericShowArgs: (v) => [$182.show(v)] };
      })())((() => {
        const $182 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$182.show(v)] };
      })()))(LetIsSymbol);
      const $19 = genericShowConstructor(genericShowArgsProduct((() => {
        const $192 = showNonEmptyList(showTuple(showClause(dictShow)));
        return { genericShowArgs: (v) => [$192.show(v)] };
      })())((() => {
        const $192 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$192.show(v)] };
      })()))(LetRecIsSymbol);
      const $20 = genericShowConstructor(genericShowArgsProduct((() => {
        const $202 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$202.show(v)] };
      })())((() => {
        const $202 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$202.show(v)] };
      })()))(DocExprIsSymbol);
      return {
        "genericShow'": (v) => {
          if (v.tag === "Inl") {
            return $0["genericShow'"](v._1);
          }
          if (v.tag === "Inr") {
            if (v._1.tag === "Inl") {
              return $1["genericShow'"](v._1._1);
            }
            if (v._1.tag === "Inr") {
              if (v._1._1.tag === "Inl") {
                return $2["genericShow'"](v._1._1._1);
              }
              if (v._1._1.tag === "Inr") {
                if (v._1._1._1.tag === "Inl") {
                  return $4["genericShow'"](v._1._1._1._1);
                }
                if (v._1._1._1.tag === "Inr") {
                  if (v._1._1._1._1.tag === "Inl") {
                    return $5["genericShow'"](v._1._1._1._1._1);
                  }
                  if (v._1._1._1._1.tag === "Inr") {
                    if (v._1._1._1._1._1.tag === "Inl") {
                      return $6["genericShow'"](v._1._1._1._1._1._1);
                    }
                    if (v._1._1._1._1._1.tag === "Inr") {
                      if (v._1._1._1._1._1._1.tag === "Inl") {
                        return $7["genericShow'"](v._1._1._1._1._1._1._1);
                      }
                      if (v._1._1._1._1._1._1.tag === "Inr") {
                        if (v._1._1._1._1._1._1._1.tag === "Inl") {
                          return $8["genericShow'"](v._1._1._1._1._1._1._1._1);
                        }
                        if (v._1._1._1._1._1._1._1.tag === "Inr") {
                          if (v._1._1._1._1._1._1._1._1.tag === "Inl") {
                            return $9["genericShow'"](v._1._1._1._1._1._1._1._1._1);
                          }
                          if (v._1._1._1._1._1._1._1._1.tag === "Inr") {
                            if (v._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                              return $10["genericShow'"](v._1._1._1._1._1._1._1._1._1._1);
                            }
                            if (v._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                              if (v._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                return $11["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1);
                              }
                              if (v._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                if (v._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                  return $12["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1);
                                }
                                if (v._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                  if (v._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                    return $13["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                  }
                                  if (v._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                    if (v._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                      return $14["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                    }
                                    if (v._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                      if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                        return $3["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                      }
                                      if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                        if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                          return $15["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                        }
                                        if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                          if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                            return $16["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                          }
                                          if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                            if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                              return $17["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                            }
                                            if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                              if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                                return $18["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                              }
                                              if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                                if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                                  return $19["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                                }
                                                if (v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                                  return $20["genericShow'"](v._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          fail();
        }
      };
    })()))["genericShow'"](genericExpr_.from(c))
  };
};
var showDictEntry = (dictShow) => {
  const genericShowConstructor2 = genericShowConstructor(genericShowArgsProduct({ genericShowArgs: (v) => [dictShow.show(v)] })(genericShowArgsArgument))(VarKeyIsSymbol);
  return {
    show: (c) => {
      const $0 = genericShowConstructor((() => {
        const $02 = showExpr(dictShow);
        return { genericShowArgs: (v) => [$02.show(v)] };
      })())(ExprKeyIsSymbol);
      if (c.tag === "ExprKey") {
        return $0["genericShow'"](c._1);
      }
      if (c.tag === "VarKey") {
        return genericShowConstructor2["genericShow'"]($Product(c._1, c._2));
      }
      fail();
    }
  };
};
var showClauses = (dictShow) => ({
  show: (c) => genericShowConstructor((() => {
    const $0 = showNonEmptyList(showClause(dictShow));
    return { genericShowArgs: (v) => [$0.show(v)] };
  })())(ClausesIsSymbol)["genericShow'"](c)
});
var showClause = (dictShow) => ({
  show: (c) => genericShowConstructor((() => {
    const $0 = showTuple2(showExpr(dictShow));
    return { genericShowArgs: (v) => [$0.show(v)] };
  })())(ClauseIsSymbol)["genericShow'"](c)
});
var show2 = /* @__PURE__ */ (() => showExpr(showUnit).show)();
var functorVarDef2 = { map: (f) => (m) => $VarDef2(m._1, functorExpr2.map(f)(m._2)) };
var functorQualifier = {
  map: (f) => (m) => {
    if (m.tag === "ListCompGuard") {
      return $Qualifier("ListCompGuard", functorExpr2.map(f)(m._1));
    }
    if (m.tag === "ListCompGen") {
      return $Qualifier("ListCompGen", m._1, functorExpr2.map(f)(m._2));
    }
    if (m.tag === "ListCompDecl") {
      return $Qualifier("ListCompDecl", $VarDef2(m._1._1, functorExpr2.map(f)(m._1._2)));
    }
    fail();
  }
};
var functorParagraphElem = {
  map: (f) => (m) => {
    if (m.tag === "Token") {
      return $ParagraphElem("Token", m._1);
    }
    if (m.tag === "Unquote") {
      return $ParagraphElem("Unquote", functorExpr2.map(f)(m._1));
    }
    fail();
  }
};
var functorListRest = {
  map: (f) => (m) => {
    if (m.tag === "End") {
      return $ListRest("End", f(m._1));
    }
    if (m.tag === "Next") {
      return $ListRest("Next", f(m._1), functorExpr2.map(f)(m._2), functorListRest.map(f)(m._3));
    }
    fail();
  }
};
var functorExpr2 = {
  map: (f) => (m) => {
    if (m.tag === "Var") {
      return $Expr2("Var", m._1);
    }
    if (m.tag === "Op") {
      return $Expr2("Op", m._1);
    }
    if (m.tag === "Int") {
      return $Expr2("Int", f(m._1), m._2);
    }
    if (m.tag === "Float") {
      return $Expr2("Float", f(m._1), m._2);
    }
    if (m.tag === "Str") {
      return $Expr2("Str", f(m._1), m._2);
    }
    if (m.tag === "Constr") {
      return $Expr2("Constr", f(m._1), m._2, listMap(functorExpr2.map(f))(m._3));
    }
    if (m.tag === "Dictionary") {
      return $Expr2(
        "Dictionary",
        f(m._1),
        listMap((() => {
          const $0 = functorDictEntry.map(f);
          const $1 = functorExpr2.map(f);
          return (v) => $Tuple($0(v._1), $1(v._2));
        })())(m._2)
      );
    }
    if (m.tag === "Matrix") {
      return $Expr2("Matrix", f(m._1), functorExpr2.map(f)(m._2), m._3, functorExpr2.map(f)(m._4));
    }
    if (m.tag === "Lambda") {
      return $Expr2("Lambda", functorClauses.map(f)(m._1));
    }
    if (m.tag === "Project") {
      return $Expr2("Project", functorExpr2.map(f)(m._1), m._2);
    }
    if (m.tag === "DProject") {
      return $Expr2("DProject", functorExpr2.map(f)(m._1), functorExpr2.map(f)(m._2));
    }
    if (m.tag === "App") {
      return $Expr2("App", functorExpr2.map(f)(m._1), functorExpr2.map(f)(m._2));
    }
    if (m.tag === "BinaryApp") {
      return $Expr2("BinaryApp", functorExpr2.map(f)(m._1), m._2, functorExpr2.map(f)(m._3));
    }
    if (m.tag === "MatchAs") {
      return $Expr2(
        "MatchAs",
        functorExpr2.map(f)(m._1),
        (() => {
          const $0 = functorExpr2.map(f);
          return $NonEmpty($Tuple(m._2._1._1, $0(m._2._1._2)), listMap((m$1) => $Tuple(m$1._1, $0(m$1._2)))(m._2._2));
        })()
      );
    }
    if (m.tag === "IfElse") {
      return $Expr2("IfElse", functorExpr2.map(f)(m._1), functorExpr2.map(f)(m._2), functorExpr2.map(f)(m._3));
    }
    if (m.tag === "Paragraph") {
      return $Expr2("Paragraph", listMap(functorParagraphElem.map(f))(m._1));
    }
    if (m.tag === "ListEmpty") {
      return $Expr2("ListEmpty", f(m._1));
    }
    if (m.tag === "ListNonEmpty") {
      return $Expr2("ListNonEmpty", f(m._1), functorExpr2.map(f)(m._2), functorListRest.map(f)(m._3));
    }
    if (m.tag === "ListEnum") {
      return $Expr2("ListEnum", functorExpr2.map(f)(m._1), functorExpr2.map(f)(m._2));
    }
    if (m.tag === "ListComp") {
      return $Expr2("ListComp", f(m._1), functorExpr2.map(f)(m._2), listMap(functorQualifier.map(f))(m._3));
    }
    if (m.tag === "Let") {
      return $Expr2(
        "Let",
        $NonEmpty($VarDef2(m._1._1._1, functorExpr2.map(f)(m._1._1._2)), listMap(functorVarDef2.map(f))(m._1._2)),
        functorExpr2.map(f)(m._2)
      );
    }
    if (m.tag === "LetRec") {
      return $Expr2(
        "LetRec",
        (() => {
          const $0 = functorClause.map(f);
          return $NonEmpty($Tuple(m._1._1._1, $0(m._1._1._2)), listMap((m$1) => $Tuple(m$1._1, $0(m$1._2)))(m._1._2));
        })(),
        functorExpr2.map(f)(m._2)
      );
    }
    if (m.tag === "DocExpr") {
      return $Expr2("DocExpr", functorExpr2.map(f)(m._1), functorExpr2.map(f)(m._2));
    }
    fail();
  }
};
var functorDictEntry = {
  map: (f) => (m) => {
    if (m.tag === "ExprKey") {
      return $DictEntry("ExprKey", functorExpr2.map(f)(m._1));
    }
    if (m.tag === "VarKey") {
      return $DictEntry("VarKey", f(m._1), m._2);
    }
    fail();
  }
};
var functorClauses = {
  map: (f) => (m) => {
    const $0 = functorClause.map(f);
    return $NonEmpty($0(m._1), listMap($0)(m._2));
  }
};
var functorClause = { map: (f) => (m) => $Tuple(m._1, functorExpr2.map(f)(m._2)) };
var eqPattern = {
  eq: (x2) => (y2) => {
    if (x2.tag === "PVar") {
      return y2.tag === "PVar" && x2._1 === y2._1;
    }
    if (x2.tag === "PConstr") {
      return y2.tag === "PConstr" && x2._1 === y2._1 && (() => {
        const go = (v) => (v1) => (v2) => {
          if (!v2) {
            return false;
          }
          if (v.tag === "Nil") {
            return v1.tag === "Nil" && v2;
          }
          return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && eqPattern.eq(v1._1)(v._1));
        };
        return go(x2._2)(y2._2)(true);
      })();
    }
    if (x2.tag === "PRecord") {
      return y2.tag === "PRecord" && (() => {
        const go = (v) => (v1) => (v2) => {
          if (!v2) {
            return false;
          }
          if (v.tag === "Nil") {
            return v1.tag === "Nil" && v2;
          }
          return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && v1._1._1 === v._1._1 && eqPattern.eq(v1._1._2)(v._1._2));
        };
        return go(x2._1)(y2._1)(true);
      })();
    }
    if (x2.tag === "PListEmpty") {
      return y2.tag === "PListEmpty";
    }
    return x2.tag === "PListNonEmpty" && y2.tag === "PListNonEmpty" && eqPattern.eq(x2._1)(y2._1) && eqListRestPattern.eq(x2._2)(y2._2);
  }
};
var eqListRestPattern = {
  eq: (x2) => (y2) => {
    if (x2.tag === "PListVar") {
      return y2.tag === "PListVar" && x2._1 === y2._1;
    }
    if (x2.tag === "PListEnd") {
      return y2.tag === "PListEnd";
    }
    return x2.tag === "PListNext" && y2.tag === "PListNext" && eqPattern.eq(x2._1)(y2._1) && eqListRestPattern.eq(x2._2)(y2._2);
  }
};
var eqList = {
  eq: (xs) => (ys) => {
    const go = (v) => (v1) => (v2) => {
      if (!v2) {
        return false;
      }
      if (v.tag === "Nil") {
        return v1.tag === "Nil" && v2;
      }
      return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v1._1.tag === "Left" ? v2 && v._1.tag === "Left" && eqPattern.eq(v1._1._1)(v._1._1) : v2 && v1._1.tag === "Right" && v._1.tag === "Right" && eqListRestPattern.eq(v1._1._1)(v._1._1));
    };
    return go(xs)(ys)(true);
  }
};
var eq8 = (xs) => (ys) => {
  const go = (v) => (v1) => (v2) => {
    if (!v2) {
      return false;
    }
    if (v.tag === "Nil") {
      return v1.tag === "Nil" && v2;
    }
    return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && eqPattern.eq(v1._1)(v._1));
  };
  return go(xs)(ys)(true);
};
var varKeyBwd = (v) => (v1) => {
  if (v.tag === "Str" && v1.tag === "VarKey") {
    return $DictEntry("VarKey", v._1, v1._2);
  }
  return throwException(error("absurd"))();
};
var toClausesStateFwd = (v) => listMap((v1) => $Tuple(
  $List("Cons", $Either("Left", v1._1._1), Nil),
  $Tuple(v1._1._2, v1._2)
))($List("Cons", v._1, v._2));
var toClausesStateBwd = (v) => {
  if (v.tag === "Nil") {
    return throwException(error(throwException(error("Shape mismatch"))()))();
  }
  if (v.tag === "Cons") {
    return $NonEmpty(
      v._1._1.tag === "Cons" && v._1._1._1.tag === "Left" && v._1._1._2.tag === "Nil" ? $Tuple($NonEmpty(v._1._1._1._1, v._1._2._1), v._1._2._2) : throwException(error(throwException(error("Shape mismatch"))()))(),
      listMap((v1) => {
        if (v1._1.tag === "Cons" && v1._1._1.tag === "Left" && v1._1._2.tag === "Nil") {
          return $Tuple($NonEmpty(v1._1._1._1, v1._2._1), v1._2._2);
        }
        return throwException(error(throwException(error("Shape mismatch"))()))();
      })(v._2)
    );
  }
  fail();
};
var subpatts = (v) => {
  if (v.tag === "Left") {
    if (v._1.tag === "PVar") {
      return Nil;
    }
    if (v._1.tag === "PConstr") {
      return listMap(Left)(v._1._2);
    }
    if (v._1.tag === "PRecord") {
      return listMap(Left)(listMap(snd)(v._1._1));
    }
    if (v._1.tag === "PListEmpty") {
      return Nil;
    }
    if (v._1.tag === "PListNonEmpty") {
      return $List("Cons", $Either("Left", v._1._1), $List("Cons", $Either("Right", v._1._2), Nil));
    }
    fail();
  }
  if (v.tag === "Right") {
    if (v._1.tag === "PListVar") {
      return Nil;
    }
    if (v._1.tag === "PListEnd") {
      return Nil;
    }
    if (v._1.tag === "PListNext") {
      return $List("Cons", $Either("Left", v._1._1), $List("Cons", $Either("Right", v._1._2), Nil));
    }
  }
  fail();
};
var showPattern = (v) => {
  if (v.tag === "Left") {
    return showPattern1.show(v._1);
  }
  if (v.tag === "Right") {
    return showListRestPattern.show(v._1);
  }
  fail();
};
var popVarFwd = (dictMonadError) => {
  const MonadThrow0 = dictMonadError.MonadThrow0();
  const Monad0 = MonadThrow0.Monad0();
  return (v) => (v1) => {
    if (v1.tag === "Cons") {
      if (v1._1._1.tag === "Cons" && v1._1._1._1.tag === "Left" && v1._1._1._1._1.tag === "PVar") {
        const $0 = v1._1._2._2;
        const $1 = v1._1._1._1._1._1;
        const $2 = v1._1._1._2;
        const $3 = v1._1._2._1;
        return Monad0.Bind1().Apply0().Functor0().map((v2) => $List("Cons", $Tuple($2, $Tuple($3, $0)), v2))(popVarFwd(dictMonadError)(assertWhen(false)("mustEq")((v$1) => v === $1)(v))(v1._2));
      }
      return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
    }
    if (v1.tag === "Nil") {
      return Monad0.Applicative0().pure(Nil);
    }
    return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
  };
};
var popVarFwd1 = /* @__PURE__ */ popVarFwd(monadErrorExceptT2);
var popVarBwd = (v) => (v1) => {
  if (v1.tag === "Cons") {
    return $List(
      "Cons",
      $Tuple($List("Cons", $Either("Left", $Pattern("PVar", v)), v1._1._1), $Tuple(v1._1._2._1, v1._1._2._2)),
      popVarBwd(v)(v1._2)
    );
  }
  if (v1.tag === "Nil") {
    return Nil;
  }
  fail();
};
var popRecordFwd = (dictMonadError) => {
  const MonadThrow0 = dictMonadError.MonadThrow0();
  const Monad0 = MonadThrow0.Monad0();
  return (v) => (v1) => {
    if (v1.tag === "Cons") {
      if (v1._1._1.tag === "Cons" && v1._1._1._1.tag === "Left" && v1._1._1._1._1.tag === "PRecord") {
        const $0 = v1._1._2._2;
        const $1 = v1._1._1._1._1._1;
        const $2 = v1._1._1._2;
        const $3 = v1._1._2._1;
        return assertWith("")((() => {
          const go = (v$1) => (v1$1) => (v2) => {
            if (!v2) {
              return false;
            }
            if (v$1.tag === "Nil") {
              return v1$1.tag === "Nil" && v2;
            }
            return v$1.tag === "Cons" && v1$1.tag === "Cons" && go(v$1._2)(v1$1._2)(v2 && v1$1._1 === v$1._1);
          };
          return go(listMap(fst)($1))(v)(true);
        })())(Monad0.Bind1().Apply0().Functor0().map((v2) => $List(
          "Cons",
          $Tuple(
            foldableList.foldr(Cons)($2)(listMap((x2) => $Either("Left", x2._2))($1)),
            $Tuple($3, $0)
          ),
          v2
        ))(popRecordFwd(dictMonadError)(v)(v1._2)));
      }
      return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
    }
    if (v1.tag === "Nil") {
      return Monad0.Applicative0().pure(Nil);
    }
    return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
  };
};
var popRecordFwd1 = /* @__PURE__ */ popRecordFwd(monadErrorExceptT2);
var popRecordBwd = (v) => (v1) => {
  if (v1.tag === "Cons") {
    return $List(
      "Cons",
      $Tuple(
        $List(
          "Cons",
          $Either(
            "Left",
            $Pattern(
              "PRecord",
              (() => {
                const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
                  let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
                  while (go$c) {
                    const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
                    if (v$1.tag === "Nil") {
                      go$c = false;
                      go$r = v2;
                      continue;
                    }
                    if (v1$1.tag === "Nil") {
                      go$c = false;
                      go$r = v2;
                      continue;
                    }
                    if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                      go$a0 = v$1._2;
                      go$a1 = v1$1._2;
                      go$a2 = $List("Cons", $Tuple(v$1._1, v1$1._1), v2);
                      continue;
                    }
                    fail();
                  }
                  return go$r;
                };
                const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
                  let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
                  while (go$1$c) {
                    const v$1 = go$1$a0, v1$1 = go$1$a1;
                    if (v1$1.tag === "Nil") {
                      go$1$c = false;
                      go$1$r = v$1;
                      continue;
                    }
                    if (v1$1.tag === "Cons") {
                      go$1$a0 = $List("Cons", v1$1._1, v$1);
                      go$1$a1 = v1$1._2;
                      continue;
                    }
                    fail();
                  }
                  return go$1$r;
                };
                return go$1(Nil)(go(v)(listMap((v2) => {
                  if (v2.tag === "Left") {
                    return v2._1;
                  }
                  fail();
                })(take3((() => {
                  const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => {
                    let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$c = true, go$2$r;
                    while (go$2$c) {
                      const b = go$2$a0, v$1 = go$2$a1;
                      if (v$1.tag === "Nil") {
                        go$2$c = false;
                        go$2$r = b;
                        continue;
                      }
                      if (v$1.tag === "Cons") {
                        go$2$a0 = 1 + b | 0;
                        go$2$a1 = v$1._2;
                        continue;
                      }
                      fail();
                    }
                    return go$2$r;
                  };
                  return go$2(0)(v);
                })())(v1._1._1)))(Nil));
              })()
            )
          ),
          drop2((() => {
            const go = (go$a0$copy) => (go$a1$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
              while (go$c) {
                const b = go$a0, v$1 = go$a1;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = b;
                  continue;
                }
                if (v$1.tag === "Cons") {
                  go$a0 = 1 + b | 0;
                  go$a1 = v$1._2;
                  continue;
                }
                fail();
              }
              return go$r;
            };
            return go(0)(v);
          })())(v1._1._1)
        ),
        $Tuple(v1._1._2._1, v1._1._2._2)
      ),
      popRecordBwd(v)(v1._2)
    );
  }
  if (v1.tag === "Nil") {
    return Nil;
  }
  fail();
};
var popListVarFwd = (dictMonadError) => {
  const MonadThrow0 = dictMonadError.MonadThrow0();
  const Monad0 = MonadThrow0.Monad0();
  return (v) => (v1) => {
    if (v1.tag === "Cons") {
      if (v1._1._1.tag === "Cons" && v1._1._1._1.tag === "Right" && v1._1._1._1._1.tag === "PListVar") {
        const $0 = v1._1._2._2;
        const $1 = v1._1._1._1._1._1;
        const $2 = v1._1._1._2;
        const $3 = v1._1._2._1;
        return Monad0.Bind1().Apply0().Functor0().map((v2) => $List("Cons", $Tuple($2, $Tuple($3, $0)), v2))(popListVarFwd(dictMonadError)(assertWhen(false)("mustEq")((v$1) => v === $1)(v))(v1._2));
      }
      return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
    }
    if (v1.tag === "Nil") {
      return Monad0.Applicative0().pure(Nil);
    }
    return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
  };
};
var popListVarFwd1 = /* @__PURE__ */ popListVarFwd(monadErrorExceptT2);
var popListVarBwd = (v) => (v1) => {
  if (v1.tag === "Cons") {
    return $List(
      "Cons",
      $Tuple($List("Cons", $Either("Left", $Pattern("PVar", v)), v1._1._1), $Tuple(v1._1._2._1, v1._1._2._2)),
      popListVarBwd(v)(v1._2)
    );
  }
  if (v1.tag === "Nil") {
    return Nil;
  }
  fail();
};
var popArgFwd = (dictMonadError) => {
  const MonadThrow0 = dictMonadError.MonadThrow0();
  const Monad0 = MonadThrow0.Monad0();
  return (v) => {
    if (v.tag === "Cons") {
      if (v._1._1.tag === "Nil" && v._1._2._1.tag === "Cons") {
        const $0 = v._1._2._1._1;
        const $1 = v._1._2._2;
        const $2 = v._1._2._1._2;
        return Monad0.Bind1().Apply0().Functor0().map((v1) => $List(
          "Cons",
          $Tuple($List("Cons", $Either("Left", $0), Nil), $Tuple($2, $1)),
          v1
        ))(popArgFwd(dictMonadError)(v._2));
      }
      return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
    }
    if (v.tag === "Nil") {
      return Monad0.Applicative0().pure(Nil);
    }
    return MonadThrow0.throwError(error(throwException(error("Shape mismatch"))()));
  };
};
var popArgFwd1 = /* @__PURE__ */ popArgFwd(monadErrorExceptT2);
var popArgBwd = (v) => {
  if (v.tag === "Cons") {
    if (v._1._1.tag === "Cons" && v._1._1._1.tag === "Left" && v._1._1._2.tag === "Nil") {
      return $List(
        "Cons",
        $Tuple(Nil, $Tuple($List("Cons", v._1._1._1._1, v._1._2._1), v._1._2._2)),
        popArgBwd(v._2)
      );
    }
    return throwException(error("absurd"))();
  }
  if (v.tag === "Nil") {
    return Nil;
  }
  return throwException(error("absurd"))();
};
var unless = (v) => {
  if (v.tag === "Left") {
    if (v._1.tag === "PVar") {
      return Nil;
    }
    if (v._1.tag === "PRecord") {
      return Nil;
    }
    if (v._1.tag === "PConstr") {
      return listMap((c$p) => $Either(
        "Left",
        $Pattern(
          "PConstr",
          c$p,
          (() => {
            const go = (go$a0$copy) => (go$a1$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
              while (go$c) {
                const source2 = go$a0, memo = go$a1;
                if (source2 <= 0) {
                  const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
                    let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
                    while (go$1$c) {
                      const b = go$1$a0, v$1 = go$1$a1;
                      if (v$1.tag === "Nil") {
                        go$1$c = false;
                        go$1$r = b;
                        continue;
                      }
                      if (v$1.tag === "Cons") {
                        go$1$a0 = $List("Cons", v$1._1, b);
                        go$1$a1 = v$1._2;
                        continue;
                      }
                      fail();
                    }
                    return go$1$r;
                  };
                  go$c = false;
                  go$r = go$1(Nil)(memo);
                  continue;
                }
                go$a0 = source2 - 1 | 0;
                go$a1 = $List("Cons", $Pattern("PVar", "_"), memo);
              }
              return go$r;
            };
            return go(defined(arity(monadThrowExceptT2)(c$p)))(Nil);
          })()
        )
      ))(difference2(toUnfoldable3(fromFoldable1(mapObjectString.keys(defined(dataTypeForCtr.dataTypeFor(monadThrowExceptT2)(v._1._1))._2))))($List(
        "Cons",
        v._1._1,
        Nil
      )));
    }
    if (v._1.tag === "PListEmpty") {
      return $List(
        "Cons",
        $Either(
          "Left",
          $Pattern(
            "PConstr",
            ":",
            (() => {
              const go = (go$a0$copy) => (go$a1$copy) => {
                let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
                while (go$c) {
                  const source2 = go$a0, memo = go$a1;
                  if (source2 <= 0) {
                    const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
                      let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
                      while (go$1$c) {
                        const b = go$1$a0, v$1 = go$1$a1;
                        if (v$1.tag === "Nil") {
                          go$1$c = false;
                          go$1$r = b;
                          continue;
                        }
                        if (v$1.tag === "Cons") {
                          go$1$a0 = $List("Cons", v$1._1, b);
                          go$1$a1 = v$1._2;
                          continue;
                        }
                        fail();
                      }
                      return go$1$r;
                    };
                    go$c = false;
                    go$r = go$1(Nil)(memo);
                    continue;
                  }
                  go$a0 = source2 - 1 | 0;
                  go$a1 = $List("Cons", $Pattern("PVar", "_"), memo);
                }
                return go$r;
              };
              return go(2)(Nil);
            })()
          )
        ),
        Nil
      );
    }
    if (v._1.tag === "PListNonEmpty") {
      return $List("Cons", $Either("Left", PListEmpty), Nil);
    }
    fail();
  }
  if (v.tag === "Right") {
    if (v._1.tag === "PListVar") {
      return Nil;
    }
    if (v._1.tag === "PListNext") {
      return $List("Cons", $Either("Right", PListEnd), Nil);
    }
    if (v._1.tag === "PListEnd") {
      return $List(
        "Cons",
        $Either("Right", $ListRestPattern("PListNext", $Pattern("PVar", "_"), $ListRestPattern("PListVar", "_"))),
        Nil
      );
    }
  }
  fail();
};
var forConstrFwd = (v) => (v1) => (v2) => {
  if (v2.tag === "Nil") {
    return $List("Cons", $Tuple(v, $List("Cons", v1, Nil)), Nil);
  }
  if (v2.tag === "Cons") {
    if (v === v2._1._1) {
      return $List("Cons", $Tuple(v2._1._1, $List("Cons", v1, v2._1._2)), v2._2);
    }
    return $List("Cons", $Tuple(v2._1._1, v2._1._2), forConstrFwd(v)(v1)(v2._2));
  }
  fail();
};
var forConstrBwd = (v) => (v1) => {
  if (v1.tag === "Nil") {
    return Nothing;
  }
  if (v1.tag === "Cons") {
    if (v === v1._1._1) {
      if (v1._1._2.tag === "Nil") {
        return Nothing;
      }
      if (v1._1._2.tag === "Cons") {
        return $Maybe("Just", $Tuple(v1._1._2._1, $List("Cons", $Tuple(v1._1._1, v1._1._2._2), v1._2)));
      }
      fail();
    }
    const $0 = forConstrBwd(v)(v1._2);
    if ($0.tag === "Just") {
      return $Maybe("Just", $Tuple($0._1._1, $List("Cons", $Tuple(v1._1._1, v1._1._2), $0._1._2)));
    }
    return Nothing;
  }
  fail();
};
var elimBool = (\u03BA) => (\u03BA$p) => $Elim("ElimConstr", fromFoldable5([$Tuple("True", \u03BA), $Tuple("False", \u03BA$p)]));
var popConstrBwd = (v) => (v1) => {
  if (v1.tag === "Cons") {
    if (v1._1._1.tag === "Nil") {
      return throwException(error("absurd"))();
    }
    if (v1._1._1.tag === "Cons") {
      const v2 = forConstrBwd(definitely("absurd")((() => {
        if (v1._1._1._1.tag === "Left") {
          if (v1._1._1._1._1.tag === "PVar") {
            return Nothing;
          }
          if (v1._1._1._1._1.tag === "PConstr") {
            return $Maybe("Just", v1._1._1._1._1._1);
          }
          if (v1._1._1._1._1.tag === "PRecord") {
            return Nothing;
          }
          if (v1._1._1._1._1.tag === "PListEmpty") {
            return $Maybe("Just", "Nil");
          }
          if (v1._1._1._1._1.tag === "PListNonEmpty") {
            return $Maybe("Just", ":");
          }
          fail();
        }
        if (v1._1._1._1.tag === "Right") {
          if (v1._1._1._1._1.tag === "PListVar") {
            return Nothing;
          }
          if (v1._1._1._1._1.tag === "PListEnd") {
            return $Maybe("Just", "Nil");
          }
          if (v1._1._1._1._1.tag === "PListNext") {
            return $Maybe("Just", ":");
          }
        }
        fail();
      })()))(v);
      if (v2.tag === "Nothing") {
        return popConstrBwd(v)(v1._2);
      }
      if (v2.tag === "Just") {
        if (eqList.eq(v2._1._1._1)(foldableList.foldr(Cons)(v1._1._1._2)(subpatts(v1._1._1._1))) && eq8(v2._1._1._2._1)(v1._1._2._1)) {
          return $List(
            "Cons",
            $Tuple($List("Cons", v1._1._1._1, v1._1._1._2), $Tuple(v1._1._2._1, v2._1._1._2._2)),
            popConstrBwd(v2._1._2)(v1._2)
          );
        }
        return popConstrBwd(v)(v1._2);
      }
    }
    fail();
  }
  if (v1.tag === "Nil") {
    return Nil;
  }
  fail();
};
var popConstrFwd = (dictMonadError) => {
  const Monad0 = dictMonadError.MonadThrow0().Monad0();
  return (v) => (v1) => {
    if (v1.tag === "Cons") {
      if (v1._1._1.tag === "Nil") {
        return throwException(error("absurd"))();
      }
      if (v1._1._1.tag === "Cons") {
        const \u03C0 = subpatts(v1._1._1._1);
        const c = definitely("Failed to distinguish constructor: " + showPattern(v1._1._1._1))((() => {
          if (v1._1._1._1.tag === "Left") {
            if (v1._1._1._1._1.tag === "PVar") {
              return Nothing;
            }
            if (v1._1._1._1._1.tag === "PConstr") {
              return $Maybe("Just", v1._1._1._1._1._1);
            }
            if (v1._1._1._1._1.tag === "PRecord") {
              return Nothing;
            }
            if (v1._1._1._1._1.tag === "PListEmpty") {
              return $Maybe("Just", "Nil");
            }
            if (v1._1._1._1._1.tag === "PListNonEmpty") {
              return $Maybe("Just", ":");
            }
            fail();
          }
          if (v1._1._1._1.tag === "Right") {
            if (v1._1._1._1._1.tag === "PListVar") {
              return Nothing;
            }
            if (v1._1._1._1._1.tag === "PListEnd") {
              return $Maybe("Just", "Nil");
            }
            if (v1._1._1._1._1.tag === "PListNext") {
              return $Maybe("Just", ":");
            }
          }
          fail();
        })());
        return assertWith("")((() => {
          const go = (go$a0$copy) => (go$a1$copy) => {
            let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
            while (go$c) {
              const b = go$a0, v$1 = go$a1;
              if (v$1.tag === "Nil") {
                go$c = false;
                go$r = b;
                continue;
              }
              if (v$1.tag === "Cons") {
                go$a0 = 1 + b | 0;
                go$a1 = v$1._2;
                continue;
              }
              fail();
            }
            return go$r;
          };
          return go(0)(\u03C0) === defined(arity(monadThrowExceptT2)(c)) && defined(dataTypeForCtr.dataTypeFor(monadThrowExceptT2)(c))._1 === v._1;
        })())(Monad0.Bind1().Apply0().Functor0().map(forConstrFwd(c)($Tuple(
          foldableList.foldr(Cons)(v1._1._1._2)(\u03C0),
          $Tuple(v1._1._2._1, v1._1._2._2)
        )))(popConstrFwd(dictMonadError)(v)(v1._2)));
      }
      fail();
    }
    if (v1.tag === "Nil") {
      return Monad0.Applicative0().pure(Nil);
    }
    fail();
  };
};
var popConstrFwd1 = /* @__PURE__ */ popConstrFwd(monadErrorExceptT2);
var anon = (v) => {
  if (v.tag === "Left") {
    return $Either("Left", $Pattern("PVar", "_"));
  }
  if (v.tag === "Right") {
    return $Either("Right", $ListRestPattern("PListVar", "_"));
  }
  fail();
};
var orElseBwd = (dictBoundedJoinSemilattice) => {
  const bot = dictBoundedJoinSemilattice.bot;
  const $0 = dictBoundedJoinSemilattice.JoinSemilattice0();
  return (v) => (ks) => {
    if (v._1.tag === "Nil") {
      if (ks._1._1.tag === "Nil" && ks._2.tag === "Nil") {
        return $Tuple(bot, ks._1._2);
      }
      fail();
    }
    if (v._1.tag === "Cons") {
      const $1 = v._1._2;
      const popIfPresent = (v1) => (v2) => {
        if (v1.tag === "Nil") {
          return $Tuple(bot, v2);
        }
        const v3 = unsnoc3(v2);
        const v4 = unsnoc3(nonEmptyListNonEmptyList.nonEmpty(v1));
        if (!eqList.eq($List("Cons", v4.last, listMap(anon)($1)))(v3.last._1)) {
          return popIfPresent(v4.init)(v2);
        }
        const $22 = popIfPresent(v4.init)(nonEmptyListNonEmptyList.nonEmpty(v3.init));
        return $Tuple(
          $0.join($22._1)((() => {
            if (v3.last._2.tag === "ListEmpty") {
              return v3.last._2._1;
            }
            fail();
          })()),
          $22._2
        );
      };
      const $2 = popIfPresent(unless(v._1._1))(ks);
      const $3 = orElseBwd(dictBoundedJoinSemilattice)($Tuple(foldableList.foldr(Cons)($1)(subpatts(v._1._1)), v._2))($NonEmpty(
        (() => {
          if ($2._2._1._1.tag === "Cons") {
            return $Tuple(foldableList.foldr(Cons)($2._2._1._1._2)(subpatts($2._2._1._1._1)), $2._2._1._2);
          }
          fail();
        })(),
        listMap((v2) => {
          if (v2._1.tag === "Cons") {
            return $Tuple(foldableList.foldr(Cons)(v2._1._2)(subpatts(v2._1._1)), v2._2);
          }
          fail();
        })($2._2._2)
      ));
      return $Tuple($0.join($3._1)($2._1), $3._2);
    }
    fail();
  };
};
var orElseFwd = (\u03B1) => (v) => {
  if (v._1.tag === "Nil") {
    return $NonEmpty($Tuple(Nil, v._2), Nil);
  }
  if (v._1.tag === "Cons") {
    const $0 = v._1._2;
    const \u03C0$p = subpatts(v._1._1);
    const $1 = orElseFwd(\u03B1)($Tuple(foldableList.foldr(Cons)($0)(\u03C0$p), v._2));
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const b = go$a0, v$1 = go$a1;
        if (v$1.tag === "Nil") {
          go$c = false;
          go$r = b;
          continue;
        }
        if (v$1.tag === "Cons") {
          go$a0 = 1 + b | 0;
          go$a1 = v$1._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    const $2 = go(0)(\u03C0$p);
    const $3 = (v$1) => $Tuple(take3($2)(v$1._1), $Tuple(drop2($2)(v$1._1), v$1._2));
    const $4 = (() => {
      if (v._1._1.tag === "Left") {
        if (v._1._1._1.tag === "PVar") {
          const $42 = v._1._1._1._1;
          return (v1) => $Tuple($List("Cons", $Either("Left", $Pattern("PVar", $42)), v1._2._1), v1._2._2);
        }
        if (v._1._1._1.tag === "PRecord") {
          const $42 = v._1._1._1._1;
          return (v1) => $Tuple(
            $List(
              "Cons",
              $Either(
                "Left",
                $Pattern(
                  "PRecord",
                  (() => {
                    const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => (go$1$a2$copy) => {
                      let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$a2 = go$1$a2$copy, go$1$c = true, go$1$r;
                      while (go$1$c) {
                        const v$1 = go$1$a0, v1$1 = go$1$a1, v2 = go$1$a2;
                        if (v$1.tag === "Nil") {
                          go$1$c = false;
                          go$1$r = v2;
                          continue;
                        }
                        if (v1$1.tag === "Nil") {
                          go$1$c = false;
                          go$1$r = v2;
                          continue;
                        }
                        if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                          go$1$a0 = v$1._2;
                          go$1$a1 = v1$1._2;
                          go$1$a2 = $List("Cons", $Tuple(v$1._1, v1$1._1), v2);
                          continue;
                        }
                        fail();
                      }
                      return go$1$r;
                    };
                    const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => {
                      let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$c = true, go$2$r;
                      while (go$2$c) {
                        const v$1 = go$2$a0, v1$1 = go$2$a1;
                        if (v1$1.tag === "Nil") {
                          go$2$c = false;
                          go$2$r = v$1;
                          continue;
                        }
                        if (v1$1.tag === "Cons") {
                          go$2$a0 = $List("Cons", v1$1._1, v$1);
                          go$2$a1 = v1$1._2;
                          continue;
                        }
                        fail();
                      }
                      return go$2$r;
                    };
                    return go$2(Nil)(go$1(listMap(fst)($42))(listMap((v2) => {
                      if (v2.tag === "Left") {
                        return v2._1;
                      }
                      fail();
                    })(v1._1))(Nil));
                  })()
                )
              ),
              v1._2._1
            ),
            v1._2._2
          );
        }
        if (v._1._1._1.tag === "PConstr") {
          const $42 = v._1._1._1._1;
          return (v1) => $Tuple(
            $List(
              "Cons",
              $Either(
                "Left",
                $Pattern(
                  "PConstr",
                  $42,
                  listMap((v2) => {
                    if (v2.tag === "Left") {
                      return v2._1;
                    }
                    fail();
                  })(v1._1)
                )
              ),
              v1._2._1
            ),
            v1._2._2
          );
        }
        if (v._1._1._1.tag === "PListEmpty") {
          return (v1) => $Tuple($List("Cons", $Either("Left", PListEmpty), v1._2._1), v1._2._2);
        }
        if (v._1._1._1.tag === "PListNonEmpty") {
          return (v1) => {
            if (v1._1.tag === "Cons" && v1._1._1.tag === "Left" && v1._1._2.tag === "Cons" && v1._1._2._1.tag === "Right" && v1._1._2._2.tag === "Nil") {
              return $Tuple($List("Cons", $Either("Left", $Pattern("PListNonEmpty", v1._1._1._1, v1._1._2._1._1)), v1._2._1), v1._2._2);
            }
            fail();
          };
        }
        fail();
      }
      if (v._1._1.tag === "Right") {
        if (v._1._1._1.tag === "PListVar") {
          const $42 = v._1._1._1._1;
          return (v1) => $Tuple($List("Cons", $Either("Right", $ListRestPattern("PListVar", $42)), v1._2._1), v1._2._2);
        }
        if (v._1._1._1.tag === "PListNext") {
          return (v1) => {
            if (v1._1.tag === "Cons" && v1._1._1.tag === "Left" && v1._1._2.tag === "Cons" && v1._1._2._1.tag === "Right" && v1._1._2._2.tag === "Nil") {
              return $Tuple(
                $List("Cons", $Either("Right", $ListRestPattern("PListNext", v1._1._1._1, v1._1._2._1._1)), v1._2._1),
                v1._2._2
              );
            }
            fail();
          };
        }
        if (v._1._1._1.tag === "PListEnd") {
          return (v1) => $Tuple($List("Cons", $Either("Right", PListEnd), v1._2._1), v1._2._2);
        }
      }
      fail();
    })();
    return $NonEmpty(
      $4($3($1._1)),
      foldableList.foldr(Cons)(listMap((p$p) => $Tuple(
        $List("Cons", p$p, listMap(anon)($0)),
        $Expr2("ListEmpty", \u03B1)
      ))(unless(v._1._1)))(listMap($4)(listMap(($5) => $3($5))($1._2)))
    );
  }
  fail();
};
var desugarableListRestExpr = {
  desug: (dictMonadError) => (dictBoundedLattice) => {
    const Monad0 = dictMonadError.MonadThrow0().Monad0();
    const Apply0 = Monad0.Bind1().Apply0();
    return (v) => {
      if (v.tag === "End") {
        return Monad0.Applicative0().pure($Expr("Constr", v._1, "Nil", Nil));
      }
      if (v.tag === "Next") {
        const $0 = v._1;
        return Apply0.apply(Apply0.Functor0().map((e) => (e$p) => $Expr(
          "Constr",
          $0,
          ":",
          $List("Cons", e, $List("Cons", e$p, Nil))
        ))(desugarableExprExpr.desug(dictMonadError)(dictBoundedLattice)(v._2)))(desugarableListRestExpr.desug(dictMonadError)(dictBoundedLattice)(v._3));
      }
      fail();
    };
  },
  desugBwd: (dictBoundedJoinSemilattice) => (v) => (v1) => {
    if (v.tag === "Constr") {
      if (v1.tag === "End") {
        return $ListRest("End", v._1);
      }
      if (v._3.tag === "Cons" && v._3._2.tag === "Cons" && v._3._2._2.tag === "Nil" && v1.tag === "Next") {
        return $ListRest(
          "Next",
          v._1,
          desugarableExprExpr.desugBwd(dictBoundedJoinSemilattice)(v._3._1)(v1._2),
          desugarableListRestExpr.desugBwd(dictBoundedJoinSemilattice)(v._3._2._1)(v1._3)
        );
      }
    }
    return throwException(error("absurd"))();
  },
  Functor0: () => functorListRest,
  Functor1: () => functorExpr
};
var desugarableExprExpr = {
  desug: (dictMonadError) => (dictBoundedLattice) => exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0()),
  desugBwd: (dictBoundedJoinSemilattice) => exprBwd(dictBoundedJoinSemilattice),
  Functor0: () => functorExpr2,
  Functor1: () => functorExpr
};
var desugarableDictEntryExpr = {
  desug: (dictMonadError) => (dictBoundedLattice) => (v) => {
    if (v.tag === "ExprKey") {
      return exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1);
    }
    if (v.tag === "VarKey") {
      return dictMonadError.MonadThrow0().Monad0().Applicative0().pure($Expr("Str", v._1, v._2));
    }
    fail();
  },
  desugBwd: (dictBoundedJoinSemilattice) => (v) => (v1) => {
    if (v1.tag === "ExprKey") {
      return $DictEntry("ExprKey", exprBwd(dictBoundedJoinSemilattice)(v)(v1._1));
    }
    return varKeyBwd(v)(v1);
  },
  Functor0: () => functorDictEntry,
  Functor1: () => functorExpr
};
var desugarableClausesElim = {
  desug: (dictMonadError) => (dictBoundedLattice) => {
    const $0 = dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0();
    return (\u03BC) => $0.map(asElim)(clausesStateFwd(dictBoundedLattice)(dictMonadError)(toClausesStateFwd(\u03BC)));
  },
  desugBwd: (dictBoundedJoinSemilattice) => (\u03C3) => (\u03BC) => toClausesStateBwd(clausesStateBwd(dictBoundedJoinSemilattice)($Cont("ContElim", \u03C3))(toClausesStateFwd(\u03BC))),
  Functor0: () => functorClauses,
  Functor1: () => functorElim
};
var varDefsFwd = (dictMonadError) => {
  const Apply0 = dictMonadError.MonadThrow0().Monad0().Bind1().Apply0();
  const $0 = Apply0.Functor0();
  return (dictBoundedLattice) => (v) => {
    if (v._1._2.tag === "Nil") {
      return Apply0.apply($0.map(Let)(varDefFwd(dictMonadError)(dictBoundedLattice)(v._1._1)))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2));
    }
    if (v._1._2.tag === "Cons") {
      return Apply0.apply($0.map(Let)(varDefFwd(dictMonadError)(dictBoundedLattice)(v._1._1)))(varDefsFwd(dictMonadError)(dictBoundedLattice)($Tuple(
        $NonEmpty(v._1._2._1, v._1._2._2),
        v._2
      )));
    }
    fail();
  };
};
var varDefsBwd = (dictBoundedJoinSemilattice) => (v) => (v1) => {
  if (v.tag === "Let") {
    if (v1._1._2.tag === "Nil") {
      return $Tuple(
        $NonEmpty($VarDef2(v1._1._1._1, exprBwd(dictBoundedJoinSemilattice)(v._1._2)(v1._1._1._2)), Nil),
        exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._2)
      );
    }
    if (v1._1._2.tag === "Cons") {
      const v2 = varDefsBwd(dictBoundedJoinSemilattice)(v._2)($Tuple($NonEmpty(v1._1._2._1, v1._1._2._2), v1._2));
      return $Tuple(
        $NonEmpty($VarDef2(v1._1._1._1, exprBwd(dictBoundedJoinSemilattice)(v._1._2)(v1._1._1._2)), $List("Cons", v2._1._1, v2._1._2)),
        v2._2
      );
    }
  }
  return throwException(error("absurd"))();
};
var varDefFwd = (dictMonadError) => {
  const Apply0 = dictMonadError.MonadThrow0().Monad0().Bind1().Apply0();
  return (dictBoundedLattice) => {
    const top3 = dictBoundedLattice.BoundedMeetSemilattice1().top;
    return (v) => Apply0.apply(Apply0.Functor0().map(VarDef)(desugarableClausesElim.desug(dictMonadError)(dictBoundedLattice)($NonEmpty(
      $Tuple($NonEmpty(v._1, Nil), $Expr2("Dictionary", top3, Nil)),
      Nil
    ))))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2));
  };
};
var recDefsFwd = (dictMonadError) => {
  const Monad0 = dictMonadError.MonadThrow0().Monad0();
  const traverse22 = traversableNonEmptyList.traverse(Monad0.Applicative0());
  return (dictBoundedLattice) => {
    const top3 = dictBoundedLattice.BoundedMeetSemilattice1().top;
    return (xcs) => Monad0.Bind1().Apply0().Functor0().map((() => {
      const $0 = RecDefs(top3);
      return (x2) => $0(fromFoldable12(x2));
    })())(traverse22(recDefFwd(dictMonadError)(dictBoundedLattice))((() => {
      const $0 = wrappedOperation("groupBy")(groupBy2((x2) => (y2) => x2._1 === y2._1))(xcs);
      return $NonEmpty($0._1, listMap(RecDef)($0._2));
    })()));
  };
};
var recDefsBwd = (dictBoundedJoinSemilattice) => (v) => (xcs) => {
  const $0 = v._2;
  const go = (v1) => $NonEmpty(
    recDefBwd(dictBoundedJoinSemilattice)($Tuple(v1._1._1._1, $$get(showString)(mapDictString)(v1._1._1._1)($0)))(v1._1),
    (() => {
      if (v1._2.tag === "Nil") {
        return Nil;
      }
      if (v1._2.tag === "Cons") {
        const $1 = go($NonEmpty(v1._2._1, v1._2._2));
        return $List("Cons", $1._1, $1._2);
      }
      fail();
    })()
  );
  return bindNonEmptyList.bind(go(wrappedOperation("groupBy")(groupBy2((x2) => (y2) => x2._1 === y2._1))(xcs)))(identity5);
};
var recDefFwd = (dictMonadError) => (dictBoundedLattice) => (xcs) => dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0().map((v) => $Tuple(xcs._1._1, v))(desugarableClausesElim.desug(dictMonadError)(dictBoundedLattice)($NonEmpty(
  xcs._1._2,
  listMap(snd)(xcs._2)
)));
var recDefBwd = (dictBoundedJoinSemilattice) => (v) => (v1) => {
  const $0 = v._1;
  const $1 = toClausesStateBwd(clausesStateBwd(dictBoundedJoinSemilattice)($Cont("ContElim", v._2))(toClausesStateFwd($NonEmpty(
    v1._1._2,
    listMap(snd)(v1._2)
  ))));
  return $NonEmpty($Tuple($0, $1._1), listMap((v2) => $Tuple($0, v2))($1._2));
};
var paragraphFwd = (dictBoundedLattice) => {
  const bot = dictBoundedLattice.BoundedJoinSemilattice0().bot;
  return (dictMonadError) => {
    const Monad0 = dictMonadError.MonadThrow0().Monad0();
    return (elems) => Monad0.Bind1().bind(paragraphElemsFwd(dictBoundedLattice)(dictMonadError)(elems))((es) => Monad0.Applicative0().pure($Expr(
      "Constr",
      bot,
      "Paragraph",
      $List("Cons", es, Nil)
    )));
  };
};
var paragraphElemsFwd = (dictBoundedLattice) => {
  const bot = dictBoundedLattice.BoundedJoinSemilattice0().bot;
  return (dictMonadError) => {
    const Monad0 = dictMonadError.MonadThrow0().Monad0();
    const $0 = Monad0.Applicative0();
    const $1 = Monad0.Bind1();
    return (v) => {
      if (v.tag === "Nil") {
        return $0.pure($Expr("Constr", bot, "Nil", Nil));
      }
      if (v.tag === "Cons") {
        if (v._1.tag === "Token") {
          const $2 = v._1._1;
          return $1.bind(paragraphElemsFwd(dictBoundedLattice)(dictMonadError)(v._2))((e$p) => $0.pure($Expr(
            "Constr",
            bot,
            ":",
            $List("Cons", $Expr("Str", bot, $2), $List("Cons", e$p, Nil))
          )));
        }
        if (v._1.tag === "Unquote") {
          const $2 = v._2;
          return $1.bind(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1._1))((e) => $1.bind(paragraphElemsFwd(dictBoundedLattice)(dictMonadError)($2))((e$p) => $0.pure($Expr(
            "Constr",
            bot,
            ":",
            $List("Cons", e, $List("Cons", e$p, Nil))
          ))));
        }
      }
      fail();
    };
  };
};
var paragraphElemsBwd = (dictBoundedJoinSemilattice) => (v) => (v1) => {
  if (v.tag === "Constr") {
    if (v1.tag === "Nil") {
      if (v._3.tag === "Nil" && v._2 === "Nil") {
        return Nil;
      }
      return throwException(error("absurd"))();
    }
    if (v._3.tag === "Cons" && v._3._2.tag === "Cons" && v._3._2._2.tag === "Nil" && v1.tag === "Cons" && v._2 === ":") {
      if (v._3._1.tag === "Str" && v1._1.tag === "Token") {
        return $List("Cons", $ParagraphElem("Token", v._3._1._2), paragraphElemsBwd(dictBoundedJoinSemilattice)(v._3._2._1)(v1._2));
      }
      if (v1._1.tag === "Unquote") {
        return $List(
          "Cons",
          $ParagraphElem("Unquote", exprBwd(dictBoundedJoinSemilattice)(v._3._1)(v1._1._1)),
          paragraphElemsBwd(dictBoundedJoinSemilattice)(v._3._2._1)(v1._2)
        );
      }
    }
  }
  return throwException(error("absurd"))();
};
var listCompFwd = (dictMonadError) => {
  const Bind1 = dictMonadError.MonadThrow0().Monad0().Bind1();
  const Functor0 = Bind1.Apply0().Functor0();
  return (dictBoundedLattice) => (v) => {
    if (v._2._1.tag === "Nil") {
      const $0 = v._1;
      return Functor0.map((f) => f($Expr("Constr", $0, "Nil", Nil)))(Functor0.map((e) => (e$p) => $Expr(
        "Constr",
        $0,
        ":",
        $List("Cons", e, $List("Cons", e$p, Nil))
      ))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2._2)));
    }
    if (v._2._1.tag === "Cons") {
      if (v._2._1._1.tag === "ListCompGuard") {
        const $0 = v._2._1._1._1;
        const $1 = v._1;
        return Bind1.bind(listCompFwd(dictMonadError)(dictBoundedLattice)($Tuple($1, $Tuple(v._2._1._2, v._2._2))))((e) => Functor0.map(App2($Expr(
          "Lambda",
          $1,
          $Elim(
            "ElimConstr",
            fromFoldable5([
              $Tuple("True", $Cont("ContExpr", e)),
              $Tuple("False", $Cont("ContExpr", $Expr("Constr", $1, "Nil", Nil)))
            ])
          )
        )))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())($0)));
      }
      if (v._2._1._1.tag === "ListCompDecl") {
        const $0 = v._2._1._1._1._2;
        const $1 = v._1;
        return Bind1.bind(clausesStateFwd(dictBoundedLattice)(dictMonadError)($List(
          "Cons",
          $Tuple(
            $List("Cons", $Either("Left", v._2._1._1._1._1), Nil),
            $Tuple(Nil, $Expr2("ListComp", $1, v._2._2, v._2._1._2))
          ),
          Nil
        )))((\u03C3) => Functor0.map(App2($Expr("Lambda", $1, \u03C3.tag === "ContElim" ? \u03C3._1 : throwException(error("Eliminator expected"))())))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())($0)));
      }
      if (v._2._1._1.tag === "ListCompGen") {
        const $0 = v._2._1._1._2;
        const $1 = v._1;
        return Bind1.bind(clausesStateFwd(dictBoundedLattice)(dictMonadError)((() => {
          const $2 = orElseFwd($1)($Tuple(
            $List("Cons", $Either("Left", v._2._1._1._1), Nil),
            $Expr2("ListComp", $1, v._2._2, v._2._1._2)
          ));
          return $List(
            "Cons",
            $Tuple($2._1._1, $Tuple(Nil, $2._1._2)),
            listMap((m) => $Tuple(m._1, $Tuple(Nil, m._2)))($2._2)
          );
        })()))((\u03C3) => Functor0.map(App2($Expr(
          "App",
          $Expr("Var", "concatMap"),
          $Expr("Lambda", $1, \u03C3.tag === "ContElim" ? \u03C3._1 : throwException(error("Eliminator expected"))())
        )))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())($0)));
      }
    }
    fail();
  };
};
var listCompBwd = (dictBoundedJoinSemilattice) => {
  const $0 = dictBoundedJoinSemilattice.JoinSemilattice0();
  const orElseBwd1 = orElseBwd(dictBoundedJoinSemilattice);
  return (v) => (v1) => {
    const $1 = (e, p, qs, s0, s0$p, \u03B1$p, \u03C3) => {
      const $12 = clausesStateBwd(dictBoundedJoinSemilattice)($Cont("ContElim", \u03C3))($List(
        "Cons",
        $Tuple(
          $List("Cons", $Either("Left", p), Nil),
          $Tuple(Nil, $Expr2("ListComp", void 0, s0$p, qs))
        ),
        Nil
      ));
      if ($12.tag === "Cons" && $12._1._1.tag === "Cons" && $12._1._1._1.tag === "Left" && $12._1._1._2.tag === "Nil" && $12._1._2._1.tag === "Nil" && $12._1._2._2.tag === "ListComp" && $12._2.tag === "Nil") {
        return $Tuple(
          $0.join($12._1._2._2._1)(\u03B1$p),
          $Tuple($List("Cons", $Qualifier("ListCompDecl", $VarDef2(p, exprBwd(dictBoundedJoinSemilattice)(e)(s0))), $12._1._2._2._3), $12._1._2._2._2)
        );
      }
      fail();
    };
    if (v.tag === "Constr") {
      if (v._3.tag === "Cons" && v._3._2.tag === "Cons" && v._3._2._1.tag === "Constr" && v._3._2._1._3.tag === "Nil" && v._3._2._2.tag === "Nil" && v1._1.tag === "Nil" && v._2 === ":" && v._3._2._1._2 === "Nil") {
        return $Tuple($0.join(v._3._2._1._1)(v._1), $Tuple(Nil, exprBwd(dictBoundedJoinSemilattice)(v._3._1)(v1._2)));
      }
      return throwException(error("absurd"))();
    }
    if (v.tag === "App" && v1._1.tag === "Cons") {
      if (v._1.tag === "Lambda") {
        if (v._1._2.tag === "ElimConstr" && v1._1._1.tag === "ListCompGuard") {
          const $2 = listCompBwd(dictBoundedJoinSemilattice)((() => {
            const $22 = $$get(showString)(mapDictString)("True")(v._1._2._1);
            if ($22.tag === "ContExpr") {
              return $22._1;
            }
            return throwException(error("Expression expected"))();
          })())($Tuple(v1._1._2, v1._2));
          const $3 = $$get(showString)(mapDictString)("False")(v._1._2._1);
          const $4 = $3.tag === "ContExpr" ? $3._1 : throwException(error("Expression expected"))();
          if ($4.tag === "Constr" && $4._3.tag === "Nil" && $4._2 === "Nil") {
            return $Tuple(
              $0.join($0.join($2._1)(v._1._1))($4._1),
              $Tuple($List("Cons", $Qualifier("ListCompGuard", exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._1._1._1)), $2._2._1), $2._2._2)
            );
          }
          fail();
        }
        if (v1._1._1.tag === "ListCompDecl") {
          return $1(v._2, v1._1._1._1._1, v1._1._2, v1._1._1._1._2, v1._2, v._1._1, v._1._2);
        }
        return throwException(error("absurd"))();
      }
      if (v._1.tag === "App" && v._1._1.tag === "Var" && v._1._1._1 === "concatMap" && v._1._2.tag === "Lambda" && v1._1._1.tag === "ListCompGen") {
        const $2 = orElseBwd1($Tuple(
          $List("Cons", $Either("Left", v1._1._1._1), Nil),
          $Expr2("ListComp", void 0, v1._2, v1._1._2)
        ))((() => {
          const $22 = nonEmptyListNonEmptyList.nonEmpty(clausesStateBwd(dictBoundedJoinSemilattice)($Cont("ContElim", v._1._2._2))((() => {
            const $23 = orElseFwd()($Tuple(
              $List("Cons", $Either("Left", v1._1._1._1), Nil),
              $Expr2("ListComp", void 0, v1._2, v1._1._2)
            ));
            return $List(
              "Cons",
              $Tuple($23._1._1, $Tuple(Nil, $23._1._2)),
              listMap((m) => $Tuple(m._1, $Tuple(Nil, m._2)))($23._2)
            );
          })()));
          return $NonEmpty(
            (() => {
              if ($22._1._2._1.tag === "Nil") {
                return $Tuple($22._1._1, $22._1._2._2);
              }
              fail();
            })(),
            listMap((v2) => {
              if (v2._2._1.tag === "Nil") {
                return $Tuple(v2._1, v2._2._2);
              }
              fail();
            })($22._2)
          );
        })());
        if ($2._2.tag === "ListComp") {
          return $Tuple(
            $0.join($0.join($2._2._1)(v._1._2._1))($2._1),
            $Tuple($List("Cons", $Qualifier("ListCompGen", v1._1._1._1, exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._1._1._2)), $2._2._3), $2._2._2)
          );
        }
        fail();
      }
    }
    return throwException(error("absurd"))();
  };
};
var exprFwd = (dictBoundedLattice) => {
  const top3 = dictBoundedLattice.BoundedMeetSemilattice1().top;
  const JoinSemilattice0 = dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0();
  return (dictMonadError) => {
    const Monad0 = dictMonadError.MonadThrow0().Monad0();
    const Applicative0 = Monad0.Applicative0();
    const Bind1 = Monad0.Bind1();
    const Apply0 = Bind1.Apply0();
    const Functor0 = Apply0.Functor0();
    const traverse22 = traversableList.traverse(Applicative0);
    return (dictJoinSemilattice) => (v) => {
      if (v.tag === "Var") {
        return Applicative0.pure($Expr("Var", v._1));
      }
      if (v.tag === "Op") {
        return Applicative0.pure($Expr("Op", v._1));
      }
      if (v.tag === "Int") {
        return Applicative0.pure($Expr("Int", v._1, v._2));
      }
      if (v.tag === "Float") {
        return Applicative0.pure($Expr("Float", v._1, v._2));
      }
      if (v.tag === "Str") {
        return Applicative0.pure($Expr("Str", v._1, v._2));
      }
      if (v.tag === "Constr") {
        return Functor0.map(Constr(v._1)(v._2))(traverse22(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0()))(v._3));
      }
      if (v.tag === "Dictionary") {
        const $0 = v._1;
        const v1 = unzip2(v._2);
        const $1 = v1._2;
        return Bind1.bind(traverse22(desugarableDictEntryExpr.desug(dictMonadError)(dictBoundedLattice))(v1._1))((ks$p) => Bind1.bind(traverse22(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0()))($1))((es) => Functor0.map(Dictionary($0))(Applicative0.pure((() => {
          const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
            let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
            while (go$c) {
              const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
              if (v$1.tag === "Nil") {
                go$c = false;
                go$r = v2;
                continue;
              }
              if (v1$1.tag === "Nil") {
                go$c = false;
                go$r = v2;
                continue;
              }
              if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                go$a0 = v$1._2;
                go$a1 = v1$1._2;
                go$a2 = $List("Cons", $Pair(v$1._1, v1$1._1), v2);
                continue;
              }
              fail();
            }
            return go$r;
          };
          const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
            let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
            while (go$1$c) {
              const v$1 = go$1$a0, v1$1 = go$1$a1;
              if (v1$1.tag === "Nil") {
                go$1$c = false;
                go$1$r = v$1;
                continue;
              }
              if (v1$1.tag === "Cons") {
                go$1$a0 = $List("Cons", v1$1._1, v$1);
                go$1$a1 = v1$1._2;
                continue;
              }
              fail();
            }
            return go$1$r;
          };
          return go$1(Nil)(go(ks$p)(es)(Nil));
        })()))));
      }
      if (v.tag === "Matrix") {
        return Apply0.apply(Functor0.map((f) => f($Tuple(v._3._1, v._3._2)))(Functor0.map(Matrix(v._1))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2))))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._4));
      }
      if (v.tag === "Lambda") {
        return Functor0.map(Lambda(top3))(desugarableClausesElim.desug(dictMonadError)(dictBoundedLattice)(v._1));
      }
      if (v.tag === "Project") {
        const $0 = v._2;
        return Functor0.map((f) => f($0))(Functor0.map(Project)(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1)));
      }
      if (v.tag === "DProject") {
        return Apply0.apply(Functor0.map(DProject)(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1)))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2));
      }
      if (v.tag === "App") {
        return Apply0.apply(Functor0.map(App2)(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1)))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2));
      }
      if (v.tag === "BinaryApp") {
        return Apply0.apply(Functor0.map(App2)(Functor0.map(App2($Expr("Op", v._2)))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1))))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._3));
      }
      if (v.tag === "MatchAs") {
        return Apply0.apply(Functor0.map(App2)(Functor0.map(Lambda(top3))(desugarableClausesElim.desug(dictMonadError)(dictBoundedLattice)($NonEmpty(
          $Tuple($NonEmpty(v._2._1._1, Nil), v._2._1._2),
          listMap((x2) => $Tuple($NonEmpty(x2._1, Nil), x2._2))(v._2._2)
        )))))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1));
      }
      if (v.tag === "IfElse") {
        return Apply0.apply(Functor0.map(App2)(Functor0.map(Lambda(top3))(Apply0.apply(Functor0.map(elimBool)(Functor0.map(ContExpr)(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2))))(Functor0.map(ContExpr)(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._3))))))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1));
      }
      if (v.tag === "Paragraph") {
        return paragraphFwd(dictBoundedLattice)(dictMonadError)(v._1);
      }
      if (v.tag === "ListEmpty") {
        return Applicative0.pure($Expr("Constr", v._1, "Nil", Nil));
      }
      if (v.tag === "ListNonEmpty") {
        const $0 = v._1;
        return Apply0.apply(Functor0.map((e) => (e$p) => $Expr("Constr", $0, ":", $List("Cons", e, $List("Cons", e$p, Nil))))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2)))(desugarableListRestExpr.desug(dictMonadError)(dictBoundedLattice)(v._3));
      }
      if (v.tag === "ListEnum") {
        return Apply0.apply(Functor0.map(App2)(Functor0.map(App2($Expr("Var", "enumFromTo")))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._1))))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2));
      }
      if (v.tag === "ListComp") {
        if (v._3.tag === "Cons" && v._3._1.tag === "ListCompGen") {
          return listCompFwd(dictMonadError)(dictBoundedLattice)($Tuple(
            v._1,
            $Tuple($List("Cons", $Qualifier("ListCompGen", v._3._1._1, v._3._1._2), v._3._2), v._2)
          ));
        }
        return listCompFwd(dictMonadError)(dictBoundedLattice)($Tuple(v._1, $Tuple(v._3, v._2)));
      }
      if (v.tag === "Let") {
        return varDefsFwd(dictMonadError)(dictBoundedLattice)($Tuple(v._1, v._2));
      }
      if (v.tag === "LetRec") {
        return Apply0.apply(Functor0.map(LetRec)(recDefsFwd(dictMonadError)(dictBoundedLattice)(v._1)))(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(v._2));
      }
      if (v.tag === "DocExpr") {
        const $0 = v._2;
        return Bind1.bind(exprFwd(dictBoundedLattice)(dictMonadError)(JoinSemilattice0)(v._1))((e) => Bind1.bind(exprFwd(dictBoundedLattice)(dictMonadError)(JoinSemilattice0)($0))((e$p) => Applicative0.pure($Expr(
          "DocExpr",
          e,
          e$p
        ))));
      }
      fail();
    };
  };
};
var exprBwd = (dictBoundedJoinSemilattice) => {
  const $0 = functorExpr2.map((() => {
    const $02 = dictBoundedJoinSemilattice.bot;
    return (v) => $02;
  })());
  return (v) => (v1) => {
    const $1 = (e, q, qs, s) => {
      const v2 = listCompBwd(dictBoundedJoinSemilattice)(e)($Tuple($List("Cons", q, qs), s));
      return $Expr2("ListComp", v2._1, v2._2._2, v2._2._1);
    };
    const $2 = (e, qs, s) => {
      const v2 = listCompBwd(dictBoundedJoinSemilattice)(e)($Tuple(qs, s));
      return $Expr2("ListComp", v2._1, v2._2._2, v2._2._1);
    };
    if (v.tag === "Var") {
      if (v1.tag === "Var") {
        return $Expr2("Var", v1._1);
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Op") {
      if (v1.tag === "Op") {
        return $Expr2("Op", v1._1);
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Int") {
      if (v1.tag === "Int") {
        return $Expr2("Int", v._1, v1._2);
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Float") {
      if (v1.tag === "Float") {
        return $Expr2("Float", v._1, v1._2);
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Str") {
      if (v1.tag === "Str") {
        return $Expr2("Str", v._1, v1._2);
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Constr") {
      if (v1.tag === "Constr") {
        return $Expr2(
          "Constr",
          v._1,
          v1._2,
          listMap((() => {
            const $3 = exprBwd(dictBoundedJoinSemilattice);
            return (v$1) => $3(v$1._1)(v$1._2);
          })())((() => {
            const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v1$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                  go$a0 = v$1._2;
                  go$a1 = v1$1._2;
                  go$a2 = $List("Cons", $Tuple(v$1._1, v1$1._1), v2);
                  continue;
                }
                fail();
              }
              return go$r;
            };
            const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
              let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
              while (go$1$c) {
                const v$1 = go$1$a0, v1$1 = go$1$a1;
                if (v1$1.tag === "Nil") {
                  go$1$c = false;
                  go$1$r = v$1;
                  continue;
                }
                if (v1$1.tag === "Cons") {
                  go$1$a0 = $List("Cons", v1$1._1, v$1);
                  go$1$a1 = v1$1._2;
                  continue;
                }
                fail();
              }
              return go$1$r;
            };
            return go$1(Nil)(go(v._3)(v1._3)(Nil));
          })())
        );
      }
      if (v._3.tag === "Cons") {
        if (v._3._2.tag === "Nil") {
          if (v1.tag === "Paragraph") {
            if (v._2 === "Paragraph") {
              return $Expr2("Paragraph", paragraphElemsBwd(dictBoundedJoinSemilattice)(v._3._1)(v1._1));
            }
            return throwException(error("ExprBwd failed, s: " + show2(v1)))();
          }
          if (v1.tag === "ListComp") {
            return $2(v, v1._3, v1._2);
          }
          return throwException(error("ExprBwd failed, s: " + show2(v1)))();
        }
        if (v._3._2.tag === "Cons" && v._3._2._2.tag === "Nil" && v1.tag === "ListNonEmpty") {
          return $Expr2("ListNonEmpty", v._1, exprBwd(dictBoundedJoinSemilattice)(v._3._1)(v1._2), desugarableListRestExpr.desugBwd(dictBoundedJoinSemilattice)(v._3._2._1)(v1._3));
        }
        if (v1.tag === "ListComp") {
          return $2(v, v1._3, v1._2);
        }
        return throwException(error("ExprBwd failed, s: " + show2(v1)))();
      }
      if (v._3.tag === "Nil" && v1.tag === "ListEmpty") {
        return $Expr2("ListEmpty", v._1);
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Dictionary") {
      if (v1.tag === "Dictionary") {
        return $Expr2(
          "Dictionary",
          v._1,
          (() => {
            const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v1$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                  go$a0 = v$1._2;
                  go$a1 = v1$1._2;
                  go$a2 = $List(
                    "Cons",
                    $Tuple(
                      desugarableDictEntryExpr.desugBwd(dictBoundedJoinSemilattice)(v$1._1._1)(v1$1._1._1),
                      exprBwd(dictBoundedJoinSemilattice)(v$1._1._2)(v1$1._1._2)
                    ),
                    v2
                  );
                  continue;
                }
                fail();
              }
              return go$r;
            };
            const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
              let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
              while (go$1$c) {
                const v$1 = go$1$a0, v1$1 = go$1$a1;
                if (v1$1.tag === "Nil") {
                  go$1$c = false;
                  go$1$r = v$1;
                  continue;
                }
                if (v1$1.tag === "Cons") {
                  go$1$a0 = $List("Cons", v1$1._1, v$1);
                  go$1$a1 = v1$1._2;
                  continue;
                }
                fail();
              }
              return go$1$r;
            };
            return go$1(Nil)(go(v._2)(v1._2)(Nil));
          })()
        );
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Matrix") {
      if (v1.tag === "Matrix") {
        return $Expr2("Matrix", v._1, exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._2), $Tuple(v1._3._1, v1._3._2), exprBwd(dictBoundedJoinSemilattice)(v._4)(v1._4));
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Lambda") {
      if (v1.tag === "Lambda") {
        return $Expr2("Lambda", toClausesStateBwd(clausesStateBwd(dictBoundedJoinSemilattice)($Cont("ContElim", v._2))(toClausesStateFwd(v1._1))));
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "Project") {
      if (v1.tag === "Project") {
        return $Expr2("Project", exprBwd(dictBoundedJoinSemilattice)(v._1)(v1._1), v._2);
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "DProject") {
      if (v1.tag === "DProject") {
        return $Expr2("DProject", exprBwd(dictBoundedJoinSemilattice)(v._1)(v1._1), exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._2));
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "App") {
      if (v1.tag === "App") {
        return $Expr2("App", exprBwd(dictBoundedJoinSemilattice)(v._1)(v1._1), exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._2));
      }
      if (v._1.tag === "App") {
        if (v._1._1.tag === "Op") {
          if (v1.tag === "BinaryApp") {
            return $Expr2("BinaryApp", exprBwd(dictBoundedJoinSemilattice)(v._1._2)(v1._1), v1._2, exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._3));
          }
          if (v1.tag === "ListComp") {
            if (v1._3.tag === "Cons" && v1._3._1.tag === "ListCompGen") {
              return $1(v, v1._3._1, v1._3._2, v1._2);
            }
            return $2(v, v1._3, v1._2);
          }
          return throwException(error("ExprBwd failed, s: " + show2(v1)))();
        }
        if (v._1._1.tag === "Var" && v._1._1._1 === "enumFromTo" && v1.tag === "ListEnum") {
          return $Expr2("ListEnum", exprBwd(dictBoundedJoinSemilattice)(v._1._2)(v1._1), exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._2));
        }
        if (v1.tag === "ListComp") {
          if (v1._3.tag === "Cons" && v1._3._1.tag === "ListCompGen") {
            return $1(v, v1._3._1, v1._3._2, v1._2);
          }
          return $2(v, v1._3, v1._2);
        }
        return throwException(error("ExprBwd failed, s: " + show2(v1)))();
      }
      if (v._1.tag === "Lambda") {
        if (v1.tag === "MatchAs") {
          return $Expr2(
            "MatchAs",
            exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._1),
            (() => {
              const $3 = toClausesStateBwd(clausesStateBwd(dictBoundedJoinSemilattice)($Cont("ContElim", v._1._2))(toClausesStateFwd($NonEmpty(
                $Tuple($NonEmpty(v1._2._1._1, Nil), v1._2._1._2),
                listMap((x2) => $Tuple($NonEmpty(x2._1, Nil), x2._2))(v1._2._2)
              ))));
              return $NonEmpty($Tuple($3._1._1._1, $3._1._2), listMap((x2) => $Tuple(x2._1._1, x2._2))($3._2));
            })()
          );
        }
        if (v._1._2.tag === "ElimConstr" && v1.tag === "IfElse") {
          return $Expr2(
            "IfElse",
            exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._1),
            Object.hasOwn(v._1._2._1, "True") ? exprBwd(dictBoundedJoinSemilattice)((() => {
              const $3 = $$get(showString)(mapDictString)("True")(v._1._2._1);
              if ($3.tag === "ContExpr") {
                return $3._1;
              }
              return throwException(error("Expression expected"))();
            })())(v1._2) : $0(v1._2),
            Object.hasOwn(v._1._2._1, "False") ? exprBwd(dictBoundedJoinSemilattice)((() => {
              const $3 = $$get(showString)(mapDictString)("False")(v._1._2._1);
              if ($3.tag === "ContExpr") {
                return $3._1;
              }
              return throwException(error("Expression expected"))();
            })())(v1._3) : $0(v1._3)
          );
        }
      }
      if (v1.tag === "ListComp") {
        return $2(v, v1._3, v1._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v1.tag === "ListComp") {
      return $2(v, v1._3, v1._2);
    }
    if (v.tag === "Let") {
      if (v1.tag === "Let") {
        const v2 = varDefsBwd(dictBoundedJoinSemilattice)($Expr("Let", v._1, v._2))($Tuple(v1._1, v1._2));
        return $Expr2("Let", v2._1, v2._2);
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "LetRec") {
      if (v1.tag === "LetRec") {
        return $Expr2("LetRec", recDefsBwd(dictBoundedJoinSemilattice)(v._1)(v1._1), exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._2));
      }
      return throwException(error("ExprBwd failed, s: " + show2(v1)))();
    }
    if (v.tag === "DocExpr" && v1.tag === "DocExpr") {
      return $Expr2("DocExpr", exprBwd(dictBoundedJoinSemilattice)(v._1)(v1._1), exprBwd(dictBoundedJoinSemilattice)(v._2)(v1._2));
    }
    return throwException(error("ExprBwd failed, s: " + show2(v1)))();
  };
};
var clausesStateFwd = (dictBoundedLattice) => {
  const top3 = dictBoundedLattice.BoundedMeetSemilattice1().top;
  return (dictMonadError) => {
    const Monad0 = dictMonadError.MonadThrow0().Monad0();
    const Bind1 = Monad0.Bind1();
    const $0 = Bind1.Apply0().Functor0();
    const popArgFwd2 = popArgFwd(dictMonadError);
    const popVarFwd2 = popVarFwd(dictMonadError);
    const popRecordFwd2 = popRecordFwd(dictMonadError);
    const popListVarFwd2 = popListVarFwd(dictMonadError);
    const popConstrFwd2 = popConstrFwd(dictMonadError);
    const Applicative0 = Monad0.Applicative0();
    const sequence1 = traversableList.traverse(Applicative0)(identity10);
    const rtraverse1 = bitraversableTuple.bitraverse(Applicative0)(Applicative0.pure);
    return (ks) => {
      const $1 = (p) => Bind1.bind(popConstrFwd2(defined(dataTypeForCtr.dataTypeFor(monadThrowExceptT2)(definitely("clausesStateFwd ctrFor failed for: " + showPattern(p))((() => {
        if (p.tag === "Left") {
          if (p._1.tag === "PVar") {
            return Nothing;
          }
          if (p._1.tag === "PConstr") {
            return $Maybe("Just", p._1._1);
          }
          if (p._1.tag === "PRecord") {
            return Nothing;
          }
          if (p._1.tag === "PListEmpty") {
            return $Maybe("Just", "Nil");
          }
          if (p._1.tag === "PListNonEmpty") {
            return $Maybe("Just", ":");
          }
          fail();
        }
        if (p.tag === "Right") {
          if (p._1.tag === "PListVar") {
            return Nothing;
          }
          if (p._1.tag === "PListEnd") {
            return $Maybe("Just", "Nil");
          }
          if (p._1.tag === "PListNext") {
            return $Maybe("Just", ":");
          }
        }
        fail();
      })()))))(ks))((kss) => $0.map((x2) => $Cont("ContElim", $Elim("ElimConstr", fromFoldable23(x2))))(sequence1(listMap(rtraverse1(clausesStateFwd(dictBoundedLattice)(dictMonadError)))(kss))));
      if (ks.tag === "Nil") {
        return throwException(error("absurd"))();
      }
      if (ks.tag === "Cons") {
        if (ks._1._1.tag === "Nil") {
          if (ks._1._2._1.tag === "Nil" && ks._2.tag === "Nil") {
            return $0.map(ContExpr)(exprFwd(dictBoundedLattice)(dictMonadError)(dictBoundedLattice.BoundedJoinSemilattice0().JoinSemilattice0())(ks._1._2._2));
          }
          return $0.map((() => {
            const $2 = Lambda(top3);
            return (x2) => $Cont("ContExpr", $2(x2.tag === "ContElim" ? x2._1 : throwException(error("Eliminator expected"))()));
          })())(Bind1.bind(popArgFwd2(ks))(clausesStateFwd(dictBoundedLattice)(dictMonadError)));
        }
        if (ks._1._1.tag === "Cons") {
          if (ks._1._1._1.tag === "Left") {
            if (ks._1._1._1._1.tag === "PVar") {
              const $2 = ks._1._1._1._1._1;
              return $0.map((() => {
                const $3 = ElimVar($2);
                return (x2) => $Cont("ContElim", $3(x2));
              })())(Bind1.bind(popVarFwd2($2)(ks))(clausesStateFwd(dictBoundedLattice)(dictMonadError)));
            }
            if (ks._1._1._1._1.tag === "PRecord") {
              const $2 = ks._1._1._1._1._1;
              return $0.map((() => {
                const $3 = ElimDict(keys2($2));
                return (x2) => $Cont("ContElim", $3(x2));
              })())(Bind1.bind(popRecordFwd2(listMap(fst)($2))(ks))(clausesStateFwd(dictBoundedLattice)(dictMonadError)));
            }
            return $1(ks._1._1._1);
          }
          if (ks._1._1._1.tag === "Right" && ks._1._1._1._1.tag === "PListVar") {
            const $2 = ks._1._1._1._1._1;
            return $0.map((() => {
              const $3 = ElimVar($2);
              return (x2) => $Cont("ContElim", $3(x2));
            })())(Bind1.bind(popListVarFwd2($2)(ks))(clausesStateFwd(dictBoundedLattice)(dictMonadError)));
          }
          return $1(ks._1._1._1);
        }
      }
      fail();
    };
  };
};
var clausesStateBwd = (dictBoundedJoinSemilattice) => (\u03BA0) => (ks) => {
  const $0 = (\u03C3) => popArgBwd(clausesStateBwd(dictBoundedJoinSemilattice)($Cont("ContElim", \u03C3))(defined(popArgFwd1(ks))));
  const $1 = (m, p) => popConstrBwd((() => {
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const v = go$a0, v1 = go$a1;
        if (v1.tag === "Nil") {
          const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
            let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
            while (go$1$c) {
              const v$1 = go$1$a0, v1$1 = go$1$a1;
              if (v1$1.tag === "Nil") {
                go$1$c = false;
                go$1$r = v$1;
                continue;
              }
              if (v1$1.tag === "Cons") {
                go$1$a0 = $List("Cons", v1$1._1, v$1);
                go$1$a1 = v1$1._2;
                continue;
              }
              fail();
            }
            return go$1$r;
          };
          go$c = false;
          go$r = go$1(Nil)(v);
          continue;
        }
        if (v1.tag === "Cons") {
          const $12 = clausesStateBwd(dictBoundedJoinSemilattice);
          const $2 = _lookup(Nothing, Just, v1._1._1, m);
          if ($2.tag === "Just") {
            go$a0 = $List("Cons", $Tuple(v1._1._1, $12($2._1)(v1._1._2)), v);
            go$a1 = v1._2;
            continue;
          }
          go$a0 = v;
          go$a1 = v1._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    return go(Nil)(defined(popConstrFwd1(defined(dataTypeForCtr.dataTypeFor(monadThrowExceptT2)(definitely("absurd")((() => {
      if (p.tag === "Left") {
        if (p._1.tag === "PVar") {
          return Nothing;
        }
        if (p._1.tag === "PConstr") {
          return $Maybe("Just", p._1._1);
        }
        if (p._1.tag === "PRecord") {
          return Nothing;
        }
        if (p._1.tag === "PListEmpty") {
          return $Maybe("Just", "Nil");
        }
        if (p._1.tag === "PListNonEmpty") {
          return $Maybe("Just", ":");
        }
        fail();
      }
      if (p.tag === "Right") {
        if (p._1.tag === "PListVar") {
          return Nothing;
        }
        if (p._1.tag === "PListEnd") {
          return $Maybe("Just", "Nil");
        }
        if (p._1.tag === "PListNext") {
          return $Maybe("Just", ":");
        }
      }
      fail();
    })()))))(ks)));
  })())(ks);
  if (ks.tag === "Nil") {
    return throwException(error("absurd"))();
  }
  if (\u03BA0.tag === "ContExpr") {
    if (ks.tag === "Cons" && ks._1._1.tag === "Nil") {
      if (ks._1._2._1.tag === "Nil" && ks._2.tag === "Nil") {
        return $List(
          "Cons",
          $Tuple(Nil, $Tuple(Nil, exprBwd(dictBoundedJoinSemilattice)(\u03BA0._1)(ks._1._2._2))),
          Nil
        );
      }
      if (\u03BA0._1.tag === "Lambda") {
        return $0(\u03BA0._1._2);
      }
    }
    return throwException(error("absurd"))();
  }
  if (\u03BA0.tag === "ContElim") {
    if (ks.tag === "Cons" && ks._1._1.tag === "Cons") {
      if (ks._1._1._1.tag === "Left") {
        if (ks._1._1._1._1.tag === "PVar") {
          if (\u03BA0._1.tag === "ElimVar") {
            return popVarBwd(\u03BA0._1._1)(clausesStateBwd(dictBoundedJoinSemilattice)(\u03BA0._1._2)(defined(popVarFwd1(\u03BA0._1._1)(ks))));
          }
          if (\u03BA0._1.tag === "ElimConstr") {
            return $1(\u03BA0._1._1, ks._1._1._1);
          }
          return throwException(error(throwException(error("Shape mismatch"))()))();
        }
        if (ks._1._1._1._1.tag === "PRecord" && \u03BA0._1.tag === "ElimDict") {
          const $2 = ks._1._1._1._1._1;
          return popRecordBwd(listMap(fst)($2))(clausesStateBwd(dictBoundedJoinSemilattice)(\u03BA0._1._2)(defined(popRecordFwd1(listMap(fst)($2))(ks))));
        }
        if (\u03BA0._1.tag === "ElimConstr") {
          return $1(\u03BA0._1._1, ks._1._1._1);
        }
        return throwException(error(throwException(error("Shape mismatch"))()))();
      }
      if (ks._1._1._1.tag === "Right" && ks._1._1._1._1.tag === "PListVar" && \u03BA0._1.tag === "ElimVar") {
        return popListVarBwd(\u03BA0._1._1)(clausesStateBwd(dictBoundedJoinSemilattice)(\u03BA0._1._2)(defined(popListVarFwd1(\u03BA0._1._1)(ks))));
      }
      if (\u03BA0._1.tag === "ElimConstr") {
        return $1(\u03BA0._1._1, ks._1._1._1);
      }
    }
    return throwException(error(throwException(error("Shape mismatch"))()))();
  }
  fail();
};
var moduleFwd = (dictMonadError) => {
  const Monad0 = dictMonadError.MonadThrow0().Monad0();
  const $0 = Monad0.Bind1().Apply0().Functor0();
  const varDefFwd1 = varDefFwd(dictMonadError);
  const recDefsFwd1 = recDefsFwd(dictMonadError);
  const traverse22 = traversableList.traverse(Monad0.Applicative0());
  return (dictBoundedLattice) => {
    const varDefFwd2 = varDefFwd1(dictBoundedLattice);
    const recDefsFwd2 = recDefsFwd1(dictBoundedLattice);
    return (v) => $0.map(Module)(traverse22((v1) => {
      if (v1.tag === "Left") {
        return $0.map(Left)(varDefFwd2(v1._1));
      }
      if (v1.tag === "Right") {
        return $0.map(Right)(recDefsFwd2(v1._1));
      }
      fail();
    })(bindList.bind(listMap((v1) => {
      if (v1.tag === "Left") {
        return listMap(Left)($List("Cons", v1._1._1, v1._1._2));
      }
      if (v1.tag === "Right") {
        return $List("Cons", $Either("Right", v1._1), Nil);
      }
      fail();
    })(v._1))(identity5)));
  };
};

// output-es/Pretty/index.js
var lookup2 = (k) => {
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "Leaf") {
        go$c = false;
        go$r = Nothing;
        continue;
      }
      if (v.tag === "Node") {
        const v1 = ordString.compare(k)(v._3);
        if (v1 === "LT") {
          go$a0 = v._5;
          continue;
        }
        if (v1 === "GT") {
          go$a0 = v._6;
          continue;
        }
        if (v1 === "EQ") {
          go$c = false;
          go$r = $Maybe("Just", v._4);
          continue;
        }
      }
      fail();
    }
    return go$r;
  };
  return go;
};
var lessThanOrEq = (a1) => (a2) => a1 <= a2;
var lessThan = (a1) => (a2) => a1 < a2;
var toUnfoldable4 = /* @__PURE__ */ toAscUnfoldable(unfoldableList);
var fromFoldable6 = /* @__PURE__ */ foldrArray(Cons)(Nil);
var vcommas = (v) => {
  if (v.tag === "Nil") {
    return Empty;
  }
  if (v.tag === "Cons") {
    if (v._2.tag === "Nil") {
      return v._1;
    }
    return $Doc("Concat", v._1, $Doc("Concat", $Doc("Text", ","), $Doc("Concat", Line2, vcommas(v._2))));
  }
  fail();
};
var prettyP = (dictPretty) => (x2) => renderWithIndent(Stmt)(0)(0)(dictPretty.pretty(x2))._1;
var getPrec = (x2) => {
  const v = lookup2(x2)(opDefs);
  if (v.tag === "Just") {
    return v._1.prec;
  }
  if (v.tag === "Nothing") {
    return -1;
  }
  fail();
};
var prettyConsArg = (dictRootOp) => (dictIsSimple) => (dictPretty) => (e) => (lhs) => {
  const v = dictRootOp.rootOp(e);
  if (v.tag === "Nothing") {
    if (dictIsSimple.isSimple(e)) {
      return dictPretty.pretty(e);
    }
    return $Doc("Concat", $Doc("Text", "("), $Doc("Concat", dictPretty.pretty(e), $Doc("Text", ")")));
  }
  if (v.tag === "Just") {
    if ((lhs ? lessThanOrEq : lessThan)(getPrec(v._1))(getPrec(":"))) {
      return $Doc("Concat", $Doc("Text", "("), $Doc("Concat", dictPretty.pretty(e), $Doc("Text", ")")));
    }
    return dictPretty.pretty(e);
  }
  fail();
};
var commas = (v) => {
  if (v.tag === "Nil") {
    return Empty;
  }
  if (v.tag === "Cons") {
    if (v._2.tag === "Nil") {
      return v._1;
    }
    return $Doc("Concat", v._1, $Doc("Concat", $Doc("Text", ","), $Doc("Concat", $Doc("Text", " "), commas(v._2))));
  }
  fail();
};
var prettyList = (dictFoldable) => {
  const fromFoldable112 = dictFoldable.foldr(Cons)(Nil);
  return (dictPretty) => {
    const pretty4 = dictPretty.pretty;
    return (xs) => commas(listMap(pretty4)(fromFoldable112(xs)));
  };
};
var prettyList1 = /* @__PURE__ */ prettyList(foldableList);
var prettyList2 = /* @__PURE__ */ prettyList(foldableArray);
var prettyConstr = (dictRootOp) => (dictIsSimple) => (dictPretty) => {
  const prettyList6 = prettyList1(dictPretty);
  return (v) => (v1) => {
    if (v1.tag === "Nil") {
      if (v === "Nil") {
        return $Doc("Text", "[]");
      }
      return $Doc("Text", v);
    }
    if (v1.tag === "Cons" && v1._2.tag === "Cons" && v1._2._2.tag === "Nil") {
      if (v === "Pair") {
        return $Doc(
          "Concat",
          $Doc("Text", "("),
          $Doc(
            "Concat",
            $Doc(
              "Concat",
              dictPretty.pretty(v1._1),
              $Doc("Concat", $Doc("Text", ","), $Doc("Concat", $Doc("Text", " "), dictPretty.pretty(v1._2._1)))
            ),
            $Doc("Text", ")")
          )
        );
      }
      if (v === ":") {
        return $Doc(
          "Concat",
          prettyConsArg(dictRootOp)(dictIsSimple)(dictPretty)(v1._1)(true),
          $Doc(
            "Concat",
            $Doc("Text", " "),
            $Doc(
              "Concat",
              $Doc("Text", ":|"),
              $Doc("Concat", $Doc("Text", " "), prettyConsArg(dictRootOp)(dictIsSimple)(dictPretty)(v1._2._1)(false))
            )
          )
        );
      }
    }
    return $Doc(
      "Concat",
      $Doc("Text", v),
      $Doc("Concat", $Doc("Text", "("), $Doc("Concat", prettyList6(v1), $Doc("Text", ")")))
    );
  };
};
var prettyVar$x215$x215Val = (dictHighlightable) => ({
  pretty: (v) => $Doc(
    "Concat",
    dictHighlightable.highlightIf(v._2._1)($Doc("Text", v._1)),
    $Doc("Concat", $Doc("Text", ":"), $Doc("Concat", $Doc("Text", " "), prettyVal(dictHighlightable).pretty(v._2._2)))
  )
});
var prettyVal = (dictHighlightable) => ({
  pretty: (v) => {
    if (v._2.tag === "Nothing") {
      return dictHighlightable.highlightIf(v._1)(prettyBaseVal(dictHighlightable).pretty(v._3));
    }
    if (v._2.tag === "Just") {
      return $Doc(
        "Concat",
        $Doc("Text", "@doc"),
        $Doc(
          "Concat",
          $Doc("Concat", $Doc("Text", "("), $Doc("Concat", prettyVal(dictHighlightable).pretty(v._2._1), $Doc("Text", ")"))),
          $Doc("Concat", $Doc("Text", " "), dictHighlightable.highlightIf(v._1)(prettyBaseVal(dictHighlightable).pretty(v._3)))
        )
      );
    }
    fail();
  }
});
var prettyFun = (dictHighlightable) => {
  const prettyConstr2 = prettyConstr({
    rootOp: (v) => {
      if (v._2.tag === "Nothing") {
        if (v._3.tag === "Constr" && v._3._1 === ":") {
          return $Maybe("Just", ":");
        }
        return Nothing;
      }
      if (v._2.tag === "Just") {
        return Nothing;
      }
      fail();
    }
  })({
    isSimple: (v) => {
      if (v._2.tag === "Nothing") {
        return true;
      }
      if (v._2.tag === "Just") {
        return false;
      }
      fail();
    }
  });
  return {
    pretty: (v) => {
      if (v.tag === "Closure") {
        return $Doc("Text", "cl");
      }
      if (v.tag === "Foreign") {
        return $Doc("Text", v._1._1);
      }
      if (v.tag === "PartialConstr") {
        return prettyConstr2(prettyVal(dictHighlightable))(v._1)(v._2);
      }
      fail();
    }
  };
};
var prettyBaseVal = (dictHighlightable) => {
  const prettyConstr2 = prettyConstr({
    rootOp: (v) => {
      if (v._2.tag === "Nothing") {
        if (v._3.tag === "Constr" && v._3._1 === ":") {
          return $Maybe("Just", ":");
        }
        return Nothing;
      }
      if (v._2.tag === "Just") {
        return Nothing;
      }
      fail();
    }
  })({
    isSimple: (v) => {
      if (v._2.tag === "Nothing") {
        return true;
      }
      if (v._2.tag === "Just") {
        return false;
      }
      fail();
    }
  });
  return {
    pretty: (v) => {
      if (v.tag === "Int") {
        return $Doc("Text", showIntImpl(v._1));
      }
      if (v.tag === "Float") {
        return $Doc("Text", showNumberImpl(v._1));
      }
      if (v.tag === "Str") {
        return $Doc("Concat", $Doc("Text", '"'), $Doc("Concat", $Doc("Text", v._1), $Doc("Text", '"')));
      }
      if (v.tag === "Dictionary") {
        if (isEmpty(v._1)) {
          return $Doc("Text", "{}");
        }
        return record(listMap(prettyVar$x215$x215Val(dictHighlightable).pretty)(toUnfoldable4(v._1)));
      }
      if (v.tag === "Constr") {
        return prettyConstr2(prettyVal(dictHighlightable))(v._1)(v._2);
      }
      if (v.tag === "Matrix") {
        return vcommas(fromFoldable6(arrayMap(prettyList2(prettyVal(dictHighlightable)))(v._1._1)));
      }
      if (v.tag === "Fun") {
        return prettyFun(dictHighlightable).pretty(v._1);
      }
      fail();
    }
  };
};
var prettyEnv = (dictHighlightable) => ({
  pretty: (v) => {
    const go = (v1) => {
      if (v1.tag === "Nil") {
        return Empty;
      }
      if (v1.tag === "Cons") {
        return $Doc(
          "Concat",
          $Doc(
            "Concat",
            $Doc("Text", v1._1._1),
            $Doc(
              "Concat",
              $Doc("Text", " "),
              $Doc(
                "Concat",
                $Doc("Text", "->"),
                $Doc(
                  "Concat",
                  $Doc("Text", " "),
                  $Doc(
                    "Concat",
                    prettyVal(dictHighlightable).pretty(v1._1._2),
                    $Doc("Concat", $Doc("Text", " "), $Doc("Text", ","))
                  )
                )
              )
            )
          ),
          $Doc("Concat", Line2, go(v1._2))
        );
      }
      fail();
    };
    return $Doc("Concat", $Doc("Text", "["), $Doc("Concat", go(toUnfoldable4(v)), $Doc("Text", "]")));
  }
});

// output-es/Data.Profunctor.Choice/index.js
var identity24 = (x2) => x2;
var fanin = (dictCategory) => {
  const identity1 = dictCategory.identity;
  const $0 = dictCategory.Semigroupoid0();
  const $1 = dictCategory.Semigroupoid0();
  return (dictChoice) => (l) => (r) => $0.compose(dictChoice.Profunctor0().dimap((v2) => {
    if (v2.tag === "Left") {
      return v2._1;
    }
    if (v2.tag === "Right") {
      return v2._1;
    }
    fail();
  })(identity24)(identity1))($1.compose(dictChoice.right(r))(dictChoice.left(l)));
};
var choiceFn = /* @__PURE__ */ (() => ({
  left: (v) => (v1) => {
    if (v1.tag === "Left") {
      return $Either("Left", v(v1._1));
    }
    if (v1.tag === "Right") {
      return $Either("Right", v1._1);
    }
    fail();
  },
  right: functorEither.map,
  Profunctor0: () => profunctorFn
}))();

// output-es/Val/index.js
var $BaseVal = (tag, _1, _2) => ({ tag, _1, _2 });
var $EnvExpr = (_1, _2) => ({ tag: "EnvExpr", _1, _2 });
var $ForeignOp$p = (_1) => ({ tag: "ForeignOp'", _1 });
var $Fun = (tag, _1, _2, _3) => ({ tag, _1, _2, _3 });
var $Val = (_1, _2, _3) => ({ tag: "Val", _1, _2, _3 });
var setSet3 = /* @__PURE__ */ setSet(ordDVertex$p);
var unions4 = /* @__PURE__ */ unions(foldableArray)(ordDVertex$p);
var vertices = /* @__PURE__ */ (() => verticesDict(verticesElimVertex).vertices)();
var unions13 = /* @__PURE__ */ unions(foldableList)(ordDVertex$p);
var foldMap2 = /* @__PURE__ */ foldMap(/* @__PURE__ */ monoidSet(ordDVertex$p));
var identity25 = (x2) => x2;
var ordTuple2 = (dictOrd1) => {
  const $0 = dictOrd1.Eq0();
  const eqTuple2 = { eq: (x2) => (y2) => x2._1 === y2._1 && $0.eq(x2._2)(y2._2) };
  return {
    compare: (x2) => (y2) => {
      const v = ordInt.compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      return dictOrd1.compare(x2._2)(y2._2);
    },
    Eq0: () => eqTuple2
  };
};
var setSet1 = /* @__PURE__ */ setSet(ordString);
var toUnfoldable12 = (x2) => {
  const go = (m$p, z$p) => {
    if (m$p.tag === "Leaf") {
      return z$p;
    }
    if (m$p.tag === "Node") {
      return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
    }
    fail();
  };
  const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
    let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
    while (go$1$c) {
      const source2 = go$1$a0, memo = go$1$a1;
      if (source2.tag === "Nil") {
        const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => {
          let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$c = true, go$2$r;
          while (go$2$c) {
            const b = go$2$a0, v = go$2$a1;
            if (v.tag === "Nil") {
              go$2$c = false;
              go$2$r = b;
              continue;
            }
            if (v.tag === "Cons") {
              go$2$a0 = $List("Cons", v._1, b);
              go$2$a1 = v._2;
              continue;
            }
            fail();
          }
          return go$2$r;
        };
        go$1$c = false;
        go$1$r = go$2(Nil)(memo);
        continue;
      }
      if (source2.tag === "Cons") {
        go$1$a0 = source2._2;
        go$1$a1 = $List("Cons", source2._1, memo);
        continue;
      }
      fail();
    }
    return go$1$r;
  };
  return go$1(go(x2, Nil))(Nil);
};
var fromFoldable13 = /* @__PURE__ */ (() => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const b = go$a0, v = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = b;
        continue;
      }
      if (v.tag === "Cons") {
        go$a0 = insert3(ordString)(v._1)()(b);
        go$a1 = v._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  const $0 = go(Leaf);
  return (x2) => $0((() => {
    const go$1 = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go$1(m$p._5, $List("Cons", m$p._3, go$1(m$p._6, z$p)));
      }
      fail();
    };
    return go$1(x2, Nil);
  })());
})();
var MatrixRep = (x2) => x2;
var Val = (value0) => (value1) => (value2) => $Val(value0, value1, value2);
var Int2 = (value0) => $BaseVal("Int", value0);
var Float2 = (value0) => $BaseVal("Float", value0);
var Str2 = (value0) => $BaseVal("Str", value0);
var Dictionary2 = (value0) => $BaseVal("Dictionary", value0);
var DictRep = (x2) => x2;
var Env = (x2) => x2;
var typeNameVal = { typeName: (v) => "Val" };
var pack2 = (x2) => (k) => k(typeNameVal)(x2);
var typeNameMatrixDim = { typeName: (v) => "MatrixDim" };
var pack13 = (x2) => (k) => k(typeNameMatrixDim)(x2);
var typeNameDictKey = { typeName: (v) => "DictKey" };
var pack22 = (x2) => (k) => k(typeNameDictKey)(x2);
var verticesValVertex = {
  vertices: (v) => setSet3.union($$$Map("Node", 1, 1, $Tuple(v._1, pack2(v)), void 0, Leaf, Leaf))(verticesBaseValVertex.vertices(v._3))
};
var verticesMatrixRepVertex = {
  vertices: (v) => setSet3.union(unions4(concat(arrayMap(arrayMap(verticesValVertex.vertices))(v._1))))(setSet3.union($$$Map(
    "Node",
    1,
    1,
    $Tuple(v._2._1._2, pack13(v._2._1)),
    void 0,
    Leaf,
    Leaf
  ))($$$Map("Node", 1, 1, $Tuple(v._2._2._2, pack13(v._2._2)), void 0, Leaf, Leaf)))
};
var verticesFunVertex = {
  vertices: (v) => {
    if (v.tag === "Closure") {
      return setSet3.union(verticesEnvVertex.vertices(v._1))(setSet3.union(vertices(v._2))(verticesElimVertex.vertices(v._3)));
    }
    if (v.tag === "Foreign") {
      return unions13(listMap(verticesValVertex.vertices)(v._2));
    }
    if (v.tag === "PartialConstr") {
      return unions13(listMap(verticesValVertex.vertices)(v._2));
    }
    fail();
  }
};
var verticesEnvVertex = { vertices: (v) => unions13(listMap(verticesValVertex.vertices)(mapObjectString.values(v))) };
var verticesDictRepVertex = {
  vertices: (v) => foldMap2((k) => (v1) => setSet3.union($$$Map(
    "Node",
    1,
    1,
    $Tuple(v1._1, pack22($Tuple(k, v1._1))),
    void 0,
    Leaf,
    Leaf
  ))(verticesValVertex.vertices(v1._2)))(v)
};
var verticesBaseValVertex = {
  vertices: (v) => {
    if (v.tag === "Int") {
      return setSet3.empty;
    }
    if (v.tag === "Float") {
      return setSet3.empty;
    }
    if (v.tag === "Str") {
      return setSet3.empty;
    }
    if (v.tag === "Constr") {
      return unions13(listMap(verticesValVertex.vertices)(v._2));
    }
    if (v.tag === "Dictionary") {
      return verticesDictRepVertex.vertices(v._1);
    }
    if (v.tag === "Matrix") {
      return verticesMatrixRepVertex.vertices(v._1);
    }
    if (v.tag === "Fun") {
      return verticesFunVertex.vertices(v._1);
    }
    fail();
  }
};
var verticesEnvExprVertex = {
  vertices: (v) => setSet3.union(unions13(listMap(verticesValVertex.vertices)(mapObjectString.values(v._1))))(verticesExprVertex.vertices(v._2))
};
var isEmptyEnv = { isEmpty: (v) => isEmpty(v) };
var setEnvString = {
  empty: empty2,
  filter: (p) => (v) => filterWithKey((x2) => {
    const $0 = p(x2);
    return (v$1) => $0;
  })(v),
  size: (v) => size(v),
  member: (x2) => (v) => Object.hasOwn(v, x2),
  difference: (v) => (v1) => setObjectString.difference(v)(v1),
  union: (v) => (v1) => union(v)(v1),
  IsEmpty0: () => isEmptyEnv
};
var mapEnvStringVal = {
  maplet: (k) => (v) => {
    const $0 = {};
    $0[k] = v;
    return $0;
  },
  keys: (v) => mapObjectString.keys(v),
  values: (v) => mapObjectString.values(v),
  filterKeys: (p) => (v) => filterWithKey((x2) => {
    const $0 = p(x2);
    return (v$1) => $0;
  })(v),
  unionWith: (f) => (v) => (v1) => unionWith(f)(v)(v1),
  lookup: (k) => (v) => _lookup(Nothing, Just, k, v),
  delete: (k) => (v) => mutate(($0) => () => {
    delete $0[k];
    return $0;
  })(v),
  insert: (k) => (v) => (v1) => mutate(($0) => () => {
    $0[k] = v;
    return $0;
  })(v1),
  toUnfoldable: (dictUnfoldable) => toAscUnfoldable(dictUnfoldable),
  Set0: () => setEnvString
};
var highlightableVertex = {
  highlightIf: (v) => (doc2) => $Doc("Concat", doc2, $Doc("Concat", $Doc("Text", "_"), $Doc("Text", "\u27E8" + v + "\u27E9")))
};
var highlightableUnit = { highlightIf: (v) => identity25 };
var highlightableBoolean = {
  highlightIf: (v) => {
    if (!v) {
      return identity25;
    }
    if (v) {
      return (doc2) => $Doc("Concat", $Doc("Text", "\u2E28"), $Doc("Concat", doc2, $Doc("Text", "\u2E29")));
    }
    fail();
  }
};
var functorMatrixDim = { map: (f) => (m) => $Tuple(m._1, f(m._2)) };
var functorVal = {
  map: (f) => (m) => $Val(
    f(m._1),
    (() => {
      const $0 = functorVal.map(f);
      if (m._2.tag === "Just") {
        return $Maybe("Just", $0(m._2._1));
      }
      return Nothing;
    })(),
    functorBaseVal.map(f)(m._3)
  )
};
var functorMatrixRep = {
  map: (f) => (m) => $Tuple(
    arrayMap(arrayMap(functorVal.map(f)))(m._1),
    $Tuple($Tuple(m._2._1._1, f(m._2._1._2)), $Tuple(m._2._2._1, f(m._2._2._2)))
  )
};
var functorFun = {
  map: (f) => (m) => {
    if (m.tag === "Closure") {
      return $Fun("Closure", functorEnv.map(f)(m._1), _fmapObject(m._2, functorElim.map(f)), functorElim.map(f)(m._3));
    }
    if (m.tag === "Foreign") {
      return $Fun("Foreign", m._1, listMap(functorVal.map(f))(m._2));
    }
    if (m.tag === "PartialConstr") {
      return $Fun("PartialConstr", m._1, listMap(functorVal.map(f))(m._2));
    }
    fail();
  }
};
var functorEnv = { map: (f) => (m) => _fmapObject(m, functorVal.map(f)) };
var functorDictRep = { map: (f) => (m) => _fmapObject(m, (v) => $Tuple(f(v._1), functorVal.map(f)(v._2))) };
var functorBaseVal = {
  map: (f) => (m) => {
    if (m.tag === "Int") {
      return $BaseVal("Int", m._1);
    }
    if (m.tag === "Float") {
      return $BaseVal("Float", m._1);
    }
    if (m.tag === "Str") {
      return $BaseVal("Str", m._1);
    }
    if (m.tag === "Constr") {
      return $BaseVal("Constr", m._1, listMap(functorVal.map(f))(m._2));
    }
    if (m.tag === "Dictionary") {
      return $BaseVal("Dictionary", functorDictRep.map(f)(m._1));
    }
    if (m.tag === "Matrix") {
      return $BaseVal("Matrix", functorMatrixRep.map(f)(m._1));
    }
    if (m.tag === "Fun") {
      return $BaseVal("Fun", functorFun.map(f)(m._1));
    }
    fail();
  }
};
var functorEnvExpr = { map: (f) => (m) => $EnvExpr(_fmapObject(m._1, functorVal.map(f)), functorExpr.map(f)(m._2)) };
var foldableMatrixDim = { foldl: (f) => (z) => (m) => f(z)(m._2), foldr: (f) => (z) => (m) => f(m._2)(z), foldMap: (dictMonoid) => (f) => (m) => f(m._2) };
var traversableMatrixDim = {
  traverse: (dictApplicative) => (f) => (m) => dictApplicative.Apply0().Functor0().map((v1) => v1)(traversableTuple.traverse(dictApplicative)(f)(m)),
  sequence: (dictApplicative) => (v) => traversableMatrixDim.traverse(dictApplicative)(identity25)(v),
  Functor0: () => functorMatrixDim,
  Foldable1: () => foldableMatrixDim
};
var foldableVal = {
  foldl: (f) => (z) => (m) => foldableBaseVal.foldl(f)((() => {
    const $0 = foldableVal.foldl(f);
    const $1 = f(z)(m._1);
    if (m._2.tag === "Nothing") {
      return $1;
    }
    if (m._2.tag === "Just") {
      return $0($1)(m._2._1);
    }
    fail();
  })())(m._3),
  foldr: (f) => (z) => (m) => f(m._1)((() => {
    const $0 = foldableVal.foldr(f);
    const $1 = foldableBaseVal.foldr(f)(z)(m._3);
    if (m._2.tag === "Nothing") {
      return $1;
    }
    if (m._2.tag === "Just") {
      return $0($1)(m._2._1);
    }
    fail();
  })()),
  foldMap: (dictMonoid) => {
    const $0 = dictMonoid.Semigroup0();
    const mempty5 = dictMonoid.mempty;
    return (f) => (m) => $0.append(f(m._1))($0.append((() => {
      const $1 = foldableVal.foldMap(dictMonoid)(f);
      if (m._2.tag === "Nothing") {
        return mempty5;
      }
      if (m._2.tag === "Just") {
        return $1(m._2._1);
      }
      fail();
    })())(foldableBaseVal.foldMap(dictMonoid)(f)(m._3)));
  }
};
var foldableMatrixRep = {
  foldl: (f) => (acc) => (v) => foldlArray(foldlArray(foldableVal.foldl(f)))(f(f(acc)(v._2._1._2))(v._2._2._2))(v._1),
  foldr: (f) => foldrDefault(foldableMatrixRep)(f),
  foldMap: (dictMonoid) => (f) => foldableMatrixRep.foldl((acc) => (x2) => dictMonoid.Semigroup0().append(acc)(f(x2)))(dictMonoid.mempty)
};
var foldableFun = {
  foldl: (f) => (z) => (m) => {
    if (m.tag === "Closure") {
      return foldableElim.foldl(f)(fold((z$1) => (v) => foldableElim.foldl(f)(z$1))(foldableEnv.foldl(f)(z)(m._1))(m._2))(m._3);
    }
    if (m.tag === "Foreign") {
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const b = go$a0, v = go$a1;
          if (v.tag === "Nil") {
            go$c = false;
            go$r = b;
            continue;
          }
          if (v.tag === "Cons") {
            go$a0 = foldableVal.foldl(f)(b)(v._1);
            go$a1 = v._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return go(z)(m._2);
    }
    if (m.tag === "PartialConstr") {
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const b = go$a0, v = go$a1;
          if (v.tag === "Nil") {
            go$c = false;
            go$r = b;
            continue;
          }
          if (v.tag === "Cons") {
            go$a0 = foldableVal.foldl(f)(b)(v._1);
            go$a1 = v._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return go(z)(m._2);
    }
    fail();
  },
  foldr: (f) => (z) => (m) => {
    if (m.tag === "Closure") {
      return foldableEnv.foldr(f)(foldrArray((b) => (a) => foldableElim.foldr(f)(a)(b))(foldableElim.foldr(f)(z)(m._3))(values(m._2)))(m._1);
    }
    if (m.tag === "Foreign") {
      return foldableList.foldr((b) => (a) => foldableVal.foldr(f)(a)(b))(z)(m._2);
    }
    if (m.tag === "PartialConstr") {
      return foldableList.foldr((b) => (a) => foldableVal.foldr(f)(a)(b))(z)(m._2);
    }
    fail();
  },
  foldMap: (dictMonoid) => {
    const $0 = dictMonoid.Semigroup0();
    const foldMap1 = foldMap(dictMonoid);
    const foldMap9 = foldableElim.foldMap(dictMonoid);
    const foldMap10 = foldableList.foldMap(dictMonoid);
    return (f) => (m) => {
      if (m.tag === "Closure") {
        return $0.append(foldableEnv.foldMap(dictMonoid)(f)(m._1))($0.append((() => {
          const $1 = foldMap9(f);
          return foldMap1((v) => $1)(m._2);
        })())(foldMap9(f)(m._3)));
      }
      if (m.tag === "Foreign") {
        return foldMap10(foldableVal.foldMap(dictMonoid)(f))(m._2);
      }
      if (m.tag === "PartialConstr") {
        return foldMap10(foldableVal.foldMap(dictMonoid)(f))(m._2);
      }
      fail();
    };
  }
};
var foldableEnv = {
  foldl: (f) => (z) => (m) => fold((z$1) => (v) => foldableVal.foldl(f)(z$1))(z)(m),
  foldr: (f) => (z) => (m) => foldrArray((b) => (a) => foldableVal.foldr(f)(a)(b))(z)(values(m)),
  foldMap: (dictMonoid) => {
    const foldMap1 = foldMap(dictMonoid);
    return (f) => (m) => {
      const $0 = foldableVal.foldMap(dictMonoid)(f);
      return foldMap1((v) => $0)(m);
    };
  }
};
var foldableDictRep = {
  foldl: (f) => (acc) => (v) => fold((z) => (v$1) => (v1) => foldableVal.foldl(f)(f(z)(v1._1))(v1._2))(acc)(v),
  foldr: (f) => foldrDefault(foldableDictRep)(f),
  foldMap: (dictMonoid) => (f) => foldableDictRep.foldl((acc) => (x2) => dictMonoid.Semigroup0().append(acc)(f(x2)))(dictMonoid.mempty)
};
var foldableBaseVal = {
  foldl: (f) => (z) => (m) => {
    if (m.tag === "Int") {
      return z;
    }
    if (m.tag === "Float") {
      return z;
    }
    if (m.tag === "Str") {
      return z;
    }
    if (m.tag === "Constr") {
      const go = (go$a0$copy) => (go$a1$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
        while (go$c) {
          const b = go$a0, v = go$a1;
          if (v.tag === "Nil") {
            go$c = false;
            go$r = b;
            continue;
          }
          if (v.tag === "Cons") {
            go$a0 = foldableVal.foldl(f)(b)(v._1);
            go$a1 = v._2;
            continue;
          }
          fail();
        }
        return go$r;
      };
      return go(z)(m._2);
    }
    if (m.tag === "Dictionary") {
      return foldableDictRep.foldl(f)(z)(m._1);
    }
    if (m.tag === "Matrix") {
      return foldableMatrixRep.foldl(f)(z)(m._1);
    }
    if (m.tag === "Fun") {
      return foldableFun.foldl(f)(z)(m._1);
    }
    fail();
  },
  foldr: (f) => (z) => (m) => {
    if (m.tag === "Int") {
      return z;
    }
    if (m.tag === "Float") {
      return z;
    }
    if (m.tag === "Str") {
      return z;
    }
    if (m.tag === "Constr") {
      return foldableList.foldr((b) => (a) => foldableVal.foldr(f)(a)(b))(z)(m._2);
    }
    if (m.tag === "Dictionary") {
      return foldrDefault(foldableDictRep)(f)(z)(m._1);
    }
    if (m.tag === "Matrix") {
      return foldrDefault(foldableMatrixRep)(f)(z)(m._1);
    }
    if (m.tag === "Fun") {
      return foldableFun.foldr(f)(z)(m._1);
    }
    fail();
  },
  foldMap: (dictMonoid) => {
    const mempty5 = dictMonoid.mempty;
    const foldMap8 = foldableList.foldMap(dictMonoid);
    return (f) => (m) => {
      if (m.tag === "Int") {
        return mempty5;
      }
      if (m.tag === "Float") {
        return mempty5;
      }
      if (m.tag === "Str") {
        return mempty5;
      }
      if (m.tag === "Constr") {
        return foldMap8(foldableVal.foldMap(dictMonoid)(f))(m._2);
      }
      if (m.tag === "Dictionary") {
        return foldableDictRep.foldMap(dictMonoid)(f)(m._1);
      }
      if (m.tag === "Matrix") {
        return foldableMatrixRep.foldMap(dictMonoid)(f)(m._1);
      }
      if (m.tag === "Fun") {
        return foldableFun.foldMap(dictMonoid)(f)(m._1);
      }
      fail();
    };
  }
};
var foldableEnvExpr = {
  foldl: (f) => (z) => (m) => foldableExpr.foldl(f)(fold((z$1) => (v) => foldableVal.foldl(f)(z$1))(z)(m._1))(m._2),
  foldr: (f) => (z) => (m) => foldableEnv.foldr(f)(foldableExpr.foldr(f)(z)(m._2))(m._1),
  foldMap: (dictMonoid) => {
    const foldMap8 = foldableEnv.foldMap(dictMonoid);
    const foldMap9 = foldableExpr.foldMap(dictMonoid);
    return (f) => (m) => dictMonoid.Semigroup0().append(foldMap8(f)(m._1))(foldMap9(f)(m._2));
  }
};
var traversableVal = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    return (f) => (m) => Apply0.apply(Apply0.apply(Apply0.Functor0().map((v3) => (v4) => (v5) => $Val(v3, v4, v5))(f(m._1)))(traversableMaybe.traverse(dictApplicative)(traversableVal.traverse(dictApplicative)(f))(m._2)))(traversableBaseVal.traverse(dictApplicative)(f)(m._3));
  },
  sequence: (dictApplicative) => (v) => traversableVal.traverse(dictApplicative)(identity25)(v),
  Functor0: () => functorVal,
  Foldable1: () => foldableVal
};
var traversableMatrixRep = {
  traverse: (dictApplicative) => {
    const bitraverse1 = bitraversableTuple.bitraverse(dictApplicative);
    const traverse9 = traversableArray.traverse(dictApplicative);
    return (f) => (v) => dictApplicative.Apply0().Functor0().map(MatrixRep)(bitraverse1(traverse9(traverse9(traversableVal.traverse(dictApplicative)(f))))(bitraverse1(traversableMatrixDim.traverse(dictApplicative)(f))(traversableMatrixDim.traverse(dictApplicative)(f)))(v));
  },
  sequence: (dictApplicative) => traversableMatrixRep.traverse(dictApplicative)(identity7),
  Functor0: () => functorMatrixRep,
  Foldable1: () => foldableMatrixRep
};
var traversableFun = {
  traverse: (dictApplicative) => {
    const Apply0 = dictApplicative.Apply0();
    const $0 = Apply0.Functor0();
    const traverse9 = traversableDict.traverse(dictApplicative);
    const traverse10 = traversableElim.traverse(dictApplicative);
    const traverse11 = traversableList.traverse(dictApplicative);
    return (f) => (m) => {
      if (m.tag === "Closure") {
        return Apply0.apply(Apply0.apply($0.map((v3) => (v4) => (v5) => $Fun("Closure", v3, v4, v5))(traversableEnv.traverse(dictApplicative)(f)(m._1)))(traverse9(traverse10(f))(m._2)))(traverse10(f)(m._3));
      }
      if (m.tag === "Foreign") {
        const $1 = m._1;
        return $0.map((v2) => $Fun("Foreign", $1, v2))(traverse11(traversableVal.traverse(dictApplicative)(f))(m._2));
      }
      if (m.tag === "PartialConstr") {
        const $1 = m._1;
        return $0.map((v2) => $Fun("PartialConstr", $1, v2))(traverse11(traversableVal.traverse(dictApplicative)(f))(m._2));
      }
      fail();
    };
  },
  sequence: (dictApplicative) => (v) => traversableFun.traverse(dictApplicative)(identity25)(v),
  Functor0: () => functorFun,
  Foldable1: () => foldableFun
};
var traversableEnv = {
  traverse: (dictApplicative) => {
    const traverse9 = traversableDict.traverse(dictApplicative);
    return (f) => (m) => dictApplicative.Apply0().Functor0().map((v1) => v1)(traverse9(traversableVal.traverse(dictApplicative)(f))(m));
  },
  sequence: (dictApplicative) => (v) => traversableEnv.traverse(dictApplicative)(identity25)(v),
  Functor0: () => functorEnv,
  Foldable1: () => foldableEnv
};
var traversableDictRep = {
  traverse: (dictApplicative) => {
    const traverse9 = traversableDict.traverse(dictApplicative);
    const bitraverse1 = bitraversableTuple.bitraverse(dictApplicative);
    return (f) => (v) => dictApplicative.Apply0().Functor0().map(DictRep)(traverse9(bitraverse1(f)(traversableVal.traverse(dictApplicative)(f)))(v));
  },
  sequence: (dictApplicative) => traversableDictRep.traverse(dictApplicative)(identity7),
  Functor0: () => functorDictRep,
  Foldable1: () => foldableDictRep
};
var traversableBaseVal = {
  traverse: (dictApplicative) => {
    const $0 = dictApplicative.Apply0().Functor0();
    const traverse9 = traversableList.traverse(dictApplicative);
    return (f) => (m) => {
      if (m.tag === "Int") {
        return dictApplicative.pure($BaseVal("Int", m._1));
      }
      if (m.tag === "Float") {
        return dictApplicative.pure($BaseVal("Float", m._1));
      }
      if (m.tag === "Str") {
        return dictApplicative.pure($BaseVal("Str", m._1));
      }
      if (m.tag === "Constr") {
        const $1 = m._1;
        return $0.map((v2) => $BaseVal("Constr", $1, v2))(traverse9(traversableVal.traverse(dictApplicative)(f))(m._2));
      }
      if (m.tag === "Dictionary") {
        return $0.map((v1) => $BaseVal("Dictionary", v1))(traversableDictRep.traverse(dictApplicative)(f)(m._1));
      }
      if (m.tag === "Matrix") {
        return $0.map((v1) => $BaseVal("Matrix", v1))(traversableMatrixRep.traverse(dictApplicative)(f)(m._1));
      }
      if (m.tag === "Fun") {
        return $0.map((v1) => $BaseVal("Fun", v1))(traversableFun.traverse(dictApplicative)(f)(m._1));
      }
      fail();
    };
  },
  sequence: (dictApplicative) => (v) => traversableBaseVal.traverse(dictApplicative)(identity25)(v),
  Functor0: () => functorBaseVal,
  Foldable1: () => foldableBaseVal
};
var ordMatrixDim = (dictOrd) => {
  const $0 = dictOrd.Eq0();
  const eqMatrixDim1 = { eq: (x2) => (y2) => x2._1 === y2._1 && $0.eq(x2._2)(y2._2) };
  return { compare: (x2) => (y2) => ordTuple2(dictOrd).compare(x2)(y2), Eq0: () => eqMatrixDim1 };
};
var eqVal = (dictEq) => ({
  eq: (x2) => (y2) => {
    const $0 = eqVal(dictEq);
    return dictEq.eq(x2._1)(y2._1) && (x2._2.tag === "Nothing" ? y2._2.tag === "Nothing" : x2._2.tag === "Just" && y2._2.tag === "Just" && $0.eq(x2._2._1)(y2._2._1)) && eqBaseVal(dictEq).eq(x2._3)(y2._3);
  }
});
var eqMatrixRep = (dictEq) => ({
  eq: (x2) => (y2) => eqArrayImpl(eqArrayImpl(eqVal(dictEq).eq))(x2._1)(y2._1) && x2._2._1._1 === y2._2._1._1 && dictEq.eq(x2._2._1._2)(y2._2._1._2) && x2._2._2._1 === y2._2._2._1 && dictEq.eq(x2._2._2._2)(y2._2._2._2)
});
var eqFun = (dictEq) => {
  const eqElim2 = eqElim(dictEq);
  return {
    eq: (x2) => (y2) => {
      if (x2.tag === "Closure") {
        return y2.tag === "Closure" && eqEnv(dictEq).eq(x2._1)(y2._1) && eqObject(eqElim2).eq(x2._2)(y2._2) && eqElim2.eq(x2._3)(y2._3);
      }
      if (x2.tag === "Foreign") {
        return y2.tag === "Foreign" && (() => {
          const $0 = eqVal(dictEq);
          return x2._1._1 === y2._1._1 && (() => {
            const go = (v) => (v1) => (v2) => {
              if (!v2) {
                return false;
              }
              if (v.tag === "Nil") {
                return v1.tag === "Nil" && v2;
              }
              return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && $0.eq(v1._1)(v._1));
            };
            return go(x2._2)(y2._2)(true);
          })();
        })();
      }
      return x2.tag === "PartialConstr" && y2.tag === "PartialConstr" && (() => {
        const $0 = eqVal(dictEq);
        return x2._1 === y2._1 && (() => {
          const go = (v) => (v1) => (v2) => {
            if (!v2) {
              return false;
            }
            if (v.tag === "Nil") {
              return v1.tag === "Nil" && v2;
            }
            return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && $0.eq(v1._1)(v._1));
          };
          return go(x2._2)(y2._2)(true);
        })();
      })();
    }
  };
};
var eqEnv = (dictEq) => ({ eq: (x2) => (y2) => eqObject(eqVal(dictEq)).eq(x2)(y2) });
var eqDictRep = (dictEq) => ({
  eq: (x2) => (y2) => {
    const $0 = eqVal(dictEq);
    return eqObject({ eq: (x$1) => (y$1) => dictEq.eq(x$1._1)(y$1._1) && $0.eq(x$1._2)(y$1._2) }).eq(x2)(y2);
  }
});
var eqBaseVal = (dictEq) => ({
  eq: (x2) => (y2) => {
    if (x2.tag === "Int") {
      return y2.tag === "Int" && x2._1 === y2._1;
    }
    if (x2.tag === "Float") {
      return y2.tag === "Float" && x2._1 === y2._1;
    }
    if (x2.tag === "Str") {
      return y2.tag === "Str" && x2._1 === y2._1;
    }
    if (x2.tag === "Constr") {
      return y2.tag === "Constr" && (() => {
        const $0 = eqVal(dictEq);
        return x2._1 === y2._1 && (() => {
          const go = (v) => (v1) => (v2) => {
            if (!v2) {
              return false;
            }
            if (v.tag === "Nil") {
              return v1.tag === "Nil" && v2;
            }
            return v.tag === "Cons" && v1.tag === "Cons" && go(v._2)(v1._2)(v2 && $0.eq(v1._1)(v._1));
          };
          return go(x2._2)(y2._2)(true);
        })();
      })();
    }
    if (x2.tag === "Dictionary") {
      return y2.tag === "Dictionary" && eqDictRep(dictEq).eq(x2._1)(y2._1);
    }
    if (x2.tag === "Matrix") {
      return y2.tag === "Matrix" && eqMatrixRep(dictEq).eq(x2._1)(y2._1);
    }
    return x2.tag === "Fun" && y2.tag === "Fun" && eqFun(dictEq).eq(x2._1)(y2._1);
  }
});
var ordVal = (dictOrd) => {
  const eqVal1 = eqVal(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      const v = dictOrd.compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      const $0 = ordVal(dictOrd);
      const v1 = (() => {
        if (x2._2.tag === "Nothing") {
          if (y2._2.tag === "Nothing") {
            return EQ;
          }
          return LT;
        }
        if (y2._2.tag === "Nothing") {
          return GT;
        }
        if (x2._2.tag === "Just" && y2._2.tag === "Just") {
          return $0.compare(x2._2._1)(y2._2._1);
        }
        fail();
      })();
      if (v1 === "LT") {
        return LT;
      }
      if (v1 === "GT") {
        return GT;
      }
      return ordBaseVal(dictOrd).compare(x2._3)(y2._3);
    },
    Eq0: () => eqVal1
  };
};
var ordMatrixRep = (dictOrd) => {
  const ordMatrixDim1 = ordMatrixDim(dictOrd);
  const eqMatrixRep1 = eqMatrixRep(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      const v = ordArray(ordArray(ordVal(dictOrd))).compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      const v$1 = ordMatrixDim1.compare(x2._2._1)(y2._2._1);
      if (v$1 === "LT") {
        return LT;
      }
      if (v$1 === "GT") {
        return GT;
      }
      return ordMatrixDim1.compare(x2._2._2)(y2._2._2);
    },
    Eq0: () => eqMatrixRep1
  };
};
var ordFun = (dictOrd) => {
  const ordElim2 = ordElim(dictOrd);
  const eqFun1 = eqFun(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      if (x2.tag === "Closure") {
        if (y2.tag === "Closure") {
          const v = ordEnv(dictOrd).compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          const v1 = ordDict(ordElim2).compare(x2._2)(y2._2);
          if (v1 === "LT") {
            return LT;
          }
          if (v1 === "GT") {
            return GT;
          }
          return ordElim2.compare(x2._3)(y2._3);
        }
        return LT;
      }
      if (y2.tag === "Closure") {
        return GT;
      }
      if (x2.tag === "Foreign") {
        if (y2.tag === "Foreign") {
          const v = ordString.compare(x2._1._1)(y2._1._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordList(ordVal(dictOrd)).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Foreign") {
        return GT;
      }
      if (x2.tag === "PartialConstr" && y2.tag === "PartialConstr") {
        const v = ordString.compare(x2._1)(y2._1);
        if (v === "LT") {
          return LT;
        }
        if (v === "GT") {
          return GT;
        }
        return ordList(ordVal(dictOrd)).compare(x2._2)(y2._2);
      }
      fail();
    },
    Eq0: () => eqFun1
  };
};
var ordEnv = (dictOrd) => {
  const $0 = dictOrd.Eq0();
  const eqEnv1 = { eq: (x2) => (y2) => eqObject(eqVal($0)).eq(x2)(y2) };
  return { compare: (x2) => (y2) => ordDict(ordVal(dictOrd)).compare(x2)(y2), Eq0: () => eqEnv1 };
};
var ordDictRep = (dictOrd) => {
  const $0 = dictOrd.Eq0();
  const eqDictRep1 = eqDictRep(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => ordDict((() => {
      const $1 = ordVal(dictOrd);
      const $2 = $1.Eq0();
      const eqTuple2 = { eq: (x$1) => (y$1) => $0.eq(x$1._1)(y$1._1) && $2.eq(x$1._2)(y$1._2) };
      return {
        compare: (x$1) => (y$1) => {
          const v = dictOrd.compare(x$1._1)(y$1._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return $1.compare(x$1._2)(y$1._2);
        },
        Eq0: () => eqTuple2
      };
    })()).compare(x2)(y2),
    Eq0: () => eqDictRep1
  };
};
var ordBaseVal = (dictOrd) => {
  const eqBaseVal1 = eqBaseVal(dictOrd.Eq0());
  return {
    compare: (x2) => (y2) => {
      if (x2.tag === "Int") {
        if (y2.tag === "Int") {
          return ordInt.compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "Int") {
        return GT;
      }
      if (x2.tag === "Float") {
        if (y2.tag === "Float") {
          return ordNumber.compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "Float") {
        return GT;
      }
      if (x2.tag === "Str") {
        if (y2.tag === "Str") {
          return ordString.compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "Str") {
        return GT;
      }
      if (x2.tag === "Constr") {
        if (y2.tag === "Constr") {
          const v = ordString.compare(x2._1)(y2._1);
          if (v === "LT") {
            return LT;
          }
          if (v === "GT") {
            return GT;
          }
          return ordList(ordVal(dictOrd)).compare(x2._2)(y2._2);
        }
        return LT;
      }
      if (y2.tag === "Constr") {
        return GT;
      }
      if (x2.tag === "Dictionary") {
        if (y2.tag === "Dictionary") {
          return ordDictRep(dictOrd).compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "Dictionary") {
        return GT;
      }
      if (x2.tag === "Matrix") {
        if (y2.tag === "Matrix") {
          return ordMatrixRep(dictOrd).compare(x2._1)(y2._1);
        }
        return LT;
      }
      if (y2.tag === "Matrix") {
        return GT;
      }
      if (x2.tag === "Fun" && y2.tag === "Fun") {
        return ordFun(dictOrd).compare(x2._1)(y2._1);
      }
      fail();
    },
    Eq0: () => eqBaseVal1
  };
};
var applyMatrixDim = {
  apply: (v) => (v1) => {
    const $0 = v._1;
    const $1 = v1._1;
    return $Tuple(assertWhen(false)("mustEq")((v$1) => $0 === $1)($0), v._2(v1._2));
  },
  Functor0: () => functorMatrixDim
};
var applyVal = {
  apply: (v) => (v1) => {
    if (v._2.tag === "Nothing") {
      if (v1._2.tag === "Nothing") {
        return $Val(v._1(v1._1), Nothing, applyBaseVal.apply(v._3)(v1._3));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v._2.tag === "Just" && v1._2.tag === "Just") {
      return $Val(v._1(v1._1), $Maybe("Just", applyVal.apply(v._2._1)(v1._2._1)), applyBaseVal.apply(v._3)(v1._3));
    }
    return throwException(error("Shape mismatch"))();
  },
  Functor0: () => functorVal
};
var applyMatrixRep = {
  apply: (v) => (v1) => $Tuple(
    zipWithImpl(zipWith(applyVal.apply), v._1, v1._1),
    $Tuple(applyMatrixDim.apply(v._2._1)(v1._2._1), applyMatrixDim.apply(v._2._2)(v1._2._2))
  ),
  Functor0: () => functorMatrixRep
};
var applyFun = {
  apply: (v) => (v1) => {
    if (v.tag === "Closure") {
      if (v1.tag === "Closure") {
        return $Fun(
          "Closure",
          applyEnv.apply(v._1)(v1._1),
          intersectionWith_Object(apply)(_fmapObject(v._2, applyElim.apply))(v1._2),
          applyElim.apply(v._3)(v1._3)
        );
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Foreign") {
      if (v1.tag === "Foreign") {
        return $Fun(
          "Foreign",
          v._1,
          (() => {
            const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v1$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                  go$a0 = v$1._2;
                  go$a1 = v1$1._2;
                  go$a2 = $List("Cons", applyVal.apply(v$1._1)(v1$1._1), v2);
                  continue;
                }
                fail();
              }
              return go$r;
            };
            const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
              let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
              while (go$1$c) {
                const v$1 = go$1$a0, v1$1 = go$1$a1;
                if (v1$1.tag === "Nil") {
                  go$1$c = false;
                  go$1$r = v$1;
                  continue;
                }
                if (v1$1.tag === "Cons") {
                  go$1$a0 = $List("Cons", v1$1._1, v$1);
                  go$1$a1 = v1$1._2;
                  continue;
                }
                fail();
              }
              return go$1$r;
            };
            return go$1(Nil)(go(v._2)(v1._2)(Nil));
          })()
        );
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "PartialConstr" && v1.tag === "PartialConstr") {
      const $0 = v._1;
      const $1 = v1._1;
      return $Fun(
        "PartialConstr",
        assertWhen(false)("mustEq")((v$1) => $0 === $1)($0),
        (() => {
          const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
            let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
            while (go$c) {
              const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
              if (v$1.tag === "Nil") {
                go$c = false;
                go$r = v2;
                continue;
              }
              if (v1$1.tag === "Nil") {
                go$c = false;
                go$r = v2;
                continue;
              }
              if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                go$a0 = v$1._2;
                go$a1 = v1$1._2;
                go$a2 = $List("Cons", applyVal.apply(v$1._1)(v1$1._1), v2);
                continue;
              }
              fail();
            }
            return go$r;
          };
          const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
            let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
            while (go$1$c) {
              const v$1 = go$1$a0, v1$1 = go$1$a1;
              if (v1$1.tag === "Nil") {
                go$1$c = false;
                go$1$r = v$1;
                continue;
              }
              if (v1$1.tag === "Cons") {
                go$1$a0 = $List("Cons", v1$1._1, v$1);
                go$1$a1 = v1$1._2;
                continue;
              }
              fail();
            }
            return go$1$r;
          };
          return go$1(Nil)(go(v._2)(v1._2)(Nil));
        })()
      );
    }
    return throwException(error("Shape mismatch"))();
  },
  Functor0: () => functorFun
};
var applyEnv = { apply: (v) => (v1) => intersectionWith_Object(apply)(_fmapObject(v, applyVal.apply))(v1), Functor0: () => functorEnv };
var applyDictRep = {
  apply: (v) => (v1) => intersectionWith_Object((v2) => {
    const $0 = v2._2;
    return (v3) => $Tuple(v2._1(v3._1), applyVal.apply($0)(v3._2));
  })(v)(v1),
  Functor0: () => functorDictRep
};
var applyBaseVal = {
  apply: (v) => (v1) => {
    if (v.tag === "Int") {
      if (v1.tag === "Int") {
        const $0 = v._1;
        const $1 = v1._1;
        return $BaseVal("Int", assertWhen(false)("mustEq")((v$1) => $0 === $1)($0));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Float") {
      if (v1.tag === "Float") {
        const $0 = v._1;
        const $1 = v1._1;
        return $BaseVal("Float", assertWhen(false)("mustEq")((v$1) => $0 === $1)($0));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Str") {
      if (v1.tag === "Str") {
        const $0 = v._1;
        const $1 = v1._1;
        return $BaseVal("Str", assertWhen(false)("mustEq")((v$1) => $0 === $1)($0));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Constr") {
      if (v1.tag === "Constr") {
        const $0 = v._1;
        const $1 = v1._1;
        return $BaseVal(
          "Constr",
          assertWhen(false)("mustEq")((v$1) => $0 === $1)($0),
          (() => {
            const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0, v1$1 = go$a1, v2 = go$a2;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v1$1.tag === "Nil") {
                  go$c = false;
                  go$r = v2;
                  continue;
                }
                if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                  go$a0 = v$1._2;
                  go$a1 = v1$1._2;
                  go$a2 = $List("Cons", applyVal.apply(v$1._1)(v1$1._1), v2);
                  continue;
                }
                fail();
              }
              return go$r;
            };
            const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
              let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
              while (go$1$c) {
                const v$1 = go$1$a0, v1$1 = go$1$a1;
                if (v1$1.tag === "Nil") {
                  go$1$c = false;
                  go$1$r = v$1;
                  continue;
                }
                if (v1$1.tag === "Cons") {
                  go$1$a0 = $List("Cons", v1$1._1, v$1);
                  go$1$a1 = v1$1._2;
                  continue;
                }
                fail();
              }
              return go$1$r;
            };
            return go$1(Nil)(go(v._2)(v1._2)(Nil));
          })()
        );
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Dictionary") {
      if (v1.tag === "Dictionary") {
        return $BaseVal("Dictionary", applyDictRep.apply(v._1)(v1._1));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Matrix") {
      if (v1.tag === "Matrix") {
        return $BaseVal("Matrix", applyMatrixRep.apply(v._1)(v1._1));
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Fun" && v1.tag === "Fun") {
      return $BaseVal("Fun", applyFun.apply(v._1)(v1._1));
    }
    return throwException(error("Shape mismatch"))();
  },
  Functor0: () => functorBaseVal
};
var applyEnvExpr = {
  apply: (v) => (v1) => $EnvExpr(intersectionWith_Object(apply)(_fmapObject(v._1, applyVal.apply))(v1._1), applyExpr.apply(v._2)(v1._2)),
  Functor0: () => functorEnvExpr
};
var unrestrictGC = (dictBoundedMeetSemilattice) => (\u03B3) => (xs) => {
  const unfound = setSet1.difference(xs)(mapObjectString.keys(\u03B3));
  return assertWith("Variable(s) " + joinWith(", ")(arrayMap(showStringImpl)(fromFoldableImpl(
    foldableSet.foldr,
    unfound
  ))) + " are in environment ")(unfound.tag === "Leaf")({
    fwd: (\u03B3$p) => assertWith("")(unsafeDifference(ordString.compare, mapObjectString.keys(\u03B3$p), mapObjectString.keys(\u03B3)).tag === "Leaf")(union(\u03B3$p)(setObjectString.difference((() => {
      const $0 = dictBoundedMeetSemilattice.top;
      return _fmapObject(\u03B3, functorVal.map((v) => $0));
    })())(\u03B3$p))),
    bwd: (\u03B3$p) => assertWith("")(eqMap(eqString)(eqUnit).eq(mapObjectString.keys(\u03B3$p))(mapObjectString.keys(\u03B3)))(filterWithKey((x2) => {
      const $0 = setSet(ordString).member(x2)(xs);
      return (v) => $0;
    })(\u03B3$p))
  });
};
var reaches = (\u03C1) => (xs) => {
  const dom_\u03C1 = mapObjectString.keys(\u03C1);
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0, v1 = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = v1;
        continue;
      }
      if (v.tag === "Cons") {
        if (setSet1.member(v._1)(v1)) {
          go$a0 = v._2;
          go$a1 = v1;
          continue;
        }
        go$a0 = foldableList.foldr(Cons)(v._2)(toUnfoldable12(unsafeIntersectionWith(
          ordString.compare,
          $$const,
          fVElim.fv($$get(showString)(mapDictString)(v._1)(\u03C1)),
          dom_\u03C1
        )));
        go$a1 = setSet1.union($$$Map("Node", 1, 1, v._1, void 0, Leaf, Leaf))(v1);
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go(toUnfoldable12(xs))(setSet1.empty);
};
var matrixPut = (i) => (j) => (\u03B4v) => (v) => {
  const vs_i = unsafeArrayArray.unsafeIndex(v._1)(i - 1 | 0);
  return $Tuple(
    definitely("index within bounds")(_updateAt(
      Just,
      Nothing,
      i - 1 | 0,
      definitely("index within bounds")(_updateAt(Just, Nothing, j - 1 | 0, \u03B4v(unsafeArrayArray.unsafeIndex(vs_i)(j - 1 | 0)), vs_i)),
      v._1
    )),
    $Tuple(v._2._1, v._2._2)
  );
};
var matrixGet = (i) => (j) => (v) => definitely("index out of bounds!")((() => {
  const $0 = i - 1 | 0;
  if ($0 >= 0 && $0 < v._1.length) {
    const $1 = v._1[$0];
    const $2 = j - 1 | 0;
    if ($2 >= 0 && $2 < $1.length) {
      return $Maybe("Just", $1[$2]);
    }
  }
  return Nothing;
})());
var forDefs = (\u03C1) => (\u03C3) => {
  const $0 = reaches(\u03C1)(unsafeIntersectionWith(
    ordString.compare,
    $$const,
    fVElim.fv(\u03C3),
    fromFoldable13(mapObjectString.keys(\u03C1))
  ));
  return filterWithKey((x2) => {
    const $1 = setSet(ordString).member(x2)($0);
    return (v) => $1;
  })(\u03C1);
};
var asVal = (e) => {
  if (e((dictTypeName) => dictTypeName.typeName) === "Val") {
    return $Maybe("Just", e((dictTypeName) => unsafeCoerce));
  }
  return Nothing;
};

// output-es/Primitive/index.js
var fanin2 = /* @__PURE__ */ fanin(categoryFn)(choiceFn);
var isZeroNumber = { isZero: ($0) => 0 === $0 };
var isZeroInt = { isZero: ($0) => 0 === $0 };
var unary = (dictBoundedJoinSemilattice) => {
  const bot = dictBoundedJoinSemilattice.bot;
  return (id4) => (f) => $Tuple(
    id4,
    $Val(
      bot,
      Nothing,
      $BaseVal(
        "Fun",
        $Fun(
          "Foreign",
          $Tuple(
            id4,
            $ForeignOp$p({
              arity: 1,
              op: (dictMonadWithGraphAlloc) => {
                const $$new = dictMonadWithGraphAlloc.new(typeNameVal);
                return (dictMonadError) => (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
                  if (v.tag === "Cons" && v._2.tag === "Nil") {
                    const $0 = v._1._2;
                    return $$new((a) => Val(a)($0))($$$Map("Node", 1, 1, v._1._1, void 0, Leaf, Leaf))(f.o.pack(f.fwd(f.i.unpack(v._1._3))));
                  }
                  fail();
                };
              }
            })
          ),
          Nil
        )
      )
    )
  );
};
var typeError = (v) => (typeName3) => throwException(error(typeName3 + " expected; got " + renderWithIndent(Stmt)(0)(0)(prettyBaseVal(highlightableUnit).pretty(functorBaseVal.map((v$1) => {
})(v)))._1))();
var string2 = {
  pack: Str2,
  unpack: (v) => {
    if (v.tag === "Str") {
      return v._1;
    }
    return typeError(v)("Str");
  }
};
var number5 = {
  pack: Float2,
  unpack: (v) => {
    if (v.tag === "Float") {
      return v._1;
    }
    return typeError(v)("Float");
  }
};
var intOrNumberOrString = {
  pack: (v) => {
    if (v.tag === "Left") {
      return $BaseVal("Int", v._1);
    }
    if (v.tag === "Right") {
      if (v._1.tag === "Left") {
        return $BaseVal("Float", v._1._1);
      }
      if (v._1.tag === "Right") {
        return $BaseVal("Str", v._1._1);
      }
    }
    fail();
  },
  unpack: (v) => {
    if (v.tag === "Int") {
      return $Either("Left", v._1);
    }
    if (v.tag === "Float") {
      return $Either("Right", $Either("Left", v._1));
    }
    if (v.tag === "Str") {
      return $Either("Right", $Either("Right", v._1));
    }
    return typeError(v)("Int, Float or Str");
  }
};
var intOrNumber = {
  pack: (v) => {
    if (v.tag === "Left") {
      return $BaseVal("Int", v._1);
    }
    if (v.tag === "Right") {
      return $BaseVal("Float", v._1);
    }
    fail();
  },
  unpack: (v) => {
    if (v.tag === "Int") {
      return $Either("Left", v._1);
    }
    if (v.tag === "Float") {
      return $Either("Right", v._1);
    }
    return typeError(v)("Int or Float");
  }
};
var $$int = {
  pack: Int2,
  unpack: (v) => {
    if (v.tag === "Int") {
      return v._1;
    }
    return typeError(v)("Int");
  }
};
var intPair = {
  pack: (v) => $BaseVal(
    "Constr",
    "Pair",
    $List(
      "Cons",
      $Val(v._1._2, Nothing, $BaseVal("Int", v._1._1)),
      $List("Cons", $Val(v._2._2, Nothing, $BaseVal("Int", v._2._1)), Nil)
    )
  ),
  unpack: (v) => {
    if (v.tag === "Constr" && v._2.tag === "Cons" && v._2._2.tag === "Cons" && v._2._2._2.tag === "Nil" && v._1 === "Pair") {
      return $Tuple(
        $Tuple(v._2._1._3.tag === "Int" ? v._2._1._3._1 : typeError(v._2._1._3)("Int"), v._2._1._1),
        $Tuple(v._2._2._1._3.tag === "Int" ? v._2._2._1._3._1 : typeError(v._2._2._1._3)("Int"), v._2._2._1._1)
      );
    }
    return typeError(v)("Pair");
  }
};
var $$boolean = {
  pack: (v) => {
    if (v) {
      return $BaseVal("Constr", "True", Nil);
    }
    return $BaseVal("Constr", "False", Nil);
  },
  unpack: (v) => {
    if (v.tag === "Constr" && v._2.tag === "Nil") {
      if (v._1 === "True") {
        return true;
      }
      if (v._1 === "False") {
        return false;
      }
    }
    return typeError(v)("Boolean");
  }
};
var binaryZero = (dictBoundedJoinSemilattice) => {
  const bot = dictBoundedJoinSemilattice.bot;
  return (dictIsZero) => (id4) => (f) => $Tuple(
    id4,
    $Val(
      bot,
      Nothing,
      $BaseVal(
        "Fun",
        $Fun(
          "Foreign",
          $Tuple(
            id4,
            $ForeignOp$p({
              arity: 2,
              op: (dictMonadWithGraphAlloc) => {
                const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
                return (dictMonadError) => (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
                  if (v.tag === "Cons" && v._2.tag === "Cons" && v._2._2.tag === "Nil") {
                    const $0 = f.i.unpack(v._1._3);
                    const $1 = f.i.unpack(v._2._1._3);
                    return val((() => {
                      if (dictIsZero.isZero($0)) {
                        return $$$Map("Node", 1, 1, v._1._1, void 0, Leaf, Leaf);
                      }
                      if (dictIsZero.isZero($1)) {
                        return $$$Map("Node", 1, 1, v._2._1._1, void 0, Leaf, Leaf);
                      }
                      return insert3(ordVertex)(v._2._1._1)()($$$Map(
                        "Node",
                        1,
                        1,
                        v._1._1,
                        void 0,
                        Leaf,
                        Leaf
                      ));
                    })())(f.o.pack(f.fwd($0)($1)));
                  }
                  fail();
                };
              }
            })
          ),
          Nil
        )
      )
    )
  );
};
var binary = (dictBoundedJoinSemilattice) => {
  const bot = dictBoundedJoinSemilattice.bot;
  return (id4) => (f) => $Tuple(
    id4,
    $Val(
      bot,
      Nothing,
      $BaseVal(
        "Fun",
        $Fun(
          "Foreign",
          $Tuple(
            id4,
            $ForeignOp$p({
              arity: 2,
              op: (dictMonadWithGraphAlloc) => {
                const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
                return (dictMonadError) => (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
                  if (v.tag === "Cons" && v._2.tag === "Cons" && v._2._2.tag === "Nil") {
                    return val(insert3(ordVertex)(v._2._1._1)()($$$Map(
                      "Node",
                      1,
                      1,
                      v._1._1,
                      void 0,
                      Leaf,
                      Leaf
                    )))(f.o.pack(f.fwd(f.i1.unpack(v._1._3))(f.i2.unpack(v._2._1._3))));
                  }
                  fail();
                };
              }
            })
          ),
          Nil
        )
      )
    )
  );
};
var asNumberString = { as: (v) => throwException(error("Non-uniform argument types"))() };
var asNumberIntOrNumber = { as: Right };
var asIntNumberOrString = { as: (x2) => $Either("Left", toNumber(x2)) };
var asIntNumber = { as: toNumber };
var asIntIntOrNumber = { as: Left };
var asBooleanBoolean = { as: (x2) => x2 };
var union5 = (dictAs) => (dictAs1) => (dictAs2) => (dictAs3) => (v) => (v1) => (v2) => (v3) => {
  if (v2.tag === "Left") {
    if (v3.tag === "Left") {
      return dictAs.as(v(v2._1)(v3._1));
    }
    if (v3.tag === "Right") {
      return dictAs1.as(v1(dictAs2.as(v2._1))(v3._1));
    }
    fail();
  }
  if (v2.tag === "Right") {
    if (v3.tag === "Right") {
      return dictAs1.as(v1(v2._1)(v3._1));
    }
    if (v3.tag === "Left") {
      return dictAs1.as(v1(v2._1)(dictAs3.as(v3._1)));
    }
  }
  fail();
};
var unionStr = (dictAs) => (dictAs1) => union5(dictAs)(dictAs)(dictAs1)(dictAs1);

// output-es/Web.Event.Event/foreign.js
function _target(e) {
  return e.target;
}
function type_(e) {
  return e.type;
}

// output-es/App.Util/index.js
var $SelState = (tag, _1) => ({ tag, _1 });
var $SelectionType = (tag) => tag;
var $\u{1D54A} = (tag) => tag;
var genericShowSum7 = /* @__PURE__ */ (() => {
  const $0 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Inert" });
  return (dictGenericShow1) => ({
    "genericShow'": (v) => {
      if (v.tag === "Inl") {
        return $0["genericShow'"](v._1);
      }
      if (v.tag === "Inr") {
        return dictGenericShow1["genericShow'"](v._1);
      }
      fail();
    }
  });
})();
var ReactiveIsSymbol = { reflectSymbol: () => "Reactive" };
var SelStatesIsSymbol = { reflectSymbol: () => "SelStates" };
var sequence = /* @__PURE__ */ (() => traversableArray.traverse(applicativeAff)(identity7))();
var sequence_ = /* @__PURE__ */ traverse_(applicativeEffect)(foldableArray)(identity6);
var clamp = (low) => (hi) => (x2) => {
  const v = ordInt.compare(low)(x2);
  const $0 = (() => {
    if (v === "LT") {
      return x2;
    }
    if (v === "EQ") {
      return low;
    }
    if (v === "GT") {
      return low;
    }
    fail();
  })();
  const v$1 = ordInt.compare(hi)($0);
  if (v$1 === "LT") {
    return hi;
  }
  if (v$1 === "EQ") {
    return hi;
  }
  if (v$1 === "GT") {
    return $0;
  }
  fail();
};
var None2 = /* @__PURE__ */ $\u{1D54A}("None");
var Secondary = /* @__PURE__ */ $\u{1D54A}("Secondary");
var Primary = /* @__PURE__ */ $\u{1D54A}("Primary");
var Persistent = /* @__PURE__ */ $SelectionType("Persistent");
var Transient = /* @__PURE__ */ $SelectionType("Transient");
var Inert = /* @__PURE__ */ $SelState("Inert");
var Reactive = (value0) => $SelState("Reactive", value0);
var highlightableSelStates = (dictHighlightable) => (dictJoinSemilattice) => ({
  highlightIf: (v) => {
    if (v.tag === "Inert") {
      return identity25;
    }
    if (v.tag === "Reactive") {
      return dictHighlightable.highlightIf(dictJoinSemilattice.join(v._1.persistent)(v._1.transient));
    }
    fail();
  }
});
var prettyP2 = /* @__PURE__ */ prettyP(/* @__PURE__ */ prettyVal(/* @__PURE__ */ highlightableSelStates(highlightableBoolean)(joinSemilatticeBoolean)));
var showSelState = (dictShow) => ({
  show: (() => {
    const $0 = genericShowSum7(genericShowConstructor({ genericShowArgs: (v) => [dictShow.show(v)] })(ReactiveIsSymbol));
    return (x2) => $0["genericShow'"]((() => {
      if (x2.tag === "Inert") {
        return $Sum("Inl", NoArguments);
      }
      if (x2.tag === "Reactive") {
        return $Sum("Inr", x2._1);
      }
      fail();
    })());
  })()
});
var showSelStates = (dictShow) => ({
  show: (() => {
    const $0 = genericShowConstructor((() => {
      const $02 = showSelState({ show: (record2) => "{ persistent: " + dictShow.show(record2.persistent) + ", transient: " + dictShow.show(record2.transient) + " }" });
      return { genericShowArgs: (v) => [$02.show(v)] };
    })())(SelStatesIsSymbol);
    return (x2) => $0["genericShow'"](x2);
  })()
});
var show1 = /* @__PURE__ */ (() => showSelStates(showBoolean).show)();
var functorSelState = {
  map: (f) => (m) => {
    if (m.tag === "Inert") {
      return Inert;
    }
    if (m.tag === "Reactive") {
      return $SelState("Reactive", f(m._1));
    }
    fail();
  }
};
var applySelState = {
  apply: (v) => (v1) => {
    if (v.tag === "Inert") {
      if (v1.tag === "Inert") {
        return Inert;
      }
      return throwException(error("Shape mismatch"))();
    }
    if (v.tag === "Reactive" && v1.tag === "Reactive") {
      return $SelState("Reactive", v._1(v1._1));
    }
    return throwException(error("Shape mismatch"))();
  },
  Functor0: () => functorSelState
};
var to\u{1D539} = (v) => {
  if (v.tag === "Inert") {
    return false;
  }
  if (v.tag === "Reactive") {
    return v._1;
  }
  fail();
};
var selector = (v) => (v1) => $Tuple(
  functorVal.map((x2) => spyWhen(false)("to ")(show1)((() => {
    if (x2.tag === "Inert") {
      return Inert;
    }
    if (x2.tag === "Reactive") {
      if (v === "mousedown") {
        return $SelState("Reactive", { persistent: !x2._1.persistent, transient: x2._1.transient });
      }
      if (v === "mouseenter") {
        return $SelState("Reactive", { transient: true, persistent: x2._1.persistent });
      }
      if (v === "mouseleave") {
        return $SelState("Reactive", { transient: false, persistent: x2._1.persistent });
      }
      return throwException(error("Unsupported event type"))();
    }
    fail();
  })()))(spyWhen(false)("Setting selStates of ")(prettyP2)(v1)),
  (() => {
    if (v === "mousedown") {
      return Persistent;
    }
    if (v === "mouseenter") {
      return Transient;
    }
    if (v === "mouseleave") {
      return Transient;
    }
    return throwException(error("Unsupported event type"))();
  })()
);
var selStates = (v) => (v1) => (v2) => {
  if (v) {
    return Inert;
  }
  return $SelState("Reactive", { persistent: v1, transient: v2 });
};
var selState = (v) => {
  if (v) {
    return (v$1) => Inert;
  }
  return Reactive;
};
var runAffs_ = (f) => (as1) => {
  const $0 = runAff((v) => {
    if (v.tag === "Left") {
      return log2(showErrorImpl(v._1));
    }
    if (v.tag === "Right") {
      return sequence_(arrayMap(f)(v._1));
    }
    fail();
  })(sequence(as1));
  return () => {
    $0();
  };
};
var get_intOrNumber = (x2) => (r) => {
  const $0 = $$get(showString)(mapDictString)(x2)(r);
  const $1 = intOrNumber.unpack($0._2._3);
  return $Tuple(
    (() => {
      if ($1.tag === "Left") {
        return toNumber($1._1);
      }
      if ($1.tag === "Right") {
        return $1._1;
      }
      fail();
    })(),
    $0._2._1
  );
};
var eventData = (x2) => definitely("absurd")(nullable(_target(x2), Nothing, Just)).__data__;
var selectionEventData$p = /* @__PURE__ */ fanout(categoryFn)(strongFn)(eventData)((x2) => selector(type_(x2)));
var dict = (toDict) => (v) => toDict(v._3.tag === "Dictionary" ? v._3._1 : typeError(v._3)("Dictionary"));
var css = {
  sel: {
    transient: { primary: "selected-primary-transient", secondary: "selected-secondary-transient" },
    persistent: { primary: "selected-primary-persistent", secondary: "selected-secondary-persistent" }
  },
  inert: "inert"
};
var selClasses = /* @__PURE__ */ (() => joinWith(" ")([
  css.sel.transient.primary,
  css.sel.transient.secondary,
  css.sel.persistent.primary,
  css.sel.persistent.secondary,
  "inert"
]))();
var selClassesFor = (v) => {
  if (v.tag === "Inert") {
    return "inert";
  }
  return joinWith(" ")(concat([
    (() => {
      const v1 = (() => {
        if (v.tag === "Inert") {
          return None2;
        }
        if (v.tag === "Reactive") {
          return v._1.persistent;
        }
        fail();
      })();
      if (v1 === "Secondary") {
        return [css.sel.persistent.secondary];
      }
      if (v1 === "Primary") {
        return [css.sel.persistent.primary];
      }
      if (v1 === "None") {
        return [];
      }
      fail();
    })(),
    (() => {
      const v1 = (() => {
        if (v.tag === "Inert") {
          return None2;
        }
        if (v.tag === "Reactive") {
          return v._1.transient;
        }
        fail();
      })();
      if (v1 === "Secondary") {
        return [css.sel.transient.secondary];
      }
      if (v1 === "Primary") {
        return [css.sel.transient.primary];
      }
      if (v1 === "None") {
        return [];
      }
      fail();
    })()
  ]));
};
var colorShade = (col) => (n) => {
  const shade = (rgbComponent) => {
    const s = toStringAs(16)(clamp(0)(255)(definitely("absurd")(fromStringAs(16)(rgbComponent)) + n | 0));
    if (toCodePointArray(s).length === 1) {
      return "0" + s;
    }
    return s;
  };
  return "#" + shade(take(2)(drop(1)(col))) + shade(take(2)(drop(3)(col))) + shade(take(2)(drop(5)(col)));
};
var classes = /* @__PURE__ */ (() => {
  const $0 = joinWith(" ");
  return (x2) => $Tuple("class", $0(x2));
})();
var primaryOrSecondary = (dictApply) => {
  const $0 = dictApply.Functor0();
  return (selType) => (x2) => (x$p) => dictApply.apply($0.map((a) => (b) => applySelState.apply((() => {
    if (a.tag === "Inert") {
      return Inert;
    }
    if (a.tag === "Reactive") {
      return $SelState(
        "Reactive",
        (() => {
          const $1 = a._1;
          return (v1) => {
            if (!$1) {
              if (!v1) {
                return None2;
              }
              if (v1) {
                return Secondary;
              }
              fail();
            }
            if ($1) {
              if (!v1) {
                return None2;
              }
              if (v1) {
                return Primary;
              }
            }
            fail();
          };
        })()
      );
    }
    fail();
  })())(b))($0.map((s) => {
    const $1 = (() => {
      if (selType === "Persistent") {
        return (v) => v.persistent;
      }
      if (selType === "Transient") {
        return (v) => v.transient;
      }
      fail();
    })();
    if (s.tag === "Inert") {
      return Inert;
    }
    if (s.tag === "Reactive") {
      return $SelState("Reactive", $1(s._1));
    }
    fail();
  })(x2)))(x$p);
};

// output-es/App.Util.Selector/index.js
var matrixElement = (v) => (v1) => (v2) => (v3) => {
  if (v3._3.tag === "Matrix") {
    const $0 = v2(matrixGet(v)(v1)(v3._3._1));
    return $Tuple(
      (() => {
        const $1 = $0._1;
        return $Val(v3._1, v3._2, $BaseVal("Matrix", matrixPut(v)(v1)((v$1) => $1)(v3._3._1)));
      })(),
      $0._2
    );
  }
  return throwException(error("absurd"))();
};
var listElement = (n) => (\u03B4v) => (v) => {
  if (v._3.tag === "Constr" && v._3._2.tag === "Cons" && v._3._2._2.tag === "Cons" && v._3._2._2._2.tag === "Nil") {
    if (n === 0 && v._3._1 === ":") {
      const $0 = \u03B4v(v._3._2._1);
      return $Tuple(
        $Val(v._1, v._2, $BaseVal("Constr", v._3._1, $List("Cons", $0._1, $List("Cons", v._3._2._2._1, Nil)))),
        $0._2
      );
    }
    if (v._3._1 === ":") {
      const $0 = listElement(n - 1 | 0)(\u03B4v)(v._3._2._2._1);
      return $Tuple(
        $Val(v._1, v._2, $BaseVal("Constr", v._3._1, $List("Cons", v._3._2._1, $List("Cons", $0._1, Nil)))),
        $0._2
      );
    }
  }
  fail();
};
var envVal = (x2) => (\u03B4v) => (\u03B3) => assertWith("")(Object.hasOwn(\u03B3, x2))((() => {
  const $0 = \u03B4v($$get(showString)(mapEnvStringVal)(x2)(\u03B3));
  return $Tuple(
    (() => {
      const $1 = $0._1;
      return update2(showString)(mapEnvStringVal)((v) => $1)(x2)(\u03B3);
    })(),
    $0._2
  );
})());
var dictVal = (s) => (\u03B4v) => (v) => {
  if (v._3.tag === "Dictionary") {
    const $0 = \u03B4v($$get(showString)(mapDictString)(s)(v._3._1)._2);
    return $Tuple(
      (() => {
        const $1 = $0._1;
        return $Val(v._1, v._2, $BaseVal("Dictionary", update2(showString)(mapDictString)((m) => $Tuple(m._1, $1))(s)(v._3._1)));
      })(),
      $0._2
    );
  }
  fail();
};
var nthSegment = (n) => (x2) => listElement(n)(dictVal("z")(x2));
var scatterPoint = (i) => (x2) => dictVal("points")(listElement(i)(x2));
var constrArg = (c) => (n) => (\u03B4v) => (v) => {
  if (v._3.tag === "Constr" && c === v._3._1) {
    const $0 = definitely("constrArg out of bounds")((() => {
      const $02 = index(v._3._2)(n);
      if ($02.tag === "Just") {
        return $Maybe("Just", \u03B4v($02._1));
      }
      return Nothing;
    })());
    return $Tuple(
      $Val(
        v._1,
        v._2,
        $BaseVal(
          "Constr",
          v._3._1,
          (() => {
            const $1 = updateAt(n)($0._1)(v._3._2);
            if ($1.tag === "Just") {
              return $1._1;
            }
            fail();
          })()
        )
      ),
      $0._2
    );
  }
  fail();
};
var linePoint = (i) => (x2) => constrArg("LinePlot")(0)(dictVal("points")(listElement(i)(x2)));

// output-es/App.View.Util.D3/foreign.js
selection_default.prototype.attrs = function(m) {
  for (const k in m) {
    this.attr(k, m[k]);
  }
  return this;
};
selection_default.prototype.styles = function(m) {
  for (const k in m) {
    this.style(k, m[k]);
  }
  return this;
};
function computed(element, prop) {
  return window.getComputedStyle(element, null).getPropertyValue(prop);
}
function canvasFont(el) {
  return `${computed(el, "font-weight")} ${computed(el, "font-size")} ${computed(el, "font-family")}`;
}
function assertNonEmpty(sel) {
  if (sel.empty()) {
    throw new Error("Assertion failed: D3 selection is empty");
  }
}
function textDimensions(class_) {
  return (text) => {
    const element = document.createElement("text");
    element.textContent = text;
    element.classList.add(class_);
    element.style.visibility = "hidden";
    document.body.appendChild(element);
    const canvas = textDimensions.canvas || (textDimensions.canvas = document.createElement("canvas"));
    const context2 = canvas.getContext("2d");
    context2.font = canvasFont(element);
    const width2 = Math.ceil(context2.measureText(text).width);
    const height = Math.ceil(element.offsetHeight);
    element.remove();
    return { width: width2, height };
  };
}
function createChild(parent) {
  return (elementType) => {
    return (as) => {
      return () => {
        return attrs(parent.append(elementType))(as)();
      };
    };
  };
}
function createText(parent) {
  return (text) => {
    return () => {
      return parent.append(() => {
        return document.createTextNode(text);
      });
    };
  };
}
function remove3(element) {
  return () => {
    element.remove();
  };
}
function line(to) {
  return (points) => {
    const line2 = line_default().x((d) => to.x(d.x)).y((d) => to.y(d.y));
    return line2(points);
  };
}
function xAxis(to) {
  return (ticks2) => {
    return (parent) => {
      return () => {
        return parent.call(axisBottom(to.x).ticks(ticks2.length).tickFormat((d) => d));
      };
    };
  };
}
function yAxis(to) {
  return (nTicks) => {
    return (decPlaces) => {
      return (parent) => {
        return () => {
          return parent.call(axisLeft(to.y).tickSizeOuter(0).ticks(nTicks).tickFormat(format(`.${decPlaces}f`)));
        };
      };
    };
  };
}
function setText(string4) {
  return (sel) => {
    return () => {
      return sel.text(string4);
    };
  };
}
var colorScale_ = {
  schemePastel1: ordinal(Pastel1_default),
  schemeAccent: ordinal(Accent_default)
};
function colorScale(scheme) {
  return (key) => {
    return colorScale_[scheme](key);
  };
}
function dimensions(sel) {
  return () => {
    if (sel.nodes().length != 1) {
      throw "Expected singleton selection";
    }
    const [node] = sel.nodes();
    let { width: width2, height } = node.getBBox();
    return { width: Math.ceil(width2), height: Math.ceil(height) };
  };
}
function isEmpty3(sel) {
  return () => {
    return sel.empty();
  };
}
function rootSelect(selector2) {
  return () => {
    return select_default2(selector2);
  };
}
function select(selector2) {
  return (sel) => {
    assertNonEmpty(sel);
    return () => {
      return sel.select(selector2);
    };
  };
}
function selectAll2(selector2) {
  return (sel) => {
    return () => {
      const sels = [];
      sel.selectAll(selector2).each(function() {
        sels.push(select_default2(this));
      });
      return sels;
    };
  };
}
function attrs(sel) {
  return (attrs2) => {
    return () => {
      if (typeof attrs2 == "function") {
        return sel.each(function(d) {
          const attrs_ = attrs2(d);
          const sel_ = select_default2(this);
          for (const k in attrs_) {
            sel_.attr(k, attrs_[k]);
          }
        });
      } else {
        for (const k in attrs2) {
          sel.attr(k, attrs2[k]);
        }
        return sel;
      }
    };
  };
}
function styles(sel) {
  return (styles2) => {
    return () => {
      return sel.styles(styles2);
    };
  };
}
function classed(classes2) {
  return (hasClass) => {
    return (sel) => {
      return () => {
        return sel.classed(classes2, hasClass);
      };
    };
  };
}
function scaleLinear(x1) {
  return (x2) => {
    return linear2().domain([x1.min, x1.max]).range([x2.min, x2.max]);
  };
}
function scaleBand(width2) {
  return (stackedBars) => {
    return band().range([0, width2]).domain(stackedBars).padding(0.2);
  };
}
function bandwidth(x2) {
  return x2.bandwidth();
}
function datum2(sel) {
  return () => {
    return sel.datum();
  };
}
function setDatum(d) {
  return (sel) => {
    return () => {
      return sel.data([d]);
    };
  };
}
function on(eventType) {
  return (listener) => {
    return (sel) => {
      assertNonEmpty(sel);
      return () => {
        return sel.on(eventType, (e) => {
          if (e.button == 0) {
            listener(e);
          }
        });
      };
    };
  };
}

// output-es/App.View.Util.D3/index.js
var $ElementType = (tag) => tag;
var fromFoldable7 = /* @__PURE__ */ fromFoldable(foldableArray);
var Caption = /* @__PURE__ */ $ElementType("Caption");
var Circle = /* @__PURE__ */ $ElementType("Circle");
var Div = /* @__PURE__ */ $ElementType("Div");
var G = /* @__PURE__ */ $ElementType("G");
var Line3 = /* @__PURE__ */ $ElementType("Line");
var Path2 = /* @__PURE__ */ $ElementType("Path");
var Rect = /* @__PURE__ */ $ElementType("Rect");
var Span = /* @__PURE__ */ $ElementType("Span");
var SVG = /* @__PURE__ */ $ElementType("SVG");
var Table = /* @__PURE__ */ $ElementType("Table");
var Text3 = /* @__PURE__ */ $ElementType("Text");
var TBody = /* @__PURE__ */ $ElementType("TBody");
var TD = /* @__PURE__ */ $ElementType("TD");
var TH = /* @__PURE__ */ $ElementType("TH");
var THead = /* @__PURE__ */ $ElementType("THead");
var TR = /* @__PURE__ */ $ElementType("TR");
var Pattern = /* @__PURE__ */ $ElementType("Pattern");
var genericElementType_ = {
  to: (x2) => {
    if (x2.tag === "Inl") {
      return Caption;
    }
    if (x2.tag === "Inr") {
      if (x2._1.tag === "Inl") {
        return Circle;
      }
      if (x2._1.tag === "Inr") {
        if (x2._1._1.tag === "Inl") {
          return Div;
        }
        if (x2._1._1.tag === "Inr") {
          if (x2._1._1._1.tag === "Inl") {
            return G;
          }
          if (x2._1._1._1.tag === "Inr") {
            if (x2._1._1._1._1.tag === "Inl") {
              return Line3;
            }
            if (x2._1._1._1._1.tag === "Inr") {
              if (x2._1._1._1._1._1.tag === "Inl") {
                return Path2;
              }
              if (x2._1._1._1._1._1.tag === "Inr") {
                if (x2._1._1._1._1._1._1.tag === "Inl") {
                  return Rect;
                }
                if (x2._1._1._1._1._1._1.tag === "Inr") {
                  if (x2._1._1._1._1._1._1._1.tag === "Inl") {
                    return Span;
                  }
                  if (x2._1._1._1._1._1._1._1.tag === "Inr") {
                    if (x2._1._1._1._1._1._1._1._1.tag === "Inl") {
                      return SVG;
                    }
                    if (x2._1._1._1._1._1._1._1._1.tag === "Inr") {
                      if (x2._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                        return Table;
                      }
                      if (x2._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                        if (x2._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                          return Text3;
                        }
                        if (x2._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                          if (x2._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                            return TBody;
                          }
                          if (x2._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                            if (x2._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                              return TD;
                            }
                            if (x2._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                              if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                return TH;
                              }
                              if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                  return THead;
                                }
                                if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                  if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inl") {
                                    return TR;
                                  }
                                  if (x2._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.tag === "Inr") {
                                    return Pattern;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    fail();
  },
  from: (x2) => {
    if (x2 === "Caption") {
      return $Sum("Inl", NoArguments);
    }
    if (x2 === "Circle") {
      return $Sum("Inr", $Sum("Inl", NoArguments));
    }
    if (x2 === "Div") {
      return $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments)));
    }
    if (x2 === "G") {
      return $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))));
    }
    if (x2 === "Line") {
      return $Sum(
        "Inr",
        $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
      );
    }
    if (x2 === "Path") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
        )
      );
    }
    if (x2 === "Rect") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
          )
        )
      );
    }
    if (x2 === "Span") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
            )
          )
        )
      );
    }
    if (x2 === "SVG") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
              )
            )
          )
        )
      );
    }
    if (x2 === "Table") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
                )
              )
            )
          )
        )
      );
    }
    if (x2 === "Text") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2 === "TBody") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum("Inr", $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments))))
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2 === "TD") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments)))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2 === "TH") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments)))
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2 === "THead") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments)))
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2 === "TR") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum("Inr", $Sum("Inr", $Sum("Inl", NoArguments)))
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    if (x2 === "Pattern") {
      return $Sum(
        "Inr",
        $Sum(
          "Inr",
          $Sum(
            "Inr",
            $Sum(
              "Inr",
              $Sum(
                "Inr",
                $Sum(
                  "Inr",
                  $Sum(
                    "Inr",
                    $Sum(
                      "Inr",
                      $Sum(
                        "Inr",
                        $Sum(
                          "Inr",
                          $Sum(
                            "Inr",
                            $Sum(
                              "Inr",
                              $Sum(
                                "Inr",
                                $Sum("Inr", $Sum("Inr", $Sum("Inr", NoArguments)))
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
    fail();
  }
};
var showElementType = {
  show: /* @__PURE__ */ (() => {
    const $0 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Caption" });
    const $1 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Circle" });
    const $2 = (() => {
      const $22 = (() => {
        const $23 = (() => {
          const $24 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Div" });
          const $3 = (() => {
            const $32 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "G" });
            const $4 = (() => {
              const $42 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Line" });
              const $5 = (() => {
                const $52 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Path" });
                const $6 = (() => {
                  const $62 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Rect" });
                  const $7 = (() => {
                    const $72 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Span" });
                    const $8 = (() => {
                      const $82 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "SVG" });
                      const $9 = (() => {
                        const $92 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Table" });
                        const $10 = (() => {
                          const $102 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Text" });
                          const $11 = (() => {
                            const $112 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "TBody" });
                            const $12 = (() => {
                              const $122 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "TD" });
                              const $13 = (() => {
                                const $132 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "TH" });
                                const $14 = (() => {
                                  const $142 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "THead" });
                                  const $15 = (() => {
                                    const $152 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "TR" });
                                    const $16 = (() => {
                                      const $162 = genericShowConstructor(genericShowArgsNoArguments)({ reflectSymbol: () => "Pattern" });
                                      return {
                                        "genericShow'": (v) => {
                                          if (v.tag === "Inl") {
                                            return $152["genericShow'"](v._1);
                                          }
                                          if (v.tag === "Inr") {
                                            return $162["genericShow'"](v._1);
                                          }
                                          fail();
                                        }
                                      };
                                    })();
                                    return {
                                      "genericShow'": (v) => {
                                        if (v.tag === "Inl") {
                                          return $142["genericShow'"](v._1);
                                        }
                                        if (v.tag === "Inr") {
                                          return $16["genericShow'"](v._1);
                                        }
                                        fail();
                                      }
                                    };
                                  })();
                                  return {
                                    "genericShow'": (v) => {
                                      if (v.tag === "Inl") {
                                        return $132["genericShow'"](v._1);
                                      }
                                      if (v.tag === "Inr") {
                                        return $15["genericShow'"](v._1);
                                      }
                                      fail();
                                    }
                                  };
                                })();
                                return {
                                  "genericShow'": (v) => {
                                    if (v.tag === "Inl") {
                                      return $122["genericShow'"](v._1);
                                    }
                                    if (v.tag === "Inr") {
                                      return $14["genericShow'"](v._1);
                                    }
                                    fail();
                                  }
                                };
                              })();
                              return {
                                "genericShow'": (v) => {
                                  if (v.tag === "Inl") {
                                    return $112["genericShow'"](v._1);
                                  }
                                  if (v.tag === "Inr") {
                                    return $13["genericShow'"](v._1);
                                  }
                                  fail();
                                }
                              };
                            })();
                            return {
                              "genericShow'": (v) => {
                                if (v.tag === "Inl") {
                                  return $102["genericShow'"](v._1);
                                }
                                if (v.tag === "Inr") {
                                  return $12["genericShow'"](v._1);
                                }
                                fail();
                              }
                            };
                          })();
                          return {
                            "genericShow'": (v) => {
                              if (v.tag === "Inl") {
                                return $92["genericShow'"](v._1);
                              }
                              if (v.tag === "Inr") {
                                return $11["genericShow'"](v._1);
                              }
                              fail();
                            }
                          };
                        })();
                        return {
                          "genericShow'": (v) => {
                            if (v.tag === "Inl") {
                              return $82["genericShow'"](v._1);
                            }
                            if (v.tag === "Inr") {
                              return $10["genericShow'"](v._1);
                            }
                            fail();
                          }
                        };
                      })();
                      return {
                        "genericShow'": (v) => {
                          if (v.tag === "Inl") {
                            return $72["genericShow'"](v._1);
                          }
                          if (v.tag === "Inr") {
                            return $9["genericShow'"](v._1);
                          }
                          fail();
                        }
                      };
                    })();
                    return {
                      "genericShow'": (v) => {
                        if (v.tag === "Inl") {
                          return $62["genericShow'"](v._1);
                        }
                        if (v.tag === "Inr") {
                          return $8["genericShow'"](v._1);
                        }
                        fail();
                      }
                    };
                  })();
                  return {
                    "genericShow'": (v) => {
                      if (v.tag === "Inl") {
                        return $52["genericShow'"](v._1);
                      }
                      if (v.tag === "Inr") {
                        return $7["genericShow'"](v._1);
                      }
                      fail();
                    }
                  };
                })();
                return {
                  "genericShow'": (v) => {
                    if (v.tag === "Inl") {
                      return $42["genericShow'"](v._1);
                    }
                    if (v.tag === "Inr") {
                      return $6["genericShow'"](v._1);
                    }
                    fail();
                  }
                };
              })();
              return {
                "genericShow'": (v) => {
                  if (v.tag === "Inl") {
                    return $32["genericShow'"](v._1);
                  }
                  if (v.tag === "Inr") {
                    return $5["genericShow'"](v._1);
                  }
                  fail();
                }
              };
            })();
            return {
              "genericShow'": (v) => {
                if (v.tag === "Inl") {
                  return $24["genericShow'"](v._1);
                }
                if (v.tag === "Inr") {
                  return $4["genericShow'"](v._1);
                }
                fail();
              }
            };
          })();
          return {
            "genericShow'": (v) => {
              if (v.tag === "Inl") {
                return $1["genericShow'"](v._1);
              }
              if (v.tag === "Inr") {
                return $3["genericShow'"](v._1);
              }
              fail();
            }
          };
        })();
        return {
          "genericShow'": (v) => {
            if (v.tag === "Inl") {
              return $0["genericShow'"](v._1);
            }
            if (v.tag === "Inr") {
              return $23["genericShow'"](v._1);
            }
            fail();
          }
        };
      })();
      return (x2) => $22["genericShow'"](genericElementType_.from(x2));
    })();
    return (x2) => toLower($2(x2));
  })()
};
var translate = (v) => $Tuple("transform", "translate(" + showIntImpl(v.x) + ", " + showIntImpl(v.y) + ")");
var addHatchPattern = (parent$p) => (j) => (col_j) => {
  const $0 = createChild(parent$p)(showElementType.show(Pattern))(fromFoldable7([
    $Tuple("id", "diagonalHatch-" + showIntImpl(j)),
    $Tuple("patternUnits", "userSpaceOnUse"),
    $Tuple("width", "2"),
    $Tuple("height", "2"),
    $Tuple("patternTransform", "rotate(45)")
  ]));
  return () => {
    const pattern2 = $0();
    createChild(pattern2)(showElementType.show(Rect))(fromFoldable7([$Tuple("width", "3.5"), $Tuple("height", "3.5"), $Tuple("fill", col_j)]))();
    createChild(pattern2)(showElementType.show(Line3))(fromFoldable7([
      $Tuple("x1", "0"),
      $Tuple("y", "0"),
      $Tuple("x2", "0"),
      $Tuple("y2", "3.5"),
      $Tuple("stroke", "rgba(255, 255, 255, 1)"),
      $Tuple("stroke-width", "1")
    ]))();
  };
};

// output-es/Data.Argonaut.Core/foreign.js
function id3(x2) {
  return x2;
}
function stringify(j) {
  return JSON.stringify(j);
}
function _caseJson(isNull2, isBool, isNum, isStr, isArr, isObj, j) {
  if (j == null) return isNull2();
  else if (typeof j === "boolean") return isBool(j);
  else if (typeof j === "number") return isNum(j);
  else if (typeof j === "string") return isStr(j);
  else if (Object.prototype.toString.call(j) === "[object Array]")
    return isArr(j);
  else return isObj(j);
}

// output-es/Data.Argonaut.Core/index.js
var jsonEmptyObject = /* @__PURE__ */ id3(empty2);
var caseJsonString = (d) => (f) => (j) => _caseJson((v) => d, (v) => d, (v) => d, f, (v) => d, (v) => d, j);
var caseJson = (a) => (b) => (c) => (d) => (e) => (f) => (json) => _caseJson(a, b, c, d, e, f, json);

// output-es/Data.Argonaut.Decode.Error/index.js
var $JsonDecodeError = (tag, _1, _2) => ({ tag, _1, _2 });
var AtIndex = (value0) => (value1) => $JsonDecodeError("AtIndex", value0, value1);
var AtKey = (value0) => (value1) => $JsonDecodeError("AtKey", value0, value1);
var Named = (value0) => (value1) => $JsonDecodeError("Named", value0, value1);
var MissingValue = /* @__PURE__ */ $JsonDecodeError("MissingValue");
var showJsonDecodeError = {
  show: (v) => {
    if (v.tag === "TypeMismatch") {
      return "(TypeMismatch " + showStringImpl(v._1) + ")";
    }
    if (v.tag === "UnexpectedValue") {
      return "(UnexpectedValue " + stringify(v._1) + ")";
    }
    if (v.tag === "AtIndex") {
      return "(AtIndex " + showIntImpl(v._1) + " " + showJsonDecodeError.show(v._2) + ")";
    }
    if (v.tag === "AtKey") {
      return "(AtKey " + showStringImpl(v._1) + " " + showJsonDecodeError.show(v._2) + ")";
    }
    if (v.tag === "Named") {
      return "(Named " + showStringImpl(v._1) + " " + showJsonDecodeError.show(v._2) + ")";
    }
    if (v.tag === "MissingValue") {
      return "MissingValue";
    }
    fail();
  }
};

// output-es/App.View.Util/index.js
var $Direction = (tag) => tag;
var $Filter = (tag) => tag;
var all2 = /* @__PURE__ */ (() => foldableList.foldMap(/* @__PURE__ */ (() => {
  const semigroupConj1 = { append: (v) => (v1) => v && v1 };
  return { mempty: true, Semigroup0: () => semigroupConj1 };
})()))();
var sequence_2 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableArray)(identity6);
var toUnfoldable5 = /* @__PURE__ */ toAscUnfoldable(unfoldableArray);
var Everything = /* @__PURE__ */ $Filter("Everything");
var Interactive = /* @__PURE__ */ $Filter("Interactive");
var Relevant = /* @__PURE__ */ $Filter("Relevant");
var LinkedInputs = /* @__PURE__ */ $Direction("LinkedInputs");
var LinkedOutputs = /* @__PURE__ */ $Direction("LinkedOutputs");
var Intermediates = /* @__PURE__ */ $Direction("Intermediates");
var uiHelpers = {
  val: fst,
  selState: snd,
  join: (v) => (v1) => {
    if (v1.tag === "Inert") {
      return v;
    }
    if (v.tag === "Inert") {
      return v1;
    }
    if (v.tag === "Reactive" && v1.tag === "Reactive") {
      return $SelState(
        "Reactive",
        {
          persistent: (() => {
            if (v._1.persistent === "None") {
              if (v1._1.persistent === "None") {
                return v._1.persistent;
              }
              return v1._1.persistent;
            }
            if (v._1.persistent === "Secondary") {
              if (v1._1.persistent === "Secondary") {
                return v._1.persistent;
              }
              if (v1._1.persistent === "Primary") {
                return v1._1.persistent;
              }
              if (v1._1.persistent === "None") {
                return v._1.persistent;
              }
              fail();
            }
            if (v._1.persistent === "Primary") {
              return v._1.persistent;
            }
            fail();
          })(),
          transient: (() => {
            if (v._1.transient === "None") {
              if (v1._1.transient === "None") {
                return v._1.transient;
              }
              return v1._1.transient;
            }
            if (v._1.transient === "Secondary") {
              if (v1._1.transient === "Secondary") {
                return v._1.transient;
              }
              if (v1._1.transient === "Primary") {
                return v1._1.transient;
              }
              if (v1._1.transient === "None") {
                return v._1.transient;
              }
              fail();
            }
            if (v._1.transient === "Primary") {
              return v._1.transient;
            }
            fail();
          })()
        }
      );
    }
    fail();
  },
  selClasses,
  selClassesFor
};
var registerMouseListeners = (redraw) => (element) => () => {
  for (const ev of ["mousedown", "mouseenter", "mouseleave"]) {
    on(ev)(redraw)(element)();
  }
};
var decodeJsonFilter = {
  decodeJson: (json) => {
    const $0 = _caseJson(
      (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "String")),
      (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "String")),
      (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "String")),
      Right,
      (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "String")),
      (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "String")),
      json
    );
    return (() => {
      if ($0.tag === "Left") {
        const $1 = $0._1;
        return (v) => $Either("Left", $1);
      }
      if ($0.tag === "Right") {
        const $1 = $0._1;
        return (f) => f($1);
      }
      fail();
    })()((s) => {
      if (s === "Everything") {
        return $Either("Right", Everything);
      }
      if (s === "Interactive") {
        return $Either("Right", Interactive);
      }
      if (s === "Relevant") {
        return $Either("Right", Relevant);
      }
      return $Either("Left", $JsonDecodeError("TypeMismatch", "Unknown Filter: " + s));
    });
  }
};
var draw = (dictViewable) => (v) => (v1) => (select$p) => {
  const $0 = v1.divId;
  const $1 = v1.view;
  const childId = $0 + "-" + v1.suffix;
  const $2 = rootSelect("#" + $0);
  return () => {
    const div = $2();
    const a$p = isEmpty3(div)();
    check(monadThrowEffect)(!a$p)("Unable to insert figure: no div found with id " + $0)();
    const maybeRootElement = select("#" + childId)(div)();
    const v2 = isEmpty3(maybeRootElement)();
    const $3 = (() => {
      if (v2) {
        const a$p$1 = dictViewable.createElement()($1)(div)();
        return attrs(a$p$1)(fromFoldable7([$Tuple("id", childId)]))();
      }
      return maybeRootElement;
    })();
    return dictViewable.setSelection()($1)(select$p)($3)();
  };
};
var drawView = (v) => (redraw) => v.view((dictViewable) => (view2) => draw(dictViewable)(uiHelpers)({ divId: v.divId, suffix: v.suffix, view: view2 })(redraw));
var viewableViewUnit = {
  isLeaf: (view2) => view2((dictViewable) => dictViewable.isLeaf),
  createElement: (v) => (view2) => (parent) => view2((dictViewable) => (v1) => dictViewable.createElement()(v1)(parent)),
  setSelection: (v) => (view2) => (select2) => (rootElement) => view2((dictViewable) => (v1) => dictViewable.setSelection()(v1)(select2)(rootElement))
};
var viewableDictView$x215ViewUnit = {
  isLeaf: (views) => size(views) === 0,
  createElement: (v) => (views) => (parent) => {
    const $0 = createChild(parent)(showElementType.show(Div))(fromFoldable7([
      classes(["tree-children", ...all2(viewableViewUnit.isLeaf)(listMap(snd)(mapObjectString.values(views))) ? ["columnar"] : []])
    ]));
    return () => {
      const rootElement = $0();
      sequence_2(arrayMap((v1) => {
        const $1 = createChild(rootElement)(showElementType.show(Div))(fromFoldable7([
          classes(["tree-node"])
        ]));
        return () => {
          const child = $1();
          const key = v1._2._1((dictViewable) => (v1$1) => dictViewable.createElement()(v1$1)(child))();
          attrs(key)(fromFoldable7([classes(["tree-label"])]))();
          return v1._2._2((dictViewable) => (v1$1) => dictViewable.createElement()(v1$1)(child))();
        };
      })(toUnfoldable5(views)))();
      return rootElement;
    };
  },
  setSelection: (v) => (views) => (select2) => (rootElement) => sequence_2(mapWithIndexArray((i) => (v1) => {
    const $0 = v1._1;
    const $1 = select(":scope > :nth-child(" + showIntImpl(i + 1 | 0) + ")")(rootElement);
    return () => {
      const child = $1();
      const child1 = select(":scope > :nth-child(1)")(child)();
      const child2 = select(":scope > :nth-child(2)")(child)();
      v1._2._1((dictViewable) => (v1$1) => dictViewable.setSelection()(v1$1)((v2) => () => {
      })(child1))();
      v1._2._2((dictViewable) => (v1$1) => dictViewable.setSelection()(v1$1)((x2) => select2(dictVal($0)(x2)))(child2))();
    };
  })(toUnfoldable5(views)))
};

// output-es/Web.Event.EventTarget/foreign.js
function eventListener(fn) {
  return function() {
    return function(event) {
      return fn(event)();
    };
  };
}

// output-es/App.View.Segment/index.js
var max3 = (x2) => (y2) => {
  const v = ordNumber.compare(x2)(y2);
  if (v === "LT") {
    return y2;
  }
  if (v === "EQ") {
    return x2;
  }
  if (v === "GT") {
    return x2;
  }
  fail();
};
var indexCol = /* @__PURE__ */ colorScale("schemeAccent");
var viewableSegmentSegmentCon = {
  isLeaf: (v) => false,
  createElement: (v) => (v1) => (parent) => createChild(parent)(showElementType.show(Rect))(fromFoldable7([
    $Tuple("x", showNumberImpl(v.scales.x(v.x))),
    $Tuple("y", showNumberImpl(v.scales.y(v1.z._1 + v.y))),
    $Tuple("height", showNumberImpl(max3(toNumber(v.interior.height - intDiv(v.strokeWidth, 2) | 0) - v.scales.y(v1.z._1))(0))),
    $Tuple("stroke-width", showIntImpl(v.strokeWidth)),
    $Tuple("width", showNumberImpl(bandwidth(v.scales.x))),
    classes(["bar"])
  ])),
  setSelection: (v) => (v1) => (select2) => (segment) => {
    const $0 = v.y_index;
    const $$transient = (() => {
      if (v1.z._2.tag === "Inert") {
        return None2;
      }
      if (v1.z._2.tag === "Reactive") {
        return v1.z._2._1.transient;
      }
      fail();
    })();
    const persistent = (() => {
      if (v1.z._2.tag === "Inert") {
        return None2;
      }
      if (v1.z._2.tag === "Reactive") {
        return v1.z._2._1.persistent;
      }
      fail();
    })();
    const attrs2 = (() => {
      const col$p = indexCol($0);
      return [
        $Tuple(
          "fill",
          (() => {
            if (persistent === "None") {
              return col$p;
            }
            if (persistent === "Secondary") {
              return "url(#diagonalHatch-" + showIntImpl($0) + ")";
            }
            if (persistent === "Primary") {
              return colorShade(col$p)(-40);
            }
            fail();
          })()
        ),
        $Tuple("stroke-width", "1"),
        $Tuple(
          "stroke-dasharray",
          (() => {
            if ($$transient === "None") {
              return "none";
            }
            if ($$transient === "Secondary") {
              return "1 2";
            }
            if ($$transient === "Primary") {
              return "1 2";
            }
            fail();
          })()
        ),
        $Tuple("stroke-linecap", "round"),
        $Tuple(
          "stroke",
          (() => {
            if (persistent === "None") {
              return false;
            }
            if (persistent === "Secondary") {
              return true;
            }
            if (persistent === "Primary") {
              return true;
            }
            fail();
          })() || (() => {
            if ($$transient === "None") {
              return false;
            }
            if ($$transient === "Secondary") {
              return true;
            }
            if ($$transient === "Primary") {
              return true;
            }
            fail();
          })() ? colorShade(col$p)(-70) : col$p
        )
      ];
    })();
    const $1 = eventListener((x2) => select2(nthSegment($0)(selectionEventData$p(x2)._2)));
    return () => {
      const listener = $1();
      const $2 = attrs(segment)(fromFoldable7(attrs2))();
      return registerMouseListeners(listener)($2)();
    };
  }
};

// output-es/App.View.StackedBar/index.js
var forWithIndex_2 = /* @__PURE__ */ forWithIndex_(applicativeEffect);
var forWithIndex_1 = /* @__PURE__ */ forWithIndex_2(foldableWithIndexArray);
var forWithIndex_22 = /* @__PURE__ */ forWithIndex_2(foldableWithIndexArray);
var sum = /* @__PURE__ */ foldlArray(numAdd)(0);
var segmentContext = (v) => (v1) => {
  const $0 = v.interior;
  const $1 = v.scales;
  const $2 = v.strokeWidth;
  const $3 = v1.x;
  const $4 = [0, ...scanlImpl(numAdd, 0, arrayMap((v2) => v2.z._1)(v1.segments))];
  const ys = (() => {
    if ($4.length === 0) {
      fail();
    }
    return sliceImpl(0, $4.length - 1 | 0, $4);
  })();
  return (y_index) => ({ interior: $0, scales: $1, strokeWidth: $2, x: $3._1, y: unsafeArrayArray.unsafeIndex(ys)(y_index), y_index });
};
var viewableStackedBarStacked = {
  isLeaf: (v) => false,
  createElement: (context2) => (v) => (parent) => {
    const $0 = v.segments;
    const $1 = createChild(parent)(showElementType.show(G))(fromFoldable7([
      classes(["stack"])
    ]));
    return () => {
      const g = $1();
      forWithIndex_1($0)((y_index) => (segment) => viewableSegmentSegmentCon.createElement(segmentContext(context2)(v)(y_index))(segment)(g))();
      return g;
    };
  },
  setSelection: (context2) => (v) => (select2) => (root2) => {
    const $0 = v.segments;
    const $1 = selectAll2(".bar")(root2);
    return () => {
      const segments$p = $1();
      return forWithIndex_22(segments$p)((y_index) => (segment) => viewableSegmentSegmentCon.setSelection(segmentContext(context2)(v)(y_index))(unsafeArrayNonEmptyArray.unsafeIndex($0)(y_index))((x2) => select2(dictVal("segments")(x2)))(segment))();
    };
  }
};
var barHeight = (v) => sum(arrayMap((v1) => v1.z._1)(v.segments));

// output-es/App.View.Util.Axes/index.js
var $Orientation = (tag) => tag;
var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableArray);
var Default = /* @__PURE__ */ $Orientation("Default");
var Rotated = /* @__PURE__ */ $Orientation("Rotated");
var orientation = {
  pack: (v) => {
    if (v === "Default") {
      return $BaseVal("Constr", "Default", Nil);
    }
    if (v === "Rotated") {
      return $BaseVal("Constr", "Rotated", Nil);
    }
    fail();
  },
  unpack: (v) => {
    if (v.tag === "Constr" && v._2.tag === "Nil") {
      if (v._1 === "Default") {
        return Default;
      }
      if (v._1 === "Rotated") {
        return Rotated;
      }
    }
    return typeError(v)("Orientation");
  }
};
var create_yAxis = (parent$p) => (to) => (nTicks) => (decPlaces) => (orient) => {
  const $0 = yAxis(to)(nTicks)(decPlaces);
  const $1 = createChild(parent$p)(showElementType.show(G))(fromFoldable7([
    classes(["y-axis"])
  ]));
  return () => {
    const $2 = $1();
    const y2 = $0($2)();
    const $3 = selectAll2("text")(y2);
    if (orient === "Rotated") {
      const labels = $3();
      for_2(labels)((a) => {
        const $4 = attrs(a)(fromFoldable7([$Tuple("transform", "rotate(45)")]));
        return () => {
          const $5 = $4();
          return styles($5)(fromFoldable7([$Tuple("text-anchor", "end")]))();
        };
      })();
    }
    return y2;
  };
};
var create_xAxis = (parent$p) => (to) => (ticks2) => (y2) => (orient) => {
  const $0 = xAxis(to)(ticks2);
  const $1 = createChild(parent$p)(showElementType.show(G))(fromFoldable7([
    classes(["x-axis"]),
    translate({ x: 0, y: y2 })
  ]));
  return () => {
    const $2 = $1();
    const x2 = $0($2)();
    const $3 = selectAll2("text")(x2);
    if (orient === "Rotated") {
      const labels = $3();
      for_2(labels)((a) => {
        const $4 = attrs(a)(fromFoldable7([$Tuple("transform", "rotate(45)")]));
        return () => {
          const $5 = $4();
          return styles($5)(fromFoldable7([$Tuple("text-anchor", "start")]))();
        };
      })();
    }
    return x2;
  };
};

// output-es/App.View.BarChart/index.js
var maximum2 = /* @__PURE__ */ maximum(ordNumber)(foldable1NonEmptyArray);
var forWithIndex_3 = /* @__PURE__ */ forWithIndex_(applicativeEffect);
var forWithIndex_12 = /* @__PURE__ */ forWithIndex_3(foldableWithIndexArray);
var maximum1 = /* @__PURE__ */ maximum(ordInt)(foldable1NonEmptyArray);
var length4 = /* @__PURE__ */ foldlArray((c) => (v) => 1 + c | 0)(0);
var max4 = (x2) => (y2) => {
  const v = ordInt.compare(x2)(y2);
  if (v === "LT") {
    return y2;
  }
  if (v === "EQ") {
    return x2;
  }
  if (v === "GT") {
    return x2;
  }
  fail();
};
var forWithIndex_23 = /* @__PURE__ */ forWithIndex_3(foldableWithIndexArray);
var barChartProps = (v) => {
  const margin = { top: 3, right: 20, bottom: 30, left: 20 };
  const caption_height = textDimensions("title-text")(v.caption._1).height * 2 | 0;
  const interior = { width: (v.size.width._1 - margin.left | 0) - margin.right | 0, height: ((v.size.height._1 - margin.top | 0) - margin.bottom | 0) - caption_height | 0 };
  const scales = {
    x: scaleBand(interior.width)(arrayMap((v3) => v3.x._1)(v.stackedBars)),
    y: scaleLinear({ min: 0, max: ceil(10 * (maximum2(arrayMap(barHeight)(v.stackedBars)) / 10)) })({
      min: toNumber(interior.height),
      max: 0
    })
  };
  return {
    width: v.size.width._1,
    height: v.size.height._1,
    xs: arrayMap((v1) => v1.x._1)(v.stackedBars),
    ys: arrayMap((v1) => v1.y._1)((() => {
      if (0 < v.stackedBars.length) {
        return v.stackedBars[0].segments;
      }
      fail();
    })()),
    margin,
    interior,
    scales,
    caption_height,
    caption_class: "title-text",
    stackedBarContext: { interior, scales, strokeWidth: 2 }
  };
};
var viewableBarChartUnit = {
  isLeaf: (v) => false,
  setSelection: (v) => (v1) => (select2) => (barChart$p) => {
    const $0 = v1.stackedBars;
    const props = barChartProps(v1);
    const $1 = selectAll2(".stack")(barChart$p);
    return () => {
      const stackedBars$p = $1();
      return forWithIndex_12(stackedBars$p)((i) => (stack) => viewableStackedBarStacked.setSelection(props.stackedBarContext)(unsafeArrayNonEmptyArray.unsafeIndex($0)(i))((x2) => select2(constrArg("BarChart")(0)(dictVal("stackedBars")(listElement(i)(x2)))))(stack))();
    };
  },
  createElement: (v) => (v1) => (parent) => {
    const $0 = v1.caption;
    const $1 = v1.legend;
    const $2 = v1.stackedBars;
    const $3 = v1.tickLabels;
    const props = barChartProps(v1);
    const $4 = createChild(parent)(showElementType.show(SVG))(fromFoldable7([
      $Tuple("width", showIntImpl(props.width)),
      $Tuple("height", showIntImpl(props.height))
    ]));
    return () => {
      const svg = $4();
      const g = createChild(svg)(showElementType.show(G))(fromFoldable7([
        translate({ x: props.margin.left, y: props.margin.top })
      ]))();
      create_xAxis(g)(props.scales)(props.xs)(props.interior.height)($3.x._1)();
      create_yAxis(g)(props.scales)(3)(0)($3.y._1)();
      for (const stackedBar of $2) {
        viewableStackedBarStacked.createElement(props.stackedBarContext)(stackedBar)(g)();
      }
      for (const y_index of rangeImpl(0, length4(props.ys) - 1 | 0)) {
        addHatchPattern(g)(y_index)(indexCol(y_index))();
      }
      const $5 = createChild(svg)(showElementType.show(Text3))(fromFoldable7([
        $Tuple("x", showIntImpl(intDiv(props.width, 2))),
        $Tuple("y", showIntImpl(props.height - intDiv(props.caption_height, 2) | 0)),
        classes([props.caption_class]),
        $Tuple("dominant-baseline", "central"),
        $Tuple("text-anchor", "middle")
      ]))();
      setText($0._1)($5)();
      const height = 15 * length4(props.ys) | 0;
      const width2 = (15 + maximum1(arrayMap((() => {
        const $62 = textDimensions("legend-text");
        return (x2) => $62(x2).width;
      })())(props.ys)) | 0) + 4 | 0;
      const $6 = (() => {
        const $62 = createChild(g)(showElementType.show(G))(fromFoldable7([
          translate({ x: props.interior.width + 0 | 0, y: max4(0)(intDiv(props.interior.height - height | 0, 2)) })
        ]));
        return () => {
          const legend$p = $62();
          createChild(legend$p)(showElementType.show(Rect))(fromFoldable7([
            classes(["legend-box"]),
            $Tuple("x", "0"),
            $Tuple("y", "0"),
            $Tuple("height", showIntImpl(height)),
            $Tuple("width", showIntImpl(width2))
          ]))();
          return forWithIndex_23(props.ys)((y_index) => (y2) => {
            const $7 = createChild(legend$p)(showElementType.show(G))(fromFoldable7([
              classes(["legend-entry"]),
              translate({ x: 0, y: (y_index * 15 | 0) + 2 | 0 })
            ]));
            return () => {
              const g$1 = $7();
              const $8 = createChild(g$1)(showElementType.show(Text3))(fromFoldable7([
                classes(["legend-text"]),
                translate({ x: 15, y: 9 })
              ]))();
              setText(y2)($8)();
              return createChild(g$1)(showElementType.show(Rect))(fromFoldable7([
                $Tuple("fill", indexCol(y_index)),
                $Tuple("width", "4"),
                $Tuple("height", "4"),
                $Tuple("x", "5"),
                $Tuple("y", "3")
              ]))();
            };
          })();
        };
      })();
      if ($1._1) {
        $6();
      }
      return g;
    };
  }
};

// output-es/App.View.Paragraph/index.js
var $Paragraph = (_1) => ({ tag: "Paragraph", _1 });
var all3 = /* @__PURE__ */ (() => foldableArray.foldMap(/* @__PURE__ */ (() => {
  const semigroupConj1 = { append: (v) => (v1) => v && v1 };
  return { mempty: true, Semigroup0: () => semigroupConj1 };
})()))();
var sequence_3 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableArray)(identity6);
var viewableParagraphUnit = {
  isLeaf: (v) => all3(viewableViewUnit.isLeaf)(v._1),
  createElement: (v) => (v1) => (parent) => {
    const $0 = v1._1;
    const $1 = createChild(parent)(showElementType.show(Div))(fromFoldable7([
      $Tuple("class", "para-text")
    ]));
    return () => {
      const rootElement = $1();
      sequence_3(arrayMap((view2) => {
        const $2 = createText(rootElement)(" ");
        return () => {
          $2();
          return view2((dictViewable) => (v1$1) => dictViewable.createElement()(v1$1)(rootElement))();
        };
      })($0))();
      return rootElement;
    };
  },
  setSelection: (v) => (v1) => (select2) => (rootElement) => sequence_3(mapWithIndexArray((i) => (view2) => {
    const $0 = select(":scope > :nth-child(" + showIntImpl(i + 1 | 0) + ")")(rootElement);
    return () => {
      const child = $0();
      return view2((dictViewable) => (v1$1) => dictViewable.setSelection()(v1$1)((x2) => select2(constrArg("Paragraph")(0)(listElement(i)(x2))))(child))();
    };
  })(v1._1))
};

// output-es/App.View.DocView/index.js
var viewableDocViewUnit = {
  isLeaf: (v) => {
    if (v.doc.tag === "Nothing") {
      return v.view((dictViewable) => dictViewable.isLeaf);
    }
    if (v.doc.tag === "Just") {
      return false;
    }
    fail();
  },
  createElement: (v) => (v1) => (v2) => {
    if (v1.doc.tag === "Just") {
      const $0 = v1.doc._1;
      const $1 = createChild(v2)(showElementType.show(G))(fromFoldable7([]));
      return () => {
        const rootElement = $1();
        v1.view((dictViewable) => (v3) => dictViewable.createElement()(v3)(rootElement))();
        viewableParagraphUnit.createElement()($0)(rootElement)();
        return rootElement;
      };
    }
    if (v1.doc.tag === "Nothing") {
      return v1.view((dictViewable) => (v3) => dictViewable.createElement()(v3)(v2));
    }
    fail();
  },
  setSelection: (v) => (v1) => (v2) => (v3) => {
    if (v1.doc.tag === "Just") {
      const $0 = v1.doc._1;
      const $1 = select(":scope > :nth-child(1)")(v3);
      return () => {
        const viewElem = $1();
        v1.view((dictViewable) => (v4) => dictViewable.setSelection()(v4)(v2)(viewElem))();
        const docElem = select(":scope > :nth-child(2)")(v3)();
        viewableParagraphUnit.setSelection()($0)(v2)(docElem)();
      };
    }
    if (v1.doc.tag === "Nothing") {
      return v1.view((dictViewable) => (v4) => dictViewable.setSelection()(v4)(v2)(v3));
    }
    fail();
  }
};

// output-es/App.View.LineChart/index.js
var identity26 = (x2) => x2;
var join = (v) => (v1) => {
  if (v1.tag === "Inert") {
    return v;
  }
  if (v.tag === "Inert") {
    return v1;
  }
  if (v.tag === "Reactive" && v1.tag === "Reactive") {
    return $SelState(
      "Reactive",
      {
        persistent: (() => {
          if (v._1.persistent === "None") {
            if (v1._1.persistent === "None") {
              return v._1.persistent;
            }
            return v1._1.persistent;
          }
          if (v._1.persistent === "Secondary") {
            if (v1._1.persistent === "Secondary") {
              return v._1.persistent;
            }
            if (v1._1.persistent === "Primary") {
              return v1._1.persistent;
            }
            if (v1._1.persistent === "None") {
              return v._1.persistent;
            }
            fail();
          }
          if (v._1.persistent === "Primary") {
            return v._1.persistent;
          }
          fail();
        })(),
        transient: (() => {
          if (v._1.transient === "None") {
            if (v1._1.transient === "None") {
              return v._1.transient;
            }
            return v1._1.transient;
          }
          if (v._1.transient === "Secondary") {
            if (v1._1.transient === "Secondary") {
              return v._1.transient;
            }
            if (v1._1.transient === "Primary") {
              return v1._1.transient;
            }
            if (v1._1.transient === "None") {
              return v._1.transient;
            }
            fail();
          }
          if (v._1.transient === "Primary") {
            return v._1.transient;
          }
          fail();
        })()
      }
    );
  }
  fail();
};
var meet = (v) => (v1) => {
  if (v1.tag === "Inert") {
    return Inert;
  }
  if (v.tag === "Inert") {
    return Inert;
  }
  if (v.tag === "Reactive" && v1.tag === "Reactive") {
    return $SelState(
      "Reactive",
      {
        persistent: (() => {
          if (v._1.persistent === "None") {
            return v._1.persistent;
          }
          if (v._1.persistent === "Secondary") {
            if (v1._1.persistent === "Secondary") {
              return v._1.persistent;
            }
            if (v1._1.persistent === "Primary") {
              return v._1.persistent;
            }
            if (v1._1.persistent === "None") {
              return v1._1.persistent;
            }
            fail();
          }
          if (v._1.persistent === "Primary") {
            if (v1._1.persistent === "Primary") {
              return v._1.persistent;
            }
            return v1._1.persistent;
          }
          fail();
        })(),
        transient: (() => {
          if (v._1.transient === "None") {
            return v._1.transient;
          }
          if (v._1.transient === "Secondary") {
            if (v1._1.transient === "Secondary") {
              return v._1.transient;
            }
            if (v1._1.transient === "Primary") {
              return v._1.transient;
            }
            if (v1._1.transient === "None") {
              return v1._1.transient;
            }
            fail();
          }
          if (v._1.transient === "Primary") {
            if (v1._1.transient === "Primary") {
              return v._1.transient;
            }
            return v1._1.transient;
          }
          fail();
        })()
      }
    );
  }
  fail();
};
var minimum2 = /* @__PURE__ */ minimum(ordNumber)(foldable1NonEmptyArray);
var maximum3 = /* @__PURE__ */ maximum(ordNumber)(foldable1NonEmptyArray);
var maximum12 = /* @__PURE__ */ maximum(ordInt)(foldable1NonEmptyArray);
var length5 = /* @__PURE__ */ foldlArray((c) => (v) => 1 + c | 0)(0);
var max5 = (x2) => (y2) => {
  const v = ordInt.compare(x2)(y2);
  if (v === "LT") {
    return y2;
  }
  if (v === "EQ") {
    return x2;
  }
  if (v === "GT") {
    return x2;
  }
  fail();
};
var nameCol = /* @__PURE__ */ colorScale("schemePastel1");
var fill = (sel) => {
  if ((() => {
    const $0 = (() => {
      if (sel.tag === "Inert") {
        return None2;
      }
      if (sel.tag === "Reactive") {
        return sel._1.persistent;
      }
      fail();
    })();
    if ($0 === "None") {
      return false;
    }
    if ($0 === "Secondary") {
      return true;
    }
    if ($0 === "Primary") {
      return true;
    }
    fail();
  })()) {
    return (a) => colorShade(a)(-30);
  }
  return identity26;
};
var viewableLineChartUnit = {
  isLeaf: (v) => false,
  setSelection: (v) => (v1) => (redraw) => (rootElement) => {
    const $0 = v1.plots;
    const $1 = selectAll2(".linechart-point")(rootElement);
    return () => {
      const points = $1();
      const listener = eventListener((x2) => redraw((() => {
        const $2 = selectionEventData$p(x2);
        return constrArg("LineChart")(0)(dictVal("plots")(listElement($2._1.i)(linePoint($2._1.j)($2._2))));
      })()))();
      for (const point2 of points) {
        const point$p = datum2(point2)();
        const v3 = unsafeArrayArray.unsafeIndex($0)(point$p.i);
        const $2 = attrs(point2)(fromFoldable7((() => {
          const $22 = unsafeArrayArray.unsafeIndex(v3.points)(point$p.j);
          const sel = join($22.x._2)($22.y._2);
          const fill$p = fill(sel)(nameCol(definitely("absurd")((() => {
            const $3 = v3.name._1;
            return findIndexImpl(Just, Nothing, (v$1) => v$1 === $3, arrayMap((x2) => x2.name._1)($0));
          })())));
          return [
            $Tuple(
              "r",
              showNumberImpl(toNumber(2) * (() => {
                if ((() => {
                  if (sel.tag === "Inert") {
                    return false;
                  }
                  if (sel.tag === "Reactive") {
                    return (() => {
                      if (sel._1.persistent === "None") {
                        return false;
                      }
                      if (sel._1.persistent === "Secondary") {
                        return false;
                      }
                      if (sel._1.persistent === "Primary") {
                        return true;
                      }
                      fail();
                    })() || (() => {
                      if (sel._1.transient === "None") {
                        return false;
                      }
                      if (sel._1.transient === "Secondary") {
                        return false;
                      }
                      if (sel._1.transient === "Primary") {
                        return true;
                      }
                      fail();
                    })();
                  }
                  fail();
                })()) {
                  return 2;
                }
                if ((() => {
                  if (sel.tag === "Inert") {
                    return false;
                  }
                  if (sel.tag === "Reactive") {
                    return (() => {
                      if (sel._1.persistent === "None") {
                        return false;
                      }
                      if (sel._1.persistent === "Secondary") {
                        return true;
                      }
                      if (sel._1.persistent === "Primary") {
                        return false;
                      }
                      fail();
                    })() || (() => {
                      if (sel._1.transient === "None") {
                        return false;
                      }
                      if (sel._1.transient === "Secondary") {
                        return true;
                      }
                      if (sel._1.transient === "Primary") {
                        return false;
                      }
                      fail();
                    })();
                  }
                  fail();
                })()) {
                  return 1.4;
                }
                return 1;
              })())
            ),
            $Tuple(
              "stroke",
              (() => {
                const $3 = (() => {
                  if (sel.tag === "Inert") {
                    return None2;
                  }
                  if (sel.tag === "Reactive") {
                    return sel._1.transient;
                  }
                  fail();
                })();
                if ($3 === "None") {
                  return false;
                }
                if ($3 === "Secondary") {
                  return true;
                }
                if ($3 === "Primary") {
                  return true;
                }
                fail();
              })() ? colorShade(fill$p)(-30) : fill$p
            ),
            $Tuple("fill", fill$p)
          ];
        })()))();
        registerMouseListeners(listener)($2)();
      }
      const segments = selectAll2(".linechart-segment")(rootElement)();
      for (const segment of segments) {
        const segment$p = datum2(segment)();
        const v3 = unsafeArrayArray.unsafeIndex($0)(segment$p.i);
        attrs(segment)(fromFoldable7((() => {
          const sel = meet((() => {
            const $2 = unsafeArrayArray.unsafeIndex(v3.points)(segment$p.j1);
            return join($2.x._2)($2.y._2);
          })())((() => {
            const $2 = unsafeArrayArray.unsafeIndex(v3.points)(segment$p.j2);
            return join($2.x._2)($2.y._2);
          })());
          return [
            $Tuple(
              "stroke",
              ((() => {
                const $2 = (() => {
                  if (sel.tag === "Inert") {
                    return None2;
                  }
                  if (sel.tag === "Reactive") {
                    return sel._1.transient;
                  }
                  fail();
                })();
                if ($2 === "None") {
                  return false;
                }
                if ($2 === "Secondary") {
                  return true;
                }
                if ($2 === "Primary") {
                  return true;
                }
                fail();
              })() ? ((a) => colorShade(a)(-30)) : identity26)(fill(sel)(nameCol(definitely("absurd")((() => {
                const $2 = v3.name._1;
                return findIndexImpl(Just, Nothing, (v$1) => v$1 === $2, arrayMap((x2) => x2.name._1)($0));
              })()))))
            ),
            $Tuple(
              "stroke-width",
              showIntImpl((() => {
                if ((() => {
                  const $2 = (() => {
                    if (sel.tag === "Inert") {
                      return None2;
                    }
                    if (sel.tag === "Reactive") {
                      return sel._1.transient;
                    }
                    fail();
                  })();
                  if ($2 === "None") {
                    return false;
                  }
                  if ($2 === "Secondary") {
                    return true;
                  }
                  if ($2 === "Primary") {
                    return true;
                  }
                  fail();
                })()) {
                  return 2;
                }
                if ((() => {
                  const $2 = (() => {
                    if (sel.tag === "Inert") {
                      return None2;
                    }
                    if (sel.tag === "Reactive") {
                      return sel._1.persistent;
                    }
                    fail();
                  })();
                  if ($2 === "None") {
                    return false;
                  }
                  if ($2 === "Secondary") {
                    return true;
                  }
                  if ($2 === "Primary") {
                    return true;
                  }
                  fail();
                })()) {
                  return 2;
                }
                return 1;
              })())
            )
          ];
        })()))();
      }
    };
  },
  createElement: (v) => (v1) => (parent) => {
    const $0 = v1.caption;
    const $1 = v1.plots;
    const $2 = v1.size;
    const $3 = v1.tickLabels;
    const caption_height = textDimensions("title-text")($0._1).height * 2 | 0;
    const $4 = $2.width._1;
    const $5 = $2.height._1;
    const $6 = arrayBind(arrayMap((x2) => x2.points)($1))(identity5);
    const ps = definitely("non-empty")($6.length > 0 ? $Maybe("Just", $6) : Nothing);
    const $7 = arrayMap((x2) => x2.x._1)(ps);
    const $8 = minimum2($7);
    const $9 = maximum3($7);
    const $10 = maximum3(arrayMap((x2) => x2.y._1)(ps));
    const to = (v3) => ({
      x: scaleLinear({ min: $8, max: $9 })({ min: 0, max: toNumber(v3.width) }),
      y: scaleLinear({ min: 0, max: $10 })({ min: toNumber(v3.height), max: 0 })
    });
    const $11 = (15 + maximum12((() => {
      const $112 = textDimensions("legend-text");
      const $122 = arrayMap((x2) => $112(x2.name._1).width)($1);
      return definitely("non-empty")($122.length > 0 ? $Maybe("Just", $122) : Nothing);
    })()) | 0) + 4 | 0;
    const $12 = 15 * length5($1) | 0;
    const createAxes = (range3, parent$p) => {
      const $132 = $3.y;
      const $14 = create_xAxis(parent$p)(to(range3))(nubBy(ordNumber.compare)($7))(range3.height)($3.x._1);
      return () => {
        const x2 = $14();
        const y2 = create_yAxis(parent$p)(to(range3))(3)(1)($132._1)();
        return { x: x2, y: y2 };
      };
    };
    const $13 = createChild(parent)(showElementType.show(SVG))(fromFoldable7([
      $Tuple("width", showIntImpl($4)),
      $Tuple("height", showIntImpl($5))
    ]));
    return () => {
      const svg = $13();
      const v3 = createAxes({ width: $2.width._1, height: $2.height._1 }, svg)();
      const a$p = dimensions(v3.x)();
      const a$p$1 = dimensions(v3.y)();
      remove3(v3.x)();
      remove3(v3.y)();
      const interior = { width: ((($4 - a$p$1.width | 0) - 3 | 0) - $11 | 0) - 15 | 0, height: (($5 - 6 | 0) - a$p.height | 0) - caption_height | 0 };
      const g = createChild(svg)(showElementType.show(G))(fromFoldable7([
        translate({ x: a$p$1.width, y: 6 })
      ]))();
      createAxes(interior, g)();
      for (const v3$1 of concat(mapWithIndexArray((i) => (v3$2) => {
        if (v3$2.points.length > 0) {
          return zipWithImpl(
            (v5) => {
              const $142 = v5._2;
              const $15 = v5._1;
              return (v6) => $Tuple({ name: v3$2.name._1, start: $15, end: v6._1 }, { i, j1: $142, j2: v6._2 });
            },
            mapWithIndexArray((j) => (point2) => $Tuple({ x: point2.x._1, y: point2.y._1 }, j))((() => {
              if (v3$2.points.length === 0) {
                fail();
              }
              return sliceImpl(0, v3$2.points.length - 1 | 0, v3$2.points);
            })()),
            mapWithIndexArray((j) => (point2) => $Tuple({ x: point2.x._1, y: point2.y._1 }, j + 1 | 0))((() => {
              const $142 = unconsImpl((v$1) => Nothing, (v$1) => (xs) => $Maybe("Just", xs), v3$2.points);
              if ($142.tag === "Just") {
                return $142._1;
              }
              fail();
            })())
          );
        }
        return [];
      })($1))) {
        const $142 = createChild(g)(showElementType.show(Path2))(fromFoldable7([
          classes(["linechart-segment"]),
          $Tuple("d", line(to(interior))([v3$1._1.start, v3$1._1.end]))
        ]))();
        setDatum(v3$1._2)($142)();
      }
      for (const v3$1 of concat(mapWithIndexArray((i) => (v3$2) => mapWithIndexArray((j) => (p) => $Tuple(p, { i, j }))(v3$2.points))($1))) {
        const $142 = createChild(g)(showElementType.show(Circle))(fromFoldable7([
          classes(["linechart-point"]),
          $Tuple("stroke-width", "1"),
          $Tuple("cx", showNumberImpl(to(interior).x(v3$1._1.x._1))),
          $Tuple("cy", showNumberImpl(to(interior).y(v3$1._1.y._1)))
        ]))();
        setDatum({ i: v3$1._2.i, j: v3$1._2.j })($142)();
      }
      const $14 = createChild(svg)(showElementType.show(Text3))(fromFoldable7([
        $Tuple("x", showIntImpl(intDiv($4, 2))),
        $Tuple("y", showIntImpl($5 - intDiv(caption_height, 2) | 0)),
        classes(["title-text"]),
        $Tuple("dominant-baseline", "middle"),
        $Tuple("text-anchor", "middle")
      ]))();
      setText($0._1)($14)();
      const legend$p = createChild(g)(showElementType.show(G))(fromFoldable7([
        translate({ x: interior.width + 15 | 0, y: max5(0)(intDiv(interior.height - $12 | 0, 2)) })
      ]))();
      createChild(legend$p)(showElementType.show(Rect))(fromFoldable7([
        classes(["legend-box"]),
        $Tuple("x", "0"),
        $Tuple("y", "0"),
        $Tuple("height", showIntImpl($12)),
        $Tuple("width", showIntImpl($11))
      ]))();
      for (const v4 of mapWithIndexArray((i) => (v4$1) => ({ i, name: v4$1.name._1 }))($1)) {
        const $15 = v4.name;
        const g$1 = createChild(legend$p)(showElementType.show(G))(fromFoldable7([
          classes(["legend-entry"]),
          translate({ x: 0, y: (v4.i * 15 | 0) + 2 | 0 })
        ]))();
        const $16 = createChild(g$1)(showElementType.show(Text3))(fromFoldable7([
          classes(["legend-text"]),
          translate({ x: 15, y: 9 })
        ]))();
        setText($15)($16)();
        createChild(g$1)(showElementType.show(Circle))(fromFoldable7([
          $Tuple(
            "fill",
            nameCol(definitely("absurd")(findIndexImpl(Just, Nothing, (v$1) => v$1 === $15, arrayMap((x2) => x2.name._1)($1))))
          ),
          $Tuple("r", "2"),
          $Tuple("cx", "6"),
          $Tuple("cy", "6")
        ]))();
      }
      return g;
    };
  }
};

// output-es/App.View.MatrixView/foreign.js
function setSelection_({
  hBorderStyles,
  vBorderStyles,
  eventListener: eventListener2,
  withElement
}, {
  selState: selState2,
  selClasses: selClasses2,
  selClassesFor: selClassesFor2
}, { matrix }, select2, rootElement) {
  return () => {
    var listener = eventListener2(withElement(select2))();
    rootElement.selectAll(".matrix-cell").each(function(cellRect) {
      const sel = selState2(matrix.cells[cellRect.i - 1][cellRect.j - 1]);
      select_default2(this).classed(selClasses2, false).classed(selClassesFor2(sel), true).on("mousedown", (e) => {
        listener(e);
      }).on("mouseenter", (e) => {
        listener(e);
      }).on("mouseleave", (e) => {
        listener(e);
      });
    });
    rootElement.selectAll(".matrix-cell-text").each(function(cellText) {
      const sel = selState2(matrix.cells[cellText.i - 1][cellText.j - 1]);
      select_default2(this).classed(selClasses2, false).classed(selClassesFor2(sel), true);
    });
    rootElement.selectAll(".matrix-cell-hBorder").each(function(hBorder) {
      select_default2(this).attr("style", hBorderStyles(matrix)(hBorder));
    });
    rootElement.selectAll(".matrix-cell-vBorder").each(function(vBorder) {
      select_default2(this).attr("style", vBorderStyles(matrix)(vBorder));
    });
  };
}
function createElement_({ val }, { title: title2, matrix }, parent) {
  return () => {
    const strokeWidth = 0.5;
    const highlightStrokeWidth = 0.5;
    const highlightStrokeColor = "blue";
    const w = 30, h = 30;
    const [width2, height] = [w * matrix.j + highlightStrokeWidth, h * matrix.i + highlightStrokeWidth];
    const hMargin = w / 2;
    const vMargin = h / 2;
    const rootElement = parent.append("svg");
    rootElement.attr("width", width2 + hMargin).attr("height", height + vMargin);
    rootElement.append("text").text(title2 === "intermediate" ? " " : title2).attr("x", hMargin / 2).attr("y", vMargin / 2).attr("class", "title-text").attr("dominant-baseline", "middle").attr("text-anchor", "left");
    const matrixGrp = rootElement.append("g").attr("transform", `translate(${highlightStrokeWidth / 2 + hMargin / 2}, ${highlightStrokeWidth / 2 + vMargin})`).attr("fill", "currentColor").attr("stroke", "currentColor").attr("stroke-width", ".25");
    const rowGrp = matrixGrp.selectAll("g").data([...matrix.cells.entries()].map(([i, ns]) => {
      return { i: i + 1, ns };
    })).enter().append("g");
    const cells = rowGrp.selectAll("g").data(({ i, ns }) => [...ns.entries()].map(([j, n]) => {
      return { i, j: j + 1, n };
    })).enter();
    cells.append("rect").attr("x", ({ j }) => (j - 1) * w).attr("y", ({ i }) => (i - 1) * h).attr("width", w).attr("height", h).attr("class", "matrix-cell").attr("stroke-width", strokeWidth);
    cells.append("text").text(({ n }) => val(n)).attr("x", ({ j }) => (j - 0.5) * w).attr("y", ({ i }) => (i - 0.5) * h).attr("class", "matrix-cell-text").attr("text-anchor", "middle").attr("dominant-baseline", "middle").attr("pointer-events", "none");
    const bordersGrp = rootElement.append("g").attr("transform", `translate(${highlightStrokeWidth / 2 + hMargin / 2}, ${highlightStrokeWidth / 2 + vMargin})`).attr("fill", "currentColor").attr("stroke", highlightStrokeColor).attr("stroke-width", highlightStrokeWidth);
    const hBordersGrp = bordersGrp.append("g");
    const hBordersRowGrps = hBordersGrp.selectAll("g").data(range(matrix.i + 1)).enter().append("g");
    hBordersRowGrps.each(function(d) {
      select_default2(this).selectAll("line").data(range(1, matrix.j + 1).map((j) => ({ i: d, j })), (d2) => d2.j).enter().append("line").attr("x1", ({ j }) => (j - 1) * w).attr("y1", ({ i }) => i * h).attr("x2", ({ j }) => j * w).attr("y2", ({ i }) => i * h).attr("class", "matrix-cell-hBorder");
    });
    const vBordersGrp = bordersGrp.append("g");
    const vBordersRowGrps = vBordersGrp.selectAll("g").data(range(1, matrix.i + 1), (i) => i).enter().append("g");
    vBordersRowGrps.each(function(d) {
      select_default2(this).selectAll("line").data(range(matrix.j + 1).map((j) => ({ i: d, j }))).enter().append("line").attr("x1", ({ j }) => j * w).attr("y1", ({ i }) => (i - 1) * h).attr("x2", ({ j }) => j * w).attr("y2", ({ i }) => i * h).attr("class", "matrix-cell-vBorder");
    });
    return rootElement;
  };
}
var setSelection = (x1) => (x2) => (x3) => (x4) => (x5) => setSelection_(x1, x2, x3, x4, x5);
var createElement = (x1) => (x2) => (x3) => createElement_(x1, x2, x3);

// output-es/App.View.MatrixView/index.js
var matrixViewHelpers = {
  hBorderStyles: (m) => (x2) => {
    if (x2.i === 0) {
      if ((() => {
        const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i))(x2.j - 1 | 0);
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        if ($1 === "None") {
          return false;
        }
        if ($1 === "Secondary") {
          return true;
        }
        if ($1 === "Primary") {
          return true;
        }
        fail();
      })()) {
        return "filter: drop-shadow(0px 1px 1px blue);";
      }
      return "visibility: hidden;";
    }
    if (x2.i === m.i) {
      if ((() => {
        const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j - 1 | 0);
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        if ($1 === "None") {
          return false;
        }
        if ($1 === "Secondary") {
          return true;
        }
        if ($1 === "Primary") {
          return true;
        }
        fail();
      })()) {
        return "filter: drop-shadow(0px -1px 1px blue);";
      }
      return "visibility: hidden;";
    }
    if ((() => {
      const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i))(x2.j - 1 | 0);
      return (() => {
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        if ($1 === "None") {
          return false;
        }
        if ($1 === "Secondary") {
          return true;
        }
        if ($1 === "Primary") {
          return true;
        }
        fail();
      })() && (() => {
        const $1 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j - 1 | 0);
        const $2 = (() => {
          if ($1._2.tag === "Inert") {
            return None2;
          }
          if ($1._2.tag === "Reactive") {
            return $1._2._1.transient;
          }
          fail();
        })();
        if ($2 === "None") {
          return true;
        }
        if ($2 === "Secondary") {
          return false;
        }
        if ($2 === "Primary") {
          return false;
        }
        fail();
      })();
    })()) {
      return "filter: drop-shadow(0px 1px 1px blue);";
    }
    if ((() => {
      const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i))(x2.j - 1 | 0);
      const $1 = (() => {
        if ($0._2.tag === "Inert") {
          return None2;
        }
        if ($0._2.tag === "Reactive") {
          return $0._2._1.transient;
        }
        fail();
      })();
      if ($1 === "None") {
        return true;
      }
      if ($1 === "Secondary") {
        return false;
      }
      if ($1 === "Primary") {
        return false;
      }
      fail();
    })() && (() => {
      const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j - 1 | 0);
      const $1 = (() => {
        if ($0._2.tag === "Inert") {
          return None2;
        }
        if ($0._2.tag === "Reactive") {
          return $0._2._1.transient;
        }
        fail();
      })();
      if ($1 === "None") {
        return false;
      }
      if ($1 === "Secondary") {
        return true;
      }
      if ($1 === "Primary") {
        return true;
      }
      fail();
    })()) {
      return "filter: drop-shadow(0px -1px 1px blue);";
    }
    return "visibility: hidden;";
  },
  vBorderStyles: (m) => (x2) => {
    if (x2.j === 0) {
      if ((() => {
        const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j);
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        if ($1 === "None") {
          return false;
        }
        if ($1 === "Secondary") {
          return true;
        }
        if ($1 === "Primary") {
          return true;
        }
        fail();
      })()) {
        return "filter: drop-shadow(1px 0px 1px blue);";
      }
      return "visibility: hidden;";
    }
    if (x2.j === m.j) {
      if ((() => {
        const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j - 1 | 0);
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        if ($1 === "None") {
          return false;
        }
        if ($1 === "Secondary") {
          return true;
        }
        if ($1 === "Primary") {
          return true;
        }
        fail();
      })()) {
        return "filter: drop-shadow(-1px 0px 1px blue);";
      }
      return "visibility: hidden;";
    }
    if ((() => {
      const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j);
      return (() => {
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        if ($1 === "None") {
          return false;
        }
        if ($1 === "Secondary") {
          return true;
        }
        if ($1 === "Primary") {
          return true;
        }
        fail();
      })() && (() => {
        const $1 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j - 1 | 0);
        const $2 = (() => {
          if ($1._2.tag === "Inert") {
            return None2;
          }
          if ($1._2.tag === "Reactive") {
            return $1._2._1.transient;
          }
          fail();
        })();
        if ($2 === "None") {
          return true;
        }
        if ($2 === "Secondary") {
          return false;
        }
        if ($2 === "Primary") {
          return false;
        }
        fail();
      })();
    })()) {
      return "filter: drop-shadow(1px 0px 1px blue);";
    }
    if ((() => {
      const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j);
      const $1 = (() => {
        if ($0._2.tag === "Inert") {
          return None2;
        }
        if ($0._2.tag === "Reactive") {
          return $0._2._1.transient;
        }
        fail();
      })();
      if ($1 === "None") {
        return true;
      }
      if ($1 === "Secondary") {
        return false;
      }
      if ($1 === "Primary") {
        return false;
      }
      fail();
    })() && (() => {
      const $0 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex(m.cells)(x2.i - 1 | 0))(x2.j - 1 | 0);
      const $1 = (() => {
        if ($0._2.tag === "Inert") {
          return None2;
        }
        if ($0._2.tag === "Reactive") {
          return $0._2._1.transient;
        }
        fail();
      })();
      if ($1 === "None") {
        return false;
      }
      if ($1 === "Secondary") {
        return true;
      }
      if ($1 === "Primary") {
        return true;
      }
      fail();
    })()) {
      return "filter: drop-shadow(-1px 0px 1px blue);";
    }
    return "visibility: hidden;";
  },
  eventListener,
  withElement: (sel) => (x2) => sel((() => {
    const $0 = selectionEventData$p(x2);
    return matrixElement($0._1.i)($0._1.j)($0._2);
  })())
};
var viewableMatrixViewUnit = {
  isLeaf: (v) => false,
  createElement: (v) => createElement(uiHelpers),
  setSelection: (v) => setSelection(matrixViewHelpers)(uiHelpers)
};
var matrixRep = (v) => ({
  cells: arrayMap((v1) => arrayMap((v$1) => $Tuple(v$1._3.tag === "Int" ? v$1._3._1 : typeError(v$1._3)("Int"), v$1._1))(v1))(v._1),
  i: v._2._1._1,
  j: v._2._2._1
});

// output-es/App.View.MultiView/index.js
var $MultiView = (_1) => ({ tag: "MultiView", _1 });
var sequence_4 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableArray)(identity6);
var viewableMultiViewUnit = {
  isLeaf: (v) => false,
  createElement: (v) => (v1) => (parent) => {
    const $0 = v1._1;
    const $1 = createChild(parent)(showElementType.show(Div))(fromFoldable7([]));
    return () => {
      const rootElement = $1();
      sequence_4(arrayMap((view2) => view2((dictViewable) => (v1$1) => dictViewable.createElement()(v1$1)(rootElement)))($0))();
      return rootElement;
    };
  },
  setSelection: (v) => (v1) => (select2) => (rootElement) => sequence_4(mapWithIndexArray((i) => (view2) => {
    const $0 = select(":scope > :nth-child(" + showIntImpl(i + 1 | 0) + ")")(rootElement);
    return () => {
      const child = $0();
      return view2((dictViewable) => (v1$1) => dictViewable.setSelection()(v1$1)((x2) => select2(constrArg("MultiView")(0)(listElement(i)(x2))))(child))();
    };
  })(v1._1))
};

// output-es/App.View.ScatterPlot/foreign.js
function setSelection_2({ point_attrs, eventListener: eventListener2, withScatterPlotPoint }, {
  selState: selState2,
  selClasses: selClasses2,
  selClassesFor: selClassesFor2,
  join: join4
}, view2, select2, rootElement) {
  return () => {
    var newListener = eventListener2(withScatterPlotPoint(select2))();
    const { points } = view2;
    rootElement.selectAll(".scatterplot-point").each(function(point2) {
      const sel = join4(selState2(points[point2.i].x))(selState2(points[point2.i].y));
      select_default2(this).classed(selClasses2, false).classed(selClassesFor2(sel), true).attrs(point_attrs(view2)(point2)).on("mousedown", (e) => {
        newListener(e);
      }).on("mouseenter", (e) => {
        newListener(e);
      }).on("mouseleave", (e) => {
        newListener(e);
      });
    });
  };
}
function createElement_2({ val }, { caption, points, labels }, parent) {
  return () => {
    var max_width = 280;
    var max_height = 200;
    const x_max = Math.ceil(Math.max(...points.map((point2) => val(point2.x))));
    const x_min = Math.ceil(Math.min(...points.map((point2) => val(point2.x))));
    const y_max = Math.ceil(Math.max(...points.map((point2) => val(point2.y))));
    const y_min = Math.ceil(Math.min(...points.map((point2) => val(point2.y))));
    const margin = { top: 20, right: 20, bottom: 40, left: 50 };
    const width2 = max_width - margin.left - margin.right, height = max_height - margin.top - margin.bottom;
    const rootElement = parent.append("svg").classed("center", true).attr("width", max_width + margin.left + margin.right).attr("height", max_height + margin.top).append("g").attr("transform", `translate(${margin.left}, ${margin.top})`);
    const x2 = linear2().domain([Math.min(0, x_min), x_max]).range([0, width2]);
    rootElement.append("g").attr("transform", "translate(0," + height + ")").call(axisBottom(x2).tickSizeOuter(0)).selectAll("text").style("text-anchor", "middle");
    const y2 = linear2().domain([Math.min(0, y_min), y_max]).range([height, 0]);
    rootElement.append("g").call(axisLeft(y2).tickSizeOuter(0));
    rootElement.append("text").attr("x", width2).attr("y", height + 25).style("text-anchor", "end").style("font-size", "10px").text(val(labels.x));
    rootElement.append("text").attr("transform", "rotate(-90)").attr("x", -margin.top).attr("y", -margin.left + 20).style("text-anchor", "end").style("font-size", "10px").text(val(labels.y));
    rootElement.append("g").selectAll("circle").data([...points.entries()].map(([i, point2]) => {
      return { i, point: point2 };
    })).enter().append("circle").classed("scatterplot-point", true).attr("cx", ({ point: point2 }) => x2(val(point2.x))).attr("cy", ({ point: point2 }) => y2(val(point2.y))).attr("stroke-width", 0.5);
    rootElement.append("text").text(val(caption)).attr("x", width2 / 2).attr("y", height + 40).attr("class", "title-text").attr("dominant-baseline", "bottom").attr("text-anchor", "middle");
    return rootElement;
  };
}
var createElement2 = (x1) => (x2) => (x3) => createElement_2(x1, x2, x3);
var setSelection2 = (x1) => (x2) => (x3) => (x4) => (x5) => setSelection_2(x1, x2, x3, x4, x5);

// output-es/App.View.ScatterPlot/index.js
var join2 = (v) => (v1) => {
  if (v1.tag === "Inert") {
    return v;
  }
  if (v.tag === "Inert") {
    return v1;
  }
  if (v.tag === "Reactive" && v1.tag === "Reactive") {
    return $SelState(
      "Reactive",
      {
        persistent: (() => {
          if (v._1.persistent === "None") {
            if (v1._1.persistent === "None") {
              return v._1.persistent;
            }
            return v1._1.persistent;
          }
          if (v._1.persistent === "Secondary") {
            if (v1._1.persistent === "Secondary") {
              return v._1.persistent;
            }
            if (v1._1.persistent === "Primary") {
              return v1._1.persistent;
            }
            if (v1._1.persistent === "None") {
              return v._1.persistent;
            }
            fail();
          }
          if (v._1.persistent === "Primary") {
            return v._1.persistent;
          }
          fail();
        })(),
        transient: (() => {
          if (v._1.transient === "None") {
            if (v1._1.transient === "None") {
              return v._1.transient;
            }
            return v1._1.transient;
          }
          if (v._1.transient === "Secondary") {
            if (v1._1.transient === "Secondary") {
              return v._1.transient;
            }
            if (v1._1.transient === "Primary") {
              return v1._1.transient;
            }
            if (v1._1.transient === "None") {
              return v._1.transient;
            }
            fail();
          }
          if (v._1.transient === "Primary") {
            return v._1.transient;
          }
          fail();
        })()
      }
    );
  }
  fail();
};
var fromFoldable8 = /* @__PURE__ */ fromFoldable(foldableArray);
var scatterPlotHelpers = {
  point_attrs: (v) => (v1) => {
    const v2 = unsafeArrayArray.unsafeIndex(v.points)(v1.i);
    const sel = join2(v2.x._2)(v2.y._2);
    return fromFoldable8([
      $Tuple(
        "r",
        showNumberImpl(toNumber(2) * (() => {
          if ((() => {
            if (sel.tag === "Inert") {
              return false;
            }
            if (sel.tag === "Reactive") {
              return (() => {
                if (sel._1.persistent === "None") {
                  return false;
                }
                if (sel._1.persistent === "Secondary") {
                  return false;
                }
                if (sel._1.persistent === "Primary") {
                  return true;
                }
                fail();
              })() || (() => {
                if (sel._1.transient === "None") {
                  return false;
                }
                if (sel._1.transient === "Secondary") {
                  return false;
                }
                if (sel._1.transient === "Primary") {
                  return true;
                }
                fail();
              })();
            }
            fail();
          })()) {
            return 1.6;
          }
          if ((() => {
            if (sel.tag === "Inert") {
              return false;
            }
            if (sel.tag === "Reactive") {
              return (() => {
                if (sel._1.persistent === "None") {
                  return false;
                }
                if (sel._1.persistent === "Secondary") {
                  return true;
                }
                if (sel._1.persistent === "Primary") {
                  return false;
                }
                fail();
              })() || (() => {
                if (sel._1.transient === "None") {
                  return false;
                }
                if (sel._1.transient === "Secondary") {
                  return true;
                }
                if (sel._1.transient === "Primary") {
                  return false;
                }
                fail();
              })();
            }
            fail();
          })()) {
            return 1.25;
          }
          return 1;
        })())
      )
    ]);
  },
  eventListener,
  withScatterPlotPoint: (sel) => (x2) => sel((() => {
    const $0 = selectionEventData$p(x2);
    return constrArg("ScatterPlot")(0)(scatterPoint($0._1.i)($0._2));
  })())
};
var viewableScatterPlotUnit = {
  isLeaf: (v) => false,
  createElement: (v) => createElement2(uiHelpers),
  setSelection: (v) => setSelection2(scatterPlotHelpers)(uiHelpers)
};

// output-es/Data.Number.Format/foreign.js
function wrap(method) {
  return function(d) {
    return function(num) {
      return method.apply(num, [d]);
    };
  };
}
var toPrecisionNative = wrap(Number.prototype.toPrecision);
var toFixedNative = wrap(Number.prototype.toFixed);
var toExponentialNative = wrap(Number.prototype.toExponential);

// output-es/Data.Number.Format/index.js
var $Format2 = (tag, _1) => ({ tag, _1 });
var clamp2 = (low) => (hi) => (x2) => {
  const v = ordInt.compare(low)(x2);
  const $0 = (() => {
    if (v === "LT") {
      return x2;
    }
    if (v === "EQ") {
      return low;
    }
    if (v === "GT") {
      return low;
    }
    fail();
  })();
  const v$1 = ordInt.compare(hi)($0);
  if (v$1 === "LT") {
    return hi;
  }
  if (v$1 === "EQ") {
    return hi;
  }
  if (v$1 === "GT") {
    return $0;
  }
  fail();
};
var toStringWith = (v) => {
  if (v.tag === "Precision") {
    return toPrecisionNative(v._1);
  }
  if (v.tag === "Fixed") {
    return toFixedNative(v._1);
  }
  if (v.tag === "Exponential") {
    return toExponentialNative(v._1);
  }
  fail();
};

// output-es/App.View.TableView/index.js
var toUnfoldable6 = /* @__PURE__ */ (() => {
  const $0 = unfoldableArray.unfoldr((xs) => {
    if (xs.tag === "Nil") {
      return Nothing;
    }
    if (xs.tag === "Cons") {
      return $Maybe("Just", $Tuple(xs._1, xs._2));
    }
    fail();
  });
  return (x2) => $0((() => {
    const go = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
      }
      fail();
    };
    return go(x2, Nil);
  })());
})();
var $$for = /* @__PURE__ */ (() => {
  const traverse22 = traversableArray.traverse(applicativeEffect);
  return (x2) => (f) => traverse22(f)(x2);
})();
var forWithIndex_4 = /* @__PURE__ */ forWithIndex_(applicativeEffect)(foldableWithIndexArray);
var visible = (filter3) => (v) => {
  if (filter3 === "Everything") {
    return true;
  }
  if (filter3 === "Interactive") {
    if (v._1.tag === "Inert") {
      return false;
    }
    if (v._1.tag === "Reactive") {
      return true;
    }
    fail();
  }
  if (filter3 === "Relevant") {
    return !((() => {
      const $0 = (() => {
        if (v._1.tag === "Inert") {
          return None2;
        }
        if (v._1.tag === "Reactive") {
          return v._1._1.persistent;
        }
        fail();
      })();
      const $1 = (() => {
        if (v._1.tag === "Inert") {
          return None2;
        }
        if (v._1.tag === "Reactive") {
          return v._1._1.transient;
        }
        fail();
      })();
      return (() => {
        if ($0 === "None") {
          return true;
        }
        if ($0 === "Secondary") {
          return false;
        }
        if ($0 === "Primary") {
          return false;
        }
        fail();
      })() && (() => {
        if ($1 === "None") {
          return true;
        }
        if ($1 === "Secondary") {
          return false;
        }
        if ($1 === "Primary") {
          return false;
        }
        fail();
      })();
    })() || (() => {
      if (v._1.tag === "Inert") {
        return true;
      }
      if (v._1.tag === "Reactive") {
        return false;
      }
      fail();
    })());
  }
  fail();
};
var prim = (v) => {
  if (v._3.tag === "Int") {
    return showIntImpl(v._3._1);
  }
  if (v._3.tag === "Float") {
    return toStringWith($Format2("Fixed", clamp2(0)(20)(2)))(v._3._1);
  }
  if (v._3.tag === "Str") {
    return v._3._1;
  }
  return throwException(error("TableView only supports primitive values."))();
};
var headers = (records) => sortBy(ordString.compare)(toUnfoldable6((() => {
  const $0 = definitely("non-empty")(records.length > 0 ? $Maybe("Just", records) : Nothing);
  return mapObjectString.keys((() => {
    if (0 < $0.length) {
      return $0[0];
    }
    fail();
  })());
})()));
var viewableTableViewUnit = {
  isLeaf: (v) => false,
  setSelection: (v) => (v1) => (redraw) => (rootElement) => {
    const $0 = v1.colNames;
    const $1 = v1.rows;
    const $2 = v1.title;
    const row_isVisible = arrayMap(any(visible(v1.rowFilter)))($1);
    const row_visiblePred = (row_visiblePred$a0$copy) => {
      let row_visiblePred$a0 = row_visiblePred$a0$copy, row_visiblePred$c = true, row_visiblePred$r;
      while (row_visiblePred$c) {
        const i = row_visiblePred$a0;
        if (i < 0) {
          row_visiblePred$c = false;
          row_visiblePred$r = throwException(error("absurd"))();
          continue;
        }
        if (i === 0) {
          row_visiblePred$c = false;
          row_visiblePred$r = -1;
          continue;
        }
        if (unsafeArrayArray.unsafeIndex(row_isVisible)(i - 1 | 0)) {
          row_visiblePred$c = false;
          row_visiblePred$r = i - 1 | 0;
          continue;
        }
        row_visiblePred$a0 = i - 1 | 0;
      }
      return row_visiblePred$r;
    };
    const row_visibleSucc = (row_visibleSucc$a0$copy) => {
      let row_visibleSucc$a0 = row_visibleSucc$a0$copy, row_visibleSucc$c = true, row_visibleSucc$r;
      while (row_visibleSucc$c) {
        const i = row_visibleSucc$a0;
        if (i === ($1.length - 1 | 0)) {
          row_visibleSucc$c = false;
          row_visibleSucc$r = Nothing;
          continue;
        }
        if (unsafeArrayArray.unsafeIndex(row_isVisible)(i + 1 | 0)) {
          row_visibleSucc$c = false;
          row_visibleSucc$r = $Maybe("Just", i + 1 | 0);
          continue;
        }
        row_visibleSucc$a0 = i + 1 | 0;
      }
      return row_visibleSucc$r;
    };
    const isCellTransient = (i, j) => {
      if (i === -1 || j === -1) {
        return false;
      }
      const $32 = unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex($1)(i))(j);
      const $42 = (() => {
        if ($32._1.tag === "Inert") {
          return None2;
        }
        if ($32._1.tag === "Reactive") {
          return $32._1._1.transient;
        }
        fail();
      })();
      if ($42 === "None") {
        return false;
      }
      if ($42 === "Secondary") {
        return true;
      }
      if ($42 === "Primary") {
        return true;
      }
      fail();
    };
    const $3 = selectAll2(".table-row")(rootElement);
    const column_isVisible = arrayMap(any(visible($0.length >= 10 ? Interactive : Everything)))(transpose($1));
    const column_visiblePred = (column_visiblePred$a0$copy) => {
      let column_visiblePred$a0 = column_visiblePred$a0$copy, column_visiblePred$c = true, column_visiblePred$r;
      while (column_visiblePred$c) {
        const j = column_visiblePred$a0;
        if (j < 0) {
          column_visiblePred$c = false;
          column_visiblePred$r = throwException(error("absurd"))();
          continue;
        }
        if (j === 0) {
          column_visiblePred$c = false;
          column_visiblePred$r = -1;
          continue;
        }
        if (unsafeArrayArray.unsafeIndex(column_isVisible)(j - 1 | 0)) {
          column_visiblePred$c = false;
          column_visiblePred$r = j - 1 | 0;
          continue;
        }
        column_visiblePred$a0 = j - 1 | 0;
      }
      return column_visiblePred$r;
    };
    const column_visibleSucc = (column_visibleSucc$a0$copy) => {
      let column_visibleSucc$a0 = column_visibleSucc$a0$copy, column_visibleSucc$c = true, column_visibleSucc$r;
      while (column_visibleSucc$c) {
        const i = column_visibleSucc$a0;
        if (i === ($0.length - 1 | 0)) {
          column_visibleSucc$c = false;
          column_visibleSucc$r = Nothing;
          continue;
        }
        if (unsafeArrayArray.unsafeIndex(column_isVisible)(i + 1 | 0)) {
          column_visibleSucc$c = false;
          column_visibleSucc$r = $Maybe("Just", i + 1 | 0);
          continue;
        }
        column_visibleSucc$a0 = i + 1 | 0;
      }
      return column_visibleSucc$r;
    };
    const hiddenColumns = filterImpl((x2) => !unsafeArrayArray.unsafeIndex(column_isVisible)(x2), rangeImpl(0, $0.length - 1 | 0));
    const $4 = selectAll2(".table-cell")(rootElement);
    const $5 = selectAll2(".table-cell")(rootElement);
    return () => {
      const cells = $5();
      const listener = eventListener((x2) => redraw((() => {
        const $62 = selectionEventData$p(x2);
        return listElement($62._1.i)(dictVal($62._1.colName)($62._2));
      })()))();
      for (const cell of cells) {
        const v22 = datum2(cell)();
        if (v22.i === -1 || v22.j === -1) {
        } else {
          const $62 = classed(selClasses)(false)(cell)();
          const $7 = classed(v22.colName === "__n" ? "" : selClassesFor(unsafeArrayArray.unsafeIndex(unsafeArrayArray.unsafeIndex($1)(v22.i))(v22.j)._1))(true)($62)();
          registerMouseListeners(listener)($7)();
        }
        styles(cell)(fromFoldable7([
          $Tuple(
            "border-right",
            (() => {
              const v2$1 = column_visibleSucc(v22.j);
              const $62 = column_visibleSucc(v22.j);
              const $7 = (() => {
                if ($62.tag === "Nothing") {
                  return true;
                }
                if ($62.tag === "Just") {
                  return false;
                }
                fail();
              })();
              if ((() => {
                if (v2$1.tag === "Nothing") {
                  return isCellTransient(v22.i, v22.j);
                }
                if (v2$1.tag === "Just") {
                  return isCellTransient(v22.i, v2$1._1) !== isCellTransient(v22.i, column_visiblePred(v2$1._1));
                }
                fail();
              })()) {
                return "1px solid blue";
              }
              if ($7) {
                return "1px solid #eee";
              }
              return "";
            })()
          ),
          $Tuple(
            "border-bottom",
            (() => {
              const v2$1 = row_visibleSucc(v22.i);
              const $62 = v22.i === ($1.length - 1 | 0);
              if ((() => {
                if (v2$1.tag === "Nothing") {
                  return isCellTransient(v22.i, v22.j);
                }
                if (v2$1.tag === "Just") {
                  return isCellTransient(v2$1._1, v22.j) !== isCellTransient(row_visiblePred(v2$1._1), v22.j) && v22.i === (v2$1._1 - 1 | 0);
                }
                fail();
              })()) {
                return "1px solid blue";
              }
              if ($62) {
                return "1px solid transparent";
              }
              return "";
            })()
          )
        ]))();
      }
      const rows$p = $3();
      const a$p = $$for(rows$p)((row) => {
        const $62 = datum2(row);
        return () => {
          const v22 = $62();
          return $Tuple(row, unsafeArrayArray.unsafeIndex(row_isVisible)(v22.i));
        };
      })();
      const v2 = partitionImpl(snd, a$p);
      for (const v3 of v2.no) {
        classed("hidden")(true)(v3._1)();
      }
      for (const v3 of v2.yes) {
        classed("hidden")(false)(v3._1)();
      }
      const cells$1 = $4();
      for (const cell of cells$1) {
        const v2$1 = datum2(cell)();
        if (elem(eqInt)(v2$1.j)(hiddenColumns)) {
          classed("hidden")(true)(cell)();
        } else {
          classed("hidden")(false)(cell)();
        }
      }
      const $6 = select(".table-caption")(rootElement)();
      setText($2 + " (" + showIntImpl($1.length - v2.no.length | 0) + " of " + showIntImpl($1.length) + " \xD7 " + showIntImpl($0.length - hiddenColumns.length | 0) + " of " + showIntImpl($0.length) + ")")($6)();
    };
  },
  createElement: (v) => (v1) => (parent) => {
    const $0 = v1.colNames;
    const $1 = v1.rowFilter;
    const $2 = v1.rows;
    const $3 = createChild(parent)(showElementType.show(Div))(fromFoldable7([
      classes(["table-wrapper"])
    ]));
    return () => {
      const rootElement = $3();
      createChild(rootElement)(showElementType.show(Div))(fromFoldable7([
        classes(["title-text", "table-caption"]),
        $Tuple("dominant-baseline", "middle"),
        $Tuple("text-anchor", "left")
      ]))();
      const table = createChild(rootElement)(showElementType.show(Table))(fromFoldable7([
        classes(["table-view"])
      ]))();
      const colNames$p = ["__n", ...$0];
      const $4 = createChild(table)(showElementType.show(THead))(fromFoldable7([]))();
      const row = createChild($4)(showElementType.show(TR))(fromFoldable7([]))();
      forWithIndex_4(colNames$p)((j) => (colName) => {
        const value = (() => {
          if (colName === "__n") {
            if ($1 === "Relevant") {
              return "\u25B8";
            }
            return "\u25BE";
          }
          return colName;
        })();
        const $5 = createChild(row)(showElementType.show(TH))(fromFoldable7([
          classes(["table-cell", ...colName === "__n" ? ["filter-toggle", "toggle-button"] : []])
        ]));
        const $6 = setText(value);
        const $7 = setDatum({ i: -1, j: j - 1 | 0, value, colName: unsafeArrayArray.unsafeIndex(colNames$p)(j) });
        return () => {
          const $8 = $5();
          const $9 = styles($8)(fromFoldable7([$Tuple("border-left", "1px solid #eee")]))();
          const $10 = $6($9)();
          return $7($10)();
        };
      })();
      const body = createChild(table)(showElementType.show(TBody))(fromFoldable7([]))();
      forWithIndex_4($2)((i) => (row$1) => {
        const $5 = createChild(body)(showElementType.show(TR))(fromFoldable7([
          classes(["table-row"])
        ]));
        const $6 = setDatum({ i });
        return () => {
          const $7 = $5();
          const row$p = $6($7)();
          return forWithIndex_4([showIntImpl(i + 1 | 0), ...arrayMap(prim)(row$1)])((j) => (value) => {
            const $8 = createChild(row$p)(showElementType.show(TD))(fromFoldable7([
              classes(j >= 0 ? ["table-cell"] : [])
            ]));
            const $9 = setText(value);
            const $10 = setDatum({ i, j: j - 1 | 0, value, colName: unsafeArrayArray.unsafeIndex(colNames$p)(j) });
            return () => {
              const $11 = $8();
              const $12 = styles($11)(fromFoldable7([
                $Tuple("border-top", "1px solid transparent"),
                $Tuple("border-left", "1px solid #eee")
              ]))();
              const $13 = $9($12)();
              return $10($13)();
            };
          })();
        };
      })();
      return rootElement;
    };
  }
};
var arrayDictToArray2 = (x2) => arrayMap((a) => arrayMap((a$1) => $$get(showString)(mapDictString)(a$1)(a))(x2));

// output-es/App.View.Text/index.js
var textualText = { getText: unsafeCoerce };
var textAttrs = (dictTextual) => (text) => {
  const $0 = dictTextual.getText(text);
  return [
    $Tuple(
      "border-bottom",
      (() => {
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        if ($1 === "None") {
          return false;
        }
        if ($1 === "Secondary") {
          return true;
        }
        if ($1 === "Primary") {
          return true;
        }
        fail();
      })() ? "1px solid blue" : "none"
    ),
    $Tuple(
      "background",
      (() => {
        if ((() => {
          const $1 = (() => {
            if ($0._2.tag === "Inert") {
              return None2;
            }
            if ($0._2.tag === "Reactive") {
              return $0._2._1.persistent;
            }
            fail();
          })();
          return (() => {
            if ($0._2.tag === "Inert") {
              return false;
            }
            if ($0._2.tag === "Reactive") {
              return (() => {
                if ($0._2._1.persistent === "None") {
                  return false;
                }
                if ($0._2._1.persistent === "Secondary") {
                  return false;
                }
                if ($0._2._1.persistent === "Primary") {
                  return true;
                }
                fail();
              })() || (() => {
                if ($0._2._1.transient === "None") {
                  return false;
                }
                if ($0._2._1.transient === "Secondary") {
                  return false;
                }
                if ($0._2._1.transient === "Primary") {
                  return true;
                }
                fail();
              })();
            }
            fail();
          })() && (() => {
            if ($1 === "None") {
              return false;
            }
            if ($1 === "Secondary") {
              return true;
            }
            if ($1 === "Primary") {
              return true;
            }
            fail();
          })();
        })()) {
          return "#93E9BE";
        }
        if ((() => {
          const $1 = (() => {
            if ($0._2.tag === "Inert") {
              return None2;
            }
            if ($0._2.tag === "Reactive") {
              return $0._2._1.persistent;
            }
            fail();
          })();
          return (() => {
            if ($0._2.tag === "Inert") {
              return false;
            }
            if ($0._2.tag === "Reactive") {
              return (() => {
                if ($0._2._1.persistent === "None") {
                  return false;
                }
                if ($0._2._1.persistent === "Secondary") {
                  return true;
                }
                if ($0._2._1.persistent === "Primary") {
                  return false;
                }
                fail();
              })() || (() => {
                if ($0._2._1.transient === "None") {
                  return false;
                }
                if ($0._2._1.transient === "Secondary") {
                  return true;
                }
                if ($0._2._1.transient === "Primary") {
                  return false;
                }
                fail();
              })();
            }
            fail();
          })() && (() => {
            if ($1 === "None") {
              return false;
            }
            if ($1 === "Secondary") {
              return true;
            }
            if ($1 === "Primary") {
              return true;
            }
            fail();
          })();
        })()) {
          return "rgb(226, 226, 226)";
        }
        return "white";
      })()
    ),
    $Tuple(
      "color",
      (() => {
        const $1 = (() => {
          if ($0._2.tag === "Inert") {
            return None2;
          }
          if ($0._2.tag === "Reactive") {
            return $0._2._1.transient;
          }
          fail();
        })();
        return (() => {
          if ($0._2.tag === "Inert") {
            return false;
          }
          if ($0._2.tag === "Reactive") {
            return (() => {
              if ($0._2._1.persistent === "None") {
                return false;
              }
              if ($0._2._1.persistent === "Secondary") {
                return false;
              }
              if ($0._2._1.persistent === "Primary") {
                return true;
              }
              fail();
            })() || (() => {
              if ($0._2._1.transient === "None") {
                return false;
              }
              if ($0._2._1.transient === "Secondary") {
                return false;
              }
              if ($0._2._1.transient === "Primary") {
                return true;
              }
              fail();
            })();
          }
          fail();
        })() && (() => {
          if ($1 === "None") {
            return false;
          }
          if ($1 === "Secondary") {
            return true;
          }
          if ($1 === "Primary") {
            return true;
          }
          fail();
        })();
      })() ? "blue" : "black"
    )
  ];
};
var viewableTextUnit = {
  isLeaf: (v) => true,
  createElement: (v) => (text) => (parent) => {
    const $0 = createChild(parent)(showElementType.show(Span))(fromFoldable7([]));
    return () => {
      const rootElement = $0();
      return setText(text._1)(rootElement)();
    };
  },
  setSelection: (v) => (text) => (redraw) => (rootElement) => {
    const $0 = eventListener((x2) => redraw(selectionEventData$p(x2)._2));
    return () => {
      const listener = $0();
      const $1 = styles(rootElement)(fromFoldable7(textAttrs(textualText)(text)))();
      return registerMouseListeners(listener)($1)();
    };
  }
};

// output-es/Link/index.js
var $Link = (_1, _2) => ({ tag: "Link", _1, _2 });
var join3 = (v) => (v1) => {
  if (v1.tag === "Inert") {
    return v;
  }
  if (v.tag === "Inert") {
    return v1;
  }
  if (v.tag === "Reactive" && v1.tag === "Reactive") {
    return $SelState(
      "Reactive",
      {
        persistent: (() => {
          if (v._1.persistent === "None") {
            if (v1._1.persistent === "None") {
              return v._1.persistent;
            }
            return v1._1.persistent;
          }
          if (v._1.persistent === "Secondary") {
            if (v1._1.persistent === "Secondary") {
              return v._1.persistent;
            }
            if (v1._1.persistent === "Primary") {
              return v1._1.persistent;
            }
            if (v1._1.persistent === "None") {
              return v._1.persistent;
            }
            fail();
          }
          if (v._1.persistent === "Primary") {
            return v._1.persistent;
          }
          fail();
        })(),
        transient: (() => {
          if (v._1.transient === "None") {
            if (v1._1.transient === "None") {
              return v._1.transient;
            }
            return v1._1.transient;
          }
          if (v._1.transient === "Secondary") {
            if (v1._1.transient === "Secondary") {
              return v._1.transient;
            }
            if (v1._1.transient === "Primary") {
              return v1._1.transient;
            }
            if (v1._1.transient === "None") {
              return v._1.transient;
            }
            fail();
          }
          if (v._1.transient === "Primary") {
            return v._1.transient;
          }
          fail();
        })()
      }
    );
  }
  fail();
};
var textualLink = { getText: (v) => $Tuple(v._2._1, foldableVal.foldr(join3)(Inert)(v._1)) };
var viewableLinkUnit = {
  isLeaf: (v) => true,
  createElement: (v) => (link2) => (parent) => {
    const $0 = createChild(parent)(showElementType.show(Text3))(fromFoldable7([
      classes(["link"])
    ]));
    return () => {
      const rootElement = $0();
      const $1 = setText(link2._2._1)(rootElement)();
      return setDatum(link2)($1)();
    };
  },
  setSelection: (v) => (link2) => (redraw) => (rootElement) => {
    const $0 = eventListener((x2) => redraw((v2) => {
      if (v2._3.tag === "Constr" && v2._3._2.tag === "Cons" && v2._3._2._2.tag === "Cons" && v2._3._2._2._2.tag === "Nil" && v2._3._1 === "Link") {
        const $02 = selectionEventData$p(x2)._2(v2._3._2._1);
        return $Tuple(
          $Val(v2._1, v2._2, $BaseVal("Constr", v2._3._1, $List("Cons", $02._1, $List("Cons", v2._3._2._2._1, Nil)))),
          $02._2
        );
      }
      fail();
    }));
    return () => {
      const listener = $0();
      const $1 = styles(rootElement)(fromFoldable7(textAttrs(textualLink)(link2)))();
      return registerMouseListeners(listener)($1)();
    };
  }
};

// output-es/App.View/index.js
var pack3 = (x2) => (v) => v(viewableTextUnit)(x2);
var pack14 = (x2) => (v) => v(viewableBarChartUnit)(x2);
var pack23 = (x2) => (v) => v(viewableLineChartUnit)(x2);
var pack32 = (x2) => (v) => v(viewableScatterPlotUnit)(x2);
var pack4 = (x2) => (v) => v(viewableMultiViewUnit)(x2);
var pack5 = (x2) => (v) => v(viewableParagraphUnit)(x2);
var pack6 = (x2) => (v) => v(viewableLinkUnit)(x2);
var identity27 = (x2) => x2;
var pack7 = (x2) => (v) => v(viewableTableViewUnit)(x2);
var pack8 = (x2) => (v) => v(viewableMatrixViewUnit)(x2);
var pack9 = (x2) => (v) => v(viewableDictView$x215ViewUnit)(x2);
var pack10 = (x2) => (v) => v(viewableDocViewUnit)(x2);
var reflectValSelStates\u{1D54A}Text = {
  from: () => (v) => {
    if (v._3.tag === "Str") {
      return $Tuple(v._3._1, v._1);
    }
    return typeError(v._3)("Text expects string");
  }
};
var reflectValSelStates\u{1D54A}Link = {
  from: () => (v) => {
    if (v._3.tag === "Constr" && v._3._2.tag === "Cons" && v._3._2._2.tag === "Cons" && v._3._2._2._1._3.tag === "Str" && v._3._2._2._2.tag === "Nil" && v._3._1 === "Link") {
      return $Link(v._3._2._1, $Tuple(v._3._2._2._1._3._1, v._3._2._2._1._1));
    }
    return typeError(v._3)("Link expects string as second argument");
  }
};
var reflectDictSelStates\u{1D54A}$x215Val = {
  from: () => (r) => ({
    x: (() => {
      const $0 = $$get(showString)(mapDictString)("x")(r);
      return $Tuple(orientation.unpack($0._2._3), $0._2._1);
    })(),
    y: (() => {
      const $0 = $$get(showString)(mapDictString)("y")(r);
      return $Tuple(orientation.unpack($0._2._3), $0._2._1);
    })()
  })
};
var reflectDictSelStates\u{1D54A}$x215Val1 = {
  from: () => (r) => ({
    x: (() => {
      const $0 = $$get(showString)(mapDictString)("x")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })(),
    y: (() => {
      const $0 = $$get(showString)(mapDictString)("y")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })()
  })
};
var reflectDictSelStates\u{1D54A}$x215Val2 = { from: () => (r) => ({ x: get_intOrNumber("x")(r), y: get_intOrNumber("y")(r) }) };
var reflectDictSelStates\u{1D54A}$x215Val3 = {
  from: () => (r) => ({
    y: (() => {
      const $0 = $$get(showString)(mapDictString)("y")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })(),
    z: get_intOrNumber("z")(r)
  })
};
var reflectDictSelStates\u{1D54A}$x215Val4 = {
  from: () => (r) => ({
    width: (() => {
      const $0 = $$get(showString)(mapDictString)("width")(r);
      return $Tuple($0._2._3.tag === "Int" ? $0._2._3._1 : typeError($0._2._3)("Int"), $0._2._1);
    })(),
    height: (() => {
      const $0 = $$get(showString)(mapDictString)("height")(r);
      return $Tuple($0._2._3.tag === "Int" ? $0._2._3._1 : typeError($0._2._3)("Int"), $0._2._1);
    })()
  })
};
var reflectValArrayVal = {
  from: () => (v) => {
    if (v._3.tag === "Constr") {
      if (v._3._2.tag === "Nil") {
        if (v._3._1 === "Nil") {
          return [];
        }
        fail();
      }
      if (v._3._2.tag === "Cons" && v._3._2._2.tag === "Cons" && v._3._2._2._2.tag === "Nil" && v._3._1 === ":") {
        return [v._3._2._1, ...reflectValArrayVal.from()(v._3._2._2._1)];
      }
    }
    fail();
  }
};
var reflectDictSelStates\u{1D54A}$x215Val5 = {
  from: () => (r) => ({
    name: (() => {
      const $0 = $$get(showString)(mapDictString)("name")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })(),
    points: arrayMap(dict(reflectDictSelStates\u{1D54A}$x215Val2.from()))(reflectValArrayVal.from()($$get(showString)(mapDictString)("points")(r)._2))
  })
};
var reflectDictSelStates\u{1D54A}$x215Val6 = {
  from: () => (r) => ({
    caption: (() => {
      const $0 = $$get(showString)(mapDictString)("caption")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })(),
    points: arrayMap(dict(reflectDictSelStates\u{1D54A}$x215Val2.from()))(reflectValArrayVal.from()($$get(showString)(mapDictString)("points")(r)._2)),
    labels: dict(reflectDictSelStates\u{1D54A}$x215Val1.from())($$get(showString)(mapDictString)("labels")(r)._2)
  })
};
var reflectValNonEmptyArrayVa = {
  from: () => (v) => {
    if (v._3.tag === "Constr") {
      if (v._3._2.tag === "Nil") {
        if (v._3._1 === "Nil") {
          return throwException(error("expected non-empty list"))();
        }
        fail();
      }
      if (v._3._2.tag === "Cons" && v._3._2._2.tag === "Cons" && v._3._2._2._2.tag === "Nil" && v._3._1 === ":") {
        return [v._3._2._1, ...reflectValArrayVal.from()(v._3._2._2._1)];
      }
    }
    fail();
  }
};
var reflectDictSelStates\u{1D54A}$x215Val7 = {
  from: () => (r) => ({
    x: (() => {
      const $0 = $$get(showString)(mapDictString)("x")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })(),
    segments: arrayMap(dict(reflectDictSelStates\u{1D54A}$x215Val3.from()))(reflectValNonEmptyArrayVa.from()($$get(showString)(mapDictString)("segments")(r)._2))
  })
};
var reflectDictSelStates\u{1D54A}$x215Val8 = {
  from: () => (r) => ({
    caption: (() => {
      const $0 = $$get(showString)(mapDictString)("caption")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })(),
    stackedBars: arrayMap(dict(reflectDictSelStates\u{1D54A}$x215Val7.from()))(reflectValNonEmptyArrayVa.from()($$get(showString)(mapDictString)("stackedBars")(r)._2)),
    size: dict(reflectDictSelStates\u{1D54A}$x215Val4.from())($$get(showString)(mapDictString)("size")(r)._2),
    tickLabels: dict(reflectDictSelStates\u{1D54A}$x215Val.from())($$get(showString)(mapDictString)("tickLabels")(r)._2),
    legend: (() => {
      const $0 = $$get(showString)(mapDictString)("legend")(r);
      return $Tuple($$boolean.unpack($0._2._3), $0._2._1);
    })()
  })
};
var reflectValSelStates\u{1D54A}LineP = {
  from: () => (v) => {
    if (v._3.tag === "Constr" && v._3._2.tag === "Cons" && v._3._2._2.tag === "Nil" && v._3._1 === "LinePlot") {
      return dict(reflectDictSelStates\u{1D54A}$x215Val5.from())(v._3._2._1);
    }
    fail();
  }
};
var reflectDictSelStates\u{1D54A}$x215Val9 = {
  from: () => (r) => ({
    size: dict(reflectDictSelStates\u{1D54A}$x215Val4.from())($$get(showString)(mapDictString)("size")(r)._2),
    tickLabels: dict(reflectDictSelStates\u{1D54A}$x215Val.from())($$get(showString)(mapDictString)("tickLabels")(r)._2),
    caption: (() => {
      const $0 = $$get(showString)(mapDictString)("caption")(r);
      return $Tuple($0._2._3.tag === "Str" ? $0._2._3._1 : typeError($0._2._3)("Str"), $0._2._1);
    })(),
    plots: arrayMap(reflectValSelStates\u{1D54A}LineP.from())(reflectValArrayVal.from()($$get(showString)(mapDictString)("plots")(r)._2))
  })
};
var view = () => (options) => (title2) => (v) => {
  const $0 = (c) => {
    const records = arrayMap(dict(identity27))(reflectValArrayVal.from()(v));
    const colNames = headers(records);
    return pack7({
      title: title2,
      rowFilter: (() => {
        if (options.rowFilter.tag === "Nothing") {
          return Interactive;
        }
        if (options.rowFilter.tag === "Just") {
          return options.rowFilter._1;
        }
        fail();
      })(),
      colNames,
      rows: arrayMap(arrayMap(snd))(arrayDictToArray2(colNames)(records))
    });
  };
  if (v._3.tag === "Int") {
    return pack3($Tuple(showIntImpl(v._3._1), v._1));
  }
  if (v._3.tag === "Float") {
    return pack3($Tuple(showNumberImpl(v._3._1), v._1));
  }
  if (v._3.tag === "Str") {
    return pack3($Tuple(v._3._1, v._1));
  }
  if (v._3.tag === "Constr") {
    if (v._3._2.tag === "Cons") {
      if (v._3._2._2.tag === "Nil") {
        if (v._3._1 === "Text") {
          return pack3(reflectValSelStates\u{1D54A}Text.from()(v._3._2._1));
        }
        if (v._3._1 === "BarChart") {
          return pack14(dict(reflectDictSelStates\u{1D54A}$x215Val8.from())(v._3._2._1));
        }
        if (v._3._1 === "LineChart") {
          return pack23(dict(reflectDictSelStates\u{1D54A}$x215Val9.from())(v._3._2._1));
        }
        if (v._3._1 === "ScatterPlot") {
          return pack32(dict(reflectDictSelStates\u{1D54A}$x215Val6.from())(v._3._2._1));
        }
        if (v._3._1 === "MultiView") {
          return pack4($MultiView(arrayMap(view()(options)(""))(reflectValArrayVal.from()(v._3._2._1))));
        }
        if (v._3._1 === "Paragraph") {
          return pack5($Paragraph(arrayMap(view()(options)(""))(reflectValArrayVal.from()(v._3._2._1))));
        }
        if (v._3._1 === "Nil" || v._3._1 === ":") {
          return $0(v._3._1);
        }
        return typeError(v._3)("Viewable");
      }
      if (v._3._2._2.tag === "Cons" && v._3._2._2._2.tag === "Nil" && v._3._1 === "Link") {
        return pack6(reflectValSelStates\u{1D54A}Link.from()(v));
      }
    }
    if (v._3._1 === "Nil" || v._3._1 === ":") {
      return $0(v._3._1);
    }
    return typeError(v._3)("Viewable");
  }
  if (v._3.tag === "Matrix") {
    return pack8({ title: title2, matrix: matrixRep(v._3._1) });
  }
  if (v._3.tag === "Dictionary") {
    return pack9(_mapWithKey(v._3._1, (k) => (v2) => $Tuple(pack3($Tuple(k, v2._1)), view()(options)(k)(v2._2))));
  }
  return typeError(v._3)("Viewable");
};
var view$p = () => (options) => (title2) => (v) => pack10({
  doc: v._2.tag === "Just" ? $Maybe(
    "Just",
    (() => {
      if (v._2._1._3.tag === "Constr" && v._2._1._3._2.tag === "Cons" && v._2._1._3._2._2.tag === "Nil" && v._2._1._3._1 === "Paragraph") {
        return $Paragraph(arrayMap(view()(options)(""))(reflectValArrayVal.from()(v._2._1._3._2._1)));
      }
      fail();
    })()
  ) : Nothing,
  view: view()(options)(title2)(v)
});

// output-es/Control.Monad.State.Trans/index.js
var bindStateT = (dictMonad) => ({ bind: (v) => (f) => (s) => dictMonad.Bind1().bind(v(s))((v1) => f(v1._1)(v1._2)), Apply0: () => applyStateT(dictMonad) });
var applyStateT = (dictMonad) => {
  const $0 = dictMonad.Bind1().Apply0().Functor0();
  const functorStateT1 = { map: (f) => (v) => (s) => $0.map((v1) => $Tuple(f(v1._1), v1._2))(v(s)) };
  return {
    apply: (() => {
      const $1 = bindStateT(dictMonad);
      return (f) => (a) => $1.bind(f)((f$p) => $1.bind(a)((a$p) => applicativeStateT(dictMonad).pure(f$p(a$p))));
    })(),
    Functor0: () => functorStateT1
  };
};
var applicativeStateT = (dictMonad) => ({ pure: (a) => (s) => dictMonad.Applicative0().pure($Tuple(a, s)), Apply0: () => applyStateT(dictMonad) });
var monadAskStateT = (dictMonadAsk) => {
  const Monad0 = dictMonadAsk.Monad0();
  const monadStateT1 = { Applicative0: () => applicativeStateT(Monad0), Bind1: () => bindStateT(Monad0) };
  return {
    ask: (() => {
      const $0 = dictMonadAsk.ask;
      return (s) => Monad0.Bind1().bind($0)((x2) => Monad0.Applicative0().pure($Tuple(x2, s)));
    })(),
    Monad0: () => monadStateT1
  };
};
var monadReaderStateT = (dictMonadReader) => {
  const monadAskStateT1 = monadAskStateT(dictMonadReader.MonadAsk0());
  return {
    local: (x2) => {
      const $0 = dictMonadReader.local(x2);
      return (v) => (x$1) => $0(v(x$1));
    },
    MonadAsk0: () => monadAskStateT1
  };
};
var monadEffectState = (dictMonadEffect) => {
  const Monad0 = dictMonadEffect.Monad0();
  const monadStateT1 = { Applicative0: () => applicativeStateT(Monad0), Bind1: () => bindStateT(Monad0) };
  return {
    liftEffect: (x2) => {
      const $0 = dictMonadEffect.liftEffect(x2);
      return (s) => Monad0.Bind1().bind($0)((x$1) => Monad0.Applicative0().pure($Tuple(x$1, s)));
    },
    Monad0: () => monadStateT1
  };
};
var monadRecStateT = (dictMonadRec) => {
  const Monad0 = dictMonadRec.Monad0();
  const monadStateT1 = { Applicative0: () => applicativeStateT(Monad0), Bind1: () => bindStateT(Monad0) };
  return {
    tailRecM: (f) => (a) => (s) => dictMonadRec.tailRecM((v) => Monad0.Bind1().bind(f(v._1)(v._2))((v2) => Monad0.Applicative0().pure((() => {
      if (v2._1.tag === "Loop") {
        return $Step("Loop", $Tuple(v2._1._1, v2._2));
      }
      if (v2._1.tag === "Done") {
        return $Step("Done", $Tuple(v2._1._1, v2._2));
      }
      fail();
    })())))($Tuple(a, s)),
    Monad0: () => monadStateT1
  };
};
var monadStateStateT = (dictMonad) => {
  const monadStateT1 = { Applicative0: () => applicativeStateT(dictMonad), Bind1: () => bindStateT(dictMonad) };
  return { state: (f) => (x2) => dictMonad.Applicative0().pure(f(x2)), Monad0: () => monadStateT1 };
};
var monadThrowStateT = (dictMonadThrow) => {
  const Monad0 = dictMonadThrow.Monad0();
  const monadStateT1 = { Applicative0: () => applicativeStateT(Monad0), Bind1: () => bindStateT(Monad0) };
  return {
    throwError: (e) => {
      const $0 = dictMonadThrow.throwError(e);
      return (s) => Monad0.Bind1().bind($0)((x2) => Monad0.Applicative0().pure($Tuple(x2, s)));
    },
    Monad0: () => monadStateT1
  };
};
var monadErrorStateT = (dictMonadError) => {
  const monadThrowStateT1 = monadThrowStateT(dictMonadError.MonadThrow0());
  return { catchError: (v) => (h) => (s) => dictMonadError.catchError(v(s))((e) => h(e)(s)), MonadThrow0: () => monadThrowStateT1 };
};

// output-es/Control.Monad.Reader.Trans/index.js
var withReaderT = (f) => (v) => (x2) => v(f(x2));
var bindReaderT = (dictBind) => {
  const $0 = dictBind.Apply0();
  const $1 = $0.Functor0();
  const applyReaderT1 = /* @__PURE__ */ (() => {
    const functorReaderT1 = {
      map: (x2) => {
        const $2 = $1.map(x2);
        return (v) => (x$1) => $2(v(x$1));
      }
    };
    return { apply: (v) => (v1) => (r) => $0.apply(v(r))(v1(r)), Functor0: () => functorReaderT1 };
  })();
  return { bind: (v) => (k) => (r) => dictBind.bind(v(r))((a) => k(a)(r)), Apply0: () => applyReaderT1 };
};
var monadReaderT = (dictMonad) => {
  const $0 = dictMonad.Applicative0();
  const $1 = $0.Apply0();
  const applicativeReaderT1 = (() => {
    const $2 = $1.Functor0();
    const functorReaderT1 = {
      map: (x2) => {
        const $3 = $2.map(x2);
        return (v) => (x$1) => $3(v(x$1));
      }
    };
    const applyReaderT1 = { apply: (v) => (v1) => (r) => $1.apply(v(r))(v1(r)), Functor0: () => functorReaderT1 };
    return {
      pure: (x2) => {
        const $3 = $0.pure(x2);
        return (v) => $3;
      },
      Apply0: () => applyReaderT1
    };
  })();
  const bindReaderT1 = bindReaderT(dictMonad.Bind1());
  return { Applicative0: () => applicativeReaderT1, Bind1: () => bindReaderT1 };
};
var monadReaderReaderT = (dictMonad) => {
  const monadReaderT1 = monadReaderT(dictMonad);
  const monadAskReaderT1 = { ask: dictMonad.Applicative0().pure, Monad0: () => monadReaderT1 };
  return { local: withReaderT, MonadAsk0: () => monadAskReaderT1 };
};
var monadEffectReader = (dictMonadEffect) => {
  const monadReaderT1 = monadReaderT(dictMonadEffect.Monad0());
  return {
    liftEffect: (x2) => {
      const $0 = dictMonadEffect.liftEffect(x2);
      return (v) => $0;
    },
    Monad0: () => monadReaderT1
  };
};
var monadThrowReaderT = (dictMonadThrow) => {
  const monadReaderT1 = monadReaderT(dictMonadThrow.Monad0());
  return {
    throwError: (x2) => {
      const $0 = dictMonadThrow.throwError(x2);
      return (v) => $0;
    },
    Monad0: () => monadReaderT1
  };
};
var monadErrorReaderT = (dictMonadError) => {
  const monadThrowReaderT1 = monadThrowReaderT(dictMonadError.MonadThrow0());
  return { catchError: (v) => (h) => (r) => dictMonadError.catchError(v(r))((e) => h(e)(r)), MonadThrow0: () => monadThrowReaderT1 };
};

// output-es/Effect.Aff.Class/index.js
var monadAffAff = { liftAff: (x2) => x2, MonadEffect0: () => monadEffectAff };
var monadAffReader = (dictMonadAff) => {
  const monadEffectReader2 = monadEffectReader(dictMonadAff.MonadEffect0());
  return {
    liftAff: (x2) => {
      const $0 = dictMonadAff.liftAff(x2);
      return (v) => $0;
    },
    MonadEffect0: () => monadEffectReader2
  };
};
var monadAffState = (dictMonadAff) => {
  const MonadEffect0 = dictMonadAff.MonadEffect0();
  const monadEffectState2 = monadEffectState(MonadEffect0);
  return {
    liftAff: (() => {
      const $0 = MonadEffect0.Monad0();
      return (x2) => {
        const $1 = dictMonadAff.liftAff(x2);
        return (s) => $0.Bind1().bind($1)((x$1) => $0.Applicative0().pure($Tuple(x$1, s)));
      };
    })(),
    MonadEffect0: () => monadEffectState2
  };
};

// output-es/Data.CatQueue/index.js
var $CatQueue = (_1, _2) => ({ tag: "CatQueue", _1, _2 });
var uncons2 = (uncons$a0$copy) => {
  let uncons$a0 = uncons$a0$copy, uncons$c = true, uncons$r;
  while (uncons$c) {
    const v = uncons$a0;
    if (v._1.tag === "Nil") {
      if (v._2.tag === "Nil") {
        uncons$c = false;
        uncons$r = Nothing;
        continue;
      }
      uncons$a0 = $CatQueue(
        (() => {
          const go = (go$a0$copy) => (go$a1$copy) => {
            let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
            while (go$c) {
              const v$1 = go$a0, v1 = go$a1;
              if (v1.tag === "Nil") {
                go$c = false;
                go$r = v$1;
                continue;
              }
              if (v1.tag === "Cons") {
                go$a0 = $List("Cons", v1._1, v$1);
                go$a1 = v1._2;
                continue;
              }
              fail();
            }
            return go$r;
          };
          return go(Nil)(v._2);
        })(),
        Nil
      );
      continue;
    }
    if (v._1.tag === "Cons") {
      uncons$c = false;
      uncons$r = $Maybe("Just", $Tuple(v._1._1, $CatQueue(v._1._2, v._2)));
      continue;
    }
    fail();
  }
  return uncons$r;
};

// output-es/Data.CatList/index.js
var $CatList = (tag, _1, _2) => ({ tag, _1, _2 });
var CatNil = /* @__PURE__ */ $CatList("CatNil");
var link = (v) => (v1) => {
  if (v.tag === "CatNil") {
    return v1;
  }
  if (v1.tag === "CatNil") {
    return v;
  }
  if (v.tag === "CatCons") {
    return $CatList("CatCons", v._1, $CatQueue(v._2._1, $List("Cons", v1, v._2._2)));
  }
  fail();
};
var foldr = (k) => (b) => (q) => {
  const foldl = (foldl$a0$copy) => (foldl$a1$copy) => (foldl$a2$copy) => {
    let foldl$a0 = foldl$a0$copy, foldl$a1 = foldl$a1$copy, foldl$a2 = foldl$a2$copy, foldl$c = true, foldl$r;
    while (foldl$c) {
      const v = foldl$a0, v1 = foldl$a1, v2 = foldl$a2;
      if (v2.tag === "Nil") {
        foldl$c = false;
        foldl$r = v1;
        continue;
      }
      if (v2.tag === "Cons") {
        foldl$a0 = v;
        foldl$a1 = v(v1)(v2._1);
        foldl$a2 = v2._2;
        continue;
      }
      fail();
    }
    return foldl$r;
  };
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const xs = go$a0, ys = go$a1;
      const v = uncons2(xs);
      if (v.tag === "Nothing") {
        go$c = false;
        go$r = foldl((x2) => (i) => i(x2))(b)(ys);
        continue;
      }
      if (v.tag === "Just") {
        go$a0 = v._1._2;
        go$a1 = $List("Cons", k(v._1._1), ys);
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go(q)(Nil);
};
var uncons3 = (v) => {
  if (v.tag === "CatNil") {
    return Nothing;
  }
  if (v.tag === "CatCons") {
    return $Maybe("Just", $Tuple(v._1, v._2._1.tag === "Nil" && v._2._2.tag === "Nil" ? CatNil : foldr(link)(CatNil)(v._2)));
  }
  fail();
};
var singleton5 = (a) => $CatList("CatCons", a, $CatQueue(Nil, Nil));
var semigroupCatList = { append: link };
var monoidCatList = { mempty: CatNil, Semigroup0: () => semigroupCatList };

// output-es/Data.Graph/index.js
var $SortStep = (tag, _1) => ({ tag, _1 });
var fromFoldable9 = /* @__PURE__ */ (() => {
  const foldMap1 = foldableList.foldMap(monoidCatList);
  return (f) => foldMap1(singleton5)(f);
})();
var fromFoldable14 = /* @__PURE__ */ (() => {
  const foldMap1 = foldableArray.foldMap(monoidCatList);
  return (f) => foldMap1(singleton5)(f);
})();
var Visit = (value0) => $SortStep("Visit", value0);
var topologicalSort = (dictOrd) => (v) => {
  const visit = (visit$a0$copy) => (visit$a1$copy) => {
    let visit$a0 = visit$a0$copy, visit$a1 = visit$a1$copy, visit$c = true, visit$r;
    while (visit$c) {
      const state = visit$a0, stack = visit$a1;
      const v1 = uncons3(stack);
      if (v1.tag === "Nothing") {
        visit$c = false;
        visit$r = state;
        continue;
      }
      if (v1.tag === "Just") {
        if (v1._1._1.tag === "Emit") {
          visit$a0 = { result: $List("Cons", v1._1._1._1, state.result), unvisited: state.unvisited };
          visit$a1 = v1._1._2;
          continue;
        }
        if (v1._1._1.tag === "Visit") {
          if ((() => {
            const $0 = v1._1._1._1;
            const go2 = (go$a0$copy) => {
              let go$a0 = go$a0$copy, go$c = true, go$r;
              while (go$c) {
                const v$1 = go$a0;
                if (v$1.tag === "Leaf") {
                  go$c = false;
                  go$r = false;
                  continue;
                }
                if (v$1.tag === "Node") {
                  const v1$1 = dictOrd.compare($0)(v$1._3);
                  if (v1$1 === "LT") {
                    go$a0 = v$1._5;
                    continue;
                  }
                  if (v1$1 === "GT") {
                    go$a0 = v$1._6;
                    continue;
                  }
                  if (v1$1 === "EQ") {
                    go$c = false;
                    go$r = true;
                    continue;
                  }
                }
                fail();
              }
              return go$r;
            };
            return go2(state.unvisited);
          })()) {
            const $0 = v1._1._1._1;
            visit$a0 = { result: state.result, unvisited: $$delete2(dictOrd)($0)(state.unvisited) };
            visit$a1 = (() => {
              const $1 = fromFoldable9(listMap(Visit)((() => {
                const go2 = (go$a0$copy) => {
                  let go$a0 = go$a0$copy, go$c = true, go$r;
                  while (go$c) {
                    const v$1 = go$a0;
                    if (v$1.tag === "Leaf") {
                      go$c = false;
                      go$r = Nothing;
                      continue;
                    }
                    if (v$1.tag === "Node") {
                      const v1$1 = dictOrd.compare($0)(v$1._3);
                      if (v1$1 === "LT") {
                        go$a0 = v$1._5;
                        continue;
                      }
                      if (v1$1 === "GT") {
                        go$a0 = v$1._6;
                        continue;
                      }
                      if (v1$1 === "EQ") {
                        go$c = false;
                        go$r = $Maybe("Just", v$1._4);
                        continue;
                      }
                    }
                    fail();
                  }
                  return go$r;
                };
                const $12 = go2(v);
                if ($12.tag === "Nothing") {
                  return Nil;
                }
                if ($12.tag === "Just") {
                  return $12._1._2;
                }
                fail();
              })()));
              const $2 = v1._1._2.tag === "CatNil" ? $CatList("CatCons", $SortStep("Emit", $0), $CatQueue(Nil, Nil)) : $CatList(
                "CatCons",
                $SortStep("Emit", $0),
                $CatQueue(Nil, $List("Cons", v1._1._2, Nil))
              );
              if ($1.tag === "CatNil") {
                return $2;
              }
              if ($2.tag === "CatNil") {
                return $1;
              }
              if ($1.tag === "CatCons") {
                return $CatList("CatCons", $1._1, $CatQueue($1._2._1, $List("Cons", $2, $1._2._2)));
              }
              fail();
            })();
            continue;
          }
          visit$a0 = state;
          visit$a1 = v1._1._2;
          continue;
        }
      }
      fail();
    }
    return visit$r;
  };
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v1 = go$a0;
      const v2 = findMin(v1.unvisited);
      if (v2.tag === "Just") {
        go$a0 = visit(v1)(fromFoldable14([$SortStep("Visit", v2._1.key)]));
        continue;
      }
      if (v2.tag === "Nothing") {
        go$c = false;
        go$r = v1.result;
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go({ unvisited: v, result: Nil });
};

// output-es/Foreign.Object.ST/foreign.js
function peekImpl2(just) {
  return function(nothing) {
    return function(k) {
      return function(m) {
        return function() {
          return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
        };
      };
    };
  };
}

// output-es/Foreign.Object.ST/index.js
var peek = /* @__PURE__ */ peekImpl2(Just)(Nothing);

// output-es/Graph.GraphImpl/index.js
var $GraphImpl = (_1) => ({ tag: "GraphImpl", _1 });
var eqSet = { eq: (v) => (v1) => eqMap(eqVertex)(eqUnit).eq(v)(v1) };
var eq = /* @__PURE__ */ (() => eqObject(eqSet).eq)();
var fromFoldable15 = /* @__PURE__ */ foldlArray((m) => (a) => insert3(ordVertex)(a)()(m))(Leaf);
var mempty2 = /* @__PURE__ */ (() => monoidSet(ordVertex).mempty)();
var toUnfoldable7 = (x2) => {
  const go = (m$p, z$p) => {
    if (m$p.tag === "Leaf") {
      return z$p;
    }
    if (m$p.tag === "Node") {
      return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
    }
    fail();
  };
  const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
    let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
    while (go$1$c) {
      const source2 = go$1$a0, memo = go$1$a1;
      if (source2.tag === "Nil") {
        const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => {
          let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$c = true, go$2$r;
          while (go$2$c) {
            const b = go$2$a0, v = go$2$a1;
            if (v.tag === "Nil") {
              go$2$c = false;
              go$2$r = b;
              continue;
            }
            if (v.tag === "Cons") {
              go$2$a0 = $List("Cons", v._1, b);
              go$2$a1 = v._2;
              continue;
            }
            fail();
          }
          return go$2$r;
        };
        go$1$c = false;
        go$1$r = go$2(Nil)(memo);
        continue;
      }
      if (source2.tag === "Cons") {
        go$1$a0 = source2._2;
        go$1$a1 = $List("Cons", source2._1, memo);
        continue;
      }
      fail();
    }
    return go$1$r;
  };
  return go$1(go(x2, Nil))(Nil);
};
var fromFoldable24 = /* @__PURE__ */ (() => foldableSet.foldr(Cons)(Nil))();
var toUnfoldable13 = /* @__PURE__ */ toAscUnfoldable(unfoldableArray);
var fromFoldable33 = /* @__PURE__ */ fromFoldable2(ordVertex)(foldableArray);
var verticesGraphImpl = {
  vertices: (v) => fold((z) => (v$1) => (a) => insert3(ordDVertex$p)(a)()(z))(Leaf)(_mapWithKey(
    v._1.out,
    (k) => (v1) => $Tuple(k, v1._2)
  ))
};
var eqGraphImpl = { eq: (v) => (v1) => eq(_fmapObject(v._1.out, fst))(_fmapObject(v1._1.out, fst)) };
var sinks$p = (m) => fromFoldable15(arrayMap((x2) => x2._1)(filterImpl((x2) => x2._2._1.tag === "Leaf", toArrayWithKey(Tuple)(m))));
var init4 = (\u03B1s) => () => {
  const obj = {};
  return monadRecST.tailRecM((v) => {
    if (v._1.tag === "Nil") {
      return () => $Step("Done", v._2);
    }
    if (v._1.tag === "Cons") {
      const $0 = v._1._1._1;
      const $1 = v._1._2;
      const $2 = v._2;
      return () => {
        $2[$0] = $Tuple(mempty2, v._1._1._2);
        return $Step("Loop", $Tuple($1, $2));
      };
    }
    fail();
  })($Tuple(\u03B1s, obj))();
};
var assertPresent = (v) => (v1) => {
  if (v1.tag === "Nil") {
    return () => $Step("Done", void 0);
  }
  if (v1.tag === "Cons") {
    const $0 = v1._1;
    const $1 = v1._2;
    const $2 = peek($0)(v);
    return () => {
      const $3 = $2();
      const present = (() => {
        if ($3.tag === "Nothing") {
          return false;
        }
        if ($3.tag === "Just") {
          return true;
        }
        fail();
      })();
      return assertWhen(false)($0 + " is an existing vertex")((v2) => present)(() => $Step("Loop", $1))();
    };
  }
  fail();
};
var outMap = (\u03B1s) => (es) => {
  const $0 = init4(\u03B1s);
  return () => {
    const out = $0();
    return monadRecST.tailRecM((v) => {
      if (v._1.tag === "Nil") {
        return () => $Step("Done", v._2);
      }
      if (v._1.tag === "Cons") {
        const $1 = v._2;
        const $2 = v._1._2;
        const $3 = v._1._1._1._2;
        const $4 = v._1._1._1._1;
        const $5 = v._1._1._2;
        const $6 = peek($4)($1);
        return () => {
          const $7 = $6();
          if ((() => {
            if ($7.tag === "Nothing") {
              return true;
            }
            if ($7.tag === "Just") {
              return eqMap(eqVertex)(eqUnit).eq($7._1._1)(mempty2);
            }
            fail();
          })()) {
            monadRecST.tailRecM(assertPresent($1))(toUnfoldable7($5))();
            $1[$4] = $Tuple($5, $3);
            return $Step("Loop", $Tuple($2, $1));
          }
          return throwException(error("Duplicate edge list entry for " + showStringImpl($4)))()();
        };
      }
      fail();
    })($Tuple(es, out))();
  };
};
var addIfMissing = (acc) => (v) => {
  const $0 = v._2;
  const $1 = v._1;
  const $2 = peek($1)(acc);
  return () => {
    const v1 = $2();
    if (v1.tag === "Nothing") {
      acc[$1] = $Tuple(mempty2, $0);
      return acc;
    }
    if (v1.tag === "Just") {
      return acc;
    }
    fail();
  };
};
var inMap = (\u03B1s) => (es) => {
  const $0 = init4(\u03B1s);
  return () => {
    const in_ = $0();
    return monadRecST.tailRecM((v) => {
      if (v._1.tag === "Nil") {
        return () => $Step("Done", v._2);
      }
      if (v._1.tag === "Cons") {
        const $1 = v._1._2;
        const $2 = v._1._1._1._2;
        const $3 = v._1._1._1._1;
        const $4 = monadRecST.tailRecM((v2) => {
          if (v2._1.tag === "Nil") {
            return () => $Step("Done", v2._2);
          }
          if (v2._1.tag === "Cons") {
            const $42 = v2._2;
            const $5 = v2._1._1;
            const $6 = v2._1._2;
            const $7 = peek($5)($42);
            return () => {
              const v1 = $7();
              const acc$p = (() => {
                if (v1.tag === "Nothing") {
                  $42[$5] = $Tuple($$$Map("Node", 1, 1, $3, void 0, Leaf, Leaf), $2);
                  return $42;
                }
                if (v1.tag === "Just") {
                  $42[$5] = $Tuple(insert3(ordVertex)($3)()(v1._1._1), $2);
                  return $42;
                }
                fail();
              })();
              return $Step("Loop", $Tuple($6, acc$p));
            };
          }
          fail();
        })($Tuple(toUnfoldable7(v._1._1._2), v._2));
        return () => {
          const $5 = $4();
          const acc$p = addIfMissing($5)($Tuple($3, $2))();
          return $Step("Loop", $Tuple($1, acc$p));
        };
      }
      fail();
    })($Tuple(es, in_))();
  };
};
var graphGraphImpl = {
  outN: (v) => (\u03B1) => definitely("in graph")(_lookup(Nothing, Just, \u03B1, v._1.out))._1,
  vertexData: (v) => (\u03B1) => definitely("in graph")(_lookup(Nothing, Just, \u03B1, v._1.out))._2,
  inN: (g) => graphGraphImpl.outN(graphGraphImpl.op(g)),
  elem: (\u03B1) => (v) => {
    const $0 = _lookup(Nothing, Just, \u03B1, v._1.out);
    if ($0.tag === "Nothing") {
      return false;
    }
    if ($0.tag === "Just") {
      return true;
    }
    fail();
  },
  size: (v) => size(v._1.out),
  sinks: (v) => v._1.sinks,
  sources: (v) => v._1.sources,
  op: (v) => $GraphImpl({ out: v._1.in_, in_: v._1.out, sinks: v._1.sources, sources: v._1.sinks, vertices: v._1.vertices }),
  empty: /* @__PURE__ */ $GraphImpl({ out: empty2, in_: empty2, sinks: mempty2, sources: mempty2, vertices: mempty2 }),
  fromEdgeList: (\u03B1s) => (es) => {
    const \u03B1s$p = fromFoldable24(\u03B1s);
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const v = go$a0, v1 = go$a1;
        if (v1.tag === "Nil") {
          go$c = false;
          go$r = v;
          continue;
        }
        if (v1.tag === "Cons") {
          go$a0 = $List("Cons", v1._1, v);
          go$a1 = v1._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    const es$p = go(Nil)(es);
    const in_ = inMap(\u03B1s$p)(es$p)();
    const out = outMap(\u03B1s$p)(es$p)();
    return $GraphImpl({ out, in_, sinks: sinks$p(out), sources: sinks$p(in_), vertices: map2(ordVertex)(Vertex)(mapObjectString.keys(out)) });
  },
  topologicalSort: (v) => {
    const go = (go$a0$copy) => (go$a1$copy) => {
      let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
      while (go$c) {
        const v$1 = go$a0, v1 = go$a1;
        if (v1.tag === "Nil") {
          go$c = false;
          go$r = v$1;
          continue;
        }
        if (v1.tag === "Cons") {
          go$a0 = $List("Cons", v1._1, v$1);
          go$a1 = v1._2;
          continue;
        }
        fail();
      }
      return go$r;
    };
    return go(Nil)(topologicalSort(ordVertex)(fromFoldable33(arrayMap((x2) => $Tuple(
      x2._1,
      $Tuple(void 0, x2._2)
    ))(toUnfoldable13(_fmapObject(_fmapObject(v._1.out, fst), toUnfoldable7))))));
  },
  Eq0: () => eqGraphImpl,
  Vertices1: () => verticesGraphImpl
};

// output-es/Graph.WithGraph/index.js
var fromFoldable10 = /* @__PURE__ */ (() => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const b = go$a0, v = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = b;
        continue;
      }
      if (v.tag === "Cons") {
        go$a0 = insert3(ordVertex)(v._1)()(b);
        go$a1 = v._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  return go(Leaf);
})();
var mempty3 = /* @__PURE__ */ (() => monoidSet(ordDVertex$p).mempty)();
var monadWithGraphWithGraphT = (dictMonad) => {
  const $0 = dictMonad.Bind1().Apply0().Functor0();
  const $1 = monadStateStateT(dictMonad);
  const monadStateT = { Applicative0: () => applicativeStateT(dictMonad), Bind1: () => bindStateT(dictMonad) };
  return {
    extend: (\u03B1) => (\u03B1s) => {
      const $2 = Cons($Tuple(\u03B1, \u03B1s));
      const $3 = $1.state((s) => $Tuple(void 0, $2(s)));
      return (s) => $0.map((v1) => $Tuple(void 0, v1._2))($3(s));
    },
    Monad0: () => monadStateT
  };
};
var monadAllocAllocT = (dictMonad) => {
  const monadStateT = { Applicative0: () => applicativeStateT(dictMonad), Bind1: () => bindStateT(dictMonad) };
  return {
    fresh: bindStateT(dictMonad).bind(monadStateStateT(dictMonad).state((s) => {
      const s$p = 1 + s | 0;
      return $Tuple(s$p, s$p);
    }))((n) => applicativeStateT(dictMonad).pure(showIntImpl(n))),
    Monad0: () => monadStateT
  };
};
var runAllocT = (dictMonad) => (m) => (n) => dictMonad.Bind1().bind(m(n))((v) => dictMonad.Applicative0().pure($Tuple(
  v._2,
  $Tuple(
    fromFoldable10(listMap((x2) => showIntImpl(x2))((() => {
      const $0 = n + 1 | 0;
      if (v._2 < $0) {
        return Nil;
      }
      if ($0 === v._2) {
        return $List("Cons", $0, Nil);
      }
      const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => (go$a3$copy) => {
        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$a3 = go$a3$copy, go$c = true, go$r;
        while (go$c) {
          const s = go$a0, e = go$a1, step = go$a2, rest = go$a3;
          if (s === e) {
            go$c = false;
            go$r = $List("Cons", s, rest);
            continue;
          }
          go$a0 = s + step | 0;
          go$a1 = e;
          go$a2 = step;
          go$a3 = $List("Cons", s, rest);
        }
        return go$r;
      };
      return go(v._2)($0)($0 > v._2 ? 1 : -1)(Nil);
    })())),
    v._1
  )
)));
var monadAllocWithGraphAllocT = (dictMonad) => {
  const monadStateT = { Applicative0: () => applicativeStateT(dictMonad), Bind1: () => bindStateT(dictMonad) };
  const monadStateT1 = { Applicative0: () => applicativeStateT(monadStateT), Bind1: () => bindStateT(monadStateT) };
  return {
    fresh: (() => {
      const $0 = monadAllocAllocT(dictMonad).fresh;
      return (s) => monadStateT.Bind1().bind($0)((x2) => monadStateT.Applicative0().pure($Tuple(x2, s)));
    })(),
    Monad0: () => monadStateT1
  };
};
var freezeGraph = (dictMonad) => {
  const $0 = dictMonad.Bind1().Apply0().Functor0();
  return (dictGraph) => (m) => (\u03B1s) => {
    const $1 = dictGraph.fromEdgeList(\u03B1s);
    return $0.map((v) => $Tuple($1(spyWhen(false)("runWithGraphT edge list")(showEdgeList)(v._1)), v._2))($0.map(swap)(m(Nil)));
  };
};
var runWithGraphT = (dictMonad) => {
  const freezeGraph1 = freezeGraph(dictMonad);
  return (dictGraph) => {
    const freezeGraph2 = freezeGraph1(dictGraph);
    return (m) => (\u03B1s) => dictMonad.Bind1().bind(freezeGraph2(m)(\u03B1s))((v) => {
      const $0 = v._1;
      return assertWhen(false)("edgeListGC")((v1) => dictGraph.Eq0().eq($0)(dictGraph.fromEdgeList(mempty3)(toEdgeList(dictGraph)($0))))(dictMonad.Applicative0().pure($Tuple(
        $0,
        v._2
      )));
    });
  };
};
var runWithGraphT_spy = (dictMonad) => {
  const runWithGraphT2 = runWithGraphT(dictMonad);
  const spyFunWhenM2 = spyFunWhenM(dictMonad.Bind1().Apply0().Functor0());
  return (dictGraph) => {
    const $0 = runWithGraphT2(dictGraph);
    const $1 = spyFunWhenM2(false)("runWithGraphT")((() => {
      const $12 = map2(ordVertex)((x2) => x2._1);
      return (x2) => showVertices($12(x2));
    })())((x2) => showEdgeList(toEdgeList(dictGraph)(x2._1)));
    return (x2) => $1($0(x2));
  };
};
var runWithGraphT_spy1 = /* @__PURE__ */ runWithGraphT_spy(monadIdentity);
var monadWithGraphAllocWithGr = (dictMonadError) => {
  const Monad0 = dictMonadError.MonadThrow0().Monad0();
  const monadStateT = { Applicative0: () => applicativeStateT(Monad0), Bind1: () => bindStateT(Monad0) };
  const bindStateT2 = bindStateT(monadStateT);
  const monadAllocWithGraphAllocT1 = monadAllocWithGraphAllocT(Monad0);
  const fresh1 = monadAllocWithGraphAllocT1.fresh;
  const monadWithGraphWithGraphT1 = monadWithGraphWithGraphT(monadStateT);
  const monadErrorStateT2 = monadErrorStateT(monadErrorStateT(dictMonadError));
  return {
    new: (dictTypeName) => (constr) => (\u03B1s) => (vd) => bindStateT2.bind(fresh1)((\u03B1) => {
      const v = constr(\u03B1)(vd);
      return bindStateT2.bind(monadWithGraphWithGraphT1.extend($Tuple(\u03B1, (k) => k(dictTypeName)(v)))(\u03B1s))(() => applicativeStateT(monadStateT).pure(v));
    }),
    MonadAlloc0: () => monadAllocWithGraphAllocT1,
    MonadError1: () => monadErrorStateT2,
    MonadWithGraph2: () => monadWithGraphWithGraphT1
  };
};

// output-es/Graph.Slice/index.js
var pure = /* @__PURE__ */ (() => applicativeStateT(monadIdentity).pure)();
var lookup3 = (k) => {
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "Leaf") {
        go$c = false;
        go$r = Nothing;
        continue;
      }
      if (v.tag === "Node") {
        const v1 = ordString.compare(k)(v._3);
        if (v1 === "LT") {
          go$a0 = v._5;
          continue;
        }
        if (v1 === "GT") {
          go$a0 = v._6;
          continue;
        }
        if (v1 === "EQ") {
          go$c = false;
          go$r = $Maybe("Just", v._4);
          continue;
        }
      }
      fail();
    }
    return go$r;
  };
  return go;
};
var extend2 = /* @__PURE__ */ (() => monadWithGraphWithGraphT(monadIdentity).extend)();
var tailRecM = /* @__PURE__ */ (() => monadRecStateT(monadRecIdentity).tailRecM)();
var member3 = /* @__PURE__ */ (() => setSet(ordVertex).member)();
var fromFoldable11 = /* @__PURE__ */ (() => foldableSet.foldr(Cons)(Nil))();
var fwdSlice = (dictGraph) => {
  const runWithGraph_spy = runWithGraphT_spy1(dictGraph);
  return (v) => {
    const $0 = v._2;
    const $1 = v._1;
    return runWithGraph_spy(tailRecM((v1) => {
      if (v1.es.tag === "Nil") {
        return pure($Step("Done", void 0));
      }
      if (v1.es.tag === "Cons") {
        const $2 = lookup3(v1.es._1._1)(v1.pending);
        const \u03B2s = (() => {
          if ($2.tag === "Nothing") {
            return $$$Map("Node", 1, 1, v1.es._1._2, void 0, Leaf, Leaf);
          }
          if ($2.tag === "Just") {
            return insert3(ordVertex)(v1.es._1._2)()($2._1);
          }
          fail();
        })();
        if (eqMap(eqVertex)(eqUnit).eq(\u03B2s)(dictGraph.outN($0)(v1.es._1._1))) {
          return bindStateT(monadIdentity).bind(extend2($Tuple(v1.es._1._1, dictGraph.vertexData($0)(v1.es._1._1)))(\u03B2s))(() => pure($Step(
            "Loop",
            {
              pending: $$delete2(ordVertex)(v1.es._1._1)(v1.pending),
              es: foldableList.foldr(Cons)(v1.es._2)(inEdges$p(dictGraph)($0)(v1.es._1._1))
            }
          )));
        }
        return pure($Step("Loop", { pending: insert3(ordVertex)(v1.es._1._1)(\u03B2s)(v1.pending), es: v1.es._2 }));
      }
      fail();
    })({ pending: Leaf, es: inEdges(dictGraph)($0)($1) }))(assertWhen(false)("inputs are sinks")((v$1) => unsafeDifference(
      ordVertex.compare,
      $1,
      dictGraph.sinks($0)
    ).tag === "Leaf")(map2(ordDVertex$p)((\u03B1) => $Tuple(\u03B1, dictGraph.vertexData($0)(\u03B1)))($1)))._1;
  };
};
var bwdSlice = (dictGraph) => {
  const runWithGraph_spy = runWithGraphT_spy1(dictGraph);
  const addresses2 = addresses(dictGraph.Vertices1());
  return (v) => {
    const $0 = v._2;
    const $1 = v._1;
    return runWithGraph_spy(tailRecM((v1) => {
      if (v1["\u03B1s"].tag === "Nil") {
        if (v1.pending.tag === "Nil") {
          return pure($Step("Done", void 0));
        }
        if (v1.pending.tag === "Cons") {
          const $2 = v1.pending._1._1._2;
          const $3 = v1.pending._1._1._1;
          if (member3($3)(v1.visited)) {
            return pure($Step("Loop", { visited: v1.visited, "\u03B1s": Nil, pending: v1.pending._2 }));
          }
          return bindStateT(monadIdentity).bind(extend2($Tuple($3, $2))(v1.pending._1._2))(() => pure($Step(
            "Loop",
            { visited: insert3(ordVertex)($3)()(v1.visited), "\u03B1s": Nil, pending: v1.pending._2 }
          )));
        }
        fail();
      }
      if (v1["\u03B1s"].tag === "Cons") {
        const \u03B2s = dictGraph.outN($0)(v1["\u03B1s"]._1);
        return pure($Step(
          "Loop",
          {
            visited: v1.visited,
            "\u03B1s": foldableList.foldr(Cons)(v1["\u03B1s"]._2)(fromFoldable11(\u03B2s)),
            pending: $List("Cons", $Tuple($Tuple(v1["\u03B1s"]._1, dictGraph.vertexData($0)(v1["\u03B1s"]._1)), \u03B2s), v1.pending)
          }
        ));
      }
      fail();
    })({
      visited: Leaf,
      "\u03B1s": fromFoldable11(assertWhen(false)("inputs are sinks")((v$1) => unsafeDifference(ordVertex.compare, $1, addresses2($0)).tag === "Leaf")($1)),
      pending: Nil
    }))(Leaf)._1;
  };
};

// output-es/Eval/index.js
var setSet4 = /* @__PURE__ */ setSet(ordVertex);
var disjointUnion2 = /* @__PURE__ */ disjointUnion(mapEnvStringVal);
var fromFoldable16 = /* @__PURE__ */ (() => {
  const go = (go$a0$copy) => (go$a1$copy) => {
    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
    while (go$c) {
      const b = go$a0, v = go$a1;
      if (v.tag === "Nil") {
        go$c = false;
        go$r = b;
        continue;
      }
      if (v.tag === "Cons") {
        go$a0 = insert3(ordString)(v._1)()(b);
        go$a1 = v._2;
        continue;
      }
      fail();
    }
    return go$r;
  };
  const $0 = go(Leaf);
  return (x2) => $0((() => {
    const go$1 = (m$p, z$p) => {
      if (m$p.tag === "Leaf") {
        return z$p;
      }
      if (m$p.tag === "Node") {
        return go$1(m$p._5, $List("Cons", m$p._3, go$1(m$p._6, z$p)));
      }
      fail();
    };
    return go$1(x2, Nil);
  })());
})();
var show22 = /* @__PURE__ */ (() => showSet(showString).show)();
var toUnfoldable8 = (x2) => {
  const go = (m$p, z$p) => {
    if (m$p.tag === "Leaf") {
      return z$p;
    }
    if (m$p.tag === "Node") {
      return go(m$p._5, $List("Cons", m$p._3, go(m$p._6, z$p)));
    }
    fail();
  };
  const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
    let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
    while (go$1$c) {
      const source2 = go$1$a0, memo = go$1$a1;
      if (source2.tag === "Nil") {
        const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => {
          let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$c = true, go$2$r;
          while (go$2$c) {
            const b = go$2$a0, v = go$2$a1;
            if (v.tag === "Nil") {
              go$2$c = false;
              go$2$r = b;
              continue;
            }
            if (v.tag === "Cons") {
              go$2$a0 = $List("Cons", v._1, b);
              go$2$a1 = v._2;
              continue;
            }
            fail();
          }
          return go$2$r;
        };
        go$1$c = false;
        go$1$r = go$2(Nil)(memo);
        continue;
      }
      if (source2.tag === "Cons") {
        go$1$a0 = source2._2;
        go$1$a1 = $List("Cons", source2._1, memo);
        continue;
      }
      fail();
    }
    return go$1$r;
  };
  return go$1(go(x2, Nil))(Nil);
};
var union1 = /* @__PURE__ */ (() => setSet(ordString).union)();
var fv = /* @__PURE__ */ (() => fVDict(fVElim).fv)();
var fromFoldable17 = /* @__PURE__ */ fromFoldable(foldableList);
var greaterThanOrEq = (a1) => (a2) => {
  const v = ordInt.compare(a1._1)(a2._1);
  if (v === "LT") {
    return false;
  }
  return v === "GT" || a1._2 >= a2._2;
};
var show3 = (v) => "(Tuple " + showIntImpl(v._1) + " " + showIntImpl(v._2) + ")";
var lookup1 = (k) => {
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "Leaf") {
        go$c = false;
        go$r = Nothing;
        continue;
      }
      if (v.tag === "Node") {
        const v1 = ordString.compare(k)(v._3);
        if (v1 === "LT") {
          go$a0 = v._5;
          continue;
        }
        if (v1 === "GT") {
          go$a0 = v._6;
          continue;
        }
        if (v1 === "EQ") {
          go$c = false;
          go$r = $Maybe("Just", v._4);
          continue;
        }
      }
      fail();
    }
    return go$r;
  };
  return go;
};
var traverse2 = /* @__PURE__ */ (() => traversableList.traverse(applicativeMaybe))();
var fwdSlice2 = /* @__PURE__ */ fwdSlice(graphGraphImpl);
var bwdSlice2 = /* @__PURE__ */ bwdSlice(graphGraphImpl);
var mempty4 = /* @__PURE__ */ (() => monoidSet(ordVertex).mempty)();
var matchMany = (dictMonadWithGraphAlloc) => {
  const Monad0 = dictMonadWithGraphAlloc.MonadWithGraph2().Monad0();
  const $0 = Monad0.Applicative0();
  const $1 = Monad0.Bind1();
  const $$throw2 = $$throw(dictMonadWithGraphAlloc.MonadError1().MonadThrow0());
  return (v) => (v1) => {
    if (v.tag === "Nil") {
      return $0.pure($Tuple(empty2, $Tuple(v1, setSet4.empty)));
    }
    if (v.tag === "Cons") {
      if (v1.tag === "ContElim") {
        const $2 = v._2;
        return $1.bind(match(dictMonadWithGraphAlloc)(v._1)(v1._1))((v3) => {
          const $3 = v3._2._2;
          const $4 = v3._1;
          return $1.bind(matchMany(dictMonadWithGraphAlloc)($2)(v3._2._1))((v4) => $0.pure($Tuple(
            disjointUnion2($4)(v4._1),
            $Tuple(v4._2._1, setSet4.union($3)(v4._2._2))
          )));
        });
      }
      if (v1.tag === "ContExpr") {
        return $$throw2(showIntImpl((() => {
          const go = (go$a0$copy) => (go$a1$copy) => {
            let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
            while (go$c) {
              const b = go$a0, v$1 = go$a1;
              if (v$1.tag === "Nil") {
                go$c = false;
                go$r = b;
                continue;
              }
              if (v$1.tag === "Cons") {
                go$a0 = b + 1 | 0;
                go$a1 = v$1._2;
                continue;
              }
              fail();
            }
            return go$r;
          };
          return go(0)(v._2) + 1 | 0;
        })()) + " extra argument(s) to constructor/record; did you forget parentheses in lambda pattern?");
      }
    }
    fail();
  };
};
var match = (dictMonadWithGraphAlloc) => {
  const Monad0 = dictMonadWithGraphAlloc.MonadWithGraph2().Monad0();
  const $0 = Monad0.Applicative0();
  const Bind1 = Monad0.Bind1();
  const MonadError1 = dictMonadWithGraphAlloc.MonadError1();
  const withMsg2 = withMsg(MonadError1);
  const consistentWith2 = consistentWith(MonadError1);
  const MonadThrow0 = MonadError1.MonadThrow0();
  return (v) => (v1) => {
    if (v1.tag === "ElimVar") {
      if (v1._1 === "_") {
        return $0.pure($Tuple(empty2, $Tuple(v1._2, setSet4.empty)));
      }
      const $1 = v1._1;
      return $0.pure($Tuple(
        (() => {
          const $2 = {};
          $2[$1] = v;
          return $2;
        })(),
        $Tuple(v1._2, setSet4.empty)
      ));
    }
    if (v1.tag === "ElimConstr") {
      if (v._3.tag === "Constr") {
        const $1 = v._3._1;
        const $2 = v1._1;
        const $3 = v._3._2;
        const $4 = v._1;
        return Bind1.bind(withMsg2("Pattern mismatch")(consistentWith2($$$Map("Node", 1, 1, $1, void 0, Leaf, Leaf))(mapObjectString.keys($2))))(() => Bind1.bind(orElse(MonadThrow0)("Incomplete patterns: no branch for " + showCtr($1))(_lookup(
          Nothing,
          Just,
          $1,
          $2
        )))((\u03BA) => Bind1.bind(matchMany(dictMonadWithGraphAlloc)($3)(\u03BA))((v2) => $0.pure($Tuple(
          v2._1,
          $Tuple(v2._2._1, insert3(ordVertex)($4)()(v2._2._2))
        )))));
      }
      return Bind1.bind(dataTypeForSetCtr.dataTypeFor(MonadThrow0)(mapObjectString.keys(v1._1)))((d) => MonadThrow0.throwError(error("Pattern mismatch: found " + renderWithIndent(Stmt)(0)(0)(prettyVal(highlightableVertex).pretty(v))._1 + ", expected " + d._1)));
    }
    if (v1.tag === "ElimDict") {
      if (v._3.tag === "Dictionary") {
        const $1 = v1._1;
        const $2 = v._3._1;
        const $3 = v._1;
        const $4 = v1._2;
        return Bind1.bind(check(MonadThrow0)(unsafeDifference(ordString.compare, $1, fromFoldable16(mapObjectString.keys($2))).tag === "Leaf")("Pattern mismatch: found " + show22(mapObjectString.keys($2)) + ", expected " + show22($1)))(() => Bind1.bind(matchMany(dictMonadWithGraphAlloc)(listMap((k) => $$get(showString)(mapObjectString)(k)($2)._2)(toUnfoldable8($1)))($4))((v2) => $0.pure($Tuple(
          v2._1,
          $Tuple(v2._2._1, insert3(ordVertex)($3)()(v2._2._2))
        ))));
      }
      return MonadThrow0.throwError(error("Pattern mismatch: found " + renderWithIndent(Stmt)(0)(0)(prettyVal(highlightableVertex).pretty(v))._1 + ", expected " + show22(v1._1)));
    }
    fail();
  };
};
var graphGC = (dictGraph) => {
  const $0 = dictGraph.Vertices1();
  return (dictApply) => {
    const select\u03B1s\u{1D539}Vertex3 = select\u03B1s\u{1D539}Vertex(dictApply);
    return (dictApply1) => {
      const select\u03B1s\u{1D539}Vertex1 = select\u03B1s\u{1D539}Vertex(dictApply1);
      return (dictFoldable) => {
        const select\u03B1s\u{1D539}Vertex22 = select\u03B1s\u{1D539}Vertex3(dictFoldable);
        return (dictFoldable1) => {
          const select\u03B1s\u{1D539}Vertex32 = select\u03B1s\u{1D539}Vertex1(dictFoldable1);
          return (v) => {
            const $1 = v.g;
            const $2 = v["in\u03B1"];
            const $3 = v["out\u03B1"];
            return {
              fwd: (in\u{1D539}) => {
                const g$p = v.graph_fwd(select\u03B1s\u{1D539}Vertex22["select\u03B1s"](in\u{1D539})($2))($1);
                return $Tuple(select\u03B1s\u{1D539}Vertex32["select\u{1D539}s"]($3)($0.vertices(g$p)), g$p);
              },
              bwd: (out\u{1D539}) => {
                const g$p = v.graph_bwd(select\u03B1s\u{1D539}Vertex32["select\u03B1s"](out\u{1D539})($3))($1);
                return $Tuple(select\u03B1s\u{1D539}Vertex22["select\u{1D539}s"]($2)($0.vertices(g$p)), g$p);
              }
            };
          };
        };
      };
    };
  };
};
var closeDefs = (dictMonadWithGraphAlloc) => {
  const Monad0 = dictMonadWithGraphAlloc.MonadWithGraph2().Monad0();
  const traverse2$1 = traversableDict.traverse(Monad0.Applicative0());
  const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
  return (\u03B3) => (\u03C1) => (\u03B1s) => Monad0.Bind1().Apply0().Functor0().map(Env)(traverse2$1((\u03C3) => {
    const \u03C1$p = forDefs(\u03C1)(\u03C3);
    return val(\u03B1s)($BaseVal(
      "Fun",
      $Fun(
        "Closure",
        (() => {
          const $0 = union1(fv(\u03C1$p))(fVElim.fv(\u03C3));
          return filterWithKey((x2) => {
            const $1 = setSet(ordString).member(x2)($0);
            return (v) => $1;
          })(\u03B3);
        })(),
        \u03C1$p,
        \u03C3
      )
    ));
  })(\u03C1));
};
var evalVal = (dictMonadWithGraphAlloc) => {
  const MonadError1 = dictMonadWithGraphAlloc.MonadError1();
  const checkArity2 = checkArity(MonadError1);
  const check2 = check(MonadError1.MonadThrow0());
  return (dictMonadReader) => (dictMonadAff) => {
    const Monad0 = dictMonadAff.MonadEffect0().Monad0();
    const Applicative0 = Monad0.Applicative0();
    const Bind1 = Monad0.Bind1();
    const $0 = Bind1.Apply0().Functor0();
    const traverse3 = traversableList.traverse(Applicative0);
    const traverse4 = traversablePair.traverse(Applicative0);
    const sequence1 = traversableArray.traverse(Applicative0)(identity7);
    return (dictLoadFile) => (v) => (v1) => (v2) => {
      if (v1.tag === "Int") {
        return Applicative0.pure($Maybe("Just", $Tuple(v1._1, $BaseVal("Int", v1._2))));
      }
      if (v1.tag === "Float") {
        return Applicative0.pure($Maybe("Just", $Tuple(v1._1, $BaseVal("Float", v1._2))));
      }
      if (v1.tag === "Str") {
        return Applicative0.pure($Maybe("Just", $Tuple(v1._1, $BaseVal("Str", v1._2))));
      }
      if (v1.tag === "Dictionary") {
        const $1 = v1._1;
        return Bind1.bind($0.map(unzip3)(traverse3(traverse4((() => {
          const $2 = $$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(v);
          return (a) => $2(a)(v2);
        })()))(v1._2)))((v3) => {
          const v4 = unzip2(listMap((v$1) => $Tuple(v$1._3.tag === "Str" ? v$1._3._1 : typeError(v$1._3)("Str"), v$1._1))(v3._1));
          return Applicative0.pure($Maybe(
            "Just",
            $Tuple(
              $1,
              $BaseVal(
                "Dictionary",
                fromFoldable17((() => {
                  const go = (go$a0$copy) => (go$a1$copy) => (go$a2$copy) => {
                    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$a2 = go$a2$copy, go$c = true, go$r;
                    while (go$c) {
                      const v$1 = go$a0, v1$1 = go$a1, v2$1 = go$a2;
                      if (v$1.tag === "Nil") {
                        go$c = false;
                        go$r = v2$1;
                        continue;
                      }
                      if (v1$1.tag === "Nil") {
                        go$c = false;
                        go$r = v2$1;
                        continue;
                      }
                      if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                        go$a0 = v$1._2;
                        go$a1 = v1$1._2;
                        go$a2 = $List("Cons", $Tuple(v$1._1, v1$1._1), v2$1);
                        continue;
                      }
                      fail();
                    }
                    return go$r;
                  };
                  const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
                    let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
                    while (go$1$c) {
                      const v$1 = go$1$a0, v1$1 = go$1$a1;
                      if (v1$1.tag === "Nil") {
                        go$1$c = false;
                        go$1$r = v$1;
                        continue;
                      }
                      if (v1$1.tag === "Cons") {
                        go$1$a0 = $List("Cons", v1$1._1, v$1);
                        go$1$a1 = v1$1._2;
                        continue;
                      }
                      fail();
                    }
                    return go$1$r;
                  };
                  const go$2 = (go$2$a0$copy) => (go$2$a1$copy) => (go$2$a2$copy) => {
                    let go$2$a0 = go$2$a0$copy, go$2$a1 = go$2$a1$copy, go$2$a2 = go$2$a2$copy, go$2$c = true, go$2$r;
                    while (go$2$c) {
                      const v$1 = go$2$a0, v1$1 = go$2$a1, v2$1 = go$2$a2;
                      if (v$1.tag === "Nil") {
                        go$2$c = false;
                        go$2$r = v2$1;
                        continue;
                      }
                      if (v1$1.tag === "Nil") {
                        go$2$c = false;
                        go$2$r = v2$1;
                        continue;
                      }
                      if (v$1.tag === "Cons" && v1$1.tag === "Cons") {
                        go$2$a0 = v$1._2;
                        go$2$a1 = v1$1._2;
                        go$2$a2 = $List("Cons", $Tuple(v$1._1, v1$1._1), v2$1);
                        continue;
                      }
                      fail();
                    }
                    return go$2$r;
                  };
                  const go$3 = (go$3$a0$copy) => (go$3$a1$copy) => {
                    let go$3$a0 = go$3$a0$copy, go$3$a1 = go$3$a1$copy, go$3$c = true, go$3$r;
                    while (go$3$c) {
                      const v$1 = go$3$a0, v1$1 = go$3$a1;
                      if (v1$1.tag === "Nil") {
                        go$3$c = false;
                        go$3$r = v$1;
                        continue;
                      }
                      if (v1$1.tag === "Cons") {
                        go$3$a0 = $List("Cons", v1$1._1, v$1);
                        go$3$a1 = v1$1._2;
                        continue;
                      }
                      fail();
                    }
                    return go$3$r;
                  };
                  return go$3(Nil)(go$2(v4._1)(go$1(Nil)(go(v4._2)(v3._2)(Nil)))(Nil));
                })())
              )
            )
          ));
        });
      }
      if (v1.tag === "Constr") {
        const $1 = v1._2;
        const $2 = v1._3;
        const $3 = v1._1;
        return Bind1.bind(checkArity2($1)((() => {
          const go = (go$a0$copy) => (go$a1$copy) => {
            let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
            while (go$c) {
              const b = go$a0, v$1 = go$a1;
              if (v$1.tag === "Nil") {
                go$c = false;
                go$r = b;
                continue;
              }
              if (v$1.tag === "Cons") {
                go$a0 = b + 1 | 0;
                go$a1 = v$1._2;
                continue;
              }
              fail();
            }
            return go$r;
          };
          return go(0)($2);
        })()))(() => Bind1.bind(traverse3((() => {
          const $4 = $$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(v);
          return (a) => $4(a)(v2);
        })())($2))((vs) => Applicative0.pure($Maybe("Just", $Tuple($3, $BaseVal("Constr", $1, vs))))));
      }
      if (v1.tag === "Matrix") {
        const $1 = v1._2;
        const $2 = v1._3._1;
        const $3 = v1._3._2;
        const $4 = v1._1;
        return Bind1.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(v)(v1._4)(v2))((v3) => {
          const v5 = intPair.unpack(v3._3);
          const $5 = v5._1._1;
          const $6 = v5._2._1;
          const $7 = v5._1._2;
          const $8 = v5._2._2;
          return Bind1.bind(check2(greaterThanOrEq($Tuple($5, $6))($Tuple(1, 1)))("array must be at least (" + show3($Tuple(1, 1)) + "); got (" + show3($Tuple(
            $5,
            $6
          )) + ")"))(() => Bind1.bind(sequence1(arrayBind(rangeImpl(1, $5))((i) => [
            sequence1(arrayBind(rangeImpl(1, $6))((j) => [
              $$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(unionWith((v$1) => identity16)(v)(disjointUnion2((() => {
                const $9 = {};
                $9[$2] = $Val($7, Nothing, $BaseVal("Int", i));
                return $9;
              })())((() => {
                const $9 = {};
                $9[$3] = $Val($8, Nothing, $BaseVal("Int", j));
                return $9;
              })())))($1)(v2)
            ]))
          ])))((vss) => Applicative0.pure($Maybe(
            "Just",
            $Tuple($4, $BaseVal("Matrix", $Tuple(vss, $Tuple($Tuple($5, $7), $Tuple($6, $8)))))
          ))));
        });
      }
      if (v1.tag === "Lambda") {
        return Applicative0.pure($Maybe(
          "Just",
          $Tuple(
            v1._1,
            $BaseVal(
              "Fun",
              $Fun(
                "Closure",
                (() => {
                  const $1 = fVElim.fv(v1._2);
                  return filterWithKey((x2) => {
                    const $2 = setSet(ordString).member(x2)($1);
                    return (v$1) => $2;
                  })(v);
                })(),
                empty2,
                v1._2
              )
            )
          )
        ));
      }
      return Applicative0.pure(Nothing);
    };
  };
};
var $$eval = (dictMonadWithGraphAlloc) => {
  const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
  const MonadError1 = dictMonadWithGraphAlloc.MonadError1();
  const withMsg2 = withMsg(MonadError1);
  const MonadThrow0 = MonadError1.MonadThrow0();
  const match1 = match(dictMonadWithGraphAlloc);
  const closeDefs1 = closeDefs(dictMonadWithGraphAlloc);
  const $$new = dictMonadWithGraphAlloc.new(typeNameVal);
  return (dictMonadReader) => (dictMonadAff) => {
    const Monad0 = dictMonadAff.MonadEffect0().Monad0();
    const $0 = Monad0.Bind1();
    return (dictLoadFile) => (\u03B3) => (e0) => (\u03B1s) => {
      const funName = (funName$a0$copy) => {
        let funName$a0 = funName$a0$copy, funName$c = true, funName$r;
        while (funName$c) {
          const v = funName$a0;
          if (v.tag === "Var") {
            funName$c = false;
            funName$r = v._1;
            continue;
          }
          if (v.tag === "Op") {
            funName$c = false;
            funName$r = v._1;
            continue;
          }
          if (v.tag === "App") {
            funName$a0 = v._1;
            continue;
          }
          funName$c = false;
          funName$r = "unknown";
        }
        return funName$r;
      };
      return $0.bind(evalVal(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)(e0)(\u03B1s))((\u03B1u_opt) => {
        if (\u03B1u_opt.tag === "Just") {
          return val(insert3(ordVertex)(\u03B1u_opt._1._1)()(\u03B1s))(\u03B1u_opt._1._2);
        }
        if (\u03B1u_opt.tag === "Nothing") {
          if (e0.tag === "Var") {
            return withMsg2("Variable lookup")(lookup$p(MonadThrow0)(showString)(mapEnvStringVal)(e0._1)(\u03B3));
          }
          if (e0.tag === "Op") {
            return withMsg2("Variable lookup")(lookup$p(MonadThrow0)(showString)(mapEnvStringVal)(e0._1)(\u03B3));
          }
          if (e0.tag === "Project") {
            const $1 = e0._2;
            return $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)(e0._1)(\u03B1s))((v) => {
              if (v._3.tag === "Dictionary") {
                return withMsg2("Dict lookup")(orElse(MonadThrow0)('Key "' + $1 + '" not found')((() => {
                  const $2 = _lookup(Nothing, Just, $1, v._3._1);
                  if ($2.tag === "Just") {
                    return $Maybe("Just", $2._1._2);
                  }
                  return Nothing;
                })()));
              }
              return MonadThrow0.throwError(error("Found " + renderWithIndent(Stmt)(0)(0)(prettyVal(highlightableVertex).pretty(v))._1 + ", expected dictionary"));
            });
          }
          if (e0.tag === "DProject") {
            const $1 = e0._2;
            return $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)(e0._1)(\u03B1s))((v) => $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)($1)(\u03B1s))((v$p) => {
              if (v._3.tag === "Dictionary") {
                if (v$p._3.tag === "Str") {
                  return withMsg2("Dict lookup")(orElse(MonadThrow0)('Key "' + v$p._3._1 + '" not found')((() => {
                    const $2 = _lookup(Nothing, Just, v$p._3._1, v._3._1);
                    if ($2.tag === "Just") {
                      return $Maybe("Just", $2._1._2);
                    }
                    return Nothing;
                  })()));
                }
                return MonadThrow0.throwError(error("Found " + renderWithIndent(Stmt)(0)(0)(prettyVal(highlightableVertex).pretty(v$p))._1 + ", expected string"));
              }
              return MonadThrow0.throwError(error("Found " + renderWithIndent(Stmt)(0)(0)(prettyVal(highlightableVertex).pretty(v))._1 + ", expected dict"));
            }));
          }
          if (e0.tag === "App") {
            const $1 = e0._1;
            const $2 = e0._2;
            return $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)($1)(\u03B1s))((v) => $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)($2)(\u03B1s))((v$p) => withMsg2("In " + funName($1))(apply2(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(v)(v$p))));
          }
          if (e0.tag === "Let") {
            const $1 = e0._2;
            const $2 = e0._1._1;
            return $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)(e0._1._2)(\u03B1s))((v) => $0.bind(withMsg2("In variable def")(match1(v)($2)))((v1) => $$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(unionWith((v$1) => identity16)(\u03B3)(v1._1))($1)(v1._2._2)));
          }
          if (e0.tag === "LetRec") {
            const $1 = e0._2;
            const $2 = e0._1._1;
            return $0.bind(closeDefs1(\u03B3)(e0._1._2)(insert3(ordVertex)($2)()(\u03B1s)))((\u03B3$p) => $$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(unionWith((v) => identity16)(\u03B3)(\u03B3$p))($1)(insert3(ordVertex)($2)()(\u03B1s)));
          }
          if (e0.tag === "DocExpr") {
            const $1 = e0._1;
            const $2 = e0._2;
            return $0.bind(evalVal(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)($2)(\u03B1s))((\u03B1u_opt$p) => {
              if (\u03B1u_opt$p.tag === "Just") {
                const $3 = \u03B1u_opt$p._1._2;
                const $4 = \u03B1u_opt$p._1._1;
                return $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)($1)(\u03B1s))((v) => $$new((a) => Val(a)($Maybe("Just", v)))(insert3(ordVertex)($4)()(\u03B1s))($3));
              }
              if (\u03B1u_opt$p.tag === "Nothing") {
                return $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)($2)(\u03B1s))((v) => {
                  const $3 = v._3;
                  const $4 = v._1;
                  return $0.bind($$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(\u03B3)($1)(\u03B1s))((v1) => Monad0.Applicative0().pure($Val(
                    $4,
                    $Maybe("Just", v1),
                    $3
                  )));
                });
              }
              fail();
            });
          }
          return throwException(error("absurd"))();
        }
        fail();
      });
    };
  };
};
var apply2 = (dictMonadWithGraphAlloc) => {
  const closeDefs1 = closeDefs(dictMonadWithGraphAlloc);
  const match1 = match(dictMonadWithGraphAlloc);
  const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
  const MonadError1 = dictMonadWithGraphAlloc.MonadError1();
  const MonadThrow0 = MonadError1.MonadThrow0();
  return (dictMonadReader) => (dictMonadAff) => {
    const Bind1 = dictMonadAff.MonadEffect0().Monad0().Bind1();
    return (dictLoadFile) => (v) => (v1) => {
      const $0 = (v2) => MonadThrow0.throwError(error("Found " + renderWithIndent(Stmt)(0)(0)(prettyVal(highlightableVertex).pretty(v2))._1 + ", expected function"));
      if (v._3.tag === "Fun") {
        if (v._3._1.tag === "Closure") {
          const $1 = v._1;
          const $2 = v._3._1._1;
          const $3 = v._3._1._3;
          return Bind1.bind(closeDefs1($2)(v._3._1._2)($$$Map("Node", 1, 1, $1, void 0, Leaf, Leaf)))((\u03B32) => Bind1.bind(match1(v1)($3))((v3) => $$eval(dictMonadWithGraphAlloc)(dictMonadReader)(dictMonadAff)(dictLoadFile)(unionWith((v$1) => identity16)(unionWith((v$1) => identity16)($2)(\u03B32))(v3._1))(v3._2._1.tag === "ContExpr" ? v3._2._1._1 : throwException(error("Expression expected"))())(insert3(ordVertex)($1)()(v3._2._2))));
        }
        if (v._3._1.tag === "Foreign") {
          const $1 = v._3._1._1._2;
          const vs$p = foldableList.foldr(Cons)($List("Cons", v1, Nil))(v._3._1._2);
          if ((() => {
            const go = (go$a0$copy) => (go$a1$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
              while (go$c) {
                const b = go$a0, v$1 = go$a1;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = b;
                  continue;
                }
                if (v$1.tag === "Cons") {
                  go$a0 = b + 1 | 0;
                  go$a1 = v$1._2;
                  continue;
                }
                fail();
              }
              return go$r;
            };
            return $1._1.arity > go(0)(vs$p);
          })()) {
            return val($$$Map("Node", 1, 1, v._1, void 0, Leaf, Leaf))($BaseVal(
              "Fun",
              $Fun("Foreign", $Tuple(v._3._1._1._1, $1), vs$p)
            ));
          }
          return $1._1.op(dictMonadWithGraphAlloc)(MonadError1)(dictMonadAff)(dictMonadReader)(dictLoadFile)(vs$p);
        }
        if (v._3._1.tag === "PartialConstr") {
          const $1 = v._1;
          const n = defined(arity(monadThrowExceptT(monadIdentity))(v._3._1._1));
          const v$p = (() => {
            const go = (go$a0$copy) => (go$a1$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
              while (go$c) {
                const b = go$a0, v$1 = go$a1;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = b;
                  continue;
                }
                if (v$1.tag === "Cons") {
                  go$a0 = b + 1 | 0;
                  go$a1 = v$1._2;
                  continue;
                }
                fail();
              }
              return go$r;
            };
            return go(0)(v._3._1._2) < (n - 1 | 0);
          })() ? $BaseVal(
            "Fun",
            $Fun(
              "PartialConstr",
              v._3._1._1,
              foldableList.foldr(Cons)($List("Cons", v1, Nil))(v._3._1._2)
            )
          ) : $BaseVal(
            "Constr",
            v._3._1._1,
            foldableList.foldr(Cons)($List("Cons", v1, Nil))(v._3._1._2)
          );
          return Bind1.bind(check(MonadThrow0)((() => {
            const go = (go$a0$copy) => (go$a1$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
              while (go$c) {
                const b = go$a0, v$1 = go$a1;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = b;
                  continue;
                }
                if (v$1.tag === "Cons") {
                  go$a0 = b + 1 | 0;
                  go$a1 = v$1._2;
                  continue;
                }
                fail();
              }
              return go$r;
            };
            return go(0)(v._3._1._2) < n;
          })())("Too many arguments to " + showCtr(v._3._1._1)))(() => val($$$Map(
            "Node",
            1,
            1,
            $1,
            void 0,
            Leaf,
            Leaf
          ))(v$p));
        }
      }
      return $0(v1);
    };
  };
};
var eval_module = (dictMonadWithGraphAlloc) => {
  const eval1 = $$eval(dictMonadWithGraphAlloc);
  const match1 = match(dictMonadWithGraphAlloc);
  const closeDefs1 = closeDefs(dictMonadWithGraphAlloc);
  return (dictMonadReader) => {
    const eval2 = eval1(dictMonadReader);
    return (dictMonadAff) => {
      const Monad0 = dictMonadAff.MonadEffect0().Monad0();
      const $0 = Monad0.Bind1();
      const eval3 = eval2(dictMonadAff);
      return (dictLoadFile) => {
        const eval4 = eval3(dictLoadFile);
        return (\u03B3) => {
          const go = (v) => (v1) => (v2) => {
            if (v1.tag === "Nil") {
              return Monad0.Applicative0().pure(v);
            }
            if (v1.tag === "Cons") {
              if (v1._1.tag === "Left") {
                const $1 = v1._2;
                const $2 = v1._1._1._1;
                return $0.bind(eval4(unionWith((v$1) => identity16)(\u03B3)(v))(v1._1._1._2)(v2))((v3) => $0.bind(match1(v3)($2))((v4) => go(unionWith((v$1) => identity16)(v)(v4._1))($1)(v4._2._2)));
              }
              if (v1._1.tag === "Right") {
                const $1 = v1._2;
                return $0.bind(closeDefs1(unionWith((v$1) => identity16)(\u03B3)(v))(v1._1._1._2)(insert3(ordVertex)(v1._1._1._1)()(v2)))((\u03B3$p$p) => go(unionWith((v$1) => identity16)(v)(\u03B3$p$p))($1)(v2));
              }
            }
            fail();
          };
          return go(empty2);
        };
      };
    };
  };
};
var eval_primitives = (dictMonadWithGraphAlloc) => {
  const eval_module1 = eval_module(dictMonadWithGraphAlloc);
  return (dictMonadReader) => {
    const eval_module2 = eval_module1(dictMonadReader);
    return (dictMonadAff) => {
      const Monad0 = dictMonadAff.MonadEffect0().Monad0();
      const $0 = Monad0.Bind1();
      const eval_module3 = eval_module2(dictMonadAff);
      const $1 = Monad0.Applicative0();
      return (dictLoadFile) => {
        const eval_module4 = eval_module3(dictLoadFile);
        return (primitives2) => (v) => {
          const $2 = v.graph;
          const $3 = v.modules;
          const $4 = v.roots;
          return $0.bind(foldM3(Monad0)((\u03B3s) => (name3) => {
            const v1 = definitely("deps evaluated")((() => {
              const $5 = lookup1(name3)($2);
              if ($5.tag === "Just") {
                const $6 = traverse2((dep) => lookup1(dep)(\u03B3s))($5._1);
                if ($6.tag === "Just") {
                  const $7 = lookup1(name3)($3);
                  if ($7.tag === "Just") {
                    return $Maybe("Just", $Tuple($7._1, $6._1));
                  }
                  if ($7.tag === "Nothing") {
                    return Nothing;
                  }
                  fail();
                }
                if ($6.tag === "Nothing") {
                  return Nothing;
                }
                fail();
              }
              if ($5.tag === "Nothing") {
                return Nothing;
              }
              fail();
            })());
            return $0.bind(eval_module4((() => {
              const go = (go$a0$copy) => (go$a1$copy) => {
                let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
                while (go$c) {
                  const b = go$a0, v$1 = go$a1;
                  if (v$1.tag === "Nil") {
                    go$c = false;
                    go$r = b;
                    continue;
                  }
                  if (v$1.tag === "Cons") {
                    go$a0 = unionWith((v$2) => identity16)(b)(v$1._1);
                    go$a1 = v$1._2;
                    continue;
                  }
                  fail();
                }
                return go$r;
              };
              return go(primitives2)(v1._2);
            })())(v1._1)(setSet4.empty))((\u03B3$p) => $1.pure(insert3(ordString)(name3)(\u03B3$p)(\u03B3s)));
          })(Leaf)(v.topsorted))((\u03B3s) => $1.pure((() => {
            const go = (go$a0$copy) => (go$a1$copy) => {
              let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
              while (go$c) {
                const b = go$a0, v$1 = go$a1;
                if (v$1.tag === "Nil") {
                  go$c = false;
                  go$r = b;
                  continue;
                }
                if (v$1.tag === "Cons") {
                  go$a0 = unionWith((v$2) => identity16)(b)(v$1._1);
                  go$a1 = v$1._2;
                  continue;
                }
                fail();
              }
              return go$r;
            };
            return go(primitives2)(listMap((dep) => definitely("has env")(lookup1(dep)(\u03B3s)))($4));
          })()));
        };
      };
    };
  };
};
var graphEval = (dictMonadAff) => {
  const Monad0 = dictMonadAff.MonadEffect0().Monad0();
  const bindStateT2 = bindStateT(Monad0);
  const $0 = monadAllocAllocT(Monad0);
  const fresh1 = $0.fresh;
  const alloc = traversableExpr.traverse($0.Monad0().Applicative0())((v) => fresh1);
  const runWithGraphT_spy2 = runWithGraphT_spy({
    Applicative0: () => applicativeStateT(Monad0),
    Bind1: () => bindStateT(Monad0)
  })(graphGraphImpl);
  const monadAffState2 = monadAffState(dictMonadAff);
  const monadAffState1 = monadAffState(monadAffState2);
  const $1 = monadAffState2.MonadEffect0().Monad0();
  const $2 = dictMonadAff.MonadEffect0().Monad0();
  const applicativeStateT2 = applicativeStateT(Monad0);
  return (dictMonadReader) => {
    const monadReaderStateT2 = monadReaderStateT(monadReaderStateT(dictMonadReader));
    return (dictLoadFile) => (dictMonadError) => {
      const eval1 = $$eval(monadWithGraphAllocWithGr(dictMonadError))(monadReaderStateT2)(monadAffState1)((() => {
        const loadFileFromPath1 = dictLoadFile.loadFileFromPath(dictMonadError)(dictMonadAff);
        return {
          loadFileFromPath: (dictMonadError1) => (dictMonadAff1) => (x2) => {
            const $3 = loadFileFromPath1(x2);
            return (s) => $1.Bind1().bind((s$1) => $2.Bind1().bind($3)((x$1) => $2.Applicative0().pure($Tuple(x$1, s$1))))((x$1) => $1.Applicative0().pure($Tuple(
              x$1,
              s
            )));
          }
        };
      })());
      return (v) => (e) => {
        const $3 = v["\u03B3"];
        const $4 = spyFunWhen(false)("fwdSlice")((x2) => $Tuple(showVertices(x2._1), showEdgeList(toEdgeList(graphGraphImpl)(x2._2))))(showGraph(graphGraphImpl))(fwdSlice2);
        const $5 = spyFunWhen(false)("bwdSlice")((x2) => $Tuple(showVertices(x2._1), showEdgeList(toEdgeList(graphGraphImpl)(x2._2))))(showGraph(graphGraphImpl))(bwdSlice2);
        return Monad0.Bind1().bind(runAllocT(Monad0)(bindStateT2.bind(alloc(e))((e\u03B1) => bindStateT2.bind(runWithGraphT_spy2(eval1($3)(e\u03B1)(mempty4))(verticesEnvExprVertex.vertices($EnvExpr(
          $3,
          e\u03B1
        ))))((v1) => {
          const $6 = v1._1;
          const $7 = v1._2;
          return bindStateT2.bind(applicativeStateT2.pure())(() => applicativeStateT2.pure($Tuple($6, $Tuple($EnvExpr($3, e\u03B1), $7))));
        })))(v.n))((v1) => Monad0.Applicative0().pure({
          g: v1._2._2._1,
          graph_fwd: (a) => (b) => $4($Tuple(a, b)),
          graph_bwd: (a) => (b) => $5($Tuple(a, b)),
          "in\u03B1": v1._2._2._2._1,
          "out\u03B1": v1._2._2._2._2
        }));
      };
    };
  };
};

// output-es/Affjax.RequestHeader/index.js
var $RequestHeader = (tag, _1, _2) => ({ tag, _1, _2 });

// output-es/Affjax.ResponseFormat/index.js
var $ResponseFormat = (tag, _1) => ({ tag, _1 });
var identity28 = (x2) => x2;

// output-es/Affjax.ResponseHeader/index.js
var $ResponseHeader = (_1, _2) => ({ tag: "ResponseHeader", _1, _2 });
var ResponseHeader = (value0) => (value1) => $ResponseHeader(value0, value1);

// output-es/Data.Argonaut.Parser/foreign.js
function _jsonParser(fail3, succ, s) {
  try {
    return succ(JSON.parse(s));
  } catch (e) {
    return fail3(e.message);
  }
}

// output-es/JSURI/foreign.js
function encodeURIComponent_to_RFC3986(input) {
  return input.replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}
function _encodeFormURLComponent(fail3, succeed, input) {
  try {
    return succeed(encodeURIComponent_to_RFC3986(encodeURIComponent(input)).replace(/%20/g, "+"));
  } catch (err) {
    return fail3(err);
  }
}

// output-es/Data.FormURLEncoded/index.js
var traverse = /* @__PURE__ */ (() => traversableArray.traverse(applicativeMaybe))();
var encode = /* @__PURE__ */ (() => {
  const $0 = joinWith("&");
  const $1 = traverse((v) => {
    if (v._2.tag === "Nothing") {
      return _encodeFormURLComponent((v$1) => Nothing, Just, v._1);
    }
    if (v._2.tag === "Just") {
      const $12 = _encodeFormURLComponent((v$1) => Nothing, Just, v._1);
      if ($12.tag === "Just") {
        const $2 = _encodeFormURLComponent((v$1) => Nothing, Just, v._2._1);
        if ($2.tag === "Just") {
          return $Maybe("Just", $12._1 + "=" + $2._1);
        }
      }
      return Nothing;
    }
    fail();
  });
  return (x2) => {
    const $2 = $1(x2);
    if ($2.tag === "Just") {
      return $Maybe("Just", $0($2._1));
    }
    return Nothing;
  };
})();

// output-es/Data.HTTP.Method/index.js
var $Method = (tag) => tag;
var GET = /* @__PURE__ */ $Method("GET");
var HEAD = /* @__PURE__ */ $Method("HEAD");
var print = (v2) => {
  if (v2.tag === "Left") {
    if (v2._1 === "OPTIONS") {
      return "OPTIONS";
    }
    if (v2._1 === "GET") {
      return "GET";
    }
    if (v2._1 === "HEAD") {
      return "HEAD";
    }
    if (v2._1 === "POST") {
      return "POST";
    }
    if (v2._1 === "PUT") {
      return "PUT";
    }
    if (v2._1 === "DELETE") {
      return "DELETE";
    }
    if (v2._1 === "TRACE") {
      return "TRACE";
    }
    if (v2._1 === "CONNECT") {
      return "CONNECT";
    }
    if (v2._1 === "PROPFIND") {
      return "PROPFIND";
    }
    if (v2._1 === "PROPPATCH") {
      return "PROPPATCH";
    }
    if (v2._1 === "MKCOL") {
      return "MKCOL";
    }
    if (v2._1 === "COPY") {
      return "COPY";
    }
    if (v2._1 === "MOVE") {
      return "MOVE";
    }
    if (v2._1 === "LOCK") {
      return "LOCK";
    }
    if (v2._1 === "UNLOCK") {
      return "UNLOCK";
    }
    if (v2._1 === "PATCH") {
      return "PATCH";
    }
    fail();
  }
  if (v2.tag === "Right") {
    return v2._1;
  }
  fail();
};

// output-es/Effect.Aff.Compat/index.js
var fromEffectFnAff = (v) => makeAff((k) => () => {
  const v1 = v((x2) => k($Either("Left", x2))(), (x2) => k($Either("Right", x2))());
  return (e) => makeAff((k2) => () => {
    v1(e, (x2) => k2($Either("Left", x2))(), (x2) => k2($Either("Right", x2))());
    return nonCanceler;
  });
});

// output-es/Foreign/foreign.js
function tagOf(value) {
  return Object.prototype.toString.call(value).slice(8, -1);
}
var isArray = Array.isArray || function(value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};

// output-es/Foreign/index.js
var $ForeignError = (tag, _1, _2) => ({ tag, _1, _2 });
var unsafeReadTagged = (dictMonad) => (tag) => (value) => {
  if (tagOf(value) === tag) {
    return applicativeExceptT(dictMonad).pure(value);
  }
  return monadThrowExceptT(dictMonad).throwError($NonEmpty($ForeignError("TypeMismatch", tag, tagOf(value)), Nil));
};

// output-es/Affjax/foreign.js
function _ajax(platformSpecificDriver, timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {
  return function(errback, callback) {
    var xhr = platformSpecificDriver.newXHR();
    var fixedUrl = platformSpecificDriver.fixupUrl(options.url, xhr);
    xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
    if (options.headers) {
      try {
        for (var i = 0, header; (header = options.headers[i]) != null; i++) {
          xhr.setRequestHeader(header.field, header.value);
        }
      } catch (e) {
        errback(e);
      }
    }
    var onerror = function(msgIdent) {
      return function() {
        errback(new Error(msgIdent));
      };
    };
    xhr.onerror = onerror(requestFailedMessageIdent);
    xhr.ontimeout = onerror(timeoutErrorMessageIdent);
    xhr.onload = function() {
      callback({
        status: xhr.status,
        statusText: xhr.statusText,
        headers: xhr.getAllResponseHeaders().split("\r\n").filter(function(header2) {
          return header2.length > 0;
        }).map(function(header2) {
          var i2 = header2.indexOf(":");
          return mkHeader(header2.substring(0, i2))(header2.substring(i2 + 2));
        }),
        body: xhr.response
      });
    };
    xhr.responseType = options.responseType;
    xhr.withCredentials = options.withCredentials;
    xhr.timeout = options.timeout;
    xhr.send(options.content);
    return function(error3, cancelErrback, cancelCallback) {
      try {
        xhr.abort();
      } catch (e) {
        return cancelErrback(e);
      }
      return cancelCallback();
    };
  };
}

// output-es/Affjax/index.js
var $$$Error = (tag, _1, _2) => ({ tag, _1, _2 });
var pure2 = /* @__PURE__ */ (() => applicativeExceptT(monadIdentity).pure)();
var alt = /* @__PURE__ */ (() => altExceptT(semigroupNonEmptyList)(monadIdentity).alt)();
var any2 = /* @__PURE__ */ (() => foldableArray.foldMap(/* @__PURE__ */ (() => {
  const semigroupDisj1 = { append: (v) => (v1) => v || v1 };
  return { mempty: false, Semigroup0: () => semigroupDisj1 };
})()))();
var $$try3 = /* @__PURE__ */ $$try(monadErrorAff);
var TimeoutError = /* @__PURE__ */ $$$Error("TimeoutError");
var RequestFailedError = /* @__PURE__ */ $$$Error("RequestFailedError");
var request = (driver2) => (req2) => {
  const fromResponse = (() => {
    if (req2.responseFormat.tag === "ArrayBuffer") {
      return unsafeReadTagged(monadIdentity)("ArrayBuffer");
    }
    if (req2.responseFormat.tag === "Blob") {
      return unsafeReadTagged(monadIdentity)("Blob");
    }
    if (req2.responseFormat.tag === "Document") {
      return (x2) => alt(unsafeReadTagged(monadIdentity)("Document")(x2))(alt(unsafeReadTagged(monadIdentity)("XMLDocument")(x2))(unsafeReadTagged(monadIdentity)("HTMLDocument")(x2)));
    }
    if (req2.responseFormat.tag === "Json") {
      const $0 = bindExceptT(monadIdentity);
      return (a) => $0.bind(unsafeReadTagged(monadIdentity)("String")(a))((x2) => req2.responseFormat._1((() => {
        if (x2 === "") {
          return pure2(jsonEmptyObject);
        }
        const $1 = _jsonParser(Left, Right, x2);
        if ($1.tag === "Left") {
          return monadThrowExceptT(monadIdentity).throwError($NonEmpty(
            $ForeignError("ForeignError", $1._1),
            Nil
          ));
        }
        if ($1.tag === "Right") {
          return pure2($1._1);
        }
        fail();
      })()));
    }
    if (req2.responseFormat.tag === "String") {
      return unsafeReadTagged(monadIdentity)("String");
    }
    if (req2.responseFormat.tag === "Ignore") {
      const $0 = req2.responseFormat._1(pure2());
      return (v) => $0;
    }
    fail();
  })();
  const send = (content2) => _map((v) => {
    if (v.tag === "Right") {
      const $0 = fromResponse(v._1.body);
      if ($0.tag === "Left") {
        return $Either("Left", $$$Error("ResponseBodyError", $0._1._1, v._1));
      }
      if ($0.tag === "Right") {
        return $Either("Right", { body: $0._1, headers: v._1.headers, status: v._1.status, statusText: v._1.statusText });
      }
      fail();
    }
    if (v.tag === "Left") {
      return $Either(
        "Left",
        (() => {
          const message2 = message(v._1);
          if (message2 === "AffjaxTimeoutErrorMessageIdent") {
            return TimeoutError;
          }
          if (message2 === "AffjaxRequestFailedMessageIdent") {
            return RequestFailedError;
          }
          return $$$Error("XHROtherError", v._1);
        })()
      );
    }
    fail();
  })($$try3(fromEffectFnAff(_ajax(
    driver2,
    "AffjaxTimeoutErrorMessageIdent",
    "AffjaxRequestFailedMessageIdent",
    ResponseHeader,
    {
      method: print(req2.method),
      url: req2.url,
      headers: arrayMap((h) => ({
        field: (() => {
          if (h.tag === "Accept") {
            return "Accept";
          }
          if (h.tag === "ContentType") {
            return "Content-Type";
          }
          if (h.tag === "RequestHeader") {
            return h._1;
          }
          fail();
        })(),
        value: (() => {
          if (h.tag === "Accept") {
            return h._1;
          }
          if (h.tag === "ContentType") {
            return h._1;
          }
          if (h.tag === "RequestHeader") {
            return h._2;
          }
          fail();
        })()
      }))((() => {
        if (req2.content.tag === "Just") {
          if (req2.content._1.tag === "FormURLEncoded") {
            if (req2.responseFormat.tag === "Json") {
              const $0 = !any2((y2) => {
                if (y2.tag === "Accept") {
                  return true;
                }
                if (y2.tag === "ContentType") {
                  return false;
                }
                if (y2.tag === "RequestHeader") {
                  return "Accept" === y2._1;
                }
                fail();
              })(req2.headers) ? snoc(req2.headers)($RequestHeader("Accept", "application/json")) : req2.headers;
              if (!any2((y2) => {
                if (y2.tag === "Accept") {
                  return false;
                }
                if (y2.tag === "ContentType") {
                  return true;
                }
                if (y2.tag === "RequestHeader") {
                  return "Content-Type" === y2._1;
                }
                fail();
              })($0)) {
                return snoc($0)($RequestHeader("ContentType", "application/x-www-form-urlencoded"));
              }
              return $0;
            }
            if (!any2((y2) => {
              if (y2.tag === "Accept") {
                return false;
              }
              if (y2.tag === "ContentType") {
                return true;
              }
              if (y2.tag === "RequestHeader") {
                return "Content-Type" === y2._1;
              }
              fail();
            })(req2.headers)) {
              return snoc(req2.headers)($RequestHeader("ContentType", "application/x-www-form-urlencoded"));
            }
            return req2.headers;
          }
          if (req2.content._1.tag === "Json") {
            if (req2.responseFormat.tag === "Json") {
              const $0 = !any2((y2) => {
                if (y2.tag === "Accept") {
                  return true;
                }
                if (y2.tag === "ContentType") {
                  return false;
                }
                if (y2.tag === "RequestHeader") {
                  return "Accept" === y2._1;
                }
                fail();
              })(req2.headers) ? snoc(req2.headers)($RequestHeader("Accept", "application/json")) : req2.headers;
              if (!any2((y2) => {
                if (y2.tag === "Accept") {
                  return false;
                }
                if (y2.tag === "ContentType") {
                  return true;
                }
                if (y2.tag === "RequestHeader") {
                  return "Content-Type" === y2._1;
                }
                fail();
              })($0)) {
                return snoc($0)($RequestHeader("ContentType", "application/json"));
              }
              return $0;
            }
            if (!any2((y2) => {
              if (y2.tag === "Accept") {
                return false;
              }
              if (y2.tag === "ContentType") {
                return true;
              }
              if (y2.tag === "RequestHeader") {
                return "Content-Type" === y2._1;
              }
              fail();
            })(req2.headers)) {
              return snoc(req2.headers)($RequestHeader("ContentType", "application/json"));
            }
            return req2.headers;
          }
          if (req2.responseFormat.tag === "Json" && !any2((y2) => {
            if (y2.tag === "Accept") {
              return true;
            }
            if (y2.tag === "ContentType") {
              return false;
            }
            if (y2.tag === "RequestHeader") {
              return "Accept" === y2._1;
            }
            fail();
          })(req2.headers)) {
            return snoc(req2.headers)($RequestHeader("Accept", "application/json"));
          }
          return req2.headers;
        }
        if (req2.content.tag === "Nothing") {
          if (req2.responseFormat.tag === "Json" && !any2((y2) => {
            if (y2.tag === "Accept") {
              return true;
            }
            if (y2.tag === "ContentType") {
              return false;
            }
            if (y2.tag === "RequestHeader") {
              return "Accept" === y2._1;
            }
            fail();
          })(req2.headers)) {
            return snoc(req2.headers)($RequestHeader("Accept", "application/json"));
          }
          return req2.headers;
        }
        fail();
      })()),
      content: content2,
      responseType: (() => {
        if (req2.responseFormat.tag === "ArrayBuffer") {
          return "arraybuffer";
        }
        if (req2.responseFormat.tag === "Blob") {
          return "blob";
        }
        if (req2.responseFormat.tag === "Document") {
          return "document";
        }
        if (req2.responseFormat.tag === "Json") {
          return "text";
        }
        if (req2.responseFormat.tag === "String") {
          return "text";
        }
        if (req2.responseFormat.tag === "Ignore") {
          return "";
        }
        fail();
      })(),
      username: (() => {
        if (req2.username.tag === "Nothing") {
          return nullImpl;
        }
        if (req2.username.tag === "Just") {
          return notNull(req2.username._1);
        }
        fail();
      })(),
      password: (() => {
        if (req2.password.tag === "Nothing") {
          return nullImpl;
        }
        if (req2.password.tag === "Just") {
          return notNull(req2.password._1);
        }
        fail();
      })(),
      withCredentials: req2.withCredentials,
      timeout: req2.timeout.tag === "Just" ? req2.timeout._1 : 0
    }
  ))));
  if (req2.content.tag === "Nothing") {
    return send(nullImpl);
  }
  if (req2.content.tag === "Just") {
    if (req2.content._1.tag === "ArrayView") {
      return send(notNull(req2.content._1._1(unsafeCoerce)));
    }
    if (req2.content._1.tag === "Blob") {
      return send(notNull(req2.content._1._1));
    }
    if (req2.content._1.tag === "Document") {
      return send(notNull(req2.content._1._1));
    }
    if (req2.content._1.tag === "String") {
      return send(notNull(req2.content._1._1));
    }
    if (req2.content._1.tag === "FormData") {
      return send(notNull(req2.content._1._1));
    }
    if (req2.content._1.tag === "FormURLEncoded") {
      const $0 = encode(req2.content._1._1);
      if ($0.tag === "Just") {
        return send(notNull($0._1));
      }
      return _pure($Either("Left", $$$Error("RequestContentError", "Body contains values that cannot be encoded as application/x-www-form-urlencoded")));
    }
    if (req2.content._1.tag === "Json") {
      return send(notNull(stringify(req2.content._1._1)));
    }
  }
  fail();
};

// output-es/Affjax.Web/foreign.js
var driver = {
  newXHR: function() {
    return new XMLHttpRequest();
  },
  fixupUrl: function(url) {
    return url || "/";
  }
};

// output-es/File/index.js
var bindExceptT2 = /* @__PURE__ */ bindExceptT(monadAff);
var applicativeExceptT2 = /* @__PURE__ */ applicativeExceptT(monadAff);
var Folder = (x2) => x2;
var show4 = /* @__PURE__ */ showArrayImpl(showStringImpl);
var loadFileAff = {
  loadFileFromPath: (dictMonadError) => (dictMonadAff) => (v) => _bind(bindExceptT2.bind(dictMonadAff.liftAff(_bind(request(driver)({
    method: $Either("Left", HEAD),
    url: v,
    headers: [],
    content: Nothing,
    username: Nothing,
    password: Nothing,
    withCredentials: false,
    responseFormat: $ResponseFormat("String", identity28),
    timeout: Nothing
  }))((resp) => _pure((() => {
    if (resp.tag === "Right") {
      if (resp._1.status === 200) {
        return $Either("Right", $Tuple(resp._1, v));
      }
      return $Either("Left", RequestFailedError);
    }
    if (resp.tag === "Left") {
      return $Either("Left", resp._1);
    }
    fail();
  })()))))((v1) => {
    const $0 = v1._2;
    return bindExceptT2.bind(applicativeExceptT2.pure())(() => bindExceptT2.bind(dictMonadAff.liftAff(request(driver)({
      method: $Either("Left", GET),
      url: $0,
      headers: [],
      content: Nothing,
      username: Nothing,
      password: Nothing,
      withCredentials: false,
      responseFormat: $ResponseFormat("String", identity28),
      timeout: Nothing
    })))((contents) => applicativeExceptT2.pure(contents.body)));
  }))((result) => _pure((() => {
    if (result.tag === "Left") {
      return Nothing;
    }
    if (result.tag === "Right") {
      return $Maybe("Just", result._1);
    }
    fail();
  })()))
};
var prependFolder = (v) => (v1) => v + "/" + v1;
var loadFile = (dictLoadFile) => (dictMonad) => {
  const $0 = dictMonad.Applicative0();
  return (dictMonadError) => {
    const loadFileFromPath2 = dictLoadFile.loadFileFromPath(dictMonadError);
    return (dictMonadAff) => {
      const loadFileFromPath3 = loadFileFromPath2(dictMonadAff);
      return (folders) => (file) => {
        const paths = arrayApply(arrayMap(prependFolder)(folders))([file]);
        return dictMonad.Bind1().bind(foldM(dictMonad)((v) => (v1) => {
          if (v.tag === "Just") {
            return $0.pure($Maybe("Just", v._1));
          }
          if (v.tag === "Nothing") {
            return loadFileFromPath3(v1);
          }
          fail();
        })(Nothing)(paths))((result) => {
          if (result.tag === "Just") {
            return $0.pure(result._1);
          }
          if (result.tag === "Nothing") {
            return throwException(error("File not found in any path: " + show4(paths)))();
          }
          fail();
        });
      };
    };
  };
};

// output-es/Data.CodePoint.Unicode/index.js
var isUpper = (x2) => checkAttr([512, 524288])(x2);
var isSpace = (c) => {
  if (c <= 823) {
    return c === 32 || c >= 9 && c <= 13 || c === 160;
  }
  return checkAttrS([2])(c);
};
var isOctDigit = (c) => {
  const diff = c - 48 | 0;
  return diff <= 7 && diff >= 0;
};
var isLower = (x2) => checkAttr([4096])(x2);
var isDecDigit = (c) => {
  const diff = c - 48 | 0;
  return diff <= 9 && diff >= 0;
};
var isHexDigit = (c) => {
  const diff = c - 48 | 0;
  const diff$1 = c - 65 | 0;
  return diff <= 9 && diff >= 0 || (() => {
    const diff$2 = c - 97 | 0;
    return diff$1 <= 5 && diff$1 >= 0 || diff$2 <= 5 && diff$2 >= 0;
  })();
};
var isAlphaNum = (x2) => checkAttr([524288, 512, 4096, 1048576, 16384, 8388608, 4194304, 2097152, 131072, 256, 16777216])(x2);
var isAlpha = (x2) => checkAttr([4096, 512, 524288, 1048576, 16384])(x2);

// output-es/Parsing.Combinators.Array/index.js
var many2 = (p) => {
  const $0 = monadRecParserT.tailRecM((xs) => (v2, $02, $1, $2, $3) => {
    const $4 = v2._1;
    const $5 = v2._2;
    return $02((v3) => $02((v1) => p(
      $ParseState($4, $5, false),
      $02,
      $1,
      (v4, $6) => {
        const $7 = v4._3;
        return $02((v5) => {
          if ($7) {
            return $2(v4, $6);
          }
          return $3(v2, $Step("Done", xs));
        });
      },
      (state2, a) => $02((v2$1) => $3(state2, $Step("Loop", $List("Cons", a, xs))))
    )));
  })(Nil);
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => done(
      state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2,
      reverse(fromFoldableImpl(foldableList.foldr, a))
    ))
  ));
};

// output-es/Data.String.Regex/foreign.js
var regexImpl = function(left2) {
  return function(right2) {
    return function(s1) {
      return function(s2) {
        try {
          return right2(new RegExp(s1, s2));
        } catch (e) {
          return left2(e.message);
        }
      };
    };
  };
};
var _search = function(just) {
  return function(nothing) {
    return function(r) {
      return function(s) {
        var result = s.search(r);
        return result === -1 ? nothing : just(result);
      };
    };
  };
};

// output-es/Data.String.Regex/index.js
var search = /* @__PURE__ */ _search(Just)(Nothing);
var regex = (s) => (f) => regexImpl(Left)(Right)(s)((f.global ? "g" : "") + (f.ignoreCase ? "i" : "") + (f.multiline ? "m" : "") + (f.dotAll ? "s" : "") + (f.sticky ? "y" : "") + (f.unicode ? "u" : ""));

// output-es/Parsing.String/index.js
var updatePosSingle = (v) => (cp) => (after) => {
  if (cp === 10) {
    return { index: v.index + 1 | 0, line: v.line + 1 | 0, column: 1 };
  }
  if (cp === 13) {
    const v2 = codePointAt3(0)(after);
    if (v2.tag === "Just" && v2._1 === 10) {
      return { index: v.index + 1 | 0, line: v.line, column: v.column };
    }
    return { index: v.index + 1 | 0, line: v.line + 1 | 0, column: 1 };
  }
  if (cp === 9) {
    return { index: v.index + 1 | 0, line: v.line, column: (v.column + 8 | 0) - intMod(v.column - 1 | 0)(8) | 0 };
  }
  return { index: v.index + 1 | 0, line: v.line, column: v.column + 1 | 0 };
};
var updatePosString = (updatePosString$a0$copy) => (updatePosString$a1$copy) => (updatePosString$a2$copy) => {
  let updatePosString$a0 = updatePosString$a0$copy;
  let updatePosString$a1 = updatePosString$a1$copy;
  let updatePosString$a2 = updatePosString$a2$copy;
  let updatePosString$c = true;
  let updatePosString$r;
  while (updatePosString$c) {
    const pos = updatePosString$a0, before = updatePosString$a1, after = updatePosString$a2;
    const v = uncons(before);
    if (v.tag === "Nothing") {
      updatePosString$c = false;
      updatePosString$r = pos;
      continue;
    }
    if (v.tag === "Just") {
      updatePosString$a0 = v._1.tail === "" ? updatePosSingle(pos)(v._1.head)(after) : updatePosSingle(pos)(v._1.head)(v._1.tail);
      updatePosString$a1 = v._1.tail;
      updatePosString$a2 = after;
      continue;
    }
    fail();
  }
  return updatePosString$r;
};
var satisfy = (f) => (v, $0, $1, $2, $3) => {
  const v3 = uncons(v._1);
  if (v3.tag === "Nothing") {
    return $2(v, $ParseError("Unexpected EOF", v._2));
  }
  if (v3.tag === "Just") {
    if (v3._1.head < 0 || v3._1.head > 65535) {
      return $2(v, $ParseError("Expected Char", v._2));
    }
    if (v3._1.head >= 0 && v3._1.head <= 65535) {
      const ch = fromCharCode(v3._1.head);
      if (f(ch)) {
        return $3($ParseState(v3._1.tail, updatePosSingle(v._2)(v3._1.head)(v3._1.tail), true), ch);
      }
      return $2(v, $ParseError("Predicate unsatisfied", v._2));
    }
  }
  fail();
};
var eof2 = (v, $0, $1, $2, $3) => {
  if (v._1 === "") {
    return $3($ParseState(v._1, v._2, true), void 0);
  }
  return $2(v, $ParseError("Expected EOF", v._2));
};
var consumeWith = (f) => (v, $0, $1, $2, $3) => {
  const v3 = f(v._1);
  if (v3.tag === "Left") {
    return $2(v, $ParseError(v3._1, v._2));
  }
  if (v3.tag === "Right") {
    return $3($ParseState(v3._1.remainder, updatePosString(v._2)(v3._1.consumed)(v3._1.remainder), v3._1.consumed !== ""), v3._1.value);
  }
  fail();
};
var string3 = (str) => consumeWith((input) => {
  const v = stripPrefix(str)(input);
  if (v.tag === "Just") {
    return $Either("Right", { value: str, consumed: str, remainder: v._1 });
  }
  return $Either("Left", "Expected " + showStringImpl(str));
});
var $$char = (c) => withErrorMessage(satisfy((v) => v === c))(showCharImpl(c));

// output-es/Data.String.Regex.Flags/index.js
var noFlags = { global: false, ignoreCase: false, multiline: false, dotAll: false, sticky: false, unicode: false };

// output-es/Parsing.String.Basic/index.js
var show12 = /* @__PURE__ */ showArrayImpl(showCharImpl);
var satisfyCP = (p) => satisfy((x2) => p(toCharCode(x2)));
var upper2 = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isUpper))("uppercase letter");
var oneOf = (ss) => withLazyErrorMessage(satisfy((a) => elem(eqChar)(a)(ss)))((v) => "one of " + show12(ss));
var octDigit = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isOctDigit))("oct digit");
var lower3 = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isLower))("lowercase letter");
var letter = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isAlpha))("letter");
var hexDigit = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isHexDigit))("hex digit");
var digit = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isDecDigit))("digit");
var alphaNum = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isAlphaNum))("letter or digit");

// output-es/Parsing.Indent/index.js
var lift = (m) => (state1, v, lift$p, v1, done) => lift$p(bindStateT(monadIdentity).Apply0().Functor0().map((a) => (v2) => done(state1, a))(m));
var monadStateStateT2 = /* @__PURE__ */ monadStateStateT(monadIdentity);
var put$p = (p) => lift(monadStateStateT2.state((v) => $Tuple(void 0, p)));
var get$p = /* @__PURE__ */ (() => {
  const $0 = lift(monadStateStateT2.state((s) => $Tuple(s, s)));
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => done(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, a))
  ));
})();
var indented = (state1, more, lift12, $$throw2, done) => more((v1) => position(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => get$p(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => (a.column <= a$1.column ? fail2("not indented") : put$p({ index: 0, line: a.line, column: a$1.column }))(
        $0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
        more,
        lift12,
        $$throw2,
        done
      ))
    ));
  })
));
var sameLine = (state1, more, lift12, $$throw2, done) => more((v1) => position(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => get$p(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => (a.line === a$1.line ? ((state1$1, v, v1$2, v2$2, done$1) => done$1(state1$1, void 0)) : fail2("over one line"))(
        $0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
        more,
        lift12,
        $$throw2,
        done
      ))
    ));
  })
));
var sameOrIndented = (v2, $0, $1, $2, $3) => {
  const $4 = v2._1;
  const $5 = v2._2;
  return $0((v3) => sameLine(
    $ParseState($4, $5, false),
    $0,
    $1,
    (v4, $6) => {
      const $7 = v4._3;
      return $0((v5) => {
        if ($7) {
          return $2(v4, $6);
        }
        return indented(v2, $0, $1, $2, $3);
      });
    },
    $3
  ));
};
var withPos = (x2) => (state1, more, lift12, $$throw2, done) => more((v1) => get$p(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => position(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => {
        const $1 = $0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
        return more((v1$2) => more((v2$2) => more((v1$3) => put$p(a$1)(
          $1,
          more,
          lift12,
          $$throw2,
          (state2$2, a$2) => more((v2$3) => more((v3) => {
            const state2$p = $1._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
            return x2(
              state2$p,
              more,
              lift12,
              $$throw2,
              (state3, a$3) => more((v4) => {
                const $2 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
                return more((v2$4) => {
                  const $3 = $1._3 && !$2._3 ? $ParseState($2._1, $2._2, true) : $2;
                  return more((v2$5) => more((v1$4) => put$p(a)(
                    $3,
                    more,
                    lift12,
                    $$throw2,
                    (state2$3, a$4) => more((v2$6) => more((v3$1) => {
                      const state2$p$1 = $3._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                      return more((v4$1) => done(state2$p$1._3 && !state2$p$1._3 ? $ParseState(state2$p$1._1, state2$p$1._2, true) : state2$p$1, a$3));
                    }))
                  )));
                });
              })
            );
          }))
        ))));
      })
    ));
  })
));
var checkIndent = (state1, more, lift12, $$throw2, done) => more((v1) => position(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => get$p(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => (a.column === a$1.column ? ((state1$1, v, v1$2, v2$2, done$1) => done$1(state1$1, void 0)) : fail2("indentation doesn't match"))(
        $0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
        more,
        lift12,
        $$throw2,
        done
      ))
    ));
  })
));

// output-es/Parse.Parser/index.js
var lift2 = (m) => (state1, v, lift$p, v1, done) => lift$p(bindStateT(monadIdentity).Apply0().Functor0().map((a) => (v2) => done(state1, a))(m));
var put2 = /* @__PURE__ */ (() => {
  const $0 = monadStateStateT(monadIdentity);
  return (s) => $0.state((v) => $Tuple(void 0, s));
})();
var parseableString = { parse: string3 };
var parseableChar = { parse: $$char };
var whitespace = /* @__PURE__ */ skipMany(/* @__PURE__ */ (() => {
  const $0 = oneOf([" ", "	", "\n"]);
  const $1 = withErrorMessage(satisfy((v) => v === "#"))("'#'");
  const $2 = skipMany(satisfy((v) => v !== "\n"));
  return (v2, $3, $4, $5, $6) => {
    const $7 = v2._1;
    const $8 = v2._2;
    return $3((v3) => $3((v1) => $0(
      $ParseState($7, $8, false),
      $3,
      $4,
      (v4, $9) => {
        const $10 = v4._3;
        return $3((v5) => {
          if ($10) {
            return $5(v4, $9);
          }
          return $3((v2$1) => $3((v1$1) => $1(
            v2,
            $3,
            $4,
            $5,
            (state2, a) => $3((v2$2) => $3((v3$1) => {
              const state2$p = v2._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
              return $2(state2$p, $3, $4, $5, (state3, a$1) => $3((v4$1) => $6(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$1)));
            }))
          )));
        });
      },
      (state2, a) => $3((v2$1) => $6(state2, void 0))
    )));
  };
})());
var stringLetter = /* @__PURE__ */ satisfy((c) => c !== '"' && c !== "\\" && c > "");
var stringChar = /* @__PURE__ */ withErrorMessage((state1, more, lift12, $$throw2, done) => more((v1) => stringLetter(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => done(state2, $Maybe("Just", a)))
)))("string character");
var opChars = [":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~"];
var lexeme = (v) => (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => v(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2$1) => more((v3) => {
    const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return whitespace(state2$p, more, lift12, $$throw2, (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a)));
  }))
)));
var operator2 = /* @__PURE__ */ lexeme(/* @__PURE__ */ (() => {
  const $0 = some(alternativeParserT)(lazyParserT)(oneOf(opChars));
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => done(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, fromCharArray(a)))
  ));
})());
var reservedOperator = (expected) => (v1, $0, $1, $2, $3) => {
  const $4 = v1._3;
  return $0((v1$1) => operator2(
    v1,
    $0,
    $1,
    (v2, $5) => $2($ParseState(v2._1, v2._2, $4), $5),
    (state2, a) => $0((v2) => (expected !== a ? fail2("Expected `" + expected + "`, received `" + a + "`") : (state1, v, v1$2, v2$1, done) => done(state1, void 0))(
      v1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2,
      $0,
      $1,
      (v2$1, $5) => $2($ParseState(v2$1._1, v2$1._2, $4), $5),
      $3
    ))
  ));
};
var stringLiteral = /* @__PURE__ */ lexeme(/* @__PURE__ */ withErrorMessage(/* @__PURE__ */ (() => {
  const $0 = between(withErrorMessage(satisfy((v) => v === '"'))(`'"'`))(withErrorMessage(withErrorMessage(satisfy((v) => v === '"'))(`'"'`))("end of string"))(many2(stringChar));
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => done(
      state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2,
      fromCharArray(foldrArray((v) => (v1$1) => {
        if (v.tag === "Nothing") {
          return v1$1;
        }
        if (v.tag === "Just") {
          return [v._1, ...v1$1];
        }
        fail();
      })([])(a))
    ))
  ));
})())("literal string"));
var keywords = ["case", "def", "else", "for", "if", "import", "in", "lambda", "match"];
var unreserved = (p) => (state1, more, lift12, $$throw2, done) => more((v1) => p(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => (elem(eqString)(a)(keywords) ? fail2("Reserved identifier: " + a) : (state1$1, v, v1$1, v2$1, done$1) => done$1(state1$1, a))(
    state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2,
    more,
    lift12,
    $$throw2,
    done
  ))
));
var identifier = (start2) => (letter2) => lexeme((state1, more, lift12, $$throw2, done) => more((v1) => start2(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = many(alternativeParserT)(lazyParserT)(letter2);
    const $1 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => $0(
      $1,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => done(
        $1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
        singleton(a) + fromCharArray(a$1)
      ))
    ));
  })
)));
var reserved = (expected) => {
  const $0 = identifier((() => {
    const $02 = withErrorMessage(satisfy((v) => v === "_"))("'_'");
    return (v2, $1, $2, $3, $4) => {
      const $5 = v2._1;
      const $6 = v2._2;
      return $1((v3) => letter(
        $ParseState($5, $6, false),
        $1,
        $2,
        (v4, $7) => {
          const $8 = v4._3;
          return $1((v5) => {
            if ($8) {
              return $3(v4, $7);
            }
            return $02(v2, $1, $2, $3, $4);
          });
        },
        $4
      ));
    };
  })())((() => {
    const $02 = oneOf(["_", "'"]);
    return (v2, $1, $2, $3, $4) => {
      const $5 = v2._1;
      const $6 = v2._2;
      return $1((v3) => alphaNum(
        $ParseState($5, $6, false),
        $1,
        $2,
        (v4, $7) => {
          const $8 = v4._3;
          return $1((v5) => {
            if ($8) {
              return $3(v4, $7);
            }
            return $02(v2, $1, $2, $3, $4);
          });
        },
        $4
      ));
    };
  })());
  return (v1, $1, $2, $3, $4) => {
    const $5 = v1._3;
    return $1((v1$1) => $0(
      v1,
      $1,
      $2,
      (v2, $6) => $3($ParseState(v2._1, v2._2, $5), $6),
      (state2, a) => $1((v2) => (expected !== a ? fail2("Expected `" + expected + "`, received `" + a + "`") : (state1, v, v1$2, v2$1, done) => done(state1, void 0))(
        v1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2,
        $1,
        $2,
        (v2$1, $6) => $3($ParseState(v2$1._1, v2$1._2, $5), $6),
        $4
      ))
    ));
  };
};
var variable = /* @__PURE__ */ unreserved(/* @__PURE__ */ identifier(/* @__PURE__ */ (() => {
  const $0 = withErrorMessage(satisfy((v) => v === "_"))("'_'");
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => lower3(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $0(v2, $1, $2, $3, $4);
        });
      },
      $4
    ));
  };
})())(/* @__PURE__ */ (() => {
  const $0 = oneOf(["_", "'"]);
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => alphaNum(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $0(v2, $1, $2, $3, $4);
        });
      },
      $4
    ));
  };
})()));
var delim = (dictParseable) => (a) => {
  const $0 = lexeme(dictParseable.parse(a));
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(state1, more, lift12, $$throw2, (state2, a$1) => more((v2) => done(state2, void 0))));
};
var parens = /* @__PURE__ */ between(/* @__PURE__ */ delim(parseableChar)("("))(/* @__PURE__ */ delim(parseableChar)(")"));
var trailingCommas = (p) => sepEndBy(p)(delim(parseableChar)(","));
var fields = (key) => (val) => trailingCommas((state1, more, lift12, $$throw2, done) => more((v1) => key(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = delim(parseableChar)(":");
    const $1 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => $0(
      $1,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => {
        const $2 = $1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
        return more((v1$2) => val(
          $2,
          more,
          lift12,
          $$throw2,
          (state2$2, a$2) => more((v2$2) => done($2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, $Tuple(a, a$2)))
        ));
      })
    ));
  })
)));
var context = (s) => (p) => (state1, more, lift12, $$throw2, done) => more((v1) => position(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => p(
      $0,
      more,
      lift12,
      (state2$1, err) => $$throw2(
        state2$1,
        $ParseError(
          take(200)(err._1 + "\n " + s + " on line " + showIntImpl(a.line) + ", column " + showIntImpl(a.column)),
          err._2
        )
      ),
      done
    ));
  })
));
var constructor = /* @__PURE__ */ unreserved(/* @__PURE__ */ identifier(upper2)(/* @__PURE__ */ (() => {
  const $0 = oneOf(["_", "'"]);
  return (v2, $1, $2, $3, $4) => {
    const $5 = v2._1;
    const $6 = v2._2;
    return $1((v3) => alphaNum(
      $ParseState($5, $6, false),
      $1,
      $2,
      (v4, $7) => {
        const $8 = v4._3;
        return $1((v5) => {
          if ($8) {
            return $3(v4, $7);
          }
          return $0(v2, $1, $2, $3, $4);
        });
      },
      $4
    ));
  };
})()));
var commas1 = (p) => sepBy1(p)(delim(parseableChar)(","));
var commas2 = (p) => sepBy(p)(delim(parseableChar)(","));
var close = (dictParseable) => (a) => {
  const $0 = dictParseable.parse(a);
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a$1) => more((v2) => {
      const $1 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return more((v1$1) => position(
        $1,
        more,
        lift12,
        $$throw2,
        (state2$1, a$2) => more((v2$1) => {
          const $2 = lift2(put2(a$2));
          const $3 = $1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
          return more((v1$2) => $2(
            $3,
            more,
            lift12,
            $$throw2,
            (state2$2, a$3) => more((v2$2) => whitespace($3._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, more, lift12, $$throw2, done))
          ));
        })
      ));
    })
  ));
};
var brackets = /* @__PURE__ */ between(/* @__PURE__ */ delim(parseableChar)("["))(/* @__PURE__ */ delim(parseableChar)("]"));
var braces = /* @__PURE__ */ between(/* @__PURE__ */ delim(parseableChar)("{"))(/* @__PURE__ */ delim(parseableChar)("}"));
var block = (e) => {
  const $0 = delim(parseableChar)(":");
  return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => more((v2$1) => more((v1$1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2$2) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return sameOrIndented(
        state2$p,
        more,
        lift12,
        $$throw2,
        (state3, a$1) => more((v4) => {
          const $1 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
          return more((v2$3) => more((v3$1) => {
            const state2$p$1 = state1._3 && !$1._3 ? $ParseState($1._1, $1._2, true) : $1;
            return withPos(e)(
              state2$p$1,
              more,
              lift12,
              $$throw2,
              (state3$1, a$2) => more((v4$1) => done(state2$p$1._3 && !state3$1._3 ? $ParseState(state3$1._1, state3$1._2, true) : state3$1, a$2))
            );
          }));
        })
      );
    }))
  )))));
};
var align = (p) => (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => checkIndent(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2$1) => more((v3) => {
    const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return p(state2$p, more, lift12, $$throw2, (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$1)));
  }))
)));

// output-es/Parse.Number/index.js
var identity29 = (x2) => x2;
var sign2 = (dictRing) => {
  const $0 = withErrorMessage(satisfy((v) => v === "-"))("'-'");
  const zero3 = dictRing.Semiring0().zero;
  const $1 = withErrorMessage(satisfy((v) => v === "+"))("'+'");
  return (v2, $2, $3, $4, $5) => {
    const $6 = v2._1;
    const $7 = v2._2;
    return $2((v3) => $2((v1) => $0(
      $ParseState($6, $7, false),
      $2,
      $3,
      (v4, $8) => {
        const $9 = v4._3;
        return $2((v5) => {
          if ($9) {
            return $4(v4, $8);
          }
          const $10 = v2._1;
          const $11 = v2._2;
          return $2((v3$1) => $2((v1$1) => $1(
            $ParseState($10, $11, false),
            $2,
            $3,
            (v4$1, $12) => {
              const $13 = v4$1._3;
              return $2((v5$1) => {
                if ($13) {
                  return $4(v4$1, $12);
                }
                return $5(v2, identity29);
              });
            },
            (state2, a) => $2((v2$1) => $5(state2, identity29))
          )));
        });
      },
      (state2, a) => $2((v2$1) => $5(state2, (a$1) => dictRing.sub(zero3)(a$1)))
    )));
  };
};
var sign1 = /* @__PURE__ */ sign2(ringInt);
var number6 = (base2) => (baseDigit) => {
  const $0 = some(alternativeParserT)(lazyParserT)(baseDigit);
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => {
      const $1 = foldlArray((v) => (v1$1) => {
        if (v.tag === "Nothing") {
          return Nothing;
        }
        if (v.tag === "Just") {
          const $12 = toCharCode(v1$1);
          const hexUpper = $12 - 65 | 0;
          const hexLower = $12 - 97 | 0;
          const $2 = (() => {
            const dec2 = $12 - 48 | 0;
            if (dec2 <= 9 && dec2 >= 0) {
              return $Maybe("Just", dec2);
            }
            if (hexLower <= 5 && hexLower >= 0) {
              return $Maybe("Just", hexLower + 10 | 0);
            }
            if (hexUpper <= 5 && hexUpper >= 0) {
              return $Maybe("Just", hexUpper + 10 | 0);
            }
            return Nothing;
          })();
          if ($2.tag === "Just") {
            return $Maybe("Just", (base2 * v._1 | 0) + $2._1 | 0);
          }
          return Nothing;
        }
        fail();
      })($Maybe("Just", 0))(a);
      return (() => {
        if ($1.tag === "Nothing") {
          return fail2("not digits");
        }
        if ($1.tag === "Just") {
          const $2 = $1._1;
          return (state1$1, v, v1$1, v2$1, done$1) => done$1(state1$1, $2);
        }
        fail();
      })()(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, more, lift12, $$throw2, done);
    })
  ));
};
var octal = /* @__PURE__ */ (() => {
  const $0 = oneOf(["o", "O"]);
  const $1 = number6(8)(octDigit);
  return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2$1) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return $1(state2$p, more, lift12, $$throw2, (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$1)));
    }))
  )));
})();
var hexadecimal = /* @__PURE__ */ (() => {
  const $0 = oneOf(["x", "X"]);
  const $1 = number6(16)(hexDigit);
  return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2$1) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return $1(state2$p, more, lift12, $$throw2, (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$1)));
    }))
  )));
})();
var fraction = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ (() => {
  const $0 = withErrorMessage(satisfy((v) => v === "."))("'.'");
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => {
      const $1 = withErrorMessage(some(alternativeParserT)(lazyParserT)(digit))("fraction");
      const $2 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return more((v1$1) => $1(
        $2,
        more,
        lift12,
        $$throw2,
        (state2$1, a$1) => more((v2$1) => {
          const $3 = foldrArray((v) => (v1$2) => {
            if (v1$2.tag === "Nothing") {
              return Nothing;
            }
            if (v1$2.tag === "Just") {
              const $32 = toCharCode(v);
              const hexUpper = $32 - 65 | 0;
              const hexLower = $32 - 97 | 0;
              const dec2 = $32 - 48 | 0;
              if (dec2 <= 9 && dec2 >= 0) {
                return $Maybe("Just", (v1$2._1 + toNumber(dec2)) / 10);
              }
              if (hexLower <= 5 && hexLower >= 0) {
                return $Maybe("Just", (v1$2._1 + toNumber(hexLower + 10 | 0)) / 10);
              }
              if (hexUpper <= 5 && hexUpper >= 0) {
                return $Maybe("Just", (v1$2._1 + toNumber(hexUpper + 10 | 0)) / 10);
              }
              return Nothing;
            }
            fail();
          })($Maybe("Just", 0))(a$1);
          return (() => {
            if ($3.tag === "Nothing") {
              return fail2("not digit");
            }
            if ($3.tag === "Just") {
              const $4 = $3._1;
              return (state1$1, v, v1$2, v2$2, done$1) => done$1(state1$1, $4);
            }
            fail();
          })()($2._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, more, lift12, $$throw2, done);
        })
      ));
    })
  ));
})())("fraction");
var decimal = /* @__PURE__ */ number6(10)(digit);
var exponent$p = /* @__PURE__ */ (() => {
  const power = (e) => {
    if (e < 0) {
      return 1 / power(-e);
    }
    return pow(10)(toNumber(e));
  };
  const $0 = oneOf(["e", "E"]);
  return withErrorMessage((state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => {
      const $1 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return more((v1$1) => sign1(
        $1,
        more,
        lift12,
        $$throw2,
        (state2$1, a$1) => more((v2$1) => {
          const $2 = withErrorMessage(decimal)("exponent");
          const $3 = $1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
          return more((v1$2) => $2(
            $3,
            more,
            lift12,
            $$throw2,
            (state2$2, a$2) => more((v2$2) => done($3._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, power(a$1(a$2))))
          ));
        })
      ));
    })
  )))("exponent");
})();
var fractExponent = (n) => (v2, $0, $1, $2, $3) => {
  const $4 = v2._1;
  const $5 = v2._2;
  return $0((v3) => {
    const $6 = (v4, $62) => {
      const $7 = v4._3;
      return $0((v5) => {
        if ($7) {
          return $2(v4, $62);
        }
        return $0((v1) => exponent$p(
          v2,
          $0,
          $1,
          $2,
          (state2, a) => $0((v2$1) => $3(v2._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, toNumber(n) * a))
        ));
      });
    };
    return $0((v1) => fraction(
      $ParseState($4, $5, false),
      $0,
      $1,
      $6,
      (state2, a) => $0((v2$1) => $0((v1$1) => {
        const $7 = (state2$1, a$1) => $0((v2$2) => $3(state2._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, (toNumber(n) + a) * a$1));
        const $8 = state2._1;
        const $9 = state2._2;
        return $0((v3$1) => exponent$p(
          $ParseState($8, $9, false),
          $0,
          $1,
          (v4, $10) => {
            const $11 = v4._3;
            return $0((v5) => {
              if ($11) {
                return $6(v4, $10);
              }
              return $7(state2, 1);
            });
          },
          $7
        ));
      }))
    ));
  });
};
var floating = /* @__PURE__ */ (() => {
  const $0 = sign2(ringNumber);
  return (state1, more, lift12, $$throw2, done) => more((v1) => more((v1$1) => {
    const $1 = (state2, a) => more((v2) => {
      const $12 = (() => {
        if (a.tag === "Nothing") {
          return identity29;
        }
        if (a.tag === "Just") {
          return a._1;
        }
        fail();
      })();
      return more((v2$1) => {
        const $22 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
        return more((v1$2) => more((v1$3) => decimal(
          $22,
          more,
          lift12,
          $$throw2,
          (state2$1, a$1) => more((v2$2) => fractExponent(a$1)(
            $22._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
            more,
            lift12,
            $$throw2,
            (state2$2, a$2) => more((v2$3) => done($22._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, $12(a$2)))
          ))
        )));
      });
    });
    const $2 = state1._1;
    const $3 = state1._2;
    return more((v3) => more((v1$2) => $0(
      $ParseState($2, $3, false),
      more,
      lift12,
      (v4, $4) => {
        const $5 = v4._3;
        return more((v5) => {
          if ($5) {
            return $$throw2(v4, $4);
          }
          return $1(state1, Nothing);
        });
      },
      (state2, a) => more((v2) => $1(state2, $Maybe("Just", a)))
    )));
  }));
})();
var $$float = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ lexeme(floating))("float");
var zeroNumber = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ (() => {
  const $0 = withErrorMessage(satisfy((v) => v === "0"))("'0'");
  return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2$1) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      const $1 = (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$1));
      const $2 = state2$p._1;
      const $3 = state2$p._2;
      return more((v3$1) => hexadecimal(
        $ParseState($2, $3, false),
        more,
        lift12,
        (v4, $4) => {
          const $5 = v4._3;
          return more((v5) => {
            if ($5) {
              return $$throw2(v4, $4);
            }
            const $6 = state2$p._1;
            const $7 = state2$p._2;
            return more((v3$2) => octal(
              $ParseState($6, $7, false),
              more,
              lift12,
              (v4$1, $8) => {
                const $9 = v4$1._3;
                return more((v5$1) => {
                  if ($9) {
                    return $$throw2(v4$1, $8);
                  }
                  const $10 = state2$p._1;
                  const $11 = state2$p._2;
                  return more((v3$3) => decimal(
                    $ParseState($10, $11, false),
                    more,
                    lift12,
                    (v4$2, $12) => {
                      const $13 = v4$2._3;
                      return more((v5$2) => {
                        if ($13) {
                          return $$throw2(v4$2, $12);
                        }
                        return $1(state2$p, 0);
                      });
                    },
                    $1
                  ));
                });
              },
              $1
            ));
          });
        },
        $1
      ));
    }))
  )));
})())("");
var nat = (v2, $0, $1, $2, $3) => {
  const $4 = v2._1;
  const $5 = v2._2;
  return $0((v3) => zeroNumber(
    $ParseState($4, $5, false),
    $0,
    $1,
    (v4, $6) => {
      const $7 = v4._3;
      return $0((v5) => {
        if ($7) {
          return $2(v4, $6);
        }
        return decimal(v2, $0, $1, $2, $3);
      });
    },
    $3
  ));
};
var $$int2 = (state1, more, lift12, $$throw2, done) => more((v1) => lexeme(sign1)(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => nat(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => done($0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, a(a$1)))
    ));
  })
));
var integer = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ lexeme($$int2))("integer");

// output-es/Parse/index.js
var runParserT2 = /* @__PURE__ */ runParserT(/* @__PURE__ */ monadRecStateT(monadRecIdentity));
var choice3 = /* @__PURE__ */ choice(foldableArray);
var topLevel = (p) => (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => more((v2$1) => more((v1$1) => more((v2$2) => more((v1$2) => whitespace(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2$3) => more((v3) => {
    const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return withPos(p)(
      state2$p,
      more,
      lift12,
      $$throw2,
      (state3, a$1) => more((v4) => {
        const $0 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
        return more((v2$4) => more((v3$1) => {
          const state2$p$1 = state1._3 && !$0._3 ? $ParseState($0._1, $0._2, true) : $0;
          return whitespace(
            state2$p$1,
            more,
            lift12,
            $$throw2,
            (state3$1, a$2) => more((v4$1) => {
              const $1 = state2$p$1._3 && !state3$1._3 ? $ParseState(state3$1._1, state3$1._2, true) : state3$1;
              return more((v2$5) => more((v3$2) => {
                const state2$p$2 = state1._3 && !$1._3 ? $ParseState($1._1, $1._2, true) : $1;
                return eof2(
                  state2$p$2,
                  more,
                  lift12,
                  $$throw2,
                  (state3$2, a$3) => more((v4$2) => done(state2$p$2._3 && !state3$2._3 ? $ParseState(state3$2._1, state3$2._2, true) : state3$2, a$1))
                );
              }));
            })
          );
        }));
      })
    );
  }))
)))))));
var parse = (parser2) => (input) => {
  const $0 = runParserT2(input)(parser2)(initialPos)._1;
  if ($0.tag === "Left") {
    return $Either("Left", "ParseError on line " + showIntImpl($0._1._2.line) + ", column " + showIntImpl($0._1._2.column) + ":\n" + $0._1._1);
  }
  if ($0.tag === "Right") {
    return $Either("Right", $0._1);
  }
  fail();
};
var pConsOp = (state1, more, lift12, $$throw2, done) => more((v1) => reservedOperator(":|")(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => done(
    state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2,
    (e) => (e$p) => $Pattern("PConstr", ":", $List("Cons", e, $List("Cons", e$p, Nil)))
  ))
));
var simplePattern$lazy = /* @__PURE__ */ binding(() => {
  const $0 = lazyParserT.defer((v) => (state1, more, lift12, $$throw2, done) => more((v1) => braces(fields(variable)(pattern$lazy()))(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => done(state2, $Pattern("PRecord", a)))
  )));
  const $1 = lazyParserT.defer((v) => (state1, more, lift12, $$throw2, done) => more((v1) => brackets(trailingCommas(pattern$lazy()))(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => done(
      state2,
      (() => {
        if (a.tag === "Nil") {
          return PListEmpty;
        }
        if (a.tag === "Cons") {
          return $Pattern("PListNonEmpty", a._1, foldableList.foldr(PListNext)(PListEnd)(a._2));
        }
        fail();
      })()
    ))
  )));
  const $2 = delim(parseableChar)("(");
  return (v2, $3, $4, $5, $6) => {
    const $7 = v2._1;
    const $8 = v2._2;
    return $3((v3) => $3((v1) => variable(
      $ParseState($7, $8, false),
      $3,
      $4,
      (v4, $9) => {
        const $10 = v4._3;
        return $3((v5) => {
          if ($10) {
            return $5(v4, $9);
          }
          const $11 = v2._1;
          const $12 = v2._2;
          return $3((v3$1) => {
            const $13 = (v4$1, $132) => {
              const $14 = v4$1._3;
              return $3((v5$1) => {
                if ($14) {
                  return $5(v4$1, $132);
                }
                const $15 = v2._1;
                const $16 = v2._2;
                return $3((v3$2) => $0(
                  $ParseState($15, $16, false),
                  $3,
                  $4,
                  (v4$2, $17) => {
                    const $18 = v4$2._3;
                    return $3((v5$2) => {
                      if ($18) {
                        return $5(v4$2, $17);
                      }
                      const $19 = v2._1;
                      const $20 = v2._2;
                      return $3((v3$3) => $1(
                        $ParseState($19, $20, false),
                        $3,
                        $4,
                        (v4$3, $21) => {
                          const $22 = v4$3._3;
                          return $3((v5$3) => {
                            if ($22) {
                              return $5(v4$3, $21);
                            }
                            return $3((v1$1) => $2(
                              v2,
                              $3,
                              $4,
                              $5,
                              (state2, a) => $3((v2$1) => {
                                const $23 = v2._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                                return $3((v1$2) => pattern$lazy()(
                                  $23,
                                  $3,
                                  $4,
                                  $5,
                                  (state2$1, a$1) => $3((v2$2) => choice3([
                                    (() => {
                                      const $24 = delim(parseableChar)(")");
                                      return (state1, more, lift12, $$throw2, done) => more((v1$3) => $24(
                                        state1,
                                        more,
                                        lift12,
                                        $$throw2,
                                        (state2$2, a$2) => more((v2$3) => done(state1._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, a$1))
                                      ));
                                    })(),
                                    (() => {
                                      const $24 = delim(parseableChar)(",");
                                      return (state1, more, lift12, $$throw2, done) => more((v1$3) => $24(
                                        state1,
                                        more,
                                        lift12,
                                        $$throw2,
                                        (state2$2, a$2) => more((v2$3) => {
                                          const $25 = state1._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                                          return more((v1$4) => pattern$lazy()(
                                            $25,
                                            more,
                                            lift12,
                                            $$throw2,
                                            (state2$3, a$3) => more((v2$4) => {
                                              const $26 = delim(parseableChar)(")");
                                              const $27 = $25._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                                              return more((v1$5) => $26(
                                                $27,
                                                more,
                                                lift12,
                                                $$throw2,
                                                (state2$4, a$4) => more((v2$5) => done(
                                                  $27._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4,
                                                  $Pattern(
                                                    "PConstr",
                                                    "Pair",
                                                    $List("Cons", a$1, $List("Cons", a$3, Nil))
                                                  )
                                                ))
                                              ));
                                            })
                                          ));
                                        })
                                      ));
                                    })()
                                  ])($23._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, $3, $4, $5, $6))
                                ));
                              })
                            ));
                          });
                        },
                        $6
                      ));
                    });
                  },
                  $6
                ));
              });
            };
            return $3((v1$1) => constructor(
              $ParseState($11, $12, false),
              $3,
              $4,
              $13,
              (state2, a) => $3((v2$1) => $3((v1$2) => {
                const $14 = (state2$1, a$1) => $3((v2$2) => $6(
                  state2._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
                  $Pattern("PConstr", a, a$1)
                ));
                const $15 = state2._1;
                const $16 = state2._2;
                return $3((v3$2) => parens(commas2(simplePattern$lazy()))(
                  $ParseState($15, $16, false),
                  $3,
                  $4,
                  (v4$1, $17) => {
                    const $18 = v4$1._3;
                    return $3((v5$1) => {
                      if ($18) {
                        return $13(v4$1, $17);
                      }
                      return $14(state2, Nil);
                    });
                  },
                  $14
                ));
              }))
            ));
          });
        });
      },
      (state2, a) => $3((v2$1) => $6(state2, $Pattern("PVar", a)))
    )));
  };
});
var pattern$lazy = /* @__PURE__ */ binding(() => lazyParserT.defer((v) => foldlArray(makeParser)(simplePattern$lazy())([
  [$Operator("Infix", pConsOp, AssocRight)]
])));
var pattern = /* @__PURE__ */ pattern$lazy();
var infixFn = /* @__PURE__ */ (() => {
  const $0 = delim(parseableChar)("|");
  return (state1, more, lift12, $$throw2, done) => more((v1) => {
    const $1 = state1._3;
    return more((v2) => more((v1$1) => $0(
      state1,
      more,
      lift12,
      (v2$1, $2) => $$throw2($ParseState(v2$1._1, v2$1._2, $1), $2),
      (state2, a) => more((v2$1) => more((v3) => {
        const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
        return variable(
          state2$p,
          more,
          lift12,
          (v2$2, $2) => $$throw2($ParseState(v2$2._1, v2$2._2, $1), $2),
          (state3, a$1) => more((v4) => {
            const $2 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
            return more((v2$2) => {
              const $3 = delim(parseableChar)("|");
              const $4 = state1._3 && !$2._3 ? $ParseState($2._1, $2._2, true) : $2;
              return more((v1$2) => $3(
                $4,
                more,
                lift12,
                $$throw2,
                (state2$1, a$2) => more((v2$3) => done(
                  $4._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
                  (e) => (e$p) => $Expr2("BinaryApp", e, a$1, e$p)
                ))
              ));
            });
          })
        );
      }))
    )));
  });
})();
var imports_ = /* @__PURE__ */ manyRec2(/* @__PURE__ */ (() => {
  const $0 = reserved("import");
  const $1 = joinWith("/");
  const $2 = sepBy1(variable)(delim(parseableChar)("."));
  return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => more((v2$1) => more((v1$1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2$2) => more((v3) => {
      const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
      return more((v1$2) => $2(
        state2$p,
        more,
        lift12,
        $$throw2,
        (state2$1, a$1) => more((v2$3) => {
          const $3 = $1(fromFoldableImpl(foldableNonEmptyList.foldr, a$1));
          return more((v4) => {
            const $4 = state2$p._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
            return more((v2$4) => more((v3$1) => {
              const state2$p$1 = state1._3 && !$4._3 ? $ParseState($4._1, $4._2, true) : $4;
              return whitespace(
                state2$p$1,
                more,
                lift12,
                $$throw2,
                (state3, a$2) => more((v4$1) => done(state2$p$1._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, $3))
              );
            }));
          });
        })
      ));
    }))
  )))));
})());
var withImports = (p) => topLevel((state1, more, lift12, $$throw2, done) => more((v1) => imports_(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => {
    const $0 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
    return more((v1$1) => p(
      $0,
      more,
      lift12,
      $$throw2,
      (state2$1, a$1) => more((v2$1) => done($0._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, $Tuple(a$1, a)))
    ));
  })
)));
var consOp = (state1, more, lift12, $$throw2, done) => more((v1) => reservedOperator(":|")(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => done(
    state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2,
    (e) => (e$p) => $Expr2("Constr", void 0, ":", $List("Cons", e, $List("Cons", e$p, Nil)))
  ))
));
var binaryOp = (op) => (state1, more, lift12, $$throw2, done) => more((v1) => reservedOperator(op)(
  state1,
  more,
  lift12,
  $$throw2,
  (state2, a) => more((v2) => done(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, (e) => (e$p) => $Expr2("BinaryApp", e, op, e$p)))
));
var binaryOps = [
  [
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("!"), AssocLeft),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("**"), AssocRight)
  ],
  [
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("*"), AssocLeft),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("/"), AssocLeft)
  ],
  [
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("+"), AssocLeft),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("-"), AssocLeft)
  ],
  [/* @__PURE__ */ $Operator("Infix", consOp, AssocRight)],
  [/* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("++"), AssocRight)],
  [
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("=="), AssocNone),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("/="), AssocNone),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("<"), AssocLeft),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp(">"), AssocLeft),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp("<="), AssocLeft),
    /* @__PURE__ */ $Operator("Infix", /* @__PURE__ */ binaryOp(">="), AssocLeft)
  ],
  [/* @__PURE__ */ $Operator("Infix", infixFn, AssocLeft)]
];
var varDefs$lazy = /* @__PURE__ */ binding(() => many1((() => {
  const $0 = reserved("def");
  const $1 = delim(parseableChar)(":");
  return (state1, more, lift12, $$throw2, done) => more((v1) => {
    const $2 = state1._3;
    return more((v2) => more((v1$1) => more((v2$1) => more((v1$2) => $0(
      state1,
      more,
      lift12,
      (v2$2, $3) => $$throw2($ParseState(v2$2._1, v2$2._2, $2), $3),
      (state2, a) => more((v2$2) => more((v3) => {
        const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
        return pattern(
          state2$p,
          more,
          lift12,
          (v2$3, $3) => $$throw2($ParseState(v2$3._1, v2$3._2, $2), $3),
          (state3, a$1) => more((v4) => {
            const $3 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
            return more((v2$3) => more((v3$1) => {
              const state2$p$1 = state1._3 && !$3._3 ? $ParseState($3._1, $3._2, true) : $3;
              return $1(
                state2$p$1,
                more,
                lift12,
                (v2$4, $4) => $$throw2($ParseState(v2$4._1, v2$4._2, $2), $4),
                (state3$1, a$2) => more((v4$1) => {
                  const $4 = state2$p$1._3 && !state3$1._3 ? $ParseState(state3$1._1, state3$1._2, true) : state3$1;
                  return more((v2$4) => {
                    const $5 = state1._3 && !$4._3 ? $ParseState($4._1, $4._2, true) : $4;
                    return more((v1$3) => more((v2$5) => more((v1$4) => sameOrIndented(
                      $5,
                      more,
                      lift12,
                      $$throw2,
                      (state2$1, a$3) => more((v2$6) => more((v3$2) => {
                        const state2$p$2 = $5._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                        return withPos(expr$lazy())(
                          state2$p$2,
                          more,
                          lift12,
                          $$throw2,
                          (state3$2, a$4) => more((v4$2) => {
                            const $6 = state2$p$2._3 && !state3$2._3 ? $ParseState(state3$2._1, state3$2._2, true) : state3$2;
                            return more((v2$7) => done($5._3 && !$6._3 ? $ParseState($6._1, $6._2, true) : $6, $VarDef2(a$1, a$4)));
                          })
                        );
                      }))
                    ))));
                  });
                })
              );
            }));
          })
        );
      }))
    )))));
  });
})()));
var recDefs$lazy = /* @__PURE__ */ binding(() => many1((() => {
  const $0 = reserved("def");
  const $1 = delim(parseableChar)("(");
  return (state1, more, lift12, $$throw2, done) => more((v1) => {
    const $2 = state1._3;
    return more((v2) => more((v1$1) => more((v2$1) => more((v1$2) => $0(
      state1,
      more,
      lift12,
      (v2$2, $3) => $$throw2($ParseState(v2$2._1, v2$2._2, $2), $3),
      (state2, a) => more((v2$2) => more((v3) => {
        const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
        return variable(
          state2$p,
          more,
          lift12,
          (v2$3, $3) => $$throw2($ParseState(v2$3._1, v2$3._2, $2), $3),
          (state3, a$1) => more((v4) => {
            const $3 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
            return more((v2$3) => more((v3$1) => {
              const state2$p$1 = state1._3 && !$3._3 ? $ParseState($3._1, $3._2, true) : $3;
              return $1(
                state2$p$1,
                more,
                lift12,
                (v2$4, $4) => $$throw2($ParseState(v2$4._1, v2$4._2, $2), $4),
                (state3$1, a$2) => more((v4$1) => {
                  const $4 = state2$p$1._3 && !state3$1._3 ? $ParseState(state3$1._1, state3$1._2, true) : state3$1;
                  return more((v2$4) => {
                    const $5 = state1._3 && !$4._3 ? $ParseState($4._1, $4._2, true) : $4;
                    return more((v1$3) => commas1(pattern)(
                      $5,
                      more,
                      lift12,
                      $$throw2,
                      (state2$1, a$3) => more((v2$5) => {
                        const $6 = delim(parseableChar)(")");
                        const $7 = $5._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                        return more((v1$4) => $6(
                          $7,
                          more,
                          lift12,
                          $$throw2,
                          (state2$2, a$4) => more((v2$6) => {
                            const $8 = block(expr$lazy());
                            const $9 = $7._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                            return more((v1$5) => $8(
                              $9,
                              more,
                              lift12,
                              $$throw2,
                              (state2$3, a$5) => more((v2$7) => done(
                                $9._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3,
                                $Tuple(a$1, $Tuple(a$3, a$5))
                              ))
                            ));
                          })
                        ));
                      })
                    ));
                  });
                })
              );
            }));
          })
        );
      }))
    )))));
  });
})()));
var expr$lazy = /* @__PURE__ */ binding(() => {
  const opTree$lazy = binding(() => {
    const $0 = context("opTree")((() => {
      const chain = (e) => {
        const $02 = delim(parseableChar)(".");
        const $1 = delim(parseableChar)("[");
        const $2 = delim(parseableChar)("(");
        return (v2, $3, $4, $5, $6) => {
          const $7 = v2._1;
          const $8 = v2._2;
          return $3((v3) => {
            const $9 = (v4, $92) => {
              const $10 = v4._3;
              return $3((v5) => {
                if ($10) {
                  return $5(v4, $92);
                }
                return $6(v2, e);
              });
            };
            return $3((v2$1) => $3((v1) => sameOrIndented(
              $ParseState($7, $8, false),
              $3,
              $4,
              $9,
              (state2, a) => $3((v2$2) => $3((v3$1) => {
                const $10 = (state3, a$1) => $3((v4) => $6(state2._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a$1));
                const $11 = state2._1;
                const $12 = state2._2;
                return $3((v3$2) => {
                  const $13 = (v4, $132) => {
                    const $14 = v4._3;
                    return $3((v5) => {
                      if ($14) {
                        return $9(v4, $132);
                      }
                      const $15 = state2._1;
                      const $16 = state2._2;
                      return $3((v3$3) => {
                        const $17 = (v4$1, $172) => {
                          const $18 = v4$1._3;
                          return $3((v5$1) => {
                            if ($18) {
                              return $9(v4$1, $172);
                            }
                            return $3((v1$1) => $2(
                              state2,
                              $3,
                              $4,
                              $9,
                              (state2$1, a$1) => $3((v2$3) => {
                                const $19 = state2._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                                return $3((v1$2) => commas2(opTree$lazy())(
                                  $19,
                                  $3,
                                  $4,
                                  $9,
                                  (state2$2, a$2) => $3((v2$4) => {
                                    const $20 = close(parseableChar)(")");
                                    const $21 = $19._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                                    return $3((v1$3) => $20(
                                      $21,
                                      $3,
                                      $4,
                                      $9,
                                      (state2$3, a$3) => $3((v2$5) => (e.tag === "Constr" ? chain($Expr2(
                                        "Constr",
                                        e._1,
                                        e._2,
                                        foldableList.foldr(Cons)(foldableList.foldr(Cons)(Nil)(a$2))(e._3)
                                      )) : chain((() => {
                                        const go = (go$a0$copy) => (go$a1$copy) => {
                                          let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
                                          while (go$c) {
                                            const b = go$a0, v = go$a1;
                                            if (v.tag === "Nil") {
                                              go$c = false;
                                              go$r = b;
                                              continue;
                                            }
                                            if (v.tag === "Cons") {
                                              go$a0 = $Expr2("App", b, v._1);
                                              go$a1 = v._2;
                                              continue;
                                            }
                                            fail();
                                          }
                                          return go$r;
                                        };
                                        return go(e)(a$2);
                                      })()))($21._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3, $3, $4, $9, $10))
                                    ));
                                  })
                                ));
                              })
                            ));
                          });
                        };
                        return $3((v1$1) => $1(
                          $ParseState($15, $16, false),
                          $3,
                          $4,
                          $17,
                          (state2$1, a$1) => $3((v2$3) => $3((v1$2) => opTree$lazy()(
                            state2$1,
                            $3,
                            $4,
                            $17,
                            (state2$2, a$2) => $3((v2$4) => {
                              const $18 = close(parseableChar)("]");
                              const $19 = state2$1._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                              return $3((v1$3) => $18(
                                $19,
                                $3,
                                $4,
                                $17,
                                (state2$3, a$3) => $3((v2$5) => chain($Expr2("DProject", e, a$2))(
                                  $19._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3,
                                  $3,
                                  $4,
                                  $17,
                                  $10
                                ))
                              ));
                            })
                          )))
                        ));
                      });
                    });
                  };
                  return $3((v1$1) => $3((v1$2) => $02(
                    $ParseState($11, $12, false),
                    $3,
                    $4,
                    (v2$3, $14) => $13($ParseState(v2$3._1, v2$3._2, false), $14),
                    (state2$1, a$1) => $3((v2$3) => variable(
                      state2$1,
                      $3,
                      $4,
                      (v2$4, $14) => $13($ParseState(v2$4._1, v2$4._2, false), $14),
                      (state2$2, a$2) => $3((v2$4) => chain($Expr2("Project", e, a$2))(state2$2, $3, $4, $13, $10))
                    ))
                  )));
                });
              }))
            )));
          });
        };
      };
      return foldlArray(makeParser)(withPos((() => {
        const $02 = context("simple")((() => {
          const $03 = context("letExpr")((() => {
            const $04 = many1((() => {
              const $05 = reserved("def");
              const $12 = delim(parseableChar)(":");
              return (state1, more, lift12, $$throw2, done) => more((v1) => {
                const $22 = state1._3;
                return more((v2) => more((v1$1) => more((v2$1) => more((v1$2) => $05(
                  state1,
                  more,
                  lift12,
                  (v2$2, $32) => $$throw2($ParseState(v2$2._1, v2$2._2, $22), $32),
                  (state2, a) => more((v2$2) => more((v3) => {
                    const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                    return pattern(
                      state2$p,
                      more,
                      lift12,
                      (v2$3, $32) => $$throw2($ParseState(v2$3._1, v2$3._2, $22), $32),
                      (state3, a$1) => more((v4) => {
                        const $32 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
                        return more((v2$3) => more((v3$1) => {
                          const state2$p$1 = state1._3 && !$32._3 ? $ParseState($32._1, $32._2, true) : $32;
                          return $12(
                            state2$p$1,
                            more,
                            lift12,
                            (v2$4, $42) => $$throw2($ParseState(v2$4._1, v2$4._2, $22), $42),
                            (state3$1, a$2) => more((v4$1) => {
                              const $42 = state2$p$1._3 && !state3$1._3 ? $ParseState(state3$1._1, state3$1._2, true) : state3$1;
                              return more((v2$4) => {
                                const $52 = state1._3 && !$42._3 ? $ParseState($42._1, $42._2, true) : $42;
                                return more((v1$3) => opTree$lazy()(
                                  $52,
                                  more,
                                  lift12,
                                  $$throw2,
                                  (state2$1, a$3) => more((v2$5) => {
                                    const $62 = delim(parseableChar)(";");
                                    const $72 = $52._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                                    return more((v1$4) => $62(
                                      $72,
                                      more,
                                      lift12,
                                      $$throw2,
                                      (state2$2, a$4) => more((v2$6) => done(
                                        $72._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2,
                                        $VarDef2(a$1, a$3)
                                      ))
                                    ));
                                  })
                                ));
                              });
                            })
                          );
                        }));
                      })
                    );
                  }))
                )))));
              });
            })());
            return (state1, more, lift12, $$throw2, done) => more((v1) => $04(
              state1,
              more,
              lift12,
              $$throw2,
              (state2, a) => more((v2) => {
                const $12 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                return more((v1$1) => opTree$lazy()(
                  $12,
                  more,
                  lift12,
                  $$throw2,
                  (state2$1, a$1) => more((v2$1) => done($12._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, $Expr2("Let", a, a$1)))
                ));
              })
            ));
          })());
          const $1 = context("letRecExpr")((() => {
            const $12 = many1((() => {
              const $13 = reserved("def");
              const $22 = delim(parseableChar)("(");
              return (state1, more, lift12, $$throw2, done) => more((v1) => {
                const $32 = state1._3;
                return more((v2) => more((v1$1) => more((v2$1) => more((v1$2) => $13(
                  state1,
                  more,
                  lift12,
                  (v2$2, $42) => $$throw2($ParseState(v2$2._1, v2$2._2, $32), $42),
                  (state2, a) => more((v2$2) => more((v3) => {
                    const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                    return variable(
                      state2$p,
                      more,
                      lift12,
                      (v2$3, $42) => $$throw2($ParseState(v2$3._1, v2$3._2, $32), $42),
                      (state3, a$1) => more((v4) => {
                        const $42 = state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3;
                        return more((v2$3) => more((v3$1) => {
                          const state2$p$1 = state1._3 && !$42._3 ? $ParseState($42._1, $42._2, true) : $42;
                          return $22(
                            state2$p$1,
                            more,
                            lift12,
                            (v2$4, $52) => $$throw2($ParseState(v2$4._1, v2$4._2, $32), $52),
                            (state3$1, a$2) => more((v4$1) => {
                              const $52 = state2$p$1._3 && !state3$1._3 ? $ParseState(state3$1._1, state3$1._2, true) : state3$1;
                              return more((v2$4) => {
                                const $62 = state1._3 && !$52._3 ? $ParseState($52._1, $52._2, true) : $52;
                                return more((v1$3) => commas1(pattern)(
                                  $62,
                                  more,
                                  lift12,
                                  $$throw2,
                                  (state2$1, a$3) => more((v2$5) => {
                                    const $72 = delim(parseableChar)(")");
                                    const $8 = $62._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                                    return more((v1$4) => $72(
                                      $8,
                                      more,
                                      lift12,
                                      $$throw2,
                                      (state2$2, a$4) => more((v2$6) => {
                                        const $9 = delim(parseableChar)(":");
                                        const $10 = $8._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                                        return more((v1$5) => $9(
                                          $10,
                                          more,
                                          lift12,
                                          $$throw2,
                                          (state2$3, a$5) => more((v2$7) => {
                                            const $11 = $10._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                                            return more((v1$6) => opTree$lazy()(
                                              $11,
                                              more,
                                              lift12,
                                              $$throw2,
                                              (state2$4, a$6) => more((v2$8) => {
                                                const $122 = delim(parseableChar)(";");
                                                const $132 = $11._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4;
                                                return more((v1$7) => $122(
                                                  $132,
                                                  more,
                                                  lift12,
                                                  $$throw2,
                                                  (state2$5, a$7) => more((v2$9) => done(
                                                    $132._3 && !state2$5._3 ? $ParseState(state2$5._1, state2$5._2, true) : state2$5,
                                                    $Tuple(a$1, $Tuple(a$3, a$6))
                                                  ))
                                                ));
                                              })
                                            ));
                                          })
                                        ));
                                      })
                                    ));
                                  })
                                ));
                              });
                            })
                          );
                        }));
                      })
                    );
                  }))
                )))));
              });
            })());
            return (state1, more, lift12, $$throw2, done) => more((v1) => $12(
              state1,
              more,
              lift12,
              $$throw2,
              (state2, a) => more((v2) => {
                const $22 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                return more((v1$1) => opTree$lazy()(
                  $22,
                  more,
                  lift12,
                  $$throw2,
                  (state2$1, a$1) => more((v2$1) => done($22._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, $Expr2("LetRec", a, a$1)))
                ));
              })
            ));
          })());
          const $2 = context("matrix")((() => {
            const $22 = delim(parseableString)("[|");
            return (state1, more, lift12, $$throw2, done) => more((v1) => $22(
              state1,
              more,
              lift12,
              $$throw2,
              (state2, a) => more((v2) => {
                const $32 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                return more((v1$1) => opTree$lazy()(
                  $32,
                  more,
                  lift12,
                  $$throw2,
                  (state2$1, a$1) => more((v2$1) => {
                    const $42 = reserved("for");
                    const $52 = $32._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                    return more((v1$2) => $42(
                      $52,
                      more,
                      lift12,
                      $$throw2,
                      (state2$2, a$2) => more((v2$2) => {
                        const $62 = delim(parseableChar)("(");
                        const $72 = $52._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                        return more((v1$3) => $62(
                          $72,
                          more,
                          lift12,
                          $$throw2,
                          (state2$3, a$3) => more((v2$3) => {
                            const $8 = $72._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                            return more((v1$4) => variable(
                              $8,
                              more,
                              lift12,
                              $$throw2,
                              (state2$4, a$4) => more((v2$4) => {
                                const $9 = delim(parseableChar)(",");
                                const $10 = $8._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4;
                                return more((v1$5) => $9(
                                  $10,
                                  more,
                                  lift12,
                                  $$throw2,
                                  (state2$5, a$5) => more((v2$5) => {
                                    const $11 = $10._3 && !state2$5._3 ? $ParseState(state2$5._1, state2$5._2, true) : state2$5;
                                    return more((v1$6) => variable(
                                      $11,
                                      more,
                                      lift12,
                                      $$throw2,
                                      (state2$6, a$6) => more((v2$6) => {
                                        const $12 = delim(parseableChar)(")");
                                        const $13 = $11._3 && !state2$6._3 ? $ParseState(state2$6._1, state2$6._2, true) : state2$6;
                                        return more((v1$7) => $12(
                                          $13,
                                          more,
                                          lift12,
                                          $$throw2,
                                          (state2$7, a$7) => more((v2$7) => {
                                            const $14 = reserved("in");
                                            const $15 = $13._3 && !state2$7._3 ? $ParseState(state2$7._1, state2$7._2, true) : state2$7;
                                            return more((v1$8) => $14(
                                              $15,
                                              more,
                                              lift12,
                                              $$throw2,
                                              (state2$8, a$8) => more((v2$8) => {
                                                const $16 = $15._3 && !state2$8._3 ? $ParseState(state2$8._1, state2$8._2, true) : state2$8;
                                                return more((v1$9) => opTree$lazy()(
                                                  $16,
                                                  more,
                                                  lift12,
                                                  $$throw2,
                                                  (state2$9, a$9) => more((v2$9) => {
                                                    const $17 = delim(parseableString)("|]");
                                                    const $18 = $16._3 && !state2$9._3 ? $ParseState(state2$9._1, state2$9._2, true) : state2$9;
                                                    return more((v1$10) => $17(
                                                      $18,
                                                      more,
                                                      lift12,
                                                      $$throw2,
                                                      (state2$10, a$10) => more((v2$10) => done(
                                                        $18._3 && !state2$10._3 ? $ParseState(state2$10._1, state2$10._2, true) : state2$10,
                                                        $Expr2("Matrix", void 0, a$1, $Tuple(a$4, a$6), a$9)
                                                      ))
                                                    ));
                                                  })
                                                ));
                                              })
                                            ));
                                          })
                                        ));
                                      })
                                    ));
                                  })
                                ));
                              })
                            ));
                          })
                        ));
                      })
                    ));
                  })
                ));
              })
            ));
          })());
          const $3 = context("brackets")((() => {
            const $32 = delim(parseableChar)("[");
            return (state1, more, lift12, $$throw2, done) => more((v1) => $32(
              state1,
              more,
              lift12,
              $$throw2,
              (state2, a) => more((v2) => choice3([
                (() => {
                  const $42 = close(parseableChar)("]");
                  return (state1$1, more$1, lift1$1, throw$1, done$1) => more$1((v1$1) => $42(
                    state1$1,
                    more$1,
                    lift1$1,
                    throw$1,
                    (state2$1, a$1) => more$1((v2$1) => done$1(
                      state1$1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1,
                      $Expr2("ListEmpty", void 0)
                    ))
                  ));
                })(),
                (state1$1, more$1, lift1$1, throw$1, done$1) => more$1((v1$1) => opTree$lazy()(
                  state1$1,
                  more$1,
                  lift1$1,
                  throw$1,
                  (state2$1, a$1) => more$1((v2$1) => choice3([
                    context("listNonEmpty")((() => {
                      const $42 = delim(parseableChar)(",");
                      return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $42(
                        state1$2,
                        more$2,
                        lift1$2,
                        throw$2,
                        (state2$2, a$2) => more$2((v2$2) => {
                          const $52 = state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                          return more$2((v1$3) => trailingCommas(opTree$lazy())(
                            $52,
                            more$2,
                            lift1$2,
                            throw$2,
                            (state2$3, a$3) => more$2((v2$3) => {
                              const $62 = close(parseableChar)("]");
                              const $72 = $52._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                              return more$2((v1$4) => $62(
                                $72,
                                more$2,
                                lift1$2,
                                throw$2,
                                (state2$4, a$4) => more$2((v2$4) => done$2(
                                  $72._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4,
                                  $Expr2("ListNonEmpty", void 0, a$1, foldableList.foldr(Next())($ListRest("End", void 0))(a$3))
                                ))
                              ));
                            })
                          ));
                        })
                      ));
                    })()),
                    (() => {
                      const $42 = close(parseableChar)("]");
                      return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $42(
                        state1$2,
                        more$2,
                        lift1$2,
                        throw$2,
                        (state2$2, a$2) => more$2((v2$2) => done$2(
                          state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2,
                          $Expr2("ListNonEmpty", void 0, a$1, $ListRest("End", void 0))
                        ))
                      ));
                    })(),
                    context("listEnum")((() => {
                      const $42 = delim(parseableString)("..");
                      return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $42(
                        state1$2,
                        more$2,
                        lift1$2,
                        throw$2,
                        (state2$2, a$2) => more$2((v2$2) => {
                          const $52 = state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                          return more$2((v1$3) => opTree$lazy()(
                            $52,
                            more$2,
                            lift1$2,
                            throw$2,
                            (state2$3, a$3) => more$2((v2$3) => {
                              const $62 = close(parseableChar)("]");
                              const $72 = $52._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                              return more$2((v1$4) => $62(
                                $72,
                                more$2,
                                lift1$2,
                                throw$2,
                                (state2$4, a$4) => more$2((v2$4) => done$2(
                                  $72._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4,
                                  $Expr2("ListEnum", a$1, a$3)
                                ))
                              ));
                            })
                          ));
                        })
                      ));
                    })()),
                    context("listComp")((() => {
                      const $42 = many1(choice3([
                        context("listCompGuard")((() => {
                          const $43 = reserved("if");
                          return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $43(
                            state1$2,
                            more$2,
                            lift1$2,
                            throw$2,
                            (state2$2, a$2) => more$2((v2$2) => {
                              const $52 = state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                              return more$2((v1$3) => opTree$lazy()(
                                $52,
                                more$2,
                                lift1$2,
                                throw$2,
                                (state2$3, a$3) => more$2((v2$3) => done$2(
                                  $52._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3,
                                  $Qualifier("ListCompGuard", a$3)
                                ))
                              ));
                            })
                          ));
                        })()),
                        (() => {
                          const $43 = reserved("for");
                          return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $43(
                            state1$2,
                            more$2,
                            lift1$2,
                            throw$2,
                            (state2$2, a$2) => more$2((v2$2) => {
                              const $52 = state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                              return more$2((v1$3) => pattern(
                                $52,
                                more$2,
                                lift1$2,
                                throw$2,
                                (state2$3, a$3) => more$2((v2$3) => {
                                  const $62 = reserved("in");
                                  const $72 = $52._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                                  return more$2((v1$4) => $62(
                                    $72,
                                    more$2,
                                    lift1$2,
                                    throw$2,
                                    (state2$4, a$4) => more$2((v2$4) => choice3([
                                      context("listCompDecl")((() => {
                                        const $8 = delim(parseableChar)("[");
                                        return (v1$5, $9, $10, $11, $12) => {
                                          const $13 = v1$5._3;
                                          return $9((v1$6) => $8(
                                            v1$5,
                                            $9,
                                            $10,
                                            (v2$5, $14) => $11($ParseState(v2$5._1, v2$5._2, $13), $14),
                                            (state2$5, a$5) => $9((v2$5) => {
                                              const $14 = v1$5._3 && !state2$5._3 ? $ParseState(state2$5._1, state2$5._2, true) : state2$5;
                                              return $9((v1$7) => opTree$lazy()(
                                                $14,
                                                $9,
                                                $10,
                                                (v2$6, $15) => $11($ParseState(v2$6._1, v2$6._2, $13), $15),
                                                (state2$6, a$6) => $9((v2$6) => {
                                                  const $15 = delim(parseableChar)("]");
                                                  const $16 = $14._3 && !state2$6._3 ? $ParseState(state2$6._1, state2$6._2, true) : state2$6;
                                                  return $9((v1$8) => $15(
                                                    $16,
                                                    $9,
                                                    $10,
                                                    (v2$7, $17) => $11($ParseState(v2$7._1, v2$7._2, $13), $17),
                                                    (state2$7, a$7) => $9((v2$7) => $12(
                                                      $16._3 && !state2$7._3 ? $ParseState(state2$7._1, state2$7._2, true) : state2$7,
                                                      $Qualifier("ListCompDecl", $VarDef2(a$3, a$6))
                                                    ))
                                                  ));
                                                })
                                              ));
                                            })
                                          ));
                                        };
                                      })()),
                                      context("listCompGen")((state1$3, more$3, lift1$3, throw$3, done$3) => more$3((v1$5) => opTree$lazy()(
                                        state1$3,
                                        more$3,
                                        lift1$3,
                                        throw$3,
                                        (state2$5, a$5) => more$3((v2$5) => done$3(
                                          state1$3._3 && !state2$5._3 ? $ParseState(state2$5._1, state2$5._2, true) : state2$5,
                                          $Qualifier("ListCompGen", a$3, a$5)
                                        ))
                                      )))
                                    ])($72._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4, more$2, lift1$2, throw$2, done$2))
                                  ));
                                })
                              ));
                            })
                          ));
                        })()
                      ]));
                      return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $42(
                        state1$2,
                        more$2,
                        lift1$2,
                        throw$2,
                        (state2$2, a$2) => more$2((v2$2) => {
                          const $52 = close(parseableChar)("]");
                          const $62 = state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                          return more$2((v1$3) => $52(
                            $62,
                            more$2,
                            lift1$2,
                            throw$2,
                            (state2$3, a$3) => more$2((v2$3) => done$2(
                              $62._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3,
                              $Expr2("ListComp", void 0, a$1, $List("Cons", a$2._1, a$2._2))
                            ))
                          ));
                        })
                      ));
                    })()),
                    fail2("Expected `]")
                  ])(state1$1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, more$1, lift1$1, throw$1, done$1))
                )),
                fail2("Expected `]` or a list expression after `[`")
              ])(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, more, lift12, $$throw2, done))
            ));
          })());
          const $4 = context("lambda")((() => {
            const $42 = reserved("lambda");
            return (state1, more, lift12, $$throw2, done) => more((v1) => $42(
              state1,
              more,
              lift12,
              $$throw2,
              (state2, a) => more((v2) => {
                const $52 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                return more((v1$1) => commas1(pattern)(
                  $52,
                  more,
                  lift12,
                  $$throw2,
                  (state2$1, a$1) => more((v2$1) => {
                    const $62 = delim(parseableChar)(":");
                    const $72 = $52._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                    return more((v1$2) => $62(
                      $72,
                      more,
                      lift12,
                      $$throw2,
                      (state2$2, a$2) => more((v2$2) => {
                        const $8 = $72._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                        return more((v1$3) => opTree$lazy()(
                          $8,
                          more,
                          lift12,
                          $$throw2,
                          (state2$3, a$3) => more((v2$3) => done(
                            $8._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3,
                            $Expr2("Lambda", nonEmptyListNonEmptyList.nonEmpty($List("Cons", $Tuple(a$1, a$3), Nil)))
                          ))
                        ));
                      })
                    ));
                  })
                ));
              })
            ));
          })());
          const $5 = VarKey();
          const exprKey = lazyParserT.defer((v) => (state1, more, lift12, $$throw2, done) => more((v1) => brackets(opTree$lazy())(
            state1,
            more,
            lift12,
            $$throw2,
            (state2, a) => more((v2) => done(state2, $DictEntry("ExprKey", a)))
          )));
          const $6 = context("dict")((() => {
            const $62 = delim(parseableChar)("{");
            return (state1, more, lift12, $$throw2, done) => more((v1) => $62(
              state1,
              more,
              lift12,
              $$throw2,
              (state2, a) => more((v2) => {
                const $72 = fields((v2$1, $73, $82, $9, $10) => {
                  const $11 = v2$1._1;
                  const $12 = v2$1._2;
                  return $73((v3) => exprKey(
                    $ParseState($11, $12, false),
                    $73,
                    $82,
                    (v4, $13) => {
                      const $14 = v4._3;
                      return $73((v5) => {
                        if ($14) {
                          return $9(v4, $13);
                        }
                        return $73((v1$1) => variable(v2$1, $73, $82, $9, (state2$1, a$1) => $73((v2$2) => $10(state2$1, $5(a$1)))));
                      });
                    },
                    $10
                  ));
                })(expr$lazy());
                const $8 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                return more((v1$1) => $72(
                  $8,
                  more,
                  lift12,
                  $$throw2,
                  (state2$1, a$1) => more((v2$1) => {
                    const $9 = close(parseableChar)("}");
                    const $10 = $8._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                    return more((v1$2) => $9(
                      $10,
                      more,
                      lift12,
                      $$throw2,
                      (state2$2, a$2) => more((v2$2) => done(
                        $10._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2,
                        $Expr2("Dictionary", void 0, a$1)
                      ))
                    ));
                  })
                ));
              })
            ));
          })());
          const $7 = (() => {
            const $72 = some(alternativeParserT)(lazyParserT)(satisfy((c) => c !== '"' && c !== "{" && !isSpace(toCharCode(c))));
            const $8 = (() => {
              const $82 = lazyParserT.defer((v) => (state1, more, lift12, $$throw2, done) => more((v1) => braces(opTree$lazy())(
                state1,
                more,
                lift12,
                $$throw2,
                (state2, a) => more((v2) => done(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, $ParagraphElem("Unquote", a)))
              )));
              const $9 = (() => {
                const $92 = delim(parseableString)('f"""');
                const $10 = (() => {
                  const $102 = Str();
                  const $11 = (() => {
                    const $112 = Constr2();
                    const $12 = context("parens")((() => {
                      const $122 = delim(parseableChar)("(");
                      return (state1, more, lift12, $$throw2, done) => more((v1) => $122(
                        state1,
                        more,
                        lift12,
                        $$throw2,
                        (state2, a) => more((v2) => choice3([
                          (state1$1, more$1, lift1$1, throw$1, done$1) => more$1((v1$1) => operator2(
                            state1$1,
                            more$1,
                            lift1$1,
                            throw$1,
                            (state2$1, a$1) => more$1((v2$1) => {
                              const $132 = close(parseableChar)(")");
                              const $142 = state1$1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                              return more$1((v1$2) => $132(
                                $142,
                                more$1,
                                lift1$1,
                                throw$1,
                                (state2$2, a$2) => more$1((v2$2) => done$1(
                                  $142._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2,
                                  $Expr2("Op", a$1)
                                ))
                              ));
                            })
                          )),
                          (state1$1, more$1, lift1$1, throw$1, done$1) => more$1((v1$1) => opTree$lazy()(
                            state1$1,
                            more$1,
                            lift1$1,
                            throw$1,
                            (state2$1, a$1) => more$1((v2$1) => choice3([
                              (() => {
                                const $132 = close(parseableChar)(")");
                                return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $132(
                                  state1$2,
                                  more$2,
                                  lift1$2,
                                  throw$2,
                                  (state2$2, a$2) => more$2((v2$2) => done$2(state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, a$1))
                                ));
                              })(),
                              (() => {
                                const $132 = delim(parseableChar)(",");
                                return (state1$2, more$2, lift1$2, throw$2, done$2) => more$2((v1$2) => $132(
                                  state1$2,
                                  more$2,
                                  lift1$2,
                                  throw$2,
                                  (state2$2, a$2) => more$2((v2$2) => {
                                    const $142 = state1$2._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                                    return more$2((v1$3) => opTree$lazy()(
                                      $142,
                                      more$2,
                                      lift1$2,
                                      throw$2,
                                      (state2$3, a$3) => more$2((v2$3) => {
                                        const $15 = close(parseableChar)(")");
                                        const $16 = $142._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                                        return more$2((v1$4) => $15(
                                          $16,
                                          more$2,
                                          lift1$2,
                                          throw$2,
                                          (state2$4, a$4) => more$2((v2$4) => done$2(
                                            $16._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4,
                                            $Expr2(
                                              "Constr",
                                              void 0,
                                              "Pair",
                                              $List("Cons", a$1, $List("Cons", a$3, Nil))
                                            )
                                          ))
                                        ));
                                      })
                                    ));
                                  })
                                ));
                              })(),
                              fail2("Expected `)` or `,` after `(expr`")
                            ])(state1$1._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, more$1, lift1$1, throw$1, done$1))
                          )),
                          fail2("Expected `op` or `expr` after `(`")
                        ])(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, more, lift12, $$throw2, done))
                      ));
                    })());
                    const $13 = context("doc expr")((() => {
                      const $132 = delim(parseableString)("@doc");
                      return (state1, more, lift12, $$throw2, done) => more((v1) => $132(
                        state1,
                        more,
                        lift12,
                        $$throw2,
                        (state2, a) => more((v2) => {
                          const $142 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
                          return more((v1$1) => parens(opTree$lazy())(
                            $142,
                            more,
                            lift12,
                            $$throw2,
                            (state2$1, a$1) => more((v2$1) => {
                              const $15 = $142._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                              return more((v1$2) => opTree$lazy()(
                                $15,
                                more,
                                lift12,
                                $$throw2,
                                (state2$2, a$2) => more((v2$2) => done(
                                  $15._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2,
                                  $Expr2("DocExpr", a$1, a$2)
                                ))
                              ));
                            })
                          ));
                        })
                      ));
                    })());
                    const $14 = (() => {
                      const $142 = withErrorMessage((() => {
                        const $143 = Float();
                        const $15 = Int();
                        return (v2, $16, $17, $18, $19) => {
                          const $20 = v2._1;
                          const $21 = v2._2;
                          return $16((v3) => $16((v1) => $$float(
                            $ParseState($20, $21, false),
                            $16,
                            $17,
                            (v2$1, $22) => $16((v5) => $16((v1$1) => integer(v2, $16, $17, $18, (state2, a) => $16((v2$2) => $19(state2, $15(a)))))),
                            (state2, a) => $16((v2$1) => $19(state2, $143(a)))
                          )));
                        };
                      })())("simple expression");
                      return (v2, $15, $16, $17, $18) => {
                        const $19 = v2._1;
                        const $20 = v2._2;
                        return $15((v3) => {
                          const $21 = (v4, $212) => {
                            const $22 = v4._3;
                            return $15((v5) => {
                              if ($22) {
                                return $17(v4, $212);
                              }
                              const $23 = v2._1;
                              const $24 = v2._2;
                              return $15((v3$1) => $15((v1) => stringLiteral(
                                $ParseState($23, $24, false),
                                $15,
                                $16,
                                (v4$1, $25) => {
                                  const $26 = v4$1._3;
                                  return $15((v5$1) => {
                                    if ($26) {
                                      return $17(v4$1, $25);
                                    }
                                    const $27 = v2._1;
                                    const $28 = v2._2;
                                    return $15((v3$2) => $15((v1$1) => variable(
                                      $ParseState($27, $28, false),
                                      $15,
                                      $16,
                                      (v4$2, $29) => {
                                        const $30 = v4$2._3;
                                        return $15((v5$2) => {
                                          if ($30) {
                                            return $17(v4$2, $29);
                                          }
                                          const $31 = v2._1;
                                          const $32 = v2._2;
                                          return $15((v3$3) => $15((v1$2) => constructor(
                                            $ParseState($31, $32, false),
                                            $15,
                                            $16,
                                            (v4$3, $33) => {
                                              const $34 = v4$3._3;
                                              return $15((v5$3) => {
                                                if ($34) {
                                                  return $17(v4$3, $33);
                                                }
                                                const $35 = v2._1;
                                                const $36 = v2._2;
                                                return $15((v3$4) => $12(
                                                  $ParseState($35, $36, false),
                                                  $15,
                                                  $16,
                                                  (v4$4, $37) => {
                                                    const $38 = v4$4._3;
                                                    return $15((v5$4) => {
                                                      if ($38) {
                                                        return $17(v4$4, $37);
                                                      }
                                                      const $39 = v2._1;
                                                      const $40 = v2._2;
                                                      return $15((v3$5) => $13(
                                                        $ParseState($39, $40, false),
                                                        $15,
                                                        $16,
                                                        (v4$5, $41) => {
                                                          const $42 = v4$5._3;
                                                          return $15((v5$5) => {
                                                            if ($42) {
                                                              return $17(v4$5, $41);
                                                            }
                                                            return $142(v2, $15, $16, $17, $18);
                                                          });
                                                        },
                                                        $18
                                                      ));
                                                    });
                                                  },
                                                  $18
                                                ));
                                              });
                                            },
                                            (state2, a) => $15((v2$1) => $18(state2, $112(a)(Nil)))
                                          )));
                                        });
                                      },
                                      (state2, a) => $15((v2$1) => $18(state2, $Expr2("Var", a)))
                                    )));
                                  });
                                },
                                (state2, a) => $15((v2$1) => $18(state2, $102(a)))
                              )));
                            });
                          };
                          return $15((v1) => $92(
                            $ParseState($19, $20, false),
                            $15,
                            $16,
                            $21,
                            (state2, a) => $15((v2$1) => {
                              const $22 = manyRec2(lexeme((v2$2, $222, $23, $24, $25) => {
                                const $26 = v2$2._1;
                                const $27 = v2$2._2;
                                return $222((v3$1) => $222((v1$1) => $72(
                                  $ParseState($26, $27, false),
                                  $222,
                                  $23,
                                  (v4, $28) => {
                                    const $29 = v4._3;
                                    return $222((v5) => {
                                      if ($29) {
                                        return $24(v4, $28);
                                      }
                                      return $82(v2$2, $222, $23, $24, $25);
                                    });
                                  },
                                  (state2$1, a$1) => $222((v2$3) => $25(state2$1, $ParagraphElem("Token", fromCharArray(a$1))))
                                )));
                              }));
                              return $15((v1$1) => $22(
                                state2,
                                $15,
                                $16,
                                $21,
                                (state2$1, a$1) => $15((v2$2) => {
                                  const $23 = delim(parseableString)('"""');
                                  const $24 = state2._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                                  return $15((v1$2) => $23(
                                    $24,
                                    $15,
                                    $16,
                                    $21,
                                    (state2$2, a$2) => $15((v2$3) => $18(
                                      $24._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2,
                                      $Expr2("Paragraph", a$1)
                                    ))
                                  ));
                                })
                              ));
                            })
                          ));
                        });
                      };
                    })();
                    return (v2, $15, $16, $17, $18) => {
                      const $19 = v2._1;
                      const $20 = v2._2;
                      return $15((v3) => $6(
                        $ParseState($19, $20, false),
                        $15,
                        $16,
                        (v4, $21) => {
                          const $22 = v4._3;
                          return $15((v5) => {
                            if ($22) {
                              return $17(v4, $21);
                            }
                            return $14(v2, $15, $16, $17, $18);
                          });
                        },
                        $18
                      ));
                    };
                  })();
                  return (v2, $12, $13, $14, $15) => {
                    const $16 = v2._1;
                    const $17 = v2._2;
                    return $12((v3) => $4(
                      $ParseState($16, $17, false),
                      $12,
                      $13,
                      (v4, $18) => {
                        const $19 = v4._3;
                        return $12((v5) => {
                          if ($19) {
                            return $14(v4, $18);
                          }
                          return $11(v2, $12, $13, $14, $15);
                        });
                      },
                      $15
                    ));
                  };
                })();
                return (v2, $11, $12, $13, $14) => {
                  const $15 = v2._1;
                  const $16 = v2._2;
                  return $11((v3) => $3(
                    $ParseState($15, $16, false),
                    $11,
                    $12,
                    (v4, $17) => {
                      const $18 = v4._3;
                      return $11((v5) => {
                        if ($18) {
                          return $13(v4, $17);
                        }
                        return $10(v2, $11, $12, $13, $14);
                      });
                    },
                    $14
                  ));
                };
              })();
              return (v2, $10, $11, $12, $13) => {
                const $14 = v2._1;
                const $15 = v2._2;
                return $10((v3) => $2(
                  $ParseState($14, $15, false),
                  $10,
                  $11,
                  (v4, $16) => {
                    const $17 = v4._3;
                    return $10((v5) => {
                      if ($17) {
                        return $12(v4, $16);
                      }
                      return $9(v2, $10, $11, $12, $13);
                    });
                  },
                  $13
                ));
              };
            })();
            return (v2, $9, $10, $11, $12) => {
              const $13 = v2._1;
              const $14 = v2._2;
              return $9((v3) => $1(
                $ParseState($13, $14, false),
                $9,
                $10,
                (v4, $15) => {
                  const $16 = v4._3;
                  return $9((v5) => {
                    if ($16) {
                      return $11(v4, $15);
                    }
                    return $8(v2, $9, $10, $11, $12);
                  });
                },
                $12
              ));
            };
          })();
          return (v2, $8, $9, $10, $11) => {
            const $12 = v2._1;
            const $13 = v2._2;
            return $8((v3) => $03(
              $ParseState($12, $13, false),
              $8,
              $9,
              (v4, $14) => {
                const $15 = v4._3;
                return $8((v5) => {
                  if ($15) {
                    return $10(v4, $14);
                  }
                  return $7(v2, $8, $9, $10, $11);
                });
              },
              $11
            ));
          };
        })());
        return (state1, more, lift12, $$throw2, done) => more((v1) => $02(
          state1,
          more,
          lift12,
          $$throw2,
          (state2, a) => more((v2) => chain(a)(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, more, lift12, $$throw2, done))
        ));
      })()))(binaryOps);
    })());
    return (state1, more, lift12, $$throw2, done) => more((v2) => more((v1) => $0(
      state1,
      more,
      lift12,
      $$throw2,
      (state2, a) => more((v2$1) => more((v3) => {
        const state2$p = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
        return consume(
          state2$p,
          more,
          lift12,
          $$throw2,
          (state3, a$1) => more((v4) => done(state2$p._3 && !state3._3 ? $ParseState(state3._1, state3._2, true) : state3, a))
        );
      }))
    )));
  });
  const opTree = opTree$lazy();
  return context("expr")((() => {
    const $0 = reserved("case");
    const $1 = reserved("match");
    const $2 = reserved("if");
    const $3 = context("def")((() => {
      const $32 = context("funDef")(withPos((state1, more, lift12, $$throw2, done) => more((v1) => recDefs$lazy()(
        state1,
        more,
        lift12,
        $$throw2,
        (state2, a) => more((v2) => {
          const $33 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
          return more((v1$1) => align(expr$lazy())(
            $33,
            more,
            lift12,
            $$throw2,
            (state2$1, a$1) => more((v2$1) => done($33._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, $Expr2("LetRec", a, a$1)))
          ));
        })
      ))));
      const $42 = context("valDef")(withPos((state1, more, lift12, $$throw2, done) => more((v1) => varDefs$lazy()(
        state1,
        more,
        lift12,
        $$throw2,
        (state2, a) => more((v2) => {
          const $43 = state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2;
          return more((v1$1) => align(expr$lazy())(
            $43,
            more,
            lift12,
            $$throw2,
            (state2$1, a$1) => more((v2$1) => done($43._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1, $Expr2("Let", a, a$1)))
          ));
        })
      ))));
      return (v2, $5, $6, $7, $8) => {
        const $9 = v2._1;
        const $10 = v2._2;
        return $5((v3) => $32(
          $ParseState($9, $10, false),
          $5,
          $6,
          (v4, $11) => {
            const $12 = v4._3;
            return $5((v5) => {
              if ($12) {
                return $7(v4, $11);
              }
              return $42(v2, $5, $6, $7, $8);
            });
          },
          $8
        ));
      };
    })());
    const $4 = withErrorMessage(opTree)("expression");
    return (v2, $5, $6, $7, $8) => {
      const $9 = v2._1;
      const $10 = v2._2;
      return $5((v3) => {
        const $11 = (v4, $112) => {
          const $12 = v4._3;
          return $5((v5) => {
            if ($12) {
              return $7(v4, $112);
            }
            const $13 = v2._1;
            const $14 = v2._2;
            return $5((v3$1) => {
              const $15 = (v4$1, $152) => {
                const $16 = v4$1._3;
                return $5((v5$1) => {
                  if ($16) {
                    return $7(v4$1, $152);
                  }
                  const $17 = v2._1;
                  const $18 = v2._2;
                  return $5((v3$2) => $3(
                    $ParseState($17, $18, false),
                    $5,
                    $6,
                    (v4$2, $19) => {
                      const $20 = v4$2._3;
                      return $5((v5$2) => {
                        if ($20) {
                          return $7(v4$2, $19);
                        }
                        return $4(v2, $5, $6, $7, $8);
                      });
                    },
                    $8
                  ));
                });
              };
              return $5((v1) => $2(
                $ParseState($13, $14, false),
                $5,
                $6,
                $15,
                (state2, a) => $5((v2$1) => $5((v1$1) => opTree(
                  state2,
                  $5,
                  $6,
                  $15,
                  (state2$1, a$1) => $5((v2$2) => {
                    const $16 = block(expr$lazy());
                    const $17 = state2._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
                    return $5((v1$2) => $16(
                      $17,
                      $5,
                      $6,
                      $15,
                      (state2$2, a$2) => $5((v2$3) => {
                        const $18 = align(reserved("else"));
                        const $19 = $17._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                        return $5((v1$3) => $18(
                          $19,
                          $5,
                          $6,
                          $15,
                          (state2$3, a$3) => $5((v2$4) => {
                            const $20 = block(expr$lazy());
                            const $21 = $19._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                            return $5((v1$4) => $20(
                              $21,
                              $5,
                              $6,
                              $15,
                              (state2$4, a$4) => $5((v2$5) => $8(
                                $21._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4,
                                $Expr2("IfElse", a$1, a$2, a$4)
                              ))
                            ));
                          })
                        ));
                      })
                    ));
                  })
                )))
              ));
            });
          });
        };
        return $5((v1) => $1(
          $ParseState($9, $10, false),
          $5,
          $6,
          $11,
          (state2, a) => $5((v2$1) => $5((v1$1) => opTree(
            state2,
            $5,
            $6,
            $11,
            (state2$1, a$1) => $5((v2$2) => {
              const $12 = block(many1(align((state1, more, lift12, $$throw2, done) => more((v1$2) => $0(
                state1,
                more,
                lift12,
                $$throw2,
                (state2$2, a$2) => more((v2$3) => {
                  const $122 = state1._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2;
                  return more((v1$3) => pattern(
                    $122,
                    more,
                    lift12,
                    $$throw2,
                    (state2$3, a$3) => more((v2$4) => {
                      const $132 = block(expr$lazy());
                      const $14 = $122._3 && !state2$3._3 ? $ParseState(state2$3._1, state2$3._2, true) : state2$3;
                      return more((v1$4) => $132(
                        $14,
                        more,
                        lift12,
                        $$throw2,
                        (state2$4, a$4) => more((v2$5) => done($14._3 && !state2$4._3 ? $ParseState(state2$4._1, state2$4._2, true) : state2$4, $Tuple(a$3, a$4)))
                      ));
                    })
                  ));
                })
              )))));
              const $13 = state2._3 && !state2$1._3 ? $ParseState(state2$1._1, state2$1._2, true) : state2$1;
              return $5((v1$2) => $12(
                $13,
                $5,
                $6,
                $11,
                (state2$2, a$2) => $5((v2$3) => $8($13._3 && !state2$2._3 ? $ParseState(state2$2._1, state2$2._2, true) : state2$2, $Expr2("MatchAs", a$1, a$2)))
              ));
            })
          )))
        ));
      });
    };
  })());
});
var varDefs = /* @__PURE__ */ varDefs$lazy();
var recDefs = /* @__PURE__ */ recDefs$lazy();
var expr2 = /* @__PURE__ */ expr$lazy();
var defs = /* @__PURE__ */ choose(altParserT)(varDefs)(recDefs);
var module_ = /* @__PURE__ */ (() => {
  const $0 = manyRec2(defs);
  return (state1, more, lift12, $$throw2, done) => more((v1) => $0(
    state1,
    more,
    lift12,
    $$throw2,
    (state2, a) => more((v2) => done(state1._3 && !state2._3 ? $ParseState(state2._1, state2._2, true) : state2, $Module(a)))
  ));
})();

// output-es/Module/index.js
var lookup4 = (k) => {
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "Leaf") {
        go$c = false;
        go$r = Nothing;
        continue;
      }
      if (v.tag === "Node") {
        const v1 = ordString.compare(k)(v._3);
        if (v1 === "LT") {
          go$a0 = v._5;
          continue;
        }
        if (v1 === "GT") {
          go$a0 = v._6;
          continue;
        }
        if (v1 === "EQ") {
          go$c = false;
          go$r = $Maybe("Just", v._4);
          continue;
        }
      }
      fail();
    }
    return go$r;
  };
  return go;
};
var all4 = /* @__PURE__ */ (() => foldableList.foldMap(/* @__PURE__ */ (() => {
  const semigroupConj1 = { append: (v) => (v1) => v && v1 };
  return { mempty: true, Semigroup0: () => semigroupConj1 };
})()))();
var elem2 = /* @__PURE__ */ (() => {
  const any1 = foldableList.foldMap(/* @__PURE__ */ (() => {
    const semigroupDisj1 = { append: (v) => (v1) => v || v1 };
    return { mempty: false, Semigroup0: () => semigroupDisj1 };
  })());
  return (x2) => any1(($0) => x2 === $0);
})();
var fromFoldable18 = /* @__PURE__ */ (() => foldableSet.foldr(Cons)(Nil))();
var boundedLattice = { BoundedJoinSemilattice0: () => boundedJoinSemilatticeUni, BoundedMeetSemilattice1: () => boundedMeetSemilatticeUni };
var member4 = (k) => {
  const go = (go$a0$copy) => {
    let go$a0 = go$a0$copy, go$c = true, go$r;
    while (go$c) {
      const v = go$a0;
      if (v.tag === "Leaf") {
        go$c = false;
        go$r = false;
        continue;
      }
      if (v.tag === "Node") {
        const v1 = ordString.compare(k)(v._3);
        if (v1 === "LT") {
          go$a0 = v._5;
          continue;
        }
        if (v1 === "GT") {
          go$a0 = v._6;
          continue;
        }
        if (v1 === "EQ") {
          go$c = false;
          go$r = true;
          continue;
        }
      }
      fail();
    }
    return go$r;
  };
  return go;
};
var unions5 = /* @__PURE__ */ unions(foldableList)(ordDVertex$p);
var union6 = /* @__PURE__ */ (() => setSet(ordDVertex$p).union)();
var loadModuleGraph = (dictMonadAff) => {
  const Monad0 = dictMonadAff.MonadEffect0().Monad0();
  const $0 = Monad0.Bind1();
  const $1 = Monad0.Applicative0();
  return (dictMonadError) => {
    const throwLeft2 = throwLeft(dictMonadError)(showString);
    const withMsg2 = withMsg(dictMonadError);
    const desugarModuleFwd = moduleFwd(dictMonadError)(boundedLattice);
    return (dictMonadReader) => {
      const ask = dictMonadReader.MonadAsk0().ask;
      return (dictLoadFile) => {
        const loadFile2 = loadFile(dictLoadFile)(Monad0)(dictMonadError)(dictMonadAff);
        return (roots) => {
          const collectModules = (visited) => (graph) => (modules) => (imports) => {
            if (imports.tag === "Nil") {
              return $1.pure($Tuple(graph, modules));
            }
            if (imports.tag === "Cons") {
              if (member4(imports._1)(visited)) {
                return collectModules(visited)(graph)(modules)(imports._2);
              }
              return $0.bind($0.bind(ask)((v) => $0.bind(loadFile2(v.fluidSrcPaths)(imports._1 + ".fld"))((src) => $0.bind(withMsg2("Loading module " + imports._1)(throwLeft2(parse(withImports(module_))(src))))((v1) => {
                const $2 = v1._2;
                return $0.bind(desugarModuleFwd(v1._1))((mod$p) => $1.pure($Tuple(
                  mod$p,
                  imports._1 === "lib/prelude" ? $2 : $List("Cons", "lib/prelude", $2)
                )));
              }))))((v) => collectModules(insert3(ordString)(imports._1)()(visited))(insert3(ordString)(imports._1)(v._2)(graph))(insert3(ordString)(imports._1)(v._1)(modules))(foldableList.foldr(Cons)(imports._2)(v._2)));
            }
            fail();
          };
          return $0.bind(collectModules(Leaf)(Leaf)(Leaf)(roots))((v) => {
            const $2 = v._1;
            return $1.pure({
              roots,
              topsorted: (() => {
                const go = (go$a0$copy) => (go$a1$copy) => {
                  let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
                  while (go$c) {
                    const v$1 = go$a0, v1 = go$a1;
                    if (v$1.tag === "Nil") {
                      const go$12 = (go$1$a0$copy) => (go$1$a1$copy) => {
                        let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
                        while (go$1$c) {
                          const v$2 = go$1$a0, v1$1 = go$1$a1;
                          if (v1$1.tag === "Nil") {
                            go$1$c = false;
                            go$1$r = v$2;
                            continue;
                          }
                          if (v1$1.tag === "Cons") {
                            go$1$a0 = $List("Cons", v1$1._1, v$2);
                            go$1$a1 = v1$1._2;
                            continue;
                          }
                          fail();
                        }
                        return go$1$r;
                      };
                      go$c = false;
                      go$r = go$12(Nil)(v1);
                      continue;
                    }
                    const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
                      let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
                      while (go$1$c) {
                        const b = go$1$a0, v$2 = go$1$a1;
                        if (v$2.tag === "Nil") {
                          go$1$c = false;
                          go$1$r = b;
                          continue;
                        }
                        if (v$2.tag === "Cons") {
                          go$1$a0 = b.tag === "Nothing" && (() => {
                            const v22 = lookup4(v$2._1)($2);
                            if (v22.tag === "Nothing") {
                              return true;
                            }
                            if (v22.tag === "Just") {
                              return all4((dep) => !elem2(dep)(v$1))(v22._1);
                            }
                            fail();
                          })() ? $Maybe("Just", v$2._1) : b;
                          go$1$a1 = v$2._2;
                          continue;
                        }
                        fail();
                      }
                      return go$1$r;
                    };
                    const v2 = go$1(Nothing)(v$1);
                    if (v2.tag === "Nothing") {
                      go$c = false;
                      go$r = throwException(error("Modules contain circular imports"))();
                      continue;
                    }
                    if (v2.tag === "Just") {
                      go$a0 = deleteBy3(eqStringImpl)(v2._1)(v$1);
                      go$a1 = $List("Cons", v2._1, v1);
                      continue;
                    }
                    fail();
                  }
                  return go$r;
                };
                return go(fromFoldable18((() => {
                  const go$1 = (v$1) => {
                    if (v$1.tag === "Leaf") {
                      return Leaf;
                    }
                    if (v$1.tag === "Node") {
                      return $$$Map("Node", v$1._1, v$1._2, v$1._3, void 0, go$1(v$1._5), go$1(v$1._6));
                    }
                    fail();
                  };
                  return go$1($2);
                })()))(Nil);
              })(),
              graph: $2,
              modules: v._2
            });
          });
        };
      };
    };
  };
};
var initialConfig = (dictMonadAff) => {
  const Monad0 = dictMonadAff.MonadEffect0().Monad0();
  const $0 = bindStateT(Monad0);
  const $1 = monadAllocAllocT(Monad0);
  const Applicative0 = $1.Monad0().Applicative0();
  const fresh1 = $1.fresh;
  const alloc1 = traversableEnv.traverse(Applicative0)((v) => fresh1);
  const applicativeStateT2 = applicativeStateT(Monad0);
  const traverse1 = traversableMap.traverse(applicativeStateT2);
  const alloc2 = traversableModule.traverse(Applicative0)((v) => fresh1);
  const runWithGraphT_spy2 = runWithGraphT_spy({
    Applicative0: () => applicativeStateT(Monad0),
    Bind1: () => bindStateT(Monad0)
  })(graphGraphImpl);
  const monadAffState2 = monadAffState(dictMonadAff);
  const monadAffState1 = monadAffState(monadAffState2);
  const $2 = monadAffState2.MonadEffect0().Monad0();
  const $3 = dictMonadAff.MonadEffect0().Monad0();
  return (dictMonadError) => {
    const eval_primitives2 = eval_primitives(monadWithGraphAllocWithGr(dictMonadError));
    return (dictMonadReader) => {
      const eval_primitives1 = eval_primitives2(monadReaderStateT(monadReaderStateT(dictMonadReader)))(monadAffState1);
      return (dictLoadFile) => {
        const eval_primitives22 = eval_primitives1((() => {
          const loadFileFromPath1 = dictLoadFile.loadFileFromPath(dictMonadError)(dictMonadAff);
          return {
            loadFileFromPath: (dictMonadError1) => (dictMonadAff1) => (x2) => {
              const $4 = loadFileFromPath1(x2);
              return (s) => $2.Bind1().bind((s$1) => $3.Bind1().bind($4)((x$1) => $3.Applicative0().pure($Tuple(x$1, s$1))))((x$1) => $2.Applicative0().pure($Tuple(
                x$1,
                s
              )));
            }
          };
        })());
        return (dictFV) => (e) => (primitives2) => (moduleCxt) => Monad0.Bind1().bind(runAllocT(Monad0)($0.bind(alloc1(primitives2))((primitives$p) => $0.bind(traverse1(alloc2)(moduleCxt.modules))((modules$p) => $0.bind(runWithGraphT_spy2(eval_primitives22(primitives$p)({
          modules: modules$p,
          graph: moduleCxt.graph,
          roots: moduleCxt.roots,
          topsorted: moduleCxt.topsorted
        }))(union6(unions13(listMap(verticesValVertex.vertices)(mapObjectString.values(primitives$p))))(unions5(listMap(verticesModuleVertex.vertices)((() => {
          const go = (m$p, z$p) => {
            if (m$p.tag === "Leaf") {
              return z$p;
            }
            if (m$p.tag === "Node") {
              return go(m$p._5, $List("Cons", m$p._4, go(m$p._6, z$p)));
            }
            fail();
          };
          return go(modules$p, Nil);
        })())))))((v) => applicativeStateT2.pure($Tuple(
          primitives$p,
          $Tuple(
            modules$p,
            (() => {
              const $4 = dictFV.fv(e);
              return filterWithKey((x2) => {
                const $5 = setSet(ordString).member(x2)($4);
                return (v$1) => $5;
              })(v._2);
            })()
          )
        ))))))(0))((v) => Monad0.Applicative0().pure({ n: v._1, primitives: v._2._2._1, "\u03B3": v._2._2._2._2 }));
      };
    };
  };
};
var prepConfig = (dictMonadAff) => {
  const Monad0 = dictMonadAff.MonadEffect0().Monad0();
  const $0 = Monad0.Bind1();
  const loadModuleGraph1 = loadModuleGraph(dictMonadAff);
  const initialConfig1 = initialConfig(dictMonadAff);
  return (dictMonadError) => {
    const throwLeft2 = throwLeft(dictMonadError)(showString);
    const loadModuleGraph2 = loadModuleGraph1(dictMonadError);
    const desug1 = exprFwd(boundedLattice)(dictMonadError)(joinSemilatticeUnit);
    const initialConfig2 = initialConfig1(dictMonadError);
    return (dictMonadReader) => {
      const loadModuleGraph3 = loadModuleGraph2(dictMonadReader);
      const initialConfig3 = initialConfig2(dictMonadReader);
      return (dictLoadFile) => {
        const loadModuleGraph4 = loadModuleGraph3(dictLoadFile);
        const initialConfig4 = initialConfig3(dictLoadFile)(fVExpr);
        return (primitives2) => (fluidSrc) => $0.bind(throwLeft2(parse(withImports(expr2))(fluidSrc)))((v) => {
          const $1 = v._1;
          return $0.bind(loadModuleGraph4($List("Cons", "lib/prelude", v._2)))((moduleCxt) => $0.bind(desug1($1))((e) => $0.bind(initialConfig4(e)(primitives2)(moduleCxt))((gconfig) => Monad0.Applicative0().pure({
            s: $1,
            e,
            gconfig
          }))));
        });
      };
    };
  };
};

// output-es/Data.Argonaut.Decode.Parser/index.js
var parseJson = (x2) => {
  const $0 = _jsonParser(Left, Right, x2);
  if ($0.tag === "Left") {
    return $Either("Left", $JsonDecodeError("TypeMismatch", "JSON"));
  }
  if ($0.tag === "Right") {
    return $Either("Right", $0._1);
  }
  fail();
};

// output-es/Primitive.Defs/index.js
var toUnfoldable9 = /* @__PURE__ */ toUnfoldable(unfoldableArray);
var fromFoldable19 = /* @__PURE__ */ fromFoldable(foldableArray);
var toUnfoldable22 = /* @__PURE__ */ toAscUnfoldable(unfoldableList);
var disjointUnion3 = /* @__PURE__ */ disjointUnion(mapDictString);
var fromFoldable110 = /* @__PURE__ */ fromFoldable(foldableList);
var unary2 = /* @__PURE__ */ unary(boundedJoinSemilatticeUni);
var binary2 = /* @__PURE__ */ binary(boundedJoinSemilatticeUni);
var binaryZero2 = /* @__PURE__ */ binaryZero(boundedJoinSemilatticeUni);
var binaryZero1 = /* @__PURE__ */ (() => binaryZero2({ isZero: fanin2(isZeroInt.isZero)(isZeroNumber.isZero) }))();
var binaryZero22 = /* @__PURE__ */ binaryZero2(isZeroInt);
var split3 = /* @__PURE__ */ $Tuple(
  "search",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 2,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => {
          const $0 = dictMonadAff.MonadEffect0().Monad0().Bind1();
          return (dictMonadReader) => (dictLoadFile) => (v) => {
            if (v.tag === "Cons" && v._1._3.tag === "Int" && v._2.tag === "Cons" && v._2._1._3.tag === "Str" && v._2._2.tag === "Nil") {
              const $1 = v._1._3._1;
              const $2 = v._2._1._3._1;
              const \u03B1s = insert3(ordVertex)(v._2._1._1)()($$$Map(
                "Node",
                1,
                1,
                v._1._1,
                void 0,
                Leaf,
                Leaf
              ));
              return $0.bind(val(\u03B1s)($BaseVal("Str", take2($1)($2))))((before) => $0.bind(val(\u03B1s)($BaseVal(
                "Str",
                drop(length2(take2($1)($2)))($2)
              )))((after) => val(\u03B1s)($BaseVal("Constr", "Pair", $List("Cons", before, $List("Cons", after, Nil))))));
            }
            return $$throw2("Int and string expected");
          };
        };
      };
    }
  })
);
var search2 = /* @__PURE__ */ $Tuple(
  "search",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 2,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
          if (v.tag === "Cons" && v._1._3.tag === "Str" && v._2.tag === "Cons" && v._2._1._3.tag === "Str" && v._2._2.tag === "Nil") {
            const $0 = v._2._1._3._1;
            const v1 = regex(v._1._3._1)(noFlags);
            if (v1.tag === "Left") {
              return $$throw2("search: " + v1._1);
            }
            if (v1.tag === "Right") {
              const \u03B1s = insert3(ordVertex)(v._2._1._1)()($$$Map(
                "Node",
                1,
                1,
                v._1._1,
                void 0,
                Leaf,
                Leaf
              ));
              const v2 = search(v1._1)($0);
              if (v2.tag === "Nothing") {
                return val(\u03B1s)($BaseVal("Constr", "None", Nil));
              }
              if (v2.tag === "Just") {
                return dictMonadAff.MonadEffect0().Monad0().Bind1().bind(val(\u03B1s)($BaseVal("Int", v2._1)))((v3) => val(\u03B1s)($BaseVal(
                  "Constr",
                  "Some",
                  $List("Cons", v3, Nil)
                )));
              }
            }
            fail();
          }
          return $$throw2("Regex and string expected");
        };
      };
    }
  })
);
var pow3 = /* @__PURE__ */ union5(asNumberIntOrNumber)(asNumberIntOrNumber)(asIntNumber)(asIntNumber)((x2) => (y2) => pow(toNumber(x2))(toNumber(y2)))(pow);
var numToStr = (v2) => {
  if (v2.tag === "Left") {
    return showIntImpl(v2._1);
  }
  if (v2.tag === "Right") {
    return showNumberImpl(v2._1);
  }
  fail();
};
var notEquals = /* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asIntNumberOrString)(asIntNumberOrString)((x2) => (y2) => x2 !== y2)(/* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asNumberString)(asNumberString)((x2) => (y2) => x2 !== y2)((x2) => (y2) => x2 !== y2));
var matrixUpdate = /* @__PURE__ */ $Tuple(
  "matrixUpdate",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 3,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
          if (v.tag === "Cons" && v._1._3.tag === "Matrix" && v._2.tag === "Cons" && v._2._1._3.tag === "Constr" && v._2._1._3._2.tag === "Cons" && v._2._1._3._2._1._3.tag === "Int" && v._2._1._3._2._2.tag === "Cons" && v._2._1._3._2._2._1._3.tag === "Int" && v._2._1._3._2._2._2.tag === "Nil" && v._2._2.tag === "Cons" && v._2._2._2.tag === "Nil" && v._2._1._3._1 === "Pair") {
            const $0 = v._2._2._1;
            return val($$$Map("Node", 1, 1, v._1._1, void 0, Leaf, Leaf))($BaseVal(
              "Matrix",
              matrixPut(v._2._1._3._2._1._3._1)(v._2._1._3._2._2._1._3._1)((v$1) => $0)(v._1._3._1)
            ));
          }
          return $$throw2("Matrix, pair of integers and value expected");
        };
      };
    }
  })
);
var matrixLookup = /* @__PURE__ */ $Tuple(
  "!",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 2,
    op: (dictMonadWithGraphAlloc) => (dictMonadError) => {
      const $$throw2 = $$throw(dictMonadError.MonadThrow0());
      return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
        if (v.tag === "Cons" && v._1._3.tag === "Matrix" && v._2.tag === "Cons" && v._2._1._3.tag === "Constr" && v._2._1._3._2.tag === "Cons" && v._2._1._3._2._1._3.tag === "Int" && v._2._1._3._2._2.tag === "Cons" && v._2._1._3._2._2._1._3.tag === "Int" && v._2._1._3._2._2._2.tag === "Nil" && v._2._2.tag === "Nil" && v._2._1._3._1 === "Pair") {
          return dictMonadAff.MonadEffect0().Monad0().Applicative0().pure(matrixGet(v._2._1._3._2._1._3._1)(v._2._1._3._2._2._1._3._1)(v._1._3._1));
        }
        return $$throw2("Matrix and pair of integers expected");
      };
    }
  })
);
var log3 = (v2) => {
  if (v2.tag === "Left") {
    return log(toNumber(v2._1));
  }
  if (v2.tag === "Right") {
    return log(v2._1);
  }
  fail();
};
var lessThanEquals = /* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asIntNumberOrString)(asIntNumberOrString)((a1) => (a2) => a1 <= a2)(/* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asNumberString)(asNumberString)((a1) => (a2) => a1 <= a2)((a1) => (a2) => a1 <= a2));
var lessThan2 = /* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asIntNumberOrString)(asIntNumberOrString)((a1) => (a2) => a1 < a2)(/* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asNumberString)(asNumberString)((a1) => (a2) => a1 < a2)((a1) => (a2) => a1 < a2));
var insert4 = /* @__PURE__ */ $Tuple(
  "insert",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 3,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
          if (v.tag === "Cons" && v._1._3.tag === "Dictionary" && v._2.tag === "Cons" && v._2._1._3.tag === "Str" && v._2._2.tag === "Cons" && v._2._2._2.tag === "Nil") {
            const $0 = v._2._1._3._1;
            return val($$$Map("Node", 1, 1, v._1._1, void 0, Leaf, Leaf))($BaseVal(
              "Dictionary",
              mutate(($1) => () => {
                $1[$0] = $Tuple(v._2._1._1, v._2._2._1);
                return $1;
              })(v._1._3._1)
            ));
          }
          return $$throw2("Dictionary, key and value expected");
        };
      };
    }
  })
);
var greaterThanEquals = /* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asIntNumberOrString)(asIntNumberOrString)((a1) => (a2) => a1 >= a2)(/* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asNumberString)(asNumberString)((a1) => (a2) => a1 >= a2)((a1) => (a2) => a1 >= a2));
var greaterThan = /* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asIntNumberOrString)(asIntNumberOrString)((a1) => (a2) => a1 > a2)(/* @__PURE__ */ union5(asBooleanBoolean)(asBooleanBoolean)(asNumberString)(asNumberString)((a1) => (a2) => a1 > a2)((a1) => (a2) => a1 > a2));
var $$get3 = /* @__PURE__ */ $Tuple(
  "get",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 2,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
          if (v.tag === "Cons" && v._1._3.tag === "Str" && v._2.tag === "Cons" && v._2._1._3.tag === "Dictionary" && v._2._2.tag === "Nil") {
            const v1 = _lookup(Nothing, Just, v._1._3._1, v._2._1._3._1);
            if (v1.tag === "Nothing") {
              return val($$$Map("Node", 1, 1, v._1._1, void 0, Leaf, Leaf))($BaseVal(
                "Constr",
                "None",
                Nil
              ));
            }
            if (v1.tag === "Just") {
              return val(insert3(ordVertex)(v1._1._1)()($$$Map(
                "Node",
                1,
                1,
                v._1._1,
                void 0,
                Leaf,
                Leaf
              )))($BaseVal("Constr", "Some", $List("Cons", v1._1._2, Nil)));
            }
            fail();
          }
          return $$throw2("String and dictionary expected");
        };
      };
    }
  })
);
var fromJsonVal = (dictMonadWithGraphAlloc) => {
  const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
  return (dictMonadEffect) => {
    const Monad0 = dictMonadEffect.Monad0();
    const $0 = Monad0.Bind1();
    const Applicative0 = Monad0.Applicative0();
    const traverse22 = traversableArray.traverse(Applicative0);
    const traverse2$1 = traversableArray.traverse(Applicative0);
    return caseJson((v) => throwException(error("Error, Null JSON value cannot be converted to Val"))())((b) => val(Leaf)($BaseVal(
      "Constr",
      b ? "True" : "False",
      Nil
    )))((n) => {
      const v = fromNumber(n);
      if (v.tag === "Just") {
        return val(Leaf)($BaseVal("Int", v._1));
      }
      if (v.tag === "Nothing") {
        return val(Leaf)($BaseVal("Float", n));
      }
      fail();
    })((s) => val(Leaf)($BaseVal("Str", s)))((xs) => {
      const toList = (v) => {
        if (v.tag === "Nil") {
          return val(Leaf)($BaseVal("Constr", "Nil", Nil));
        }
        if (v.tag === "Cons") {
          const $1 = v._1;
          return $0.bind(toList(v._2))((v$p) => val(Leaf)($BaseVal(
            "Constr",
            ":",
            $List("Cons", $1, $List("Cons", v$p, Nil))
          )));
        }
        fail();
      };
      return $0.bind(traverse2$1(fromJsonVal(dictMonadWithGraphAlloc)(dictMonadEffect))(xs))((vs) => toList((() => {
        const len = vs.length;
        const go = (go$a0$copy) => (go$a1$copy) => {
          let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
          while (go$c) {
            const source2 = go$a0, memo = go$a1;
            if (source2 < len) {
              go$a0 = source2 + 1 | 0;
              go$a1 = $List("Cons", vs[source2], memo);
              continue;
            }
            const go$1 = (go$1$a0$copy) => (go$1$a1$copy) => {
              let go$1$a0 = go$1$a0$copy, go$1$a1 = go$1$a1$copy, go$1$c = true, go$1$r;
              while (go$1$c) {
                const b = go$1$a0, v = go$1$a1;
                if (v.tag === "Nil") {
                  go$1$c = false;
                  go$1$r = b;
                  continue;
                }
                if (v.tag === "Cons") {
                  go$1$a0 = $List("Cons", v._1, b);
                  go$1$a1 = v._2;
                  continue;
                }
                fail();
              }
              return go$1$r;
            };
            go$c = false;
            go$r = go$1(Nil)(memo);
          }
          return go$r;
        };
        return go(0)(Nil);
      })()));
    })((obj) => $0.bind(traverse22((v) => {
      const $1 = v._1;
      const $2 = v._2;
      return $0.bind(val(Leaf)($BaseVal("Str", $1)))((v1) => {
        const $3 = v1._1;
        return $0.bind(fromJsonVal(dictMonadWithGraphAlloc)(dictMonadEffect)($2))((v2) => Applicative0.pure($Tuple($1, $Tuple($3, v2))));
      });
    })(toUnfoldable9(obj)))((entries) => val(Leaf)($BaseVal("Dictionary", fromFoldable19(entries)))));
  };
};
var loadJson = /* @__PURE__ */ $Tuple(
  "loadJson",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 1,
    op: (dictMonadWithGraphAlloc) => {
      const fromJsonVal1 = fromJsonVal(dictMonadWithGraphAlloc);
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => {
          const MonadEffect0 = dictMonadAff.MonadEffect0();
          const Bind1 = MonadEffect0.Monad0().Bind1();
          const fromJsonVal2 = fromJsonVal1(MonadEffect0);
          return (dictMonadReader) => (dictLoadFile) => {
            const loadFileFromPath = dictLoadFile.loadFileFromPath(dictMonadError)(dictMonadAff);
            return (v) => {
              if (v.tag === "Cons" && v._1._3.tag === "Str" && v._2.tag === "Nil") {
                return Bind1.bind(Bind1.Apply0().Functor0().map(definitely('File "' + v._1._3._1 + '" exists'))(loadFileFromPath(v._1._3._1)))((str) => {
                  const v1 = parseJson(str);
                  if (v1.tag === "Left") {
                    return $$throw2("Failed to parse JSON: " + showJsonDecodeError.show(v1._1));
                  }
                  if (v1.tag === "Right") {
                    return fromJsonVal2(v1._1);
                  }
                  fail();
                });
              }
              return $$throw2("String expected");
            };
          };
        };
      };
    }
  })
);
var foldl_with_index = /* @__PURE__ */ $Tuple(
  "foldl_with_index",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 3,
    op: (dictMonadWithGraphAlloc) => {
      const apply3 = apply2(dictMonadWithGraphAlloc);
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => {
          const Monad0 = dictMonadAff.MonadEffect0().Monad0();
          const $0 = Monad0.Bind1();
          return (dictMonadReader) => {
            const apply1 = apply3(dictMonadReader)(dictMonadAff);
            return (dictLoadFile) => {
              const apply22 = apply1(dictLoadFile);
              return (v) => {
                if (v.tag === "Cons" && v._2.tag === "Cons" && v._2._2.tag === "Cons" && v._2._2._1._3.tag === "Dictionary" && v._2._2._2.tag === "Nil") {
                  const $1 = v._1;
                  const go = (go$a0$copy) => (go$a1$copy) => {
                    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;
                    while (go$c) {
                      const b = go$a0, v$1 = go$a1;
                      if (v$1.tag === "Nil") {
                        go$c = false;
                        go$r = b;
                        continue;
                      }
                      if (v$1.tag === "Cons") {
                        go$a0 = (() => {
                          const $2 = v$1._1;
                          return Monad0.Bind1().bind(b)((a) => {
                            const $3 = $2._2._2;
                            return $0.bind($0.bind(apply22($1)($Val($2._2._1, Nothing, $BaseVal("Str", $2._1))))((a$1) => apply22(a$1)(a)))((a$1) => apply22(a$1)($3));
                          });
                        })();
                        go$a1 = v$1._2;
                        continue;
                      }
                      fail();
                    }
                    return go$r;
                  };
                  return go(Monad0.Applicative0().pure(v._2._1))(toUnfoldable22(v._2._2._1._3._1));
                }
                return $$throw2("Function, value and dictionary expected");
              };
            };
          };
        };
      };
    }
  })
);
var error_ = /* @__PURE__ */ $Tuple(
  "error",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 1,
    op: (dictMonadWithGraphAlloc) => (dictMonadError) => {
      const $$throw2 = $$throw(dictMonadError.MonadThrow0());
      return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
        if (v.tag === "Cons" && v._1._3.tag === "Str" && v._2.tag === "Nil") {
          return dictMonadAff.MonadEffect0().Monad0().Applicative0().pure(throwException(error(v._1._3._1))());
        }
        return $$throw2("String expected");
      };
    }
  })
);
var divide = /* @__PURE__ */ union5(asNumberIntOrNumber)(asNumberIntOrNumber)(asIntNumber)(asIntNumber)((x2) => (y2) => toNumber(x2) / toNumber(y2))(numDiv);
var dims = /* @__PURE__ */ $Tuple(
  "dims",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 1,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => {
          const $0 = dictMonadAff.MonadEffect0().Monad0().Bind1();
          return (dictMonadReader) => (dictLoadFile) => (v) => {
            if (v.tag === "Cons" && v._1._3.tag === "Matrix" && v._2.tag === "Nil") {
              const $1 = v._1._3._1._2._2._1;
              const $2 = v._1._1;
              const $3 = v._1._3._1._2._2._2;
              return $0.bind(val($$$Map("Node", 1, 1, v._1._3._1._2._1._2, void 0, Leaf, Leaf))($BaseVal(
                "Int",
                v._1._3._1._2._1._1
              )))((v1) => $0.bind(val($$$Map("Node", 1, 1, $3, void 0, Leaf, Leaf))($BaseVal("Int", $1)))((v2) => val($$$Map(
                "Node",
                1,
                1,
                $2,
                void 0,
                Leaf,
                Leaf
              ))($BaseVal("Constr", "Pair", $List("Cons", v1, $List("Cons", v2, Nil))))));
            }
            return $$throw2("Matrix expected");
          };
        };
      };
    }
  })
);
var dict_map = /* @__PURE__ */ $Tuple(
  "dict_map",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 2,
    op: (dictMonadWithGraphAlloc) => {
      const apply3 = apply2(dictMonadWithGraphAlloc);
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => {
          const Monad0 = dictMonadAff.MonadEffect0().Monad0();
          const Bind1 = Monad0.Bind1();
          const traverse22 = traversableDict.traverse(Monad0.Applicative0());
          return (dictMonadReader) => {
            const apply1 = apply3(dictMonadReader)(dictMonadAff);
            return (dictLoadFile) => {
              const apply22 = apply1(dictLoadFile);
              return (v) => {
                if (v.tag === "Cons" && v._2.tag === "Cons" && v._2._1._3.tag === "Dictionary" && v._2._2.tag === "Nil") {
                  const $0 = v._1;
                  const $1 = v._2._1._1;
                  return Bind1.bind(traverse22((v2) => {
                    const $2 = v2._1;
                    return Bind1.Apply0().Functor0().map((v3) => $Tuple($2, v3))(apply22($0)(v2._2));
                  })(v._2._1._3._1))((d$p) => val($$$Map("Node", 1, 1, $1, void 0, Leaf, Leaf))($BaseVal(
                    "Dictionary",
                    d$p
                  )));
                }
                return $$throw2("Function and dictionary expected");
              };
            };
          };
        };
      };
    }
  })
);
var dict_intersectionWith = /* @__PURE__ */ $Tuple(
  "dict_intersectionWith",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 3,
    op: (dictMonadWithGraphAlloc) => {
      const apply3 = apply2(dictMonadWithGraphAlloc);
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => {
          const Monad0 = dictMonadAff.MonadEffect0().Monad0();
          const Bind1 = Monad0.Bind1();
          const Applicative0 = Monad0.Applicative0();
          const $0 = Bind1.Apply0().Functor0();
          return (dictMonadReader) => {
            const apply1 = apply3(dictMonadReader)(dictMonadAff);
            return (dictLoadFile) => {
              const apply22 = apply1(dictLoadFile);
              return (v) => {
                if (v.tag === "Cons" && v._2.tag === "Cons" && v._2._1._3.tag === "Dictionary" && v._2._2.tag === "Cons" && v._2._2._1._3.tag === "Dictionary" && v._2._2._2.tag === "Nil") {
                  const $1 = v._1;
                  const $2 = v._2._1._1;
                  const $3 = v._2._2._1._1;
                  return Bind1.bind($0.map(Dictionary2)($0.map(DictRep)(traversableDict.traverse(Applicative0)(identity17)(intersectionWith_Object((v2) => (v3) => {
                    const $4 = v3._2;
                    const $5 = v2._1;
                    const $6 = v3._1;
                    return Bind1.bind(Bind1.bind(apply22($1)(v2._2))((a) => apply22(a)($4)))((v4) => Bind1.bind(val(insert3(ordVertex)($6)()($$$Map(
                      "Node",
                      1,
                      1,
                      $5,
                      void 0,
                      Leaf,
                      Leaf
                    )))(v4._3))((v5) => Applicative0.pure($Tuple(v5._1, v4))));
                  })(v._2._1._3._1)(v._2._2._1._3._1)))))((v$p) => val(insert3(ordVertex)($3)()($$$Map(
                    "Node",
                    1,
                    1,
                    $2,
                    void 0,
                    Leaf,
                    Leaf
                  )))(v$p));
                }
                return $$throw2("Function and two dictionaries expected");
              };
            };
          };
        };
      };
    }
  })
);
var dict_disjointUnion = /* @__PURE__ */ $Tuple(
  "dict_disjointUnion",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 2,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
          if (v.tag === "Cons" && v._1._3.tag === "Dictionary" && v._2.tag === "Cons" && v._2._1._3.tag === "Dictionary" && v._2._2.tag === "Nil") {
            return val(insert3(ordVertex)(v._2._1._1)()($$$Map(
              "Node",
              1,
              1,
              v._1._1,
              void 0,
              Leaf,
              Leaf
            )))($BaseVal("Dictionary", disjointUnion3(v._1._3._1)(v._2._1._3._1)));
          }
          return $$throw2("Dictionaries expected");
        };
      };
    }
  })
);
var dict_difference = /* @__PURE__ */ $Tuple(
  "dict_difference",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 2,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
          if (v.tag === "Cons" && v._1._3.tag === "Dictionary" && v._2.tag === "Cons" && v._2._1._3.tag === "Dictionary" && v._2._2.tag === "Nil") {
            return val(insert3(ordVertex)(v._2._1._1)()($$$Map(
              "Node",
              1,
              1,
              v._1._1,
              void 0,
              Leaf,
              Leaf
            )))($BaseVal("Dictionary", mapFObjectString.difference(v._1._3._1)(v._2._1._3._1)));
          }
          return $$throw2("Dictionaries expected.");
        };
      };
    }
  })
);
var dict2 = /* @__PURE__ */ $Tuple(
  "dict",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 1,
    op: (dictMonadWithGraphAlloc) => {
      const val = dictMonadWithGraphAlloc.new(typeNameVal)((a) => Val(a)(Nothing));
      return (dictMonadError) => {
        const $$throw2 = $$throw(dictMonadError.MonadThrow0());
        return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
          if (v.tag === "Cons" && v._2.tag === "Nil") {
            const kvs$p = (dictMonadError1) => {
              const MonadThrow0 = dictMonadError1.MonadThrow0();
              const Monad0 = MonadThrow0.Monad0();
              const $0 = Monad0.Applicative0();
              return (v2) => {
                if (v2._3.tag === "Constr") {
                  if (v2._3._2.tag === "Nil") {
                    if (v2._3._1 === "Nil") {
                      return $0.pure($Tuple(
                        $$$Map("Node", 1, 1, v2._1, void 0, Leaf, Leaf),
                        Nil
                      ));
                    }
                    return MonadThrow0.throwError(error("List of (key, value) pairs expected"));
                  }
                  if (v2._3._2.tag === "Cons" && v2._3._2._1._3.tag === "Constr" && v2._3._2._1._3._2.tag === "Cons" && v2._3._2._1._3._2._1._3.tag === "Str" && v2._3._2._1._3._2._2.tag === "Cons" && v2._3._2._1._3._2._2._2.tag === "Nil" && v2._3._2._2.tag === "Cons" && v2._3._2._2._2.tag === "Nil" && v2._3._1 === ":" && v2._3._2._1._3._1 === "Pair") {
                    const $1 = v2._3._2._1._3._2._1._3._1;
                    const $2 = v2._3._2._1._3._2._2._1;
                    const $3 = v2._1;
                    const $4 = v2._3._2._1._3._2._1._1;
                    const $5 = v2._3._2._1._1;
                    return Monad0.Bind1().bind(kvs$p(dictMonadError1)(v2._3._2._2._1))((v3) => $0.pure($Tuple(
                      insert3(ordVertex)($3)()(insert3(ordVertex)($5)()(v3._1)),
                      $List("Cons", $Tuple($1, $Tuple($4, $2)), v3._2)
                    )));
                  }
                }
                return MonadThrow0.throwError(error("List of (key, value) pairs expected"));
              };
            };
            return dictMonadAff.MonadEffect0().Monad0().Bind1().bind(kvs$p(dictMonadError)(v._1))((v2) => val(v2._1)($BaseVal("Dictionary", fromFoldable110(v2._2))));
          }
          return $$throw2("Single argument expected");
        };
      };
    }
  })
);
var debugLog = /* @__PURE__ */ $Tuple(
  "debugLog",
  /* @__PURE__ */ $ForeignOp$p({
    arity: 1,
    op: (dictMonadWithGraphAlloc) => (dictMonadError) => {
      const $$throw2 = $$throw(dictMonadError.MonadThrow0());
      return (dictMonadAff) => (dictMonadReader) => (dictLoadFile) => (v) => {
        if (v.tag === "Cons" && v._2.tag === "Nil") {
          const $0 = v._1;
          return dictMonadAff.MonadEffect0().Monad0().Applicative0().pure(_trace($0, (v$1) => $0));
        }
        return $$throw2("Single argument expected");
      };
    }
  })
);
var primitives = /* @__PURE__ */ (() => fromFoldable19([
  $Tuple(":", $Val(void 0, Nothing, $BaseVal("Fun", $Fun("PartialConstr", ":", Nil)))),
  unary2("ceiling")({ i: number5, o: $$int, fwd: ceil2 }),
  $Tuple(
    debugLog._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(debugLog._1, debugLog._2), Nil)))
  ),
  $Tuple(dims._1, $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(dims._1, dims._2), Nil)))),
  $Tuple(error_._1, $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(error_._1, error_._2), Nil)))),
  $Tuple(
    loadJson._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(loadJson._1, loadJson._2), Nil)))
  ),
  unary2("float")({
    i: string2,
    o: number5,
    fwd: (x2) => definitely("absurd")(fromStringImpl(x2, isFiniteImpl, Just, Nothing))
  }),
  unary2("floor")({ i: number5, o: $$int, fwd: floor2 }),
  unary2("log")({ i: intOrNumber, o: number5, fwd: log3 }),
  unary2("numToStr")({ i: intOrNumber, o: string2, fwd: numToStr }),
  binary2("+")({
    i1: intOrNumber,
    i2: intOrNumber,
    o: intOrNumber,
    fwd: union5(asIntIntOrNumber)(asNumberIntOrNumber)(asIntNumber)(asIntNumber)(intAdd)(numAdd)
  }),
  binary2("-")({
    i1: intOrNumber,
    i2: intOrNumber,
    o: intOrNumber,
    fwd: union5(asIntIntOrNumber)(asNumberIntOrNumber)(asIntNumber)(asIntNumber)(intSub)(numSub)
  }),
  binaryZero1("*")({
    i: intOrNumber,
    o: intOrNumber,
    fwd: union5(asIntIntOrNumber)(asNumberIntOrNumber)(asIntNumber)(asIntNumber)(intMul)(numMul)
  }),
  binaryZero1("**")({ i: intOrNumber, o: intOrNumber, fwd: pow3 }),
  binaryZero1("/")({ i: intOrNumber, o: intOrNumber, fwd: divide }),
  binary2("==")({
    i1: intOrNumberOrString,
    i2: intOrNumberOrString,
    o: $$boolean,
    fwd: union5(asBooleanBoolean)(asBooleanBoolean)(asIntNumberOrString)(asIntNumberOrString)(eqIntImpl)(unionStr(asBooleanBoolean)(asNumberString)(eqNumberImpl)(eqStringImpl))
  }),
  binary2("/=")({ i1: intOrNumberOrString, i2: intOrNumberOrString, o: $$boolean, fwd: notEquals }),
  binary2("<")({ i1: intOrNumberOrString, i2: intOrNumberOrString, o: $$boolean, fwd: lessThan2 }),
  binary2(">")({ i1: intOrNumberOrString, i2: intOrNumberOrString, o: $$boolean, fwd: greaterThan }),
  binary2("<=")({ i1: intOrNumberOrString, i2: intOrNumberOrString, o: $$boolean, fwd: lessThanEquals }),
  binary2(">=")({ i1: intOrNumberOrString, i2: intOrNumberOrString, o: $$boolean, fwd: greaterThanEquals }),
  binary2("++")({ i1: string2, i2: string2, o: string2, fwd: concatString }),
  $Tuple(
    matrixLookup._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(matrixLookup._1, matrixLookup._2), Nil)))
  ),
  $Tuple(
    dict_difference._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(dict_difference._1, dict_difference._2), Nil)))
  ),
  $Tuple(
    dict_disjointUnion._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(dict_disjointUnion._1, dict_disjointUnion._2), Nil)))
  ),
  $Tuple(
    foldl_with_index._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(foldl_with_index._1, foldl_with_index._2), Nil)))
  ),
  $Tuple($$get3._1, $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple($$get3._1, $$get3._2), Nil)))),
  $Tuple(insert4._1, $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(insert4._1, insert4._2), Nil)))),
  $Tuple(
    dict_intersectionWith._1,
    $Val(
      void 0,
      Nothing,
      $BaseVal("Fun", $Fun("Foreign", $Tuple(dict_intersectionWith._1, dict_intersectionWith._2), Nil))
    )
  ),
  $Tuple(
    dict_map._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(dict_map._1, dict_map._2), Nil)))
  ),
  $Tuple(dict2._1, $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(dict2._1, dict2._2), Nil)))),
  $Tuple(
    matrixUpdate._1,
    $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(matrixUpdate._1, matrixUpdate._2), Nil)))
  ),
  $Tuple(search2._1, $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(search2._1, search2._2), Nil)))),
  $Tuple(split3._1, $Val(void 0, Nothing, $BaseVal("Fun", $Fun("Foreign", $Tuple(split3._1, split3._2), Nil)))),
  binaryZero22("div")({ i: $$int, o: $$int, fwd: intDiv2 }),
  binaryZero22("mod")({ i: $$int, o: $$int, fwd: intMod }),
  binaryZero22("quot")({ i: $$int, o: $$int, fwd: quot }),
  binaryZero22("rem")({ i: $$int, o: $$int, fwd: rem })
]))();

// output-es/App.Fig/index.js
var fromFoldable20 = /* @__PURE__ */ fromFoldable(foldableSet);
var ordVal2 = /* @__PURE__ */ ordVal(ordVertex);
var mapMaybe3 = /* @__PURE__ */ mapMaybe2(/* @__PURE__ */ (() => {
  const $0 = ordVal2.Eq0();
  const eqTuple2 = { eq: (x2) => (y2) => x2._1 === y2._1 && $0.eq(x2._2)(y2._2) };
  return {
    compare: (x2) => (y2) => {
      const v = ordString.compare(x2._1)(y2._1);
      if (v === "LT") {
        return LT;
      }
      if (v === "GT") {
        return GT;
      }
      return ordVal2.compare(x2._2)(y2._2);
    },
    Eq0: () => eqTuple2
  };
})());
var botOf2 = {
  botOf: (m) => {
    if (m.tag === "Inert") {
      return Inert;
    }
    if (m.tag === "Reactive") {
      return $SelState("Reactive", { persistent: false, transient: false });
    }
    fail();
  }
};
var select\u{1D539}s = /* @__PURE__ */ (() => select\u03B1s\u{1D539}Vertex(applyVal)(foldableVal)["select\u{1D539}s"])();
var fromFoldable111 = /* @__PURE__ */ fromFoldable(foldableDict);
var fromFoldable25 = /* @__PURE__ */ foldlArray((m) => (a) => insert3(ordString)(a)()(m))(Leaf);
var graphGC2 = /* @__PURE__ */ graphGC(graphGraphImpl);
var graphGC1 = /* @__PURE__ */ graphGC2(applyVal)(applyEnvExpr)(foldableVal)(foldableEnvExpr);
var graphGC22 = /* @__PURE__ */ graphGC2(applyEnvExpr)(applyVal)(foldableEnvExpr)(foldableVal);
var deMorgan = (x2) => (x$1) => functorEnvExpr.map(boolNot)(x2(_fmapObject(x$1, functorVal.map(boolNot))));
var setSet5 = /* @__PURE__ */ setSet(ordDVertex$p);
var select\u03B1s\u{1D539}Vertex2 = /* @__PURE__ */ select\u03B1s\u{1D539}Vertex(applyEnv)(foldableEnv);
var bwdSlice3 = /* @__PURE__ */ bwdSlice(graphGraphImpl);
var member5 = /* @__PURE__ */ (() => setSet(ordVertex).member)();
var runQuery2 = /* @__PURE__ */ runQuery(ordVal2);
var primary = (x2) => _fmapObject(
  x2,
  functorVal.map((v) => {
    if (v.tag === "Inert") {
      return Inert;
    }
    if (v.tag === "Reactive") {
      return $SelState("Reactive", v._1 ? Primary : None2);
    }
    fail();
  })
);
var primary1 = (x2) => functorVal.map((v) => {
  if (v.tag === "Inert") {
    return Inert;
  }
  if (v.tag === "Reactive") {
    return $SelState("Reactive", v._1 ? Primary : None2);
  }
  fail();
})(x2);
var primaryOrSecondary2 = /* @__PURE__ */ primaryOrSecondary(applyEnv);
var primaryOrSecondary1 = /* @__PURE__ */ primaryOrSecondary(applyVal);
var difference1 = /* @__PURE__ */ (() => setSet(ordString).difference)();
var sequence_5 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableDict)(identity6);
var for_3 = /* @__PURE__ */ for_(applicativeEffect)(foldableSet);
var \u03B9from\u03B1s = (dictGraph) => (g) => {
  const $0 = mapMaybe3((\u03B1) => {
    const $02 = asVal(dictGraph.vertexData(g)(\u03B1));
    if ($02.tag === "Just") {
      return $Maybe("Just", $Tuple(\u03B1, $02._1));
    }
    return Nothing;
  });
  return (x2) => fromFoldable20($0(x2));
};
var unprojExpr = (dictBoundedMeetSemilattice) => (v) => {
  const $0 = v._2;
  return {
    fwd: (\u03B3) => $EnvExpr(
      \u03B3,
      functorExpr.map((() => {
        const $1 = dictBoundedMeetSemilattice.top;
        return (v$1) => $1;
      })())($0)
    ),
    bwd: (v1) => v1._1
  };
};
var selectOutput = (\u03B4v) => (v) => {
  const v2 = \u03B4v(v.v);
  if (v2._2 === "Persistent") {
    if (v.dir.persistent === "LinkedInputs" || v.dir.persistent !== "LinkedOutputs") {
      return {
        spec: v.spec,
        s: v.s,
        "\u03B3": _fmapObject(v["\u03B3"], functorVal.map(botOf2.botOf)),
        v: v2._1,
        "\u03B9": v["\u03B9"],
        dir: { persistent: LinkedOutputs, transient: v.dir.transient },
        linkedInputs: v.linkedInputs,
        linkedOutputs: v.linkedOutputs,
        linkIntermediates: v.linkIntermediates,
        in_views: v.in_views,
        in_roots: v.in_roots,
        out_view: v.out_view,
        intermediate_views: v.intermediate_views,
        inerts: v.inerts
      };
    }
    return {
      spec: v.spec,
      s: v.s,
      "\u03B3": v["\u03B3"],
      v: v2._1,
      "\u03B9": v["\u03B9"],
      dir: v.dir,
      linkedInputs: v.linkedInputs,
      linkedOutputs: v.linkedOutputs,
      linkIntermediates: v.linkIntermediates,
      in_views: v.in_views,
      in_roots: v.in_roots,
      out_view: v.out_view,
      intermediate_views: v.intermediate_views,
      inerts: v.inerts
    };
  }
  if (v2._2 === "Transient" && (v.dir.transient === "LinkedInputs" || v.dir.transient !== "LinkedOutputs")) {
    return {
      spec: v.spec,
      s: v.s,
      "\u03B3": v["\u03B3"],
      v: v2._1,
      "\u03B9": v["\u03B9"],
      dir: { transient: LinkedOutputs, persistent: v.dir.persistent },
      linkedInputs: v.linkedInputs,
      linkedOutputs: v.linkedOutputs,
      linkIntermediates: v.linkIntermediates,
      in_views: v.in_views,
      in_roots: v.in_roots,
      out_view: v.out_view,
      intermediate_views: v.intermediate_views,
      inerts: v.inerts
    };
  }
  return {
    spec: v.spec,
    s: v.s,
    "\u03B3": v["\u03B3"],
    v: v2._1,
    "\u03B9": v["\u03B9"],
    dir: v.dir,
    linkedInputs: v.linkedInputs,
    linkedOutputs: v.linkedOutputs,
    linkIntermediates: v.linkIntermediates,
    in_views: v.in_views,
    in_roots: v.in_roots,
    out_view: v.out_view,
    intermediate_views: v.intermediate_views,
    inerts: v.inerts
  };
};
var selectIntermediate = (v) => (\u03B4v) => (v1) => {
  const v3 = envVal(v)(\u03B4v)(v1["\u03B9"]);
  if (v3._2 === "Transient") {
    if (v1.dir.transient === "LinkedInputs" || v1.dir.transient === "LinkedOutputs" || v1.dir.transient !== "Intermediates") {
      return {
        spec: v1.spec,
        s: v1.s,
        "\u03B3": v1["\u03B3"],
        v: v1.v,
        "\u03B9": v3._1,
        dir: { transient: Intermediates, persistent: v1.dir.persistent },
        linkedInputs: v1.linkedInputs,
        linkedOutputs: v1.linkedOutputs,
        linkIntermediates: v1.linkIntermediates,
        in_views: v1.in_views,
        in_roots: v1.in_roots,
        out_view: v1.out_view,
        intermediate_views: v1.intermediate_views,
        inerts: v1.inerts
      };
    }
    return {
      spec: v1.spec,
      s: v1.s,
      "\u03B3": v1["\u03B3"],
      v: v1.v,
      "\u03B9": v3._1,
      dir: v1.dir,
      linkedInputs: v1.linkedInputs,
      linkedOutputs: v1.linkedOutputs,
      linkIntermediates: v1.linkIntermediates,
      in_views: v1.in_views,
      in_roots: v1.in_roots,
      out_view: v1.out_view,
      intermediate_views: v1.intermediate_views,
      inerts: v1.inerts
    };
  }
  return {
    spec: v1.spec,
    s: v1.s,
    "\u03B3": v1["\u03B3"],
    v: v1.v,
    "\u03B9": v1["\u03B9"],
    dir: v1.dir,
    linkedInputs: v1.linkedInputs,
    linkedOutputs: v1.linkedOutputs,
    linkIntermediates: v1.linkIntermediates,
    in_views: v1.in_views,
    in_roots: v1.in_roots,
    out_view: v1.out_view,
    intermediate_views: v1.intermediate_views,
    inerts: v1.inerts
  };
};
var selectInput = (x2) => (\u03B4v) => (v) => {
  const v2 = envVal(x2)(\u03B4v)(v["\u03B3"]);
  if (v2._2 === "Persistent") {
    if (v.dir.persistent !== "LinkedInputs") {
      return {
        spec: v.spec,
        s: v.s,
        "\u03B3": v2._1,
        v: functorVal.map(botOf2.botOf)(v.v),
        "\u03B9": v["\u03B9"],
        dir: { persistent: LinkedInputs, transient: v.dir.transient },
        linkedInputs: v.linkedInputs,
        linkedOutputs: v.linkedOutputs,
        linkIntermediates: v.linkIntermediates,
        in_views: v.in_views,
        in_roots: v.in_roots,
        out_view: v.out_view,
        intermediate_views: v.intermediate_views,
        inerts: v.inerts
      };
    }
    return {
      spec: v.spec,
      s: v.s,
      "\u03B3": v2._1,
      v: v.v,
      "\u03B9": v["\u03B9"],
      dir: v.dir,
      linkedInputs: v.linkedInputs,
      linkedOutputs: v.linkedOutputs,
      linkIntermediates: v.linkIntermediates,
      in_views: v.in_views,
      in_roots: v.in_roots,
      out_view: v.out_view,
      intermediate_views: v.intermediate_views,
      inerts: v.inerts
    };
  }
  if (v2._2 === "Transient" && v.dir.transient !== "LinkedInputs") {
    return {
      spec: v.spec,
      s: v.s,
      "\u03B3": v2._1,
      v: v.v,
      "\u03B9": v["\u03B9"],
      dir: { transient: LinkedInputs, persistent: v.dir.persistent },
      linkedInputs: v.linkedInputs,
      linkedOutputs: v.linkedOutputs,
      linkIntermediates: v.linkIntermediates,
      in_views: v.in_views,
      in_roots: v.in_roots,
      out_view: v.out_view,
      intermediate_views: v.intermediate_views,
      inerts: v.inerts
    };
  }
  return {
    spec: v.spec,
    s: v.s,
    "\u03B3": v2._1,
    v: v.v,
    "\u03B9": v["\u03B9"],
    dir: v.dir,
    linkedInputs: v.linkedInputs,
    linkedOutputs: v.linkedOutputs,
    linkIntermediates: v.linkIntermediates,
    in_views: v.in_views,
    in_roots: v.in_roots,
    out_view: v.out_view,
    intermediate_views: v.intermediate_views,
    inerts: v.inerts
  };
};
var rebuild\u03B9 = (inerts) => (\u03B1s) => (\u03B9) => fromFoldable111(intersectionWith_Object(apply)(_fmapObject(
  _fmapObject(\u03B9, (v) => select\u{1D539}s(v)(inerts)),
  (inert) => (v) => $Tuple(v._1, applyVal.apply(applyVal.apply(functorVal.map(selStates)(inert))(v._2.persistent))(v._2.transient))
))(_fmapObject(\u03B9, (v) => $Tuple(v._1, { persistent: select\u{1D539}s(v)(\u03B1s.persistent), transient: select\u{1D539}s(v)(\u03B1s.transient) }))));
var loadCode = (s) => (ed) => {
  const $0 = dispatch2(ed);
  const $1 = update(ed.state)([{ changes: { from: 0, to: getContentsLength(ed), insert: s } }]);
  return () => {
    const $2 = $1();
    return $0($2)();
  };
};
var lift3 = (dictApply) => (dictApply1) => {
  const $0 = dictApply1.Functor0();
  return (selState_f) => (f) => (v) => {
    const $1 = f($0.map(to\u{1D539})(v));
    return $Tuple(dictApply.apply(selState_f)($1._1), $1._2);
  };
};
var lift1 = /* @__PURE__ */ lift3(applyEnv)(applyVal);
var lift22 = /* @__PURE__ */ lift3(applyVal)(applyEnv);
var loadFig = (dictMonadAff) => {
  const Monad0 = dictMonadAff.MonadEffect0().Monad0();
  const $0 = Monad0.Bind1();
  const prepConfig2 = prepConfig(dictMonadAff);
  const graphEval2 = graphEval(dictMonadAff);
  return (dictMonadError) => {
    const prepConfig1 = prepConfig2(dictMonadError);
    return (dictMonadReader) => {
      const prepConfig22 = prepConfig1(dictMonadReader);
      const graphEval1 = graphEval2(dictMonadReader);
      return (dictLoadFile) => {
        const prepConfig3 = prepConfig22(dictLoadFile);
        const graphEval22 = graphEval1(dictLoadFile)(dictMonadError);
        return (v) => (fluidSrc) => {
          const $1 = v.inputs;
          const $2 = v.linking;
          return $0.bind(prepConfig3(primitives)(fluidSrc))((v1) => {
            const $3 = v1.s;
            return $0.bind(graphEval22(v1.gconfig)(v1.e))((v2) => {
              const $4 = v2.g;
              const $5 = v2["out\u03B1"];
              const $6 = v2["in\u03B1"]._1;
              const opEval = {
                g: $GraphImpl({ out: v2.g._1.in_, in_: v2.g._1.out, sinks: v2.g._1.sources, sources: v2.g._1.sinks, vertices: v2.g._1.vertices }),
                graph_fwd: v2.graph_fwd,
                graph_bwd: v2.graph_bwd,
                "in\u03B1": v2["out\u03B1"],
                "out\u03B1": v2["in\u03B1"]
              };
              const inputs$p = fromFoldable25($1);
              const v3 = functorEnvExpr.map((v$1) => {
              })(v2["in\u03B1"]);
              const $7 = unrestrictGC(boundedMeetSemilatticeBoo)(v3._1)(inputs$p);
              const $8 = unprojExpr(boundedMeetSemilatticeBoo)($EnvExpr(v3._1, v3._2));
              const $9 = filterWithKey((x2) => {
                const $92 = setSet(ordString).member(x2)(inputs$p);
                return (v$1) => $92;
              })($6);
              const $10 = _fmapObject($6, functorVal.map((v$1) => false));
              const $11 = functorVal.map((v$1) => false)($5);
              const graphgc_op = graphGC1(opEval);
              const graphgc = graphGC22(v2);
              const inertFwd = verticesGraphImpl.vertices(graphgc.fwd($8.fwd($7.fwd($10)))._2);
              const inertBwd = setSet5.difference(verticesGraphImpl.vertices($4))(verticesGraphImpl.vertices(graphgc.bwd(functorVal.map((v$1) => true)($5))._2));
              const $12 = select\u03B1s\u{1D539}Vertex2["select\u{1D539}s"]($6)(inertBwd);
              const $13 = select\u{1D539}s($5)(inertFwd);
              const $14 = _fmapObject($12, functorVal.map(selState));
              const $15 = functorVal.map(selState)($13);
              const demands = lift1($14)((v6) => {
                const $16 = graphgc.bwd(v6);
                return $Tuple($7.bwd($8.bwd($16._1)), $16._2);
              });
              const demandedBy = lift22($15)((\u03B31) => graphgc_op.bwd(deMorgan((x2) => $8.fwd($7.fwd(x2)))(\u03B31)));
              return Monad0.Applicative0().pure({
                spec: v,
                s: $3,
                "\u03B3": intersectionWith_Object(apply)(_fmapObject(
                  intersectionWith_Object(apply)(_fmapObject(
                    _fmapObject($12, functorVal.map(selStates)),
                    applyVal.apply
                  ))($10),
                  applyVal.apply
                ))($10),
                v: applyVal.apply(applyVal.apply(functorVal.map(selStates)($13))($11))($11),
                "\u03B9": empty2,
                linkedOutputs: (selType) => (v6) => {
                  const v$p = functorVal.map((s) => {
                    const $16 = (() => {
                      if (selType === "Persistent") {
                        return (v$1) => v$1.persistent;
                      }
                      if (selType === "Transient") {
                        return (v$1) => v$1.transient;
                      }
                      fail();
                    })();
                    if (s.tag === "Inert") {
                      return Inert;
                    }
                    if (s.tag === "Reactive") {
                      return $SelState("Reactive", $16(s._1));
                    }
                    fail();
                  })(v6);
                  const v7 = demands(v$p);
                  return $Tuple(v7._1, $Tuple($2 ? demandedBy(v7._1)._1 : v$p, verticesGraphImpl.vertices(v7._2)));
                },
                linkedInputs: (selType) => (\u03B31) => {
                  const \u03B3$p = _fmapObject(
                    \u03B31,
                    functorVal.map((s) => {
                      const $16 = (() => {
                        if (selType === "Persistent") {
                          return (v$1) => v$1.persistent;
                        }
                        if (selType === "Transient") {
                          return (v$1) => v$1.transient;
                        }
                        fail();
                      })();
                      if (s.tag === "Inert") {
                        return Inert;
                      }
                      if (s.tag === "Reactive") {
                        return $SelState("Reactive", $16(s._1));
                      }
                      fail();
                    })
                  );
                  const v6 = demandedBy(\u03B3$p);
                  return $Tuple($2 ? demands(v6._1)._1 : \u03B3$p, $Tuple(v6._1, verticesGraphImpl.vertices(v6._2)));
                },
                linkIntermediates: (\u03B9) => {
                  const \u03B1s = select\u03B1s\u{1D539}Vertex2["select\u03B1s"](_fmapObject(
                    \u03B9,
                    functorVal.map((x2) => {
                      if (x2.tag === "Inert") {
                        return false;
                      }
                      if (x2.tag === "Reactive") {
                        return x2._1.transient;
                      }
                      fail();
                    })
                  ))(\u03B9from\u03B1s(graphGraphImpl)($4)(mapObjectString.keys(\u03B9)));
                  return $Tuple(
                    intersectionWith_Object(apply)(_fmapObject($14, applyVal.apply))(select\u03B1s\u{1D539}Vertex2["select\u{1D539}s"]($6)(verticesGraphImpl.vertices(bwdSlice3($Tuple(
                      \u03B1s,
                      v2.g
                    ))))),
                    $Tuple(
                      applyVal.apply($15)(select\u{1D539}s($5)(verticesGraphImpl.vertices(bwdSlice3($Tuple(\u03B1s, opEval.g))))),
                      map2(ordDVertex$p)((\u03B1) => $Tuple(
                        \u03B1,
                        definitely("in graph")(_lookup(Nothing, Just, \u03B1, $4._1.out))._2
                      ))(\u03B1s)
                    )
                  );
                },
                dir: { persistent: LinkedOutputs, transient: LinkedOutputs },
                in_views: _fmapObject($9, (v$1) => Nothing),
                out_view: Nothing,
                intermediate_views: empty2,
                in_roots: fold((z) => (v$1) => (a) => insert3(ordVertex)(a)()(z))(Leaf)(_fmapObject(
                  $9,
                  (v6) => v6._1
                )),
                inerts: unsafeIntersectionWith(ordDVertex$p.compare, $$const, inertFwd, inertBwd)
              });
            });
          });
        };
      };
    };
  };
};
var intermediates = (v) => (\u03B1s) => {
  if (v.spec.query.tag === "Nothing") {
    return empty2;
  }
  if (v.spec.query.tag === "Just") {
    return rebuild\u03B9(v.inerts)(\u03B1s)(filterWithKey((x2) => {
      const $0 = !member5(x2)(v.in_roots);
      return (v$1) => $0;
    })(runQuery2(v.spec.query._1)(setSet5.union(\u03B1s.persistent)(\u03B1s.transient))));
  }
  fail();
};
var selectionResult = (v) => {
  const v2 = (() => {
    if (v.dir.persistent === "LinkedOutputs") {
      const $0 = v.linkedOutputs(Persistent)(v.v);
      return $Tuple(primary($0._1), $Tuple(primaryOrSecondary1(Persistent)(v.v)($0._2._1), $0._2._2));
    }
    if (v.dir.persistent === "LinkedInputs") {
      const $0 = v.linkedInputs(Persistent)(v["\u03B3"]);
      return $Tuple(primaryOrSecondary2(Persistent)(v["\u03B3"])($0._1), $Tuple(primary1($0._2._1), $0._2._2));
    }
    if (v.dir.persistent === "Intermediates") {
      return throwException(error("absurd"))();
    }
    fail();
  })();
  const v3 = (() => {
    if (v.dir.transient === "LinkedOutputs") {
      const $0 = v.linkedOutputs(Transient)(v.v);
      return $Tuple(primary($0._1), $Tuple(primaryOrSecondary1(Transient)(v.v)($0._2._1), $0._2._2));
    }
    if (v.dir.transient === "LinkedInputs") {
      const $0 = v.linkedInputs(Transient)(v["\u03B3"]);
      return $Tuple(primaryOrSecondary2(Transient)(v["\u03B3"])($0._1), $Tuple(primary1($0._2._1), $0._2._2));
    }
    if (v.dir.transient === "Intermediates") {
      const $0 = v.linkIntermediates(v["\u03B9"]);
      return $Tuple(primary($0._1), $Tuple(primary1($0._2._1), $0._2._2));
    }
    fail();
  })();
  return {
    v: spyWhen(false)("Mediating outputs")((x2) => renderWithIndent(Stmt)(0)(0)(prettyVal(highlightableUnit).pretty(functorVal.map((v$1) => {
    })(x2)))._1)(applyVal.apply(functorVal.map((v4) => (v5) => {
      if (v4.tag === "Inert") {
        return Inert;
      }
      if (v5.tag === "Inert") {
        return Inert;
      }
      if (v4.tag === "Reactive" && v5.tag === "Reactive") {
        return $SelState("Reactive", { persistent: v4._1, transient: v5._1 });
      }
      fail();
    })(v2._2._1))(v3._2._1)),
    "\u03B3": spyWhen(false)("Mediating inputs")((x2) => renderWithIndent(Stmt)(0)(0)(prettyEnv(highlightableUnit).pretty(_fmapObject(
      x2,
      functorVal.map((v$1) => {
      })
    )))._1)(intersectionWith_Object(apply)(_fmapObject(
      _fmapObject(
        v2._1,
        functorVal.map((v4) => (v5) => {
          if (v4.tag === "Inert") {
            return Inert;
          }
          if (v5.tag === "Inert") {
            return Inert;
          }
          if (v4.tag === "Reactive" && v5.tag === "Reactive") {
            return $SelState("Reactive", { persistent: v4._1, transient: v5._1 });
          }
          fail();
        })
      ),
      applyVal.apply
    ))(v3._1)),
    "\u03B9": intermediates(v)({ persistent: v2._2._2, transient: v3._2._2 })
  };
};
var drawFig = (divId) => (v) => {
  const $0 = v.spec;
  const v1 = selectionResult(v);
  const $1 = v1["\u03B9"];
  const unused = difference1(mapObjectString.keys(v["\u03B9"]))(mapObjectString.keys($1));
  const $2 = drawFig(divId);
  const redraw = (x2) => $2(x2({
    "\u03B9": $1,
    dir: v.dir,
    in_roots: v.in_roots,
    in_views: v.in_views,
    inerts: v.inerts,
    intermediate_views: v.intermediate_views,
    linkIntermediates: v.linkIntermediates,
    linkedInputs: v.linkedInputs,
    linkedOutputs: v.linkedOutputs,
    out_view: v.out_view,
    s: v.s,
    spec: v.spec,
    v: v.v,
    "\u03B3": v["\u03B3"]
  }));
  const prefix = divId + "-intermediate";
  const in_views = _mapWithKey(v1["\u03B3"], view$p()($0));
  const $3 = drawView({ divId, suffix: "output", view: view$p()($0)("output")(v1.v) })((x2) => redraw(selectOutput(x2)));
  return () => {
    $3();
    sequence_5(_mapWithKey(in_views, (x2) => (view2) => drawView({ divId: divId + "-input", suffix: x2, view: view2 })((x$1) => redraw(selectInput(x2)(x$1)))))();
    for_3(unused)((\u03B1) => {
      const $4 = rootSelect("#" + prefix + "-" + \u03B1);
      return () => {
        const $5 = $4();
        return remove3($5)();
      };
    })();
    return sequence_5(_mapWithKey(
      $1,
      (\u03B1) => (v3) => drawView({
        divId: prefix,
        suffix: \u03B1,
        view: view$p()($0)("intermediate")(functorVal.map((m) => {
          if (m.tag === "Inert") {
            return Inert;
          }
          if (m.tag === "Reactive") {
            return $SelState(
              "Reactive",
              { persistent: m._1.persistent ? Primary : None2, transient: m._1.transient ? Primary : None2 }
            );
          }
          fail();
        })(v3))
      })((x2) => redraw(selectIntermediate(\u03B1)(x2)))
    ))();
  };
};
var drawFile = (v) => {
  const $0 = addEditorView("codemirror-" + v._1);
  return () => {
    const $1 = $0();
    return loadCode(v._2)($1)();
  };
};

// output-es/Data.Argonaut.Decode.Decoders/index.js
var traverseWithIndex = /* @__PURE__ */ (() => traversableWithIndexArray.traverseWithIndex(applicativeEither))();
var decodeMaybe = (decoder) => (json) => {
  if (_caseJson((v) => true, (v) => false, (v) => false, (v) => false, (v) => false, (v) => false, json)) {
    return $Either("Right", Nothing);
  }
  const $0 = decoder(json);
  if ($0.tag === "Left") {
    return $Either("Left", $0._1);
  }
  if ($0.tag === "Right") {
    return $Either("Right", $Maybe("Just", $0._1));
  }
  fail();
};
var decodeJArray = (x2) => {
  const $0 = _caseJson(
    (v) => Nothing,
    (v) => Nothing,
    (v) => Nothing,
    (v) => Nothing,
    Just,
    (v) => Nothing,
    x2
  );
  if ($0.tag === "Nothing") {
    return $Either("Left", $JsonDecodeError("TypeMismatch", "Array"));
  }
  if ($0.tag === "Just") {
    return $Either("Right", $0._1);
  }
  fail();
};
var decodeArray2 = (decoder) => {
  const $0 = Named("Array");
  const $1 = traverseWithIndex((i) => {
    const $12 = AtIndex(i);
    return (x2) => {
      const $2 = decoder(x2);
      if ($2.tag === "Left") {
        return $Either("Left", $12($2._1));
      }
      if ($2.tag === "Right") {
        return $Either("Right", $2._1);
      }
      fail();
    };
  });
  return (a) => {
    const $2 = decodeJArray(a);
    if ($2.tag === "Left") {
      return $Either("Left", $2._1);
    }
    if ($2.tag === "Right") {
      const $3 = $1($2._1);
      if ($3.tag === "Left") {
        return $Either("Left", $0($3._1));
      }
      if ($3.tag === "Right") {
        return $Either("Right", $3._1);
      }
    }
    fail();
  };
};

// output-es/Data.Argonaut.Decode.Class/index.js
var gDecodeJsonNil = { gDecodeJson: (v) => (v1) => $Either("Right", {}) };
var decodeRecord = (dictGDecodeJson) => () => ({
  decodeJson: (json) => {
    const v = _caseJson(
      (v2) => Nothing,
      (v2) => Nothing,
      (v2) => Nothing,
      (v2) => Nothing,
      (v2) => Nothing,
      Just,
      json
    );
    if (v.tag === "Just") {
      return dictGDecodeJson.gDecodeJson(v._1)($$Proxy);
    }
    if (v.tag === "Nothing") {
      return $Either("Left", $JsonDecodeError("TypeMismatch", "Object"));
    }
    fail();
  }
});
var gDecodeJsonCons = (dictDecodeJsonField) => (dictGDecodeJson) => (dictIsSymbol) => () => () => ({
  gDecodeJson: (object) => (v) => {
    const fieldName = dictIsSymbol.reflectSymbol($$Proxy);
    const v1 = dictDecodeJsonField.decodeJsonField(_lookup(Nothing, Just, fieldName, object));
    if (v1.tag === "Just") {
      const $0 = AtKey(fieldName);
      if (v1._1.tag === "Left") {
        return $Either("Left", $0(v1._1._1));
      }
      if (v1._1.tag === "Right") {
        const $1 = v1._1._1;
        const $2 = dictGDecodeJson.gDecodeJson(object)($$Proxy);
        return (() => {
          if ($2.tag === "Left") {
            const $3 = $2._1;
            return (v$1) => $Either("Left", $3);
          }
          if ($2.tag === "Right") {
            const $3 = $2._1;
            return (f) => f($3);
          }
          fail();
        })()((rest) => $Either("Right", unsafeSet(dictIsSymbol.reflectSymbol($$Proxy))($1)(rest)));
      }
      fail();
    }
    if (v1.tag === "Nothing") {
      return $Either("Left", $JsonDecodeError("AtKey", fieldName, MissingValue));
    }
    fail();
  }
});
var decodeFieldMaybe = (dictDecodeJson) => ({
  decodeJsonField: (v) => {
    if (v.tag === "Nothing") {
      return $Maybe("Just", $Either("Right", Nothing));
    }
    if (v.tag === "Just") {
      return $Maybe("Just", decodeMaybe(dictDecodeJson.decodeJson)(v._1));
    }
    fail();
  }
});

// output-es/App.LoadFigure/index.js
var gDecodeJsonCons2 = /* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ (() => {
  const $0 = decodeArray2(caseJsonString($Either(
    "Left",
    $JsonDecodeError("TypeMismatch", "String")
  ))(Right));
  return {
    decodeJsonField: (j) => {
      if (j.tag === "Just") {
        return $Maybe("Just", $0(j._1));
      }
      return Nothing;
    }
  };
})());
var gDecodeJsonCons1 = /* @__PURE__ */ gDecodeJsonCons({
  decodeJsonField: (j) => {
    if (j.tag === "Just") {
      return $Maybe(
        "Just",
        _caseJson(
          (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "Boolean")),
          Right,
          (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "Boolean")),
          (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "Boolean")),
          (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "Boolean")),
          (v) => $Either("Left", $JsonDecodeError("TypeMismatch", "Boolean")),
          j._1
        )
      );
    }
    return Nothing;
  }
});
var decodeJson = /* @__PURE__ */ (() => decodeRecord(gDecodeJsonCons2(gDecodeJsonCons2(gDecodeJsonCons1(gDecodeJsonCons1(gDecodeJsonCons(decodeFieldMaybe(decodeJsonFilter))(gDecodeJsonNil)({
  reflectSymbol: () => "rowFilter"
})()())({ reflectSymbol: () => "query" })()())({ reflectSymbol: () => "linking" })()())({ reflectSymbol: () => "inputs" })()())({ reflectSymbol: () => "fluidSrcPath" })()())().decodeJson)();
var loadFig2 = /* @__PURE__ */ loadFig(/* @__PURE__ */ monadAffReader(monadAffAff))(/* @__PURE__ */ monadErrorReaderT(monadErrorAff))(/* @__PURE__ */ monadReaderReaderT(monadAff))({
  loadFileFromPath: (dictMonadError1) => (dictMonadAff1) => (x2) => {
    const $0 = loadFileAff.loadFileFromPath(monadErrorAff)(monadAffAff)(x2);
    return (v) => $0;
  }
});
var optionsFromJson = (v) => ({
  fluidSrcPaths: arrayMap(Folder)(v.fluidSrcPath),
  inputs: v.inputs,
  query: v.query ? $Maybe(
    "Just",
    (a) => {
      const $0 = asVal(a);
      if ($0.tag === "Just") {
        if ($0._1._2.tag === "Just") {
          return $Maybe("Just", $Tuple($0._1._1, $0._1));
        }
        return Nothing;
      }
      if ($0.tag === "Nothing") {
        return Nothing;
      }
      fail();
    }
  ) : Nothing,
  linking: v.linking,
  rowFilter: v.rowFilter
});
var loadFigureSrc = (options) => (divId) => (fluidSrc) => runAffs_((v) => drawFig(v._1)(v._2))([
  (() => {
    const v = decodeJson(options);
    if (v.tag === "Left") {
      return throwException(error("JSON decoding failed with " + showJsonDecodeError.show(v._1)))();
    }
    if (v.tag === "Right") {
      const v1 = optionsFromJson(v._1);
      return _map((v2) => $Tuple(divId, v2))(loadFig2(v1)(fluidSrc)({ fluidSrcPaths: v1.fluidSrcPaths }));
    }
    fail();
  })()
]);
var loadFigure = (jsonSpec) => (divId) => (srcFile) => {
  const $0 = _makeFiber(
    ffiUtil,
    _bind(loadFileAff.loadFileFromPath(monadErrorAff)(monadAffAff)(srcFile))((fluidSrc) => _liftEffect(loadFigureSrc(jsonSpec)(divId)(definitely("absurd")(fluidSrc))))
  );
  return () => {
    const fiber = $0();
    fiber.run();
  };
};
var loadCode2 = (file) => {
  const filename = definitely("loadCode: Filename cannot be empty: " + file)((() => {
    const $02 = split("/")(file);
    const $1 = $02.length - 1 | 0;
    if ($1 >= 0 && $1 < $02.length) {
      const $2 = split(".")($02[$1]);
      if (0 < $2.length) {
        if ($2[0] === "") {
          return Nothing;
        }
        return $Maybe("Just", $2[0]);
      }
    }
    return Nothing;
  })());
  const $0 = _makeFiber(
    ffiUtil,
    _bind(loadFileAff.loadFileFromPath(monadErrorAff)(monadAffAff)(file))((fluidSrc) => _liftEffect(drawFile($Tuple(
      filename,
      definitely("loadCode: File not found: " + file)(fluidSrc)
    ))))
  );
  return () => {
    const fiber = $0();
    fiber.run();
  };
};
export {
  decodeJson,
  gDecodeJsonCons2 as gDecodeJsonCons,
  gDecodeJsonCons1,
  loadCode2 as loadCode,
  loadFig2 as loadFig,
  loadFigure,
  loadFigureSrc,
  optionsFromJson
};
